[
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what is the biggest city in wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what wyoming city has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what is the largest city in wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "where is the most populated area of wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "which city in wyoming has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what cities in wyoming have the highest number of citizens",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what cities in wyoming have the highest populations",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what is the most populous city in wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what is the largest city in wyoming by population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what is the largest city of wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "question": "what is the city in wyoming with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) );",
        "question": "which rivers run through the state with the largest city in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "question": "how big is new mexico",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "question": "what is the area of new mexico",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "question": "how large is new mexico",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "question": "what is the area of the new mexico state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "question": "what is the size of new mexico",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "question": "what is the area of new mexico in square kilometers",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many people live in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many people reside in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many residents live in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how much population does california have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "what are the population of california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "what is the population of california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many people are in the state of california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "what can you tell me about the population of california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many people are there in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many citizens in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many people stay in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "question": "how many citizens live in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "question": "what state has the smallest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "question": "what is the least populous state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lake_name FROM lake WHERE state_name  =  \"california\";",
        "question": "give me the lakes in california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\";",
        "question": "name the major lakes in michigan",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state;",
        "question": "what are the states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state;",
        "question": "list the states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state;",
        "question": "give me all the states of usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "which states do ohio river flow through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what states does the ohio river run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what states border the ohio river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "which states border the ohio river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what states does the ohio run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "where is the ohio river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "which states does the ohio river run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "which states does the ohio run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "which states does the ohio river pass through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what are the states that the ohio run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "which state has the ohio river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what states have rivers named ohio",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "through which states does the ohio flow",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what states are next to the ohio",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "through which states does the ohio run",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "question": "what states does the ohio river go through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what state has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what is the most populous state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what state is the largest in population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "which state has the biggest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "which state has the greatest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "which state has the most population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what state has the most people",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "which state has the most people",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what is the most populous state in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what state has the highest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\";",
        "question": "what is the lowest elevation in pennsylvania",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;",
        "question": "what is the highest point in each state whose lowest point is sea level",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what is the length of the longest river in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "how long is the longest river in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the longest river flowing through texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the largest river in texas state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the longest river in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the biggest river in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the longest river that flows through texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what are the biggest rivers in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "how many rivers are in idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "give me the number of rivers in idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "how many rivers does idaho have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "how many rivers are there in idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "how many rivers run through idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "how many rivers are found in idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "question": "how many rivers in idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what states neighbor kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "which states border kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what states border kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "give me the states that border kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what state borders kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what states are next to kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what states surround kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "which state borders kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what are the neighboring states for kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "which states adjoin kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "states bordering kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "which state border kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what is the adjacent state of kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "name all the rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what are all the rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what are the rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what rivers are in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what rivers are there in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what rivers run through illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what rivers flow through illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what river flows through illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what are the rivers in the state of illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "name the rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what are the rivers of illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "which rivers are in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "which rivers flow through illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what is the river that cross over illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "question": "what river runs through illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what state is springfield in",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "where is springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "springfield is in what state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what states have cities named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "which states have cities named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "which state is springfield in",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what states have a city named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what state has the city springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what states have towns named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what state is springfield located in",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "in which state is springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "which state is the city springfield located in",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "question": "what states in the united states have a city of springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the population of the state with the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the population of the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "how many people live in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "what is the population of boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "how many people lived in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "number of people in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "what is the population of boulder city",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "how big is the city of boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "population of boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "what is the population in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "people in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "how many people in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "how many inhabitants does boulder have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "number of citizens in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "question": "how many citizens in boulder",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "question": "what is the smallest city in alaska",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "which states lie on the largest river in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "which states does the longest river run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "which state has the longest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what are the states through which the longest river runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "which states does the longest river cross",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the population density of the state with the smallest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the population density of the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "question": "which states have points higher than the highest point in colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "question": "which states have points that are higher than the highest point in colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "question": "what states high point are higher than that of colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "question": "what is the highest elevation in delaware",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "question": "how high is the highest point of delaware",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "question": "how tall is the highest point in delaware",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "question": "what is the highest point in delaware in meters",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "question": "how high is the highest point in delaware",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "give me the longest river that passes through the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "which is the longest river in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what is the longest river in america",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "name the longest river in us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what river is the longest one in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what is the longest river in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what is the longest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "question": "what is the longest river in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what state has the city with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what state has the largest city",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "which state has the largest city",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what state has the city with the most population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what is the smallest city in the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what state is the biggest",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the state with the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what state has the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the biggest state in continental us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "state the state with the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the largest state in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the biggest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the biggest state in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "give me the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the largest state in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
        "question": "what are the highest points of states surrounding mississippi",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
        "question": "what are the high points of states surrounding mississippi",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "question": "what is the highest point in states bordering colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "question": "what is the highest point in the states bordering colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "what is the state with the lowest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "what state has the lowest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "which state has the lowest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "which state has the smallest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "what state has the sparsest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "which state has the sparsest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "what state has the least population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "which state has the least population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "what state has the smallest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "question": "where is the highest point in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "question": "what is the highest point in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "question": "what is the high point of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "question": "what is the highest mountain in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "question": "could you tell me what is the highest point in the state of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "question": "what states have no bordering state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "question": "name the states which have no surrounding states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "question": "which states border no other states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "question": "what is the area of the state with the smallest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );",
        "question": "count the states which have elevations lower than what alabama has",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "question": "how high is guadalupe peak",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "question": "how tall is guadalupe peak",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "question": "what is the maximum elevation of guadalupe peak",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "question": "how high is the highest point in america",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "question": "what is the highest elevation in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "question": "what is the elevation of the highest point in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "question": "what is the height of the highest point in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "question": "how long is the rio grande river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "question": "what is the length of the rio grande river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "question": "what length is the rio grande",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "question": "how long is the rio grande",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "question": "how long is the rio grande river in miles",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "question": "how long is rio grande",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "how long is the longest river in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the length of the longest river that runs through texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"rhode island\";",
        "question": "how many capitals does rhode island have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city;",
        "question": "how many cities are there in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city;",
        "question": "how many cities does the usa have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city;",
        "question": "how many cities are there in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city;",
        "question": "how many cities are there in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city;",
        "question": "how many cities are there in us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000;",
        "question": "how many major cities are there",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "how many citizens does the biggest city have in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
        "question": "how many colorado rivers are there",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
        "question": "how many rivers are called colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
        "question": "what is the population of seattle washington",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
        "question": "how many people live in seattle washington",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "question": "how many people live in the biggest city in alaska state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "question": "how large is the largest city in alaska",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
        "question": "how many people live in the capital of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
        "question": "what is the size of the capital of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( population ) FROM state;",
        "question": "how many people live in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( population ) FROM state;",
        "question": "what is the combined population of all 50 states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "question": "how many states are in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "question": "how many states are there",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "question": "how many states are there in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "question": "how many states does usa have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "question": "how many states are in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM state;",
        "question": "how many states are there in united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "how many states border kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "how many states does kentucky border",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "kentucky borders how many states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "number of states bordering kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "question": "what is the number of neighboring states for kentucky",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "question": "how many states border the state with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "question": "how many states do not have rivers",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );",
        "question": "how many states have a higher point than the highest point of the state with the largest capital city in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "question": "name the major rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "question": "what are the major rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "question": "what are major rivers in illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "question": "what major rivers run through illinois",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" );",
        "question": "through which states does the longest river in texas run",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "question": "what are the capital city in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "question": "what is the capital of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "question": "what is the capital of the texas state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "question": "what is capital of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "question": "what is the capital of the state texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "question": "can you tell me the capital of texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "question": "what are the capitals of states that border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "question": "what are the capital cities of the states which border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "question": "what are the capitals of the states that border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "question": "which capitals are in the states that border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the cities in states through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
        "question": "what are the cities of the state with the highest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow;",
        "question": "what are the highest points of all the states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "what are the major cities in kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "what are the major cities in the state of kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "what major cities are located in kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "show major cities in kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "what are the names of the major cities in kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "what are the major cities of kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "question": "what is the major cities in kansas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
        "question": "what are the major cities in states through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000;",
        "question": "what are the major cities in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000;",
        "question": "what are the major cities of the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000;",
        "question": "what are the major cities of the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state;",
        "question": "what are the population densities of each us state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of states through which the mississippi river run",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of states through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of the states through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of states through which the mississippi river runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of the states through which the mississippi run",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of the states through which the mississippi river run",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of states through which the mississippi run",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what are the populations of the states through which the mississippi river runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "question": "what are the populations of states which border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "question": "what are the populations of the major cities of wisconsin",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "question": "what are the populations of all the major cities in wisconsin",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "question": "what is the population of the major cities in wisconsin",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what city has the most people",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what city in the united states has the highest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what is the most populous city",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "which us city has the highest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what is the biggest city in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "whats the largest city",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what city has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what is the biggest city in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "question": "what is the biggest city in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what is the biggest capital city in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what is the largest capital city in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what is the largest state capital in population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what is the largest capital",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what is the most populated capital in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what capital is the largest in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what capital has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what is largest capital",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\";",
        "question": "what is the capital of states that have cities named durham",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the capital of the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what is the capital of the state with the largest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what is the capital of the state with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "question": "what is the capital of the state with the most inhabitants",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "question": "what is the capital of the state with the longest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( area ) FROM state;",
        "question": "what is the combined area of all 50 states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( area ) FROM state;",
        "question": "what is the area of all the states combined",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( area ) FROM state;",
        "question": "how many square kilometers in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( area ) FROM state;",
        "question": "what is the total area of the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "question": "what is the density of the wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "question": "what is the population density of wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "question": "what is the density of wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "question": "what is the highest mountain in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "question": "what is the highest mountain in us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "question": "what is the tallest mountain in america",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "question": "what is the tallest mountain in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
        "question": "what is the highest point in the state with capital des moines",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
        "question": "what is the highest point in the state with the capital des moines",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the highest point in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the highest point of the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the highest point in the country",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the highest point in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the highest point in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
        "question": "what is the highest point of the state with the smallest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
        "question": "what is the largest city in smallest state through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what is the largest city in the smallest state in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what is the biggest city in the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "question": "what is the largest state bordering california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "question": "what is the largest state that borders california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "question": "what state that borders california is the largest",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what is the longest river in the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "question": "what is the longest river in the states that border tennessee",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "question": "what is the longest river that flows through a state that borders tennessee",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "question": "what is the longest river that runs through a state that borders tennessee",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
        "question": "what is the longest river in the state with the most major cities",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "question": "what is the lowest point in iowa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "question": "what is the lowest point in iowa in meters",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "question": "what is the lowest point in the state of iowa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "question": "where is the lowest point in iowa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "question": "what is the lowest point of iowa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "question": "where is the lowest spot in iowa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "what is the lowest point in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "what is the lowest point in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "where is the lowest point in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "what is the lowest point of the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
        "question": "what is the lowest point of all states through which the mississippi river runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
        "question": "which is the lowest point of the states that the mississippi runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what is the most dense state in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "which state has the highest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "which state has the greatest density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what state has the highest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what state has the greatest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what state has the largest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what is the state with the largest density in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what is the state with the largest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "which state has the largest density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what is the most populous state through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what state which the mississippi runs through has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the population density of the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what is the population of the largest city in the state with the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the population of the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "what is the population of the state with the highest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "question": "how many people live in the state with the largest population density",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "question": "what is the smallest city in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "question": "what is the smallest city in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "question": "what city has the least population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "question": "what is the city with the smallest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "question": "what is the smallest state bordering texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "question": "what is the smallest state that borders texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "question": "which state has the smallest area that borders texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what is the smallest state that the mississippi river runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the state with the smallest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "which is the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "which state is the smallest",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the smallest state in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the smallest state by area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what state has the smallest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( LENGTH ) FROM river;",
        "question": "what is the total length of all rivers in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "what river flows through the most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "which river goes through the most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "which river runs through most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "which river traverses most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "what river traverses the most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "which river runs through the most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "question": "what river runs through the most states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "question": "what rivers are in states that border alabama",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "question": "which rivers run through states bordering alabama",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "question": "what rivers flow through states that alabama borders",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "question": "what state bordering oklahoma has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "question": "which of the states bordering oklahoma has the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "question": "what state that borders oklahoma has the highest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "question": "what is the most populated state bordering oklahoma",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"colorado\" ) );",
        "question": "what state contains the highest point of those the colorado river traverses",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "what state has the largest capital",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "which state 's capital city is the largest",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM river );",
        "question": "what state has the longest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;",
        "question": "what state has the smallest urban population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
        "question": "what states border states that border colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what states border states that the mississippi runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "which states border states through which the mississippi traverses",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "what states border states which the mississippi runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
        "question": "what states border texas and have a major river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "question": "what states border the most populous state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "question": "what are the states that border the state with the greatest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what states border the state with the smallest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "which states border the state with the smallest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  >  750;",
        "question": "what states contain at least one major rivers",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain;",
        "question": "where are mountains",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "question": "where is the highest mountain of the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "question": "which state has the highest peak in the country",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "question": "where is the smallest city",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "question": "which is the density of the state that the largest river in the united states runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );",
        "question": "which is the highest peak not in alaska",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
        "question": "which rivers do not run through tennessee",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
        "question": "what rivers do not run through tennessee",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE country_name != \"usa\";",
        "question": "which rivers do not run through usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
        "question": "which rivers run through states that border the state with the capital atlanta",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
        "question": "what rivers run through the states that border the state with the capital atlanta",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "question": "which state capital has the smallest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "which state has the highest elevation",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "which state has the highest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what state has the highest elevation",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "in which state does the highest point in usa exist",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what state has highest elevation",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the state with the highest elevation in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the state that contains the highest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what state contains the highest point in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "which state has the lowest elevation",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "what is the name of the state with the lowest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "question": "what is the state with the lowest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );",
        "question": "which state has the lowest point that borders idaho",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;",
        "question": "which state has the smallest average urban population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "question": "which state is mount whitney in",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "question": "in what state is mount whitney",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "question": "where is mount whitney",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "question": "where is mount whitney located",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river;",
        "question": "which states have a river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river;",
        "question": "what states have rivers running through them",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;",
        "question": "which states have a major city named austin",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "question": "what is the largest city in a state that borders california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "question": "what is the largest city in states that border california",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );",
        "question": "how many rivers do not traverse the state with the capital albany",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "question": "what is the shortest river in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what are the major cities in the smallest state in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"mississippi\" ) );",
        "question": "what is the population of the capital of the largest state through which the mississippi runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "what is the shortest river in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "what is the shortest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "what is the shortest river in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "what is the shortest river in the united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "which is the shortest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
        "question": "what is the capital of the state that borders the state that borders texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what is the smallest city of the smallest state in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "question": "what is the population of the largest state that borders texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "question": "what state is salem the capital of",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "question": "what states capital is salem",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "question": "salem is the capital of which state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "question": "what state has the capital salem",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "question": "what rivers flow through the state with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "question": "what is the largest state that borders the state with the highest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river;",
        "question": "how many rivers are there in us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT DISTINCT capital FROM state;",
        "question": "name the 50 capitals in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "question": "how many states have a city named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "question": "how many states have a city called springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "question": "how many states have cities named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "question": "how many states have cities or towns named springfield",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "question": "what state borders the state with the smallest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "question": "what are the lakes in states bordering texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "question": "how many major cities are in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "question": "how many big cities are in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "question": "how many major cities are there in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT highest_elevation FROM highlow;",
        "question": "how high are the highest points of all the states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "question": "how many states does the missouri run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "question": "how many states does the missouri river flow through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "question": "how many states does the missouri river run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what is the longest river in the smallest state in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\";",
        "question": "what is the average population per square km in pennsylvania",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );",
        "question": "what states border states that border states that border florida",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
        "question": "how many states border at least one other state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"texas\";",
        "question": "what is the height of the highest mountain in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
        "question": "how many states border colorado and border new mexico",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );",
        "question": "how many major cities are in states bordering nebraska",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "question": "what is the total population of the states that border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lake_name FROM lake WHERE area  >  750;",
        "question": "what are the major lakes in united states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lake_name FROM lake WHERE area  >  750;",
        "question": "show me all the major lakes in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lake_name FROM lake;",
        "question": "name all the lakes of us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"ohio\";",
        "question": "how many major rivers cross ohio",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "question": "what state has the shortest river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750;",
        "question": "how many states are next to major rivers",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";",
        "question": "what is the height of mount mckinley",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "what states does the shortest river run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "question": "what is the highest point in the state with the smallest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "question": "which rivers run through the state with the lowest elevation in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "question": "what rivers run through the state with the lowest point in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\";",
        "question": "what mountains are in alaska",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750;",
        "question": "how many states have major rivers",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "question": "what is the smallest state through which the longest river runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );",
        "question": "what is the largest state traversed by the rio grande river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );",
        "question": "what is the largest of the state that the rio grande runs through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
        "question": "how many rivers run through the states bordering colorado",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "question": "what state has no rivers",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the capital of the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "what is the capital city of the largest state in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "question": "how many cities are in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "question": "how many cities does texas have",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state;",
        "question": "what is the area of the states",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "question": "how many states in the us does the shortest river run through",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "question": "what rivers flow through states that border the state with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what are the major cities in the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the area of the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "question": "which states border the longest river in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "question": "what is the population density of the state with the smallest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "question": "how many states border the mississippi river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;",
        "question": "what states have a capital that is the highest point in the state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "question": "what is the population of the capital of the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what is the population of the capital of the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what is the lowest point of the state with the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "question": "what states border states that border the state with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( area ) FROM state;",
        "question": "what is the size of the largest state in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT MAX ( area ) FROM state;",
        "question": "what is the area of the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;",
        "question": "which capitals are not major cities",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city;",
        "question": "give me the cities in usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what is the highest point of the state with the largest area",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";",
        "question": "where is massachusetts",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
        "question": "what state has the largest urban population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river;",
        "question": "what are the major rivers in the us",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\";",
        "question": "how many cities named austin are there in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );",
        "question": "how many people live in the smallest state bordering wyoming",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";",
        "question": "what is the length of the colorado river in texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT density FROM state WHERE capital  =  \"austin\";",
        "question": "what is the population density in the state with capital austin",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "question": "how long is the shortest river in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";",
        "question": "what is the elevation of death valley",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT AVG ( population ) FROM state;",
        "question": "what is the average population of the us by state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "what rivers flow through the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";",
        "question": "what states border states that border states that border states that border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
        "question": "how many states border on the state whose capital is boston",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
        "question": "what are the major cities in the states through which the major river in virginia runs",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "question": "which states does not border texas",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "question": "how many states border the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\";",
        "question": "which state is the largest city in montana in",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
        "question": "what is capital of the state with the lowest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name );",
        "question": "what is the biggest american city in a state with a river",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "question": "how many rivers are in the state with the largest population",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
        "question": "what is the largest state that borders the state with the lowest point in the usa",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the capital of the state with the highest point",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "what is the capital of the state with the highest elevation",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );",
        "question": "what is the highest point in the smallest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "question": "how many rivers are in the state with the highest point.",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
        "question": "how high is the highest point in the largest state",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "query": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
        "question": "what is the longest river in the state with the highest point",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "papers that are coauthored by Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "papers written by Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "what are the papers that have Peter Mertens and Dina Barbian as co-authors",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "What papers have Peter Mertens and Dina Barbian written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "what paper did Peter Mertens and Dina Barbian write together ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "Has Peter Mertens and Dina Barbian written a paper together ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "Papers by Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "papers by authors Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "What papers were written by authors Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "papers by Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "papers written by authors Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "When did Peter Mertens and Dina Barbian collaborate ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "what are the collaborations of Peter Mertens and Dina Barbian ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "Have Peter Mertens and Dina Barbian written a paper together ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "Peter Mertens and Dina Barbian as co-authors",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "Does Peter Mertens ever collaborated with Dina Barbian ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "Which papers have Peter Mertens and Dina Barbian as co-authors ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "papers coauthored by Peter Mertens and Dina Barbian",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "What papers have been written by Peter Mertens and Dina Barbian ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "What papers have been written by both Peter Mertens and Dina Barbian ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "question": "What papers have been written by Peter Mertens and Dina Barbian .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who has written the most syntactic parsing papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who is the most published author in syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who has the most publications in syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who has written the most papers on syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "List prominent scholars in syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who wrote the most papers on syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "Who are the authors with the most published papers in syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "top syntactic parsing author",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "top author in syntactic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who published the most in syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who published the most papers in syntactic parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "How many citation noah a smith has ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "noah a smith citation count",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "how many citations does noah a smith have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "How many citations does noah a smith have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "number of citations of noah a smith",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "How many citations does noah a smith have",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "How many times was noah a smith cited ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "question": "How many citations does noah a smith has ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "chi papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "papers at chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "papers in chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "Papers about chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "Show me chi papers .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "what papers did chi publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "list papers published in chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "question": "Papers on chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;",
        "question": "Has mirella lapata written any papers in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "What papers has sharon goldwater written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "What papers has written by sharon goldwater ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "papers by sharon goldwater",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "what did sharon goldwater write ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "papers where sharon goldwater is an author",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "Papers authored by sharon goldwater",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "sharon goldwater papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "Papers by sharon goldwater",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "Papers written by sharon goldwater",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "which papers has sharon goldwater written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "papers written by sharon goldwater",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "What has sharon goldwater published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "Does sharon goldwater have any papers published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "sharon goldwater 's papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "show me papers by sharon goldwater .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "What papers are authored by sharon goldwater ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "question": "papers by sharon goldwater ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "question": "What was oren etzioni 's latest paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "question": "Latest paper by oren etzioni",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "question": "What is the latest paper by oren etzioni ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "question": "What is oren etzioni 's latest paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "question": "What are the latest papers by oren etzioni ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "question": "most recent papers by oren etzioni",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "question": "are there any monte carlo simulation papers since 2011 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "question": "monte carlo simulation papers later than 2011",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "question": "monte carlo simulation later than 2011",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "question": "monte carlo simulation papers published after 2011",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "question": "monte carlo simulation papers since 2011",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";",
        "question": "does ras bodik publish a lot ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "How many papers did David M. Blei publish at AISTATS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "How many papers does David M. Blei have in AISTATS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "How many papers has David M. Blei published in AISTATS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "how many papers does David M. Blei have at AISTATS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "how many papers does David M. Blei have in AISTATS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "how many David M. Blei papers are in AISTATS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "How many papers David M. Blei has in AISTATS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "question": "How many papers does David M. Blei have in AISTATS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
        "question": "List all academic papers on machine networks for one shot learning",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
        "question": "machine networks for one shot learning",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "question": "which EMNLP 2010 papers have the most citations ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "question": "Which paper from EMNLP 2010 was cited most ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "question": "most cited EMNLP 2010 papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "question": "which EMNLP 2010 papers have been cited the most ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "question": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "question": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "question": "How many papers are in deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "question": "How many papers are about deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "question": "how many papers about deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "question": "How many papers are related to deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many papers has Christopher D. Manning written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many papers does Christopher D. Manning have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many papers has Christopher D. Manning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many papers has Christopher D. Manning published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "how many papers has Christopher D. Manning written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "Has Christopher D. Manning published any papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "how many papers has Christopher D. Manning published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "how many papers does Christopher D. Manning have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many paper does Christopher D. Manning have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many publications does Christopher D. Manning have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "How many papers does Christopher D. Manning have",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "question": "number of papers written by Christopher D. Manning",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "what kind of papers does Luke Zettlemoyer publish",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "Keyphrases used by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "What keywords are in papers by Luke Zettlemoyer ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "keywords used by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "what keywords are used by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "keyphrases used by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "keyphrases by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "give me the keywords used by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "What topic does Luke Zettlemoyer write about ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "what topics does Luke Zettlemoyer publish in",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "keywords in the papers written by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "keyphrases used by Luke Zettlemoyer .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "question": "topics used by Luke Zettlemoyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "What conference does Daniella Coelho publish in ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "conferences that Daniella Coelho has published in",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "In which conferences does Daniella Coelho typically publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "in what conferences does Daniella Coelho publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "What conferences does Daniella Coelho publish in ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "At which conferences does Daniella Coelho publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "question": "What conferences does Daniella Coelho submit to ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
        "question": "How many papers are there ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "question": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "question": "How many papers does Ed Desmond have in Semantic Parsing area ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "question": "How many Semantic Parsing papers has Ed Desmond written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "question": "How many paper has Ed Desmond written about Semantic Parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "question": "What conferences did li dong submit to in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "question": "Where did li dong publish in 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "question": "What conferences did li dong publish in in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "question": "Where did li dong publish in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "acl papers in 2012 on Parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "What papers were published in acl in 2012 about Parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "papers on Parsing appeared at acl last year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "Parsing papers from acl 2012",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "papers about Parsing in acl 2012",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "acl papers in 2012 in Parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "acl papers in 2012 about Parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "What papers were published at acl in 2012 were about Parsing ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "papers on Parsing appeared at acl in 2012",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "how many Parsing papers did acl 2012 have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "who published Parsing papers at acl 2012",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "which papers in acl 2012 had Parsing in them ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "question": "what were some Parsing based papers in acl 2012 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "question": "List the popular publications on dependent types",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "question": "Which paper should I read about dependent types ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "question": "top dependent types papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "List papers that has a keyword Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Question Answering research papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers on Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers related to Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers about Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Papers about Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers published in the area of Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Question Answering experiments",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Show me the papers on Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers that used Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers that mention Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Question Answering papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Show me Question Answering papers .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Question Answering publications",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Fetch me some papers on Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers on Question Answering experiments",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "What papers talk about Question Answering ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "What is the paper about Question Answering ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "Which papers are about about Question Answering ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "list papers that used Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers for Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "List papers that has keyword Question Answering",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "question": "papers with Question Answering in keyphrases",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;",
        "question": "keyphrases used by Luke S Zettlemoyer for each year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "question": "recent research interests of sanjeev arora",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "question": "recent papers by sanjeev arora",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "question": "recent papers written by sanjeev arora",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";",
        "question": "list papers published by balakrishnan prabhakaran",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";",
        "question": "citation count of zachary tatlock 's papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "question": "subhasis chaudhuri",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "question": "list papers by subhasis chaudhuri",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "question": "List of papers by subhasis chaudhuri",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "question": "conference papers of subhasis chaudhuri",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "question": "how many parsing papers in ACL 2014",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "question": "how many parsing papers appeared in the proceeeding of ACL 2014 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "question": "how many parsing papers were published at ACL 2014 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "brian curless convolution paper",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "convolution by brian curless",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "papers by brian curless about convolution",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "brian curless 's paper about convolution",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "What are the papers of brian curless in convolution ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "papers brian curless wrote about convolution",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "brian curless 's papers on convolution",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "What is the paper about convolution from brian curless ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "papers by brian curless in convolution topic",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "I want the papers on keyphrase0 by brian curless",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "convolution papers by brian curless",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "What papers has brian curless written on convolution ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "What papers has brian curless written about convolution ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "convolution paper by brian curless",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "question": "Does brian curless do convolution ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "What papers has Liwen Xiong written in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "papers by Liwen Xiong in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "What did Liwen Xiong published in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Papers written by Liwen Xiong in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "What are the papers of Liwen Xiong in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "papers by Liwen Xiong from 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Papers published in 2015 by Liwen Xiong",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "what has Liwen Xiong done in the past year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "What papers did Liwen Xiong publish last year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "papers published in 2015 by Liwen Xiong",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Liwen Xiong 's papers in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Liwen Xiong 's papers in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Liwen Xiong publication 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Papers authored by Liwen Xiong in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "Papers from Liwen Xiong in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "question": "what papers are published by Liwen Xiong in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "What TAIL paper published in NIPS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "List the papers on TAIL that were published in NIPS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "what are the papers in NIPS about TAIL ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "Papers about TAIL in NIPS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "papers at NIPS related to TAIL",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "papers about TAIL published at NIPS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "TAIL papers in NIPS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "papers on TAIL NIPS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "question": "TAIL papers used in NIPS",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );",
        "question": "How many co-authors has Mark Steedman had ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "question": "keyphrases used by Christof Dallermassl in 2000",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "question": "Keyphrases used by Christof Dallermassl in 2000",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "question": "keyphrases Christof Dallermassl used in papers written last year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "question": "What are keyphrases by Christof Dallermassl in 2000 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "question": "what author is most cited ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
        "question": "journal articles by mohammad rastegari",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
        "question": "Journal Papers by mohammad rastegari",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "question": "best paper in TACL 2014 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "question": "What was the best paper at TACL 2014 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "who published at acl 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "acl 2016 authors",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "authors of acl 2016 papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "List of authors acl 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "author published acl 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "who had papers at acl 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "question": "List of authors in acl 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;",
        "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "question": "How many papers run experiments on ImageNet ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "question": "How many papers used ImageNet dataset ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "question": "How many papers written on ImageNet ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "question": "how many papers are based on ImageNet",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "question": "how many papers use ImageNet ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "question": "How many papers did Mirella Lapata cite ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "question": "how many papers does Mirella Lapata cite",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "question": "how many papers has Mirella Lapata cited ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;",
        "question": "When does Michael Stonebraker publish the first VLDB paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "semantic parsing dataset",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "data sets for semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "list datasets for semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets for semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "Datasets with semantic parsing information",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets used by semantic parsing papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets in semantic parsing papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "semantic parsing datasets",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets in papers about semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets used for semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "large-scale datasets used in semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets with semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "question": "datasets used for evaluating semantic parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "question": "where does Peter Mertens publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "question": "in what venues does Peter Mertens publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "question": "Where does Peter Mertens publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "how many papers appeared at nature communications last year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers were at nature communications 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "how many papers accepted in nature communications 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers were published in nature communications in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers on nature communications in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "how many papers in nature communications 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers were accepted at nature communications 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers are presented in nature communications 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers published in nature communications in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "how many papers published in nature communications 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers were published in nature communications 2015 conference ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "question": "How many papers was published in nature communications in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "question": "what was the first deep learning paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "question": "what year was the first deep learning paper published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "question": "datasets mentioned at ACL",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "question": "what datasets do papers at ACL use most ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";",
        "question": "the papers on semantic parsing by li dong at acl in 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "question": "How many papers were written on convolutional neural networks in the past year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "question": "How many papers were published on convolutional neural networks in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "question": "How many papers were written on convolutional neural networks in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "question": "How many papers were written on the convolutional neural networks this year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "question": "how many papers on convolutional neural networks have been published in the past year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "question": "What papers were written on question answering this year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "question": "which year had the most NIPS papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "question": "what year had the most NIPS papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "question": "what year had the most number of NIPS papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "question": "when were most NIPS papers published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "who writes papers with Noah A Smith ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "Who is a coauthor with Noah A Smith ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "Who are Noah A Smith 's co-authors",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "Who has coauthored with Noah A Smith ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "co-authors of Noah A Smith",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "author who wrote papers with Noah A Smith",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "authors who collaborated with Noah A Smith",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "who does Noah A Smith author with ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "Who are Noah A Smith 's coauthors",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "who are all the co-authors of Noah A Smith ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "who does Noah A Smith work with ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "who does Noah A Smith collaborate with ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "Who are Noah A Smith 's coauthors ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "question": "coauthors of Noah A Smith",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "what datasets did jitendra malik use ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "what datasets are used in papers by jitendra malik",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "what datasets did jitendra malik use in his papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "what datasets were used by jitendra malik ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "datasets used in papers written by jitendra malik ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "Datasets by jitendra malik",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "question": "What datasets have jitendra malik used",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "recent deep learning papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "new deep learning papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "What are the latest publications on deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "Most recent deep learning conference ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "Show me some recent papers on deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "What are some recent papers written in deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "What is the most recent paper of deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "What are recent papers on deep learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "Current research on deep learning",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "latest deep learning papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "question": "newest deep learning papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;",
        "question": "What years did Pedro Domingos publish papers in ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;",
        "question": "In what years did Pedro Domingos publish a paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;",
        "question": "jamie callan 's publications by year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "question": "How many papers does jamie callan publish each year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "question": "number of papers by year from jamie callan",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "question": "how many papers jamie callan published each year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
        "question": "who does oren etzioni cite",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
        "question": "what papers does oren etzioni cite",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "question": "papers citing Daniel Jurafsky",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "question": "What papers cite Daniel Jurafsky ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "question": "Which papers cite Daniel Jurafsky ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "question": "citations for Daniel Jurafsky",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;",
        "question": "journal papers for instance segmentation",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who has the most papers in semantic parsing after 2005 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who has written the most papers on semantic parsing since 2005 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "who published the most in semantic parsing after 2005 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";",
        "question": "How many citations does Dan Makumbi 's Genetic Identity paper have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "question": "character recognition papers earlier than 2010",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "question": "papers before 2010 about character recognition",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "question": "character recognition papers from before 2010",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "question": "papers about character recognition from before 2010",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "question": "character recognition papers before 2010",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;",
        "question": "what topics does oren etzioni write about most ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";",
        "question": "How many papers related to deep learning cited the dataset ImageNet ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "most cited papers on parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "parsing top papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "List top papers for parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "parsing papers that have the most citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "What is the paper about parsing of the most citation ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "Paper on parsing with most citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "parsing papers with most citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "most cited parsing papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "what are the parsing papers that have the most citations ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "highly cited parsing papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "most cited papers for parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "Most cited papers on parsing",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";",
        "question": "What paper did Michael Armstrong wrote in the 90s ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "What is the most cited paper by ohad shamir ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "What is the highest cited paper by ohad shamir ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "What is the most cited paper of ohad shamir ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "What is ohad shamir 's highest cited paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "What paper by ohad shamir has the most citation ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "what is the most cited paper of ohad shamir ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "question": "what is ohad shamir 's most cited paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "question": "How many papers did michael i. jordan publish in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "question": "How many papers does michael i. jordan have in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "question": "How many papers did michael i. jordan publish in 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "question": "count of ACL papers by author",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "question": "how many ACL papers by author",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "question": "number of ACL papers by author",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "question": "who wrote the most papers for CVPR 2007",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "question": "who published papers in CVPR 2007",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "question": "who wrote the most CVPR papers in 2007",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "question": "most published author at CVPR 2007",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "question": "who published the most papers in CVPR 2007",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "question": "Who published the most papers in 2007 at CVPR ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "question": "How many papers in ACL 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "question": "number of papers published in ACL 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "question": "papers from 2014",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "question": "2014 papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "What papers does Richard Ladner have in chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "what paper has Richard Ladner published in chi journal ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "what paper has Richard Ladner published in chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "papers by Richard Ladner published at chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "Does Richard Ladner publish in chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "What has Richard Ladner published at chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "What papers has Richard Ladner written at chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "question": "Which paper did Richard Ladner present at chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "question": "What is the paper with the most citation about Artificial Intelligence ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "question": "Fetch me the most cited publications for Artificial Intelligence",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "topics at ACL 2014",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "most common topics at NIPS 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "most popular topics at NIPS 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "hot topics at NIPS 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "popular topics at NIPS 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "which topics were most popular at NIPS 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "topics popular at NIPS 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";",
        "question": "How many papers related to deep reinforcement learning in nips ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "Papers on WebKB",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "which papers used WebKB ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "papers about WebKB",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "List the papers that used WebKB dataset",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "papers using WebKB",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "papers that use WebKB",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "WebKB papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "papers that used WebKB",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "question": "Papers that use the WebKB dataset",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;",
        "question": "conferences in 2013",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "question": "how is the most cited author in CVPR ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "question": "who is the most cited author at CVPR ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "question": "what are some syntactic parsing papers that chris dyer did not write ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "question": "are there any syntactic parsing papers not written by chris dyer ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "question": "what are syntactic parsing papers not written by chris dyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "question": "syntactic parsing papers not written by chris dyer",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );",
        "question": "papers published in the last year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
        "question": "When was benjamin mako hill 's first publication ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
        "question": "When was benjamin mako hill 's first paper written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;",
        "question": "When did ameet soni publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "question": "Who cites Daniel A Reed the most",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "question": "Who cites Daniel A Reed most ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "question": "how many papers are in sigir ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "question": "how many papers does sigir have ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "question": "how many papers are published in sigir ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "question": "number of papers in sigir conference",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "question": "what papers have fewer than 5 citations by ACL papers ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "question": "ACL papers with less than 5 citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "question": "what ACL papers have less than 5 citations ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "question": "what papers have fewer than 5 citations by ACL papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;",
        "question": "What are the 5 most recent papers of Mirella Lapata ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "What were the papers published at pldi 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "Papers from pldi 2015 conference",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "papers published at pldi 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "What are the papers from pldi 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "Papers from pldi 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "Which papers were accepted in pldi 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "What papers were published during the conference pldi 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "papers in pldi 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "List of papers in pldi 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "pldi papers in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "what papers are published in pldi 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "papers from pldi 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "pldi papers 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "pldi 2015 conference",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "pldi best paper award 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "question": "pldi 2015 list of papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "question": "List today 's journals",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "question": "List the journals published in March , 2011",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";",
        "question": "ACL papers in 2016 with neural attention in the title",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "question": "Who writes a lot of papers in Machine Learning ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "question": "Who wrote sensor fusion ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "question": "Authors of papers on sensor fusion",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "question": "people working on sensor fusion",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "question": "Who publishes in sensor fusion ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "question": "who publishes papers about sensor fusion",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
        "question": "how many papers by dan klein are cited by michael i. jordan",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
        "question": "how many of dan klein 's papers cite michael i. jordan",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";",
        "question": "who else was on the paper with Ameet Soni and Ras Bodik ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;",
        "question": "2014 papers using ImageNet",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "question": "What journals are Takashi Matsumoto 's articles published in ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "question": "What journals has Takashi Matsumoto published in ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "question": "In what scholarly journals does Takashi Matsumoto publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "question": "What authors wrote papers about Bacterial Wilt in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "question": "Who wrote on the topic of Bacterial Wilt in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;",
        "question": "When did Luke S Zettlemoyer publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "question": "question answering 2016 papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "question": "What papers were written on question answering in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "question": "what keyphrases get most citations ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;",
        "question": "Find journals about Temporal Data .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;",
        "question": "List the journals related to Temporal Data",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "question": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "question": "Parsing papers using Jeopardy! Questions published at ACL 2014",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "question": "Parsing papers from ACL 2014 using Jeopardy! Questions",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "question": "Parsing papers from ACL 2014 that used Jeopardy! Questions",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "question": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
        "question": "in what journals does linda shapiro publish ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
        "question": "Which journals did linda shapiro submit papers to ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "question": "NIPS authors",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "question": "who are the authors at NIPS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "question": "who authored papers at NIPS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "question": "who publishes in NIPS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "question": "who has papers at NIPS ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;",
        "question": "which venue publishes the most papers about deep learning",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
        "question": "How many publications were added to the Cell journal this year ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
        "question": "How many articles were published in the Cell journal in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";",
        "question": "What are all the publication titles by Donald E Knuth ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "question": "papers published in eccv 2016 by ali farhadi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "question": "Does ali farhadi have a paper in eccv in 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "question": "papers of ali farhadi in eccv 2016",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";",
        "question": "What are some papers dealing with Semantic Data in YAGO ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "question": "Who has published more papers in chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "question": "Who has written the most papers at chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "question": "how is the most prolific author in chi ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "question": "who published the most at chi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "question": "In what year did Ye Cao publish the most papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "question": "What year did Ye Cao publish the most papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";",
        "question": "conferences that mention ImageNet",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "question": "first deep learning paper",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "question": "What was the first paper on deep learning written ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "question": "When was deep learning proposed ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "question": "when was the first deep learning paper published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;",
        "question": "what papers were published in Academic radiology in 1995 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
        "question": "what papers do parsing papers typically cite ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
        "question": "papers typically cited by parsing papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "question": "venue for Trophic Cascade",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "question": "conferences for Trophic Cascade",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "question": "what conferences are related to Trophic Cascade",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "question": "What was the conference name that approved Trophic Cascade ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;",
        "question": "How many papers were written on question answering in 2011 through 2016 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "question": "What are the best NLP conferences ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";",
        "question": "ACL papers by author",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;",
        "question": "papers with more than 10 citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "question": "Which authors published papers in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "question": "who wrote papers in 2015",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "question": "what keyphrase does Brian DeRenzi write about that gets most citations ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "question": "main topics of work by Brian DeRenzi",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;",
        "question": "authors with at least 5 papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
        "question": "papers that were not published in the last year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "question": "When was Michael Stonebraker GIS Database published ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "question": "When did Michael Stonebraker publish his GIS Database paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "question": "When does Michael Stonebraker publish the GIS Database paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;",
        "question": "In 2010 what journal published an article about Trophic Cascade ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "question": "What is the most popular paper this year in CVPR ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;",
        "question": "How many citations does luke zettlemoyer have per year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;",
        "question": "authors working on ImageNet",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;",
        "question": "What articles have been published since 2006 about the effects of juicing for cancer patients ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "question": "Eric C. Kerrigan 's Liquid Automatica paper",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;",
        "question": "Where did sergey levine publish his last paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
        "question": "keyphrases used by dan klein in his emnlp papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "question": "the papers at eccv in 2014 using ImageNet dataset",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "question": "which papers in eccv 2014 use ImageNet ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "question": "eccv 2014 papers using ImageNet",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";",
        "question": "Euclidean Distance papers citing NIPS papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;",
        "question": "top authors working on ImageNet ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;",
        "question": "how many ACL 2012 papers have more than 7 citations ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "question": "What was the topic of best paper in 2012 EMNLP-CoNLL ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );",
        "question": "How many papers has Noah Smith co-authored since 2009 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;",
        "question": "Number of ACL papers with more than 2 citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "question": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";",
        "question": "How many papers used ImageNet datasets in cvpr ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";",
        "question": "What venues are for Neuroscience ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";",
        "question": "When was the last time Mary Crainie published a paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";",
        "question": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";",
        "question": "How many papers does Samuel Madden publish outside of PVLDB area ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;",
        "question": "which journal did Donald E Knuth publish his last paper ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";",
        "question": "What is the venue of Fracture of acrylic bone cement ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";",
        "question": "How many authors published at sigcse in 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";",
        "question": "What is the year of publication of \" A Switching Architecture For ISDN \" ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";",
        "question": "what keywords are used by papers at uist",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;",
        "question": "Give me the papers written by Su-In Lee before 2012 .",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;",
        "question": "papers in semantic parsing for each year",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "question": "papers with at least 5 citations",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "question": "papers cited by at least 5 papers",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "question": "What is the most cited paper at sigcomm ?",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "query": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";",
        "question": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE rating  >  4.5;",
        "question": "List all the businesses with more than 4.5 stars",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE rating  =  3.5;",
        "question": "List all businesses with rating 3.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT user_id FROM USER WHERE name  =  \"Michelle\";",
        "question": "List all user ids with name Michelle",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT state FROM business WHERE name  =  \"Whataburger\";",
        "question": "Find all states in which there is a Whataburger",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";",
        "question": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT city FROM business WHERE rating  <  1.5;",
        "question": "Find the cities of businesses rated below 1.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT city FROM business WHERE name  =  \"Taj Mahal\";",
        "question": "Find all cities which has a \" Taj Mahal \" .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT text FROM review WHERE rating  <  1;",
        "question": "List all the reviews which rated a business less than 1",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
        "question": "List all the restaurant rated more than 3.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";",
        "question": "find all cities which has a \" Taj Mahal \" restaurant",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
        "question": "list all the reviews by Niloofar",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";",
        "question": "list all the businesses which have a review by Niloofar",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";",
        "question": "list all the businesses which Niloofar rated 5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";",
        "question": "List all the reviews by Michelle for Italian restaurant",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "question": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";",
        "question": "List all 5 star Italian restaurant",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "question": "List all the neighbourhoods with Italian restaurant in Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "question": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
        "question": "find all the restaurant in Pennsylvania",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
        "question": "List all businesses that are restaurant in Pennsylvania .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";",
        "question": "Find all the reviews for all Pet Groomers with more than 100 reviews",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "question": "What are all the breweries in \" Los Angeles \" ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "question": "Find all breweries in Los Angeles",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "question": "Find all breweries in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";",
        "question": "Find all users who reviewed restaurant \" Mesa Grill \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";",
        "question": "List the addresses of all Walmart in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "question": "Find all restaurant reviewed by Patrick in \" Dallas \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "question": "Which restaurant in Dallas were reviewed by user Patrick ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "question": "Find all Bars reviewed by Patrick",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "question": "Find all Bars reviewed by Patrick with at least 3 stars",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;",
        "question": "Find all users who have written tips for \" Barrio Cafe \" in 2015",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";",
        "question": "Find all businesses in Texas with a rating below 2",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "question": "Find all restaurant Seafood in Los Angeles",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "question": "List all the Seafood restaurant in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "question": "Find all restaurant that serve Seafood in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";",
        "question": "Find all reviews by Patrick with a rating above 4",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";",
        "question": "Find all Apple Store in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";",
        "question": "Find all Dallas restaurant with a rating above 4.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";",
        "question": "What neighbourhood is restaurant \" Flat Top Grill \" in ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;",
        "question": "Find all tips about \" Vintner Grill \" that received more than 9 likes",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;",
        "question": "Find all reviews about \" Kabob Palace \" in year 2014",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";",
        "question": "Find all users who have written tips about businesses in Dallas",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "question": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";",
        "question": "Find the users who have given tips on Pet Groomers",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";",
        "question": "Find all tips for \" Cafe Zinho \" in Texas .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";",
        "question": "List all users who reviewed businesses that are restaurant .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;",
        "question": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;",
        "question": "List all users who reviewed businesses that are restaurant in 2010 .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;",
        "question": "Find all the tips from a user who has written a review in 2012",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;",
        "question": "Find all reviews for businesses rated 2.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "question": "find the number of escape games in Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "question": "What is the number of escape games in Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "question": "How many escape games exist in Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "question": "What is the number of escape games in \" Madison \" ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "question": "How many escape games are there in Madison ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
        "question": "find the number of restaurant rated more than 3.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;",
        "question": "find the total checkins in Italian Delis in each state on Sunday",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";",
        "question": "How many reviews has Niloofar written in 2015",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "question": "what is the average rating given in Michelle reviews",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";",
        "question": "What is the number of checkins for \" Cafe Zinho \" on Friday",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";",
        "question": "how many users reviewed \" Sushi Too \" in Pittsburgh",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";",
        "question": "What is the number of restaurant in Pittsburgh rated 4.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;",
        "question": "How many tips have been written in 2015",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
        "question": "What is the total likes on tips from Niloofar",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";",
        "question": "What is the total likes on tips about \" Cafe Zinho \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";",
        "question": "What is the total likes on tips from Niloofar about \" Cafe Zinho \"",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
        "question": "How many tips has Michelle written in 2010",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
        "question": "Return me the number of tips that are written by Michelle in 2010 .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";",
        "question": "How many tips has Michelle written in April",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "question": "what is the number of restaurant in Texas",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
        "question": "How many Bars in \" Dallas \" have a rating above 3.5 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
        "question": "How many Bars in Dallas have a rating above 3.5 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "question": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;",
        "question": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";",
        "question": "How many restaurant are there in the Hazelwood district of Dallas ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";",
        "question": "How many Starbucks are there in Dallas Texas ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";",
        "question": "How many reviews does \" Acacia Cafe \" have ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;",
        "question": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";",
        "question": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";",
        "question": "How many reviews has Adrienne written ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";",
        "question": "How many reviews has Michelle written in March 2014 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";",
        "question": "How many businesses has Michelle reviewed in 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";",
        "question": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
        "question": "How many Target are there in \" Los Angeles \" ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";",
        "question": "How many users have reviewed Irish Pub in Dallas ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;",
        "question": "What is the average rating of reviews written in year 2014 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;",
        "question": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";",
        "question": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";",
        "question": "Find the number of users called Michelle",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";",
        "question": "Return me the number of businesses that are restaurant .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";",
        "question": "Return me the number of cities that has \" Panda Express \" .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "question": "Return me the number of tips that are written by Michelle .",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";",
        "question": "Find the total checkins in \" Brighton Heights \" neighbourhood",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";",
        "question": "Find the total number of reviews written in March",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;",
        "question": "Find the number of tips written in each month",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;",
        "question": "How many neighbourhoods have a business with rating 5 in Madison ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";",
        "question": "Give me all the Moroccan restaurant in Texas",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
        "question": "which business has the most number of checkins",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
        "question": "which neighbourhood has the most number of businesses in Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "question": "Find all Mexican restaurant in Dallas with a rating above 3.5",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";",
        "question": "Find all restaurant with Valet Service in Dallas Texas",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";",
        "question": "Find all Italian restaurant in the Meadowood neighbourhood of Madison",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";",
        "question": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";",
        "question": "How many Egyptian restaurant are there in Edinburgh ?",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;",
        "question": "Find users whose average review rating is below 3",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
        "question": "Find the business with the most number of reviews in April",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "query": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
        "question": "Find the business which has the most number of categories",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\";",
        "question": "return me the homepage of PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";",
        "question": "return me the homepage of \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the abstract of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the year of \" Making database systems usable \"",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the year of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT title FROM publication WHERE YEAR  >  2000;",
        "question": "return me the papers after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT homepage FROM conference WHERE name  =  \"VLDB\";",
        "question": "return me the homepage of the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT keyword FROM keyword;",
        "question": "return me all the keywords .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM organization;",
        "question": "return me all the organizations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT name FROM organization WHERE continent  =  \"North America\";",
        "question": "return me all the organizations in \" North America \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";",
        "question": "return me the homepage of \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the number of references of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the references of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the number of citations of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "question": "return me the citations of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT title FROM publication WHERE citation_num  >  200;",
        "question": "return me the paper with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;",
        "question": "return me the authors who have papers in PVLDB 2010 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;",
        "question": "return me the authors who have papers in PVLDB after 2010 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;",
        "question": "return me the authors who have papers in VLDB conference in 2002 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;",
        "question": "return me the authors who have papers in VLDB conference before 2002 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;",
        "question": "return me the authors who have papers in VLDB conference before 2002 after 1995 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";",
        "question": "return me the area of PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "question": "return me the authors who have papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the organization \" H. V. Jagadish \" is in .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the conferences, which have papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the journals, which have papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the domain where \" H. V. Jagadish \" is focused .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
        "question": "return me the authors of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";",
        "question": "return me the conference, which published \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "question": "return me the papers on VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "question": "return me the papers on PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "question": "return me the papers on PVLDB after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "question": "return me the papers on VLDB conference after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
        "question": "return me the papers by \" H. V. Jagadish \" after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";",
        "question": "return me the area of the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "question": "return me the authors who have papers in the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
        "question": "return me all the keywords in Databases area .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "question": "return me all the papers, which contain the keyword \" Natural Language \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
        "question": "return me the keywords of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "question": "return me the keywords related to \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "question": "return me the keywords in VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "question": "return me the keywords in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "question": "return me the keywords in the papers of \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "question": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "question": "return me the papers in PVLDB containing keyword \" Keyword search \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "question": "return me the papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "question": "return me the authors who have papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
        "question": "return me all the organizations in Databases area .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
        "question": "return me all the organizations in Databases area located in \" North America \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
        "question": "return me all the researchers in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "question": "return me all the researchers in Databases area in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "question": "return me all the papers in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
        "question": "return me all the papers after 2000 in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "question": "return me all the papers in VLDB conference in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "question": "return me all the papers in PVLDB in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "question": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;",
        "question": "return me the paper in Databases area with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;",
        "question": "return me the paper in PVLDB with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;",
        "question": "return me the paper in VLDB conference with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;",
        "question": "return me the paper by \" H. V. Jagadish \" with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;",
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;",
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;",
        "question": "return me the paper after 2000 with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;",
        "question": "return me the paper after 2000 in Databases area with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "question": "return me the paper after 2000 in PVLDB with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "question": "return me the paper after 2000 in VLDB conference with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the number of conferences which have papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the number of journals which have papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year;",
        "question": "return me the number of papers written by \" H. V. Jagadish \" in each year .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
        "question": "return me the number of authors of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR;",
        "question": "return me the number of citations of \" Making database systems usable \" in each year .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;",
        "question": "return me the number of citations of \" Making database systems usable \" before 2010 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the number of papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "question": "return me the number of papers on VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "question": "return me the number of papers on PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;",
        "question": "return me the number of papers after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "question": "return me the number of papers on PVLDB after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "question": "return me the number of papers on VLDB conference after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
        "question": "return me the number of papers by \" H. V. Jagadish \" after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
        "question": "return me the number of keywords .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
        "question": "return me the number of keywords in Databases area .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "question": "return me the number of papers which contain the keyword \" Natural Language \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
        "question": "return me the number of the keywords of \" Making database systems usable \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "question": "return me the number of the keywords related to \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "question": "return me the number of keywords in VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "question": "return me the number of keywords in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "question": "return me the number of keywords in the papers of \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "question": "return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "question": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "question": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "question": "return me the number of authors who have papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "question": "return me the total citations of the papers containing keyword \" Natural Language \"",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT name ) FROM organization;",
        "question": "return me the number of the organizations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";",
        "question": "return me the number of the organizations in \" North America \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
        "question": "return me the number of organizations in Databases area .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
        "question": "return me the number of organizations in Databases area located in \" North America \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "question": "return me the number of papers in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";",
        "question": "return me the number of papers in \" University of Michigan \" in Databases area .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
        "question": "return me the number of papers after 2000 in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "question": "return me the number of papers in VLDB conference in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "question": "return me the number of papers in PVLDB in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "question": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "question": "return me the total citations of the papers in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
        "question": "return me the number of researchers in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "question": "return me the number of researchers in Databases area in \" University of Michigan \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "question": "return me the number of authors who have papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "question": "return me the number of authors who have papers in the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;",
        "question": "return me the number of papers published on PVLDB before 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;",
        "question": "return me the number of papers published in the VLDB conference before 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "question": "return me the total citations of all the papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "question": "return me the citations of each paper in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;",
        "question": "return me the total citations of papers in PVLDB in 2005 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;",
        "question": "return me the total citations of papers in PVLDB before 2005 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "question": "return me the total citations of papers in PVLDB in each year .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "question": "return me the number of papers published in PVLDB in each year .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "question": "return me the total citations of all the papers in the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "question": "return me the citations of each paper in the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;",
        "question": "return me the total citations of papers in the VLDB conference in 2005 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;",
        "question": "return me the total citations of papers in the VLDB conference before 2005 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "question": "return me the total citations of papers in the VLDB conference in each year .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "question": "return me the number of papers published in the VLDB conference in each year .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";",
        "question": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;",
        "question": "return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the authors who have cooperated with \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the authors who have cited the papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";",
        "question": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the number of authors who have cooperated with \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "question": "return me the number of authors who have cited the papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "question": "return me the author who has the most number of papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "question": "return me the conference that has the most number of papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "question": "return me the conference, which has the most number of papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "question": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "question": "return me the journal, which has the most number of papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "question": "return me the keyword, which have been contained by the most number of papers in VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "question": "return me the keyword, which have been contained by the most number of papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "question": "return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;",
        "question": "return me the author in the \" University of Michigan \" whose papers have the most total citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;",
        "question": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "question": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "question": "return me the conference, which have the most number of papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "question": "return me the journals, which have more than 10 papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "question": "return me the journal, which have the most number of papers by \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;",
        "question": "return me the paper with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "question": "return me the paper in Databases area with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "question": "return me the paper in PVLDB with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "question": "return me the paper in VLDB conference with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "question": "return me the paper by \" H. V. Jagadish \" with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;",
        "question": "return me the paper after 2000 with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;",
        "question": "return me the paper after 2000 in Databases area with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "question": "return me the paper after 2000 in PVLDB with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "question": "return me the paper after 2000 in VLDB conference with the most citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "question": "return me the authors who have more than 10 papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "question": "return me the authors who have the most number of papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;",
        "question": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;",
        "question": "return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;",
        "question": "return me the keywords, which have been contained by more than 100 papers in VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;",
        "question": "return me the keywords, which have been contained by more than 100 papers in PVLDB .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "question": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "question": "return me the authors who have more than 10 papers in the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "question": "return me the author who has the most number of papers in the VLDB conference .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "question": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "query": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
        "question": "What year is the movie \" The Imitation Game \" from ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
        "question": "What year was the movie \" The Imitation Game \" produced",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
        "question": "What year was \" Benedict Cumberbatch \" born ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
        "question": "In what year was \" Benedict Cumberbatch \" born",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
        "question": "What is the nationality of the actress \" Christoph Waltz \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
        "question": "What is the nationality of the actor \" Christoph Waltz \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT title FROM movie WHERE release_year  =  2015;",
        "question": "Find all movies produced in 2015",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "question": "Find all actors born in \" Tehran \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "question": "Find all actors born in Tehran",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "question": "Which actors were born in Tehran",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "question": "Find all actors who are from Afghanistan",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "question": "Find all actors from Afghanistan",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "question": "Give me the name of all the actors from Afghanistan",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_year  =  1984;",
        "question": "Find all actors who were born in 1984",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
        "question": "When was \" Kevin Spacey \" born ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
        "question": "In what year was \" Kevin Spacey \" born ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
        "question": "Where is the birth place of \" Kevin Spacey \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
        "question": "In what city was \" Kevin Spacey \" born ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT nationality FROM director WHERE name  =  \"director_name0\";",
        "question": "What is the nationality of \" Kevin Spacey \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";",
        "question": "How much was the budget of \" Finding Nemo \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;",
        "question": "Find all movies directed by \" Steven Spielberg \" after 2006",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "question": "Who is the director of the movie \" James Bond \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "question": "Who directed the movie \" James Bond \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "question": "List \" James Bond \" directors",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "question": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "question": "Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "question": "Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";",
        "question": "What is the genre of the movie \" Jurassic Park \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";",
        "question": "Who was the director of the movie Joy from 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";",
        "question": "Find all movies written by \" Matt Damon \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";",
        "question": "Find all movies written and produced by \" Woody Allen \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "question": "Find all movies featuring \" Robin Wright \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "question": "What are all the movies featuring \" Robin Wright \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "question": "Find all movies in which \" Robin Wright \" appears",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";",
        "question": "What was the budget of the movie Juno from 2007 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
        "question": "Find all Sci-Fi produced in year 2010",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
        "question": "List all the Sci-Fi movies which released in 2010",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "question": "Find all actors born in \" Austin \" after 1980",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "question": "Who are the actors born in \" Austin \" after 1980 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "question": "Find all actors from Austin born after 1980",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";",
        "question": "Find all movies by directors born in \" Los Angeles \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;",
        "question": "Find all actors who were born in \" New York City \" in 1984",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
        "question": "Find all movies about nuclear weapons",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
        "question": "What are the movies related to nuclear weapons",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";",
        "question": "Which movies did \" Alfred Hitchcock \" direct ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "question": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";",
        "question": "What are all the tv series created by \" Shonda Rhimes \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";",
        "question": "Who acts \" Olivia Pope \" in the series Scandal ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
        "question": "Who is the writer of the movie \" The Truman Show \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
        "question": "Who is the writer of \" The Truman Show \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
        "question": "What are the series featuring \" Scott Foley \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
        "question": "What are the series in which \" Scott Foley \" is an actor ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";",
        "question": "Find the directors of all movies featuring \" Kate Winslet \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";",
        "question": "Find the producers of all movies in which \" Kate Winslet \" is an actor",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";",
        "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";",
        "question": "Find all the female actors from Austin",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";",
        "question": "Find all actors from Italy born after 1980",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "question": "Find all the female actors born in \" New York City \" after 1980",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";",
        "question": "Find all the female actors in the movie \" Saving Private Ryan \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";",
        "question": "Find all the directors who are from Afghanistan",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";",
        "question": "Find the actors who played in the movie \" Camp X-Ray \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";",
        "question": "Find all actors from Canada who acted in \" James Bond \" movies",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";",
        "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";",
        "question": "where is the director of \" The Past \" from",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";",
        "question": "who acted the role of \" Mr. Bean \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";",
        "question": "what are the genres of movies directed by \" Asghar Farhadi \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";",
        "question": "Which movie had the character \" Daffy Duck \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";",
        "question": "What are the major roles in the movie \" Daddy Long Legs \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";",
        "question": "List all the directors of movies about nuclear weapons",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;",
        "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
        "question": "What is the number of actors in the movie \" Saving Private Ryan \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
        "question": "How many actors are in the movie \" Saving Private Ryan \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";",
        "question": "How many movies did \" Steven Spielberg \" direct ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "question": "How many movies were produced in the year 2013 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "question": "What is the number of movies produced in 2013 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;",
        "question": "What is the number of movies directed by \" Woody Allen \" per year ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "question": "How many movies did \" Shahab Hosseini \" act in ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "question": "What is the number of movies in which \" Shahab Hosseini \" acted ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "question": "What is the number of movies featuring \" Shahab Hosseini \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "question": "How many movies did \" Shahab Hosseini \" act in",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;",
        "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;",
        "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;",
        "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;",
        "question": "How many movies about Iraq war were produced in 2015 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;",
        "question": "How many movies about Persians were released after 1990 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;",
        "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "question": "How many female actors were born in \" New York City \" after 1980 ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";",
        "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";",
        "question": "How many actors from China have acted in \" Rush Hour 3 \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "question": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "question": "Find all movies featuring \" Woody Strode \" and \" Jason Robards \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "question": "Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";",
        "question": "Find all actors who acted in the same movie as \" Tom Hanks \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";",
        "question": "What movies have the same director as the movie \" Revolutionary Road \" ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;",
        "question": "Find the movie which is classified in the most number of genres",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;",
        "question": "which movie has the most number of actors from China ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
        "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
        "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
        "question": "What is the latest movie by \" Jim Jarmusch \"",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;",
        "question": "Which producer has worked with the most number of directors ?",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "query": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
        "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";",
        "question": "how many buttercup kitchen are there in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "question": "how many chinese restaurants are there in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "question": "how many places for chinese food are there in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "question": "how many chinese places are there in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "question": "how many places for chinese are there in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";",
        "question": "how many jamerican cuisine are there in santa cruz county ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";",
        "question": "where is jamerican cuisine ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "what is the best french restaurant in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "What is the best french in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "What is the best place in san francisco for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Give me the best place in san francisco for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Where is the best french in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Give me the best french in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Where is the best french restaurant in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Give me the best restaurant in san francisco for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Give me the best french restaurant in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "What is the best restaurant in san francisco for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "question": "Where is the best restaurant in san francisco for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
        "question": "where is denny in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "question": "what are some good restaurants on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "question": "give me some good restaurants on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "question": "give me a good restaurant on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "question": "what is a good restaurant on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "question": "where can we find a restaurant in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "question": "give me a restaurant in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "question": "where can we find some restaurants in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "question": "where is a restaurant in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "question": "give me some restaurants in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "give me some restaurants good for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "where are some restaurants good for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "question": "how many places for french food are there in palo alto ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "question": "how many french restaurants are there in palo alto ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "question": "how many french restaurant are there in palo alto ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "question": "how many places for french are there in palo alto ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";",
        "question": "how many italian restaurants are in the yolo county ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";",
        "question": "where can i eat french food in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
        "question": "how many denny are there in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "question": "give me a good restaurant in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "question": "what are some good restaurants in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "question": "what is a good restaurant in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "question": "give me some good restaurants in alameda ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good restaurant on buchanan in san francisco for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some good arabics on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good arabic restaurant on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "what are some good places for arabic on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good arabic on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some restaurants good for arabic food on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good place on buchanan in san francisco for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good place on buchanan in san francisco for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where can i eat arabic food on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good places on buchanan in san francisco for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a arabic restaurant on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a restaurant on buchanan in san francisco that serves good arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good restaurant on buchanan in san francisco for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a restaurant on buchanan in san francisco that serves good arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good restaurants on buchanan in san francisco for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good places for arabic on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where can i eat some good arabic food on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good arabic on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some restaurants good for arabic food on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some good places for arabic on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good arabic restaurant on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good arabics on buchanan in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";",
        "question": "where can i eat french food in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "question": "give me some restaurants on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "question": "give me a restaurant on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "question": "where can we find a restaurant on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "question": "where can we find some restaurants on bethel island rd in bethel island ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "where is the best restaurant in the bay area for american food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "where is the best restaurant in bay area for american food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "what is the best restaurant in bay area for american food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "what is the best american restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "where is the best american restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "what is the best american in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "give me the best restaurant in the bay area for american food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "give me the best restaurant in bay area for american food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "what is the best restaurant in the bay area for american food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "where is the best american in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "give me the best american in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "question": "give me the best american restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "give me some restaurants good for french food in the yosemite and mono lake area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "what are some good places in the yosemite and mono lake area for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "give me a good restaurant in the yosemite and mono lake area for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "give me a good french restaurant in the yosemite and mono lake area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "where is a good place in the yosemite and mono lake area for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "where are some restaurants good for french food in the yosemite and mono lake area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "give me a good place in the yosemite and mono lake area for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "where is a good restaurant in the yosemite and mono lake area for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "what are some good restaurants in the yosemite and mono lake area for french food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "where is a good french restaurant in the yosemite and mono lake area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "question": "where can i eat some good french food in the yosemite and mono lake area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some restaurants good for arabic food in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "what are some good places in mountain view for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some good arabic restaurants in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "show me a good arabic restaurant in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good arabic in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good arabic restaurant in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good place in mountain view for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some good arabics in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a restaurant in mountain view that serves good arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "what are some good restaurants in mountain view for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some restaurants good for arabic food in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where can i eat some good arabic food in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good places for arabic in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good arabic in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a restaurant in mountain view that serves good arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good arabic restaurants in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where are some good places for arabic in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me some good arabics in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "give me a good restaurant in mountain view for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good arabic restaurant in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "what are some good places for arabic in mountain view ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good restaurant in mountain view for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "question": "where is a good place in mountain view for arabic food ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "question": "where can i find a jamerican cuisine in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "question": "where is jamerican cuisine in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "question": "where is a jamerican cuisine in san francisco ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "question": "where can we find some restaurants in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "question": "give me some restaurants in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "question": "give me a restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "question": "where can i find a restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "question": "give me a good restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "question": "what are some good restaurants in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "question": "give me some good restaurants in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "query": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "question": "what is a good restaurant in the bay area ?",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest city in wyoming",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what wyoming city has the largest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city in wyoming",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the most populated area of wyoming",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which city in wyoming has the largest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what cities in wyoming have the highest number of citizens",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what cities in wyoming have the highest populations",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populous city in wyoming",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city in wyoming by population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city of wyoming",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the city in wyoming with the largest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"wyoming\" ) AND state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers run through the state with the largest city in the us",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how big is new mexico",
        "predicted_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of new mexico",
        "predicted_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how large is new mexico",
        "predicted_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of the new mexico state",
        "predicted_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the size of new mexico",
        "predicted_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of new mexico in square kilometers",
        "predicted_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "gold_parse": "SELECT area FROM state WHERE state_name  =  \"new mexico\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people reside in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many residents live in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how much population does california have",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the population of california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people are in the state of california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what can you tell me about the population of california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people are there in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many citizens in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people stay in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many citizens live in california",
        "predicted_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT population FROM state WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the smallest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the least populous state",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the lowest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the cities in texas",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "tell me what cities are in texas",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what cities are located in texas",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the cities in texas",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what cities in texas",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the cities which are in texas",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT city_name FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of the state with the capital albany",
        "predicted_parse": "SELECT area FROM state WHERE capital  =  \"albany\";",
        "gold_parse": "SELECT area FROM state WHERE capital  =  \"albany\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the lakes in california",
        "predicted_parse": "SELECT lake_name FROM lake WHERE state_name  =  \"california\";",
        "gold_parse": "SELECT lake_name FROM lake WHERE state_name  =  \"california\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name the major lakes in michigan",
        "predicted_parse": "SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\";",
        "gold_parse": "SELECT lake_name FROM lake WHERE area  >  750 AND state_name  =  \"michigan\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the states",
        "predicted_parse": "SELECT state_name FROM state;",
        "gold_parse": "SELECT state_name FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "list the states",
        "predicted_parse": "SELECT state_name FROM state;",
        "gold_parse": "SELECT state_name FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me all the states of usa",
        "predicted_parse": "SELECT state_name FROM state;",
        "gold_parse": "SELECT state_name FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states do ohio river flow through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states does the ohio river run through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border the ohio river",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states border the ohio river",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states does the ohio run through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the ohio river",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states does the ohio river run through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states does the ohio run through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states does the ohio river pass through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the states that the ohio run through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the ohio river",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have rivers named ohio",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "through which states does the ohio flow",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states are next to the ohio",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "through which states does the ohio run",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states does the ohio river go through",
        "predicted_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "gold_parse": "SELECT traverse FROM river WHERE river_name  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the largest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populous state",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state is the largest in population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the biggest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the greatest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the most population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the most people",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the most people",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populous state in the us",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the highest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest elevation in pennsylvania",
        "predicted_parse": "SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\";",
        "gold_parse": "SELECT lowest_elevation FROM highlow WHERE state_name  =  \"pennsylvania\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in each state whose lowest point is sea level",
        "predicted_parse": "SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;",
        "gold_parse": "SELECT highest_point  ,  state_name FROM highlow WHERE lowest_elevation  =  0;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the length of the longest river in the usa",
        "predicted_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is the longest river in the usa",
        "predicted_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river flowing through texas",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest river in texas state",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in texas",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest river in texas",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river that flows through texas",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the biggest rivers in texas",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are in idaho",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the number of rivers in idaho",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers does idaho have",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are there in idaho",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers run through idaho",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are found in idaho",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers in idaho",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse  =  \"idaho\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states neighbor kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states border kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the states that border kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state borders kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states are next to kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states surround kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state borders kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the neighboring states for kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states adjoin kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "states bordering kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state border kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the adjacent state of kentucky",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name all the rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are all the rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers are in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers are there in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers run through illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers flow through illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what river flows through illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the rivers in the state of illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name the rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the rivers of illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers are in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers flow through illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the river that cross over illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what river runs through illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state is springfield in",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "springfield is in what state",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have cities named springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states have cities named springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state is springfield in",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have a city named springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the city springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have towns named springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state is springfield located in",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "in which state is springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state is the city springfield located in",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states in the united states have a city of springfield",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the state with the largest area",
        "predicted_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the largest state",
        "predicted_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people lived in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "number of people in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of boulder city",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how big is the city of boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "population of boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "people in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many inhabitants does boulder have",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "number of citizens in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many citizens in boulder",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"boulder\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest city in alaska",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states lie on the largest river in the united states",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states does the longest river run through",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the longest river",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the states through which the longest river runs",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states does the longest river cross",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population density of the state with the smallest area",
        "predicted_parse": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population density of the smallest state",
        "predicted_parse": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT density FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states have points higher than the highest point in colorado",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states have points that are higher than the highest point in colorado",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states high point are higher than that of colorado",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  \"colorado\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest elevation in delaware",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how high is the highest point of delaware",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how tall is the highest point in delaware",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in delaware in meters",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how high is the highest point in delaware",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE state_name  =  \"delaware\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the longest river that passes through the us",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which is the longest river in usa",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in america",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name the longest river in us",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what river is the longest one in the united states",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the us",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the united states",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the city with the largest population",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the largest city",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the largest city",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the city with the most population",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest city in the largest state",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state is the biggest",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the largest area",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the largest area",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest state in continental us",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "state the state with the largest area",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state in usa",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest state",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest state in the usa",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the largest state",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state in the us",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the highest points of states surrounding mississippi",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the high points of states surrounding mississippi",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in states bordering colorado",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the states bordering colorado",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" ) ORDER BY highest_elevation DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the lowest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the lowest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the lowest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the smallest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the sparsest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the sparsest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the least population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the least population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the smallest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the highest point in texas",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in texas",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the high point of texas",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest mountain in texas",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "could you tell me what is the highest point in the state of texas",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have no bordering state",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name the states which have no surrounding states",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states border no other states",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT state_name FROM border_info );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of the state with the smallest population density",
        "predicted_parse": "SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "gold_parse": "SELECT area FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "count the states which have elevations lower than what alabama has",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );",
        "gold_parse": "SELECT COUNT ( state_name ) FROM highlow WHERE lowest_elevation  <  ( SELECT lowest_elevation FROM highlow WHERE state_name  =  \"alabama\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how high is guadalupe peak",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how tall is guadalupe peak",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the maximum elevation of guadalupe peak",
        "predicted_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "gold_parse": "SELECT highest_elevation FROM highlow WHERE highest_point  =  \"guadalupe peak\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how high is the highest point in america",
        "predicted_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest elevation in the united states",
        "predicted_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the elevation of the highest point in the usa",
        "predicted_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the height of the highest point in the usa",
        "predicted_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "gold_parse": "SELECT MAX ( highest_elevation ) FROM highlow;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is the rio grande river",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the length of the rio grande river",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what length is the rio grande",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is the rio grande",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is the rio grande river in miles",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is rio grande",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"rio grande\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is the longest river in texas",
        "predicted_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the length of the longest river that runs through texas",
        "predicted_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many capitals does rhode island have",
        "predicted_parse": "SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"rhode island\";",
        "gold_parse": "SELECT COUNT ( capital ) FROM state WHERE state_name  =  \"rhode island\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities are there in the united states",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city;",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities does the usa have",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city;",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities are there in the us",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city;",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities are there in usa",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city;",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities are there in us",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city;",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many major cities are there",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000;",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many citizens does the biggest city have in the usa",
        "predicted_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many colorado rivers are there",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are called colorado",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE river_name  =  \"colorado\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of seattle washington",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in seattle washington",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  \"seattle\" AND state_name  =  \"washington\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in the biggest city in alaska state",
        "predicted_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how large is the largest city in alaska",
        "predicted_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"alaska\" ) AND state_name  =  \"alaska\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in the capital of texas",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the size of the capital of texas",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in the united states",
        "predicted_parse": "SELECT SUM ( population ) FROM state;",
        "gold_parse": "SELECT SUM ( population ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the combined population of all 50 states",
        "predicted_parse": "SELECT SUM ( population ) FROM state;",
        "gold_parse": "SELECT SUM ( population ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states are in the usa",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM state;",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states are there",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM state;",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states are there in the usa",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM state;",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states does usa have",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM state;",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states are in the united states",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM state;",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states are there in united states",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM state;",
        "gold_parse": "SELECT COUNT ( state_name ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border kentucky",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states does kentucky border",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "kentucky borders how many states",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "number of states bordering kentucky",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the number of neighboring states for kentucky",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  \"kentucky\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border the state with the largest population",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states do not have rivers",
        "predicted_parse": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "gold_parse": "SELECT COUNT ( DISTINCT state_name ) FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states have a higher point than the highest point of the state with the largest capital city in the us",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );",
        "gold_parse": "SELECT COUNT ( state_name ) FROM highlow WHERE highest_elevation  >  ( SELECT highest_elevation FROM highlow WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  ( SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city ) ) ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name the major rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are major rivers in illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what major rivers run through illinois",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"illinois\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "through which states does the longest river in texas run",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the capital city in texas",
        "predicted_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of texas",
        "predicted_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the texas state",
        "predicted_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is capital of texas",
        "predicted_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state texas",
        "predicted_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "can you tell me the capital of texas",
        "predicted_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT capital FROM state WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the capitals of states that border texas",
        "predicted_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the capital cities of the states which border texas",
        "predicted_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the capitals of the states that border texas",
        "predicted_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which capitals are in the states that border texas",
        "predicted_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the cities in states through which the mississippi runs",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the cities of the state with the highest point",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
        "gold_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the highest points of all the states",
        "predicted_parse": "SELECT highest_point FROM highlow;",
        "gold_parse": "SELECT highest_point FROM highlow;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in the state of kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what major cities are located in kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "show major cities in kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the names of the major cities in kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities of kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the major cities in kansas",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  \"kansas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in states through which the mississippi runs",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 AND river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in the usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000;",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities of the united states",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000;",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities of the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000;",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the population densities of each us state",
        "predicted_parse": "SELECT density FROM state;",
        "gold_parse": "SELECT density FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of states through which the mississippi river run",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of states through which the mississippi runs",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of the states through which the mississippi runs",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of states through which the mississippi river runs",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of the states through which the mississippi run",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of the states through which the mississippi river run",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of states through which the mississippi run",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of the states through which the mississippi river runs",
        "predicted_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT population FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of states which border texas",
        "predicted_parse": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "gold_parse": "SELECT t2.population FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of the major cities of wisconsin",
        "predicted_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "gold_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the populations of all the major cities in wisconsin",
        "predicted_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "gold_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the major cities in wisconsin",
        "predicted_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "gold_parse": "SELECT population FROM city WHERE population  >  150000 AND state_name  =  \"wisconsin\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what city has the most people",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what city in the united states has the highest population density",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populous city",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which us city has the highest population density",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest city in the usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "whats the largest city",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what city has the largest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest city in the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest city in usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest capital city in the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest capital city in the usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state capital in population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest capital",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populated capital in the usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what capital is the largest in the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what capital has the largest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is largest capital",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of states that have cities named durham",
        "predicted_parse": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\";",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.state_name  =  t1.state_name WHERE t1.city_name  =  \"durham\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the smallest state",
        "predicted_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state with the largest population density",
        "predicted_parse": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT DISTINCT capital FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state with the largest population",
        "predicted_parse": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state with the most inhabitants",
        "predicted_parse": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "gold_parse": "SELECT capital FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state with the longest river",
        "predicted_parse": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "gold_parse": "SELECT capital FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the combined area of all 50 states",
        "predicted_parse": "SELECT SUM ( area ) FROM state;",
        "gold_parse": "SELECT SUM ( area ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of all the states combined",
        "predicted_parse": "SELECT SUM ( area ) FROM state;",
        "gold_parse": "SELECT SUM ( area ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many square kilometers in the us",
        "predicted_parse": "SELECT SUM ( area ) FROM state;",
        "gold_parse": "SELECT SUM ( area ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the total area of the usa",
        "predicted_parse": "SELECT SUM ( area ) FROM state;",
        "gold_parse": "SELECT SUM ( area ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the density of the wyoming",
        "predicted_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "gold_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population density of wyoming",
        "predicted_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "gold_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the density of wyoming",
        "predicted_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "gold_parse": "SELECT density FROM state WHERE state_name  =  \"wyoming\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest mountain in the us",
        "predicted_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest mountain in us",
        "predicted_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the tallest mountain in america",
        "predicted_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the tallest mountain in the united states",
        "predicted_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the state with capital des moines",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the state with the capital des moines",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"des moines\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the usa",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point of the usa",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the country",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the us",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the united states",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point of the state with the smallest population density",
        "predicted_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
        "gold_parse": "SELECT highest_point FROM highlow WHERE state_name IN ( SELECT state_name FROM state WHERE density  =  ( SELECT MIN ( density ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city in smallest state through which the mississippi runs",
        "predicted_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
        "gold_parse": "SELECT city_name FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) AND area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) ) ORDER BY population DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city in the smallest state in the usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest city in the smallest state",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state bordering california",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state that borders california",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state that borders california is the largest",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the largest state",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the states that border tennessee",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river that flows through a state that borders tennessee",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river that runs through a state that borders tennessee",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" ) ) AND traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"tennessee\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the state with the most major cities",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river WHERE traverse  =  ( SELECT state_name FROM city WHERE population  >  150000 GROUP BY state_name ORDER BY COUNT ( city_name ) DESC LIMIT 1 ) ORDER BY LENGTH DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point in iowa",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point in iowa in meters",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point in the state of iowa",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the lowest point in iowa",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point of iowa",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the lowest spot in iowa",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name  =  \"iowa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point in usa",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point in the united states",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the lowest point in the us",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point of the us",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point of all states through which the mississippi river runs through",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which is the lowest point of the states that the mississippi runs through",
        "predicted_parse": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
        "gold_parse": "SELECT lowest_point FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ORDER BY lowest_elevation LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most dense state in the usa",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the highest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the greatest density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the highest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the greatest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the largest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the largest density in usa",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the largest population density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the largest density",
        "predicted_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populous state through which the mississippi runs",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state which the mississippi runs through has the largest population",
        "predicted_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population density of the largest state",
        "predicted_parse": "SELECT density FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT density FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the largest city in the state with the largest area",
        "predicted_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT population FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the smallest state",
        "predicted_parse": "SELECT population FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the state with the highest population density",
        "predicted_parse": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in the state with the largest population density",
        "predicted_parse": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "gold_parse": "SELECT population FROM state WHERE density  =  ( SELECT MAX ( density ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest city in the usa",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest city in the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what city has the least population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the city with the smallest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest state bordering texas",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest state that borders texas",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the smallest area that borders texas",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest state that the mississippi river runs through",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the smallest area",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which is the smallest state",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state is the smallest",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest state in the usa",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest state by area",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the smallest area",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the total length of all rivers in the usa",
        "predicted_parse": "SELECT SUM ( LENGTH ) FROM river;",
        "gold_parse": "SELECT SUM ( LENGTH ) FROM river;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what river flows through the most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which river goes through the most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which river runs through most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which river traverses most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what river traverses the most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which river runs through the most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what river runs through the most states",
        "predicted_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "gold_parse": "SELECT river_name FROM river GROUP BY ( river_name ) ORDER BY COUNT ( DISTINCT traverse ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers are in states that border alabama",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers run through states bordering alabama",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers flow through states that alabama borders",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"alabama\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state bordering oklahoma has the largest population",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which of the states bordering oklahoma has the largest population",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state that borders oklahoma has the highest population",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the most populated state bordering oklahoma",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "gold_parse": "SELECT state_name FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"oklahoma\" ) ORDER BY population DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state contains the highest point of those the colorado river traverses",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"colorado\" ) );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"colorado\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the largest capital",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state 's capital city is the largest",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the longest river",
        "predicted_parse": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM river );",
        "gold_parse": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( DISTINCT LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the smallest urban population",
        "predicted_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;",
        "gold_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border states that border colorado",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border states that the mississippi runs through",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states border states through which the mississippi traverses",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border states which the mississippi runs through",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border texas and have a major river",
        "predicted_parse": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
        "gold_parse": "SELECT state_name FROM border_info WHERE border  =  \"texas\" AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  >  750 );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border the most populous state",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the states that border the state with the greatest population",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border the state with the smallest area",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states border the state with the smallest area",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states contain at least one major rivers",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  >  750;",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  >  750;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where are mountains",
        "predicted_parse": "SELECT state_name FROM mountain;",
        "gold_parse": "SELECT state_name FROM mountain;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the highest mountain of the united states",
        "predicted_parse": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the highest peak in the country",
        "predicted_parse": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is the smallest city",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which is the density of the state that the largest river in the united states runs through",
        "predicted_parse": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "gold_parse": "SELECT density FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which is the highest peak not in alaska",
        "predicted_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE mountain_altitude  =  ( SELECT MAX ( mountain_altitude ) FROM mountain WHERE state_name != \"alaska\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers do not run through tennessee",
        "predicted_parse": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
        "gold_parse": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers do not run through tennessee",
        "predicted_parse": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
        "gold_parse": "SELECT river_name FROM river WHERE river_name NOT IN ( SELECT river_name FROM river WHERE traverse  =  \"tennessee\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers do not run through usa",
        "predicted_parse": "SELECT river_name FROM river WHERE country_name != \"usa\";",
        "gold_parse": "SELECT river_name FROM river WHERE country_name != \"usa\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers run through states that border the state with the capital atlanta",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers run through the states that border the state with the capital atlanta",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE capital  =  \"atlanta\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state capital has the smallest population",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( t1.population ) FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the highest elevation",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the highest point",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the highest elevation",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "in which state does the highest point in usa exist",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has highest elevation",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the highest elevation in the united states",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state that contains the highest point",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state contains the highest point in the us",
        "predicted_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the lowest elevation",
        "predicted_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the name of the state with the lowest point",
        "predicted_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the state with the lowest point",
        "predicted_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the lowest point that borders idaho",
        "predicted_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );",
        "gold_parse": "SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"idaho\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state has the smallest average urban population",
        "predicted_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;",
        "gold_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY AVG ( population ) LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state is mount whitney in",
        "predicted_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "in what state is mount whitney",
        "predicted_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is mount whitney",
        "predicted_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is mount whitney located",
        "predicted_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "gold_parse": "SELECT state_name FROM mountain WHERE mountain_name  =  \"whitney\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states have a river",
        "predicted_parse": "SELECT traverse FROM river;",
        "gold_parse": "SELECT traverse FROM river;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have rivers running through them",
        "predicted_parse": "SELECT traverse FROM river;",
        "gold_parse": "SELECT traverse FROM river;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states have a major city named austin",
        "predicted_parse": "SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;",
        "gold_parse": "SELECT state_name FROM city WHERE city_name  =  \"austin\" AND population  >  150000;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city in a state that borders california",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest city in states that border california",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"california\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers do not traverse the state with the capital albany",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse NOT IN ( SELECT state_name FROM state WHERE capital  =  \"albany\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the shortest river in texas",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river WHERE traverse  =  \"texas\" ) AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in the smallest state in the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the capital of the largest state through which the mississippi runs",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"mississippi\" ) );",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( t1.area ) FROM state AS t1 JOIN river AS t2 ON t1.state_name  =  t2.traverse WHERE t2.river_name  =  \"mississippi\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the shortest river in the usa",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the shortest river",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the shortest river in the us",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the shortest river in the united states",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which is the shortest river",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state that borders the state that borders texas",
        "predicted_parse": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
        "gold_parse": "SELECT capital FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest city of the smallest state in the us",
        "predicted_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  =  ( SELECT MIN ( population ) FROM city WHERE state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the largest state that borders texas",
        "predicted_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT population FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state is salem the capital of",
        "predicted_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states capital is salem",
        "predicted_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "salem is the capital of which state",
        "predicted_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the capital salem",
        "predicted_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "gold_parse": "SELECT state_name FROM state WHERE capital  =  \"salem\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers flow through the state with the largest population",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state that borders the state with the highest population",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) ) ) AND state_name IN ( SELECT state_name FROM border_info WHERE border IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are there in us",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river;",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name the 50 capitals in the usa",
        "predicted_parse": "SELECT DISTINCT capital FROM state;",
        "gold_parse": "SELECT DISTINCT capital FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states have a city named springfield",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states have a city called springfield",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states have cities named springfield",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states have cities or towns named springfield",
        "predicted_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "gold_parse": "SELECT COUNT ( state_name ) FROM city WHERE city_name  =  \"springfield\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state borders the state with the smallest population",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the lakes in states bordering texas",
        "predicted_parse": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT lake_name FROM lake WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many major cities are in texas",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many big cities are in texas",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many major cities are there in texas",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how high are the highest points of all the states",
        "predicted_parse": "SELECT highest_elevation FROM highlow;",
        "gold_parse": "SELECT highest_elevation FROM highlow;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states does the missouri run through",
        "predicted_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states does the missouri river flow through",
        "predicted_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states does the missouri river run through",
        "predicted_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE river_name  =  \"missouri\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the smallest state in the usa",
        "predicted_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT river_name FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) ) ) AND traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the average population per square km in pennsylvania",
        "predicted_parse": "SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\";",
        "gold_parse": "SELECT population / area FROM state WHERE state_name  =  \"pennsylvania\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border states that border states that border florida",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"florida\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border at least one other state",
        "predicted_parse": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
        "gold_parse": "SELECT COUNT ( DISTINCT state_name ) FROM border_info;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the height of the highest mountain in texas",
        "predicted_parse": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT MAX ( DISTINCT highest_elevation ) FROM highlow WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border colorado and border new mexico",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE border IN ( SELECT border FROM border_info WHERE state_name  =  \"new mexico\" ) AND state_name  =  \"colorado\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many major cities are in states bordering nebraska",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE population  >  150000 AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"nebraska\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the total population of the states that border texas",
        "predicted_parse": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "gold_parse": "SELECT SUM ( t2.population ) FROM state AS t2 JOIN border_info AS t1 ON t2.state_name  =  t1.border WHERE t1.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major lakes in united states",
        "predicted_parse": "SELECT lake_name FROM lake WHERE area  >  750;",
        "gold_parse": "SELECT lake_name FROM lake WHERE area  >  750;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "show me all the major lakes in the us",
        "predicted_parse": "SELECT lake_name FROM lake WHERE area  >  750;",
        "gold_parse": "SELECT lake_name FROM lake WHERE area  >  750;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "name all the lakes of us",
        "predicted_parse": "SELECT lake_name FROM lake;",
        "gold_parse": "SELECT lake_name FROM lake;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many major rivers cross ohio",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"ohio\";",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE LENGTH  >  750 AND traverse  =  \"ohio\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the shortest river",
        "predicted_parse": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "gold_parse": "SELECT DISTINCT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states are next to major rivers",
        "predicted_parse": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750;",
        "gold_parse": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  >  750;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the height of mount mckinley",
        "predicted_parse": "SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";",
        "gold_parse": "SELECT mountain_altitude FROM mountain WHERE mountain_name  =  \"mckinley\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states does the shortest river run through",
        "predicted_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the state with the smallest population",
        "predicted_parse": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "gold_parse": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which rivers run through the state with the lowest elevation in the usa",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers run through the state with the lowest point in the usa",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM highlow WHERE lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what mountains are in alaska",
        "predicted_parse": "SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\";",
        "gold_parse": "SELECT mountain_name FROM mountain WHERE state_name  =  \"alaska\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states have major rivers",
        "predicted_parse": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750;",
        "gold_parse": "SELECT COUNT ( traverse ) FROM river WHERE LENGTH  >  750;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the smallest state through which the longest river runs",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) ) ) AND state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state traversed by the rio grande river",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest of the state that the rio grande runs through",
        "predicted_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );",
        "gold_parse": "SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" ) ) AND state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"rio grande\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers run through the states bordering colorado",
        "predicted_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
        "gold_parse": "SELECT COUNT ( river_name ) FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name  =  \"colorado\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has no rivers",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT traverse FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the largest state",
        "predicted_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital city of the largest state in the us",
        "predicted_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities are in texas",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities does texas have",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of the states",
        "predicted_parse": "SELECT area FROM state;",
        "gold_parse": "SELECT area FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states in the us does the shortest river run through",
        "predicted_parse": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "gold_parse": "SELECT COUNT ( DISTINCT traverse ) FROM river WHERE LENGTH  =  ( SELECT MIN ( DISTINCT LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers flow through states that border the state with the largest population",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT border FROM border_info WHERE state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in the largest state",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of the smallest state",
        "predicted_parse": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT area FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states border the longest river in the usa",
        "predicted_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "gold_parse": "SELECT border FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE LENGTH  =  ( SELECT MAX ( LENGTH ) FROM river ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population density of the state with the smallest population",
        "predicted_parse": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "gold_parse": "SELECT density FROM state WHERE population  =  ( SELECT MIN ( population ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border the mississippi river",
        "predicted_parse": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "gold_parse": "SELECT COUNT ( DISTINCT border ) FROM border_info WHERE state_name IN ( SELECT traverse FROM river WHERE river_name  =  \"mississippi\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states have a capital that is the highest point in the state",
        "predicted_parse": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;",
        "gold_parse": "SELECT t1.state_name FROM state AS t1 JOIN highlow AS t2 ON t1.capital  =  t2.highest_point;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the capital of the smallest state",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MIN ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population of the capital of the largest state",
        "predicted_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT population FROM city WHERE city_name  =  ( SELECT capital FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the lowest point of the state with the largest area",
        "predicted_parse": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT t2.lowest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border states that border the state with the largest population",
        "predicted_parse": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "gold_parse": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name WHERE t2.state_name IN ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the size of the largest state in the usa",
        "predicted_parse": "SELECT MAX ( area ) FROM state;",
        "gold_parse": "SELECT MAX ( area ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the area of the largest state",
        "predicted_parse": "SELECT MAX ( area ) FROM state;",
        "gold_parse": "SELECT MAX ( area ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which capitals are not major cities",
        "predicted_parse": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;",
        "gold_parse": "SELECT t2.capital FROM state AS t2 JOIN city AS t1 ON t2.capital  =  t1.city_name WHERE t1.population  <=  150000;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "give me the cities in usa",
        "predicted_parse": "SELECT city_name FROM city;",
        "gold_parse": "SELECT city_name FROM city;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point of the state with the largest area",
        "predicted_parse": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT t2.highest_point FROM state AS t1 JOIN highlow AS t2 ON t1.state_name  =  t2.state_name WHERE t1.state_name IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "where is massachusetts",
        "predicted_parse": "SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";",
        "gold_parse": "SELECT country_name FROM state WHERE state_name  =  \"massachusetts\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what state has the largest urban population",
        "predicted_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
        "gold_parse": "SELECT state_name FROM city GROUP BY state_name ORDER BY SUM ( population ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major rivers in the us",
        "predicted_parse": "SELECT river_name FROM river;",
        "gold_parse": "SELECT river_name FROM river;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many cities named austin are there in the usa",
        "predicted_parse": "SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\";",
        "gold_parse": "SELECT COUNT ( city_name ) FROM city WHERE city_name  =  \"austin\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many people live in the smallest state bordering wyoming",
        "predicted_parse": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );",
        "gold_parse": "SELECT population FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state WHERE state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" ) ) AND state_name IN ( SELECT border FROM border_info WHERE state_name  =  \"wyoming\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the length of the colorado river in texas",
        "predicted_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";",
        "gold_parse": "SELECT LENGTH FROM river WHERE river_name  =  \"colorado\" AND traverse  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the population density in the state with capital austin",
        "predicted_parse": "SELECT density FROM state WHERE capital  =  \"austin\";",
        "gold_parse": "SELECT density FROM state WHERE capital  =  \"austin\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how long is the shortest river in the usa",
        "predicted_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "gold_parse": "SELECT LENGTH FROM river WHERE LENGTH  =  ( SELECT MIN ( LENGTH ) FROM river );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the elevation of death valley",
        "predicted_parse": "SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";",
        "gold_parse": "SELECT lowest_elevation FROM highlow WHERE lowest_point  =  \"death valley\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the average population of the us by state",
        "predicted_parse": "SELECT AVG ( population ) FROM state;",
        "gold_parse": "SELECT AVG ( population ) FROM state;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what rivers flow through the largest state",
        "predicted_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT river_name FROM river WHERE traverse IN ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what states border states that border states that border states that border texas",
        "predicted_parse": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";",
        "gold_parse": "SELECT t1.border FROM border_info AS t2 JOIN border_info AS t1 ON t2.border  =  t1.state_name JOIN border_info AS t3 ON t3.border  =  t2.state_name JOIN border_info AS t4 ON t4.border  =  t3.state_name WHERE t4.state_name  =  \"texas\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border on the state whose capital is boston",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE capital  =  \"boston\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what are the major cities in the states through which the major river in virginia runs",
        "predicted_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
        "gold_parse": "SELECT city_name FROM city WHERE population  >  150000 AND state_name IN ( SELECT traverse FROM river WHERE river_name IN ( SELECT river_name FROM river WHERE LENGTH  >  750 AND traverse  =  \"virginia\" ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which states does not border texas",
        "predicted_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "gold_parse": "SELECT state_name FROM state WHERE state_name NOT IN ( SELECT border FROM border_info WHERE state_name  =  \"texas\" );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many states border the largest state",
        "predicted_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "gold_parse": "SELECT COUNT ( border ) FROM border_info WHERE state_name  =  ( SELECT state_name FROM state WHERE area  =  ( SELECT MAX ( area ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "which state is the largest city in montana in",
        "predicted_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\";",
        "gold_parse": "SELECT state_name FROM city WHERE population  =  ( SELECT MAX ( population ) FROM city WHERE state_name  =  \"montana\" ) AND state_name  =  \"montana\";",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is capital of the state with the lowest point",
        "predicted_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
        "gold_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the biggest american city in a state with a river",
        "predicted_parse": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name );",
        "gold_parse": "SELECT DISTINCT t1.city_name FROM city AS t1 JOIN river AS t2 ON t2.traverse  =  t1.state_name WHERE t1.population  =  ( SELECT MAX ( t1.population ) FROM river AS t2 JOIN city AS t1 ON t2.traverse  =  t1.state_name );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are in the state with the largest population",
        "predicted_parse": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "gold_parse": "SELECT COUNT ( t2.river_name ) FROM river AS t2 JOIN state AS t1 ON t1.state_name  =  t2.traverse WHERE t1.state_name  =  ( SELECT state_name FROM state WHERE population  =  ( SELECT MAX ( population ) FROM state ) );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the largest state that borders the state with the lowest point in the usa",
        "predicted_parse": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
        "gold_parse": "SELECT t1.state_name FROM highlow AS t3 JOIN border_info AS t1 ON t3.state_name  =  t1.border JOIN state AS t2 ON t2.state_name  =  t1.border WHERE t3.lowest_elevation  =  ( SELECT MIN ( lowest_elevation ) FROM highlow ) ORDER BY t2.area DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state with the highest point",
        "predicted_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the capital of the state with the highest elevation",
        "predicted_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT t1.capital FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the highest point in the smallest state",
        "predicted_parse": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );",
        "gold_parse": "SELECT t2.highest_point FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MIN ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how many rivers are in the state with the highest point.",
        "predicted_parse": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "gold_parse": "SELECT COUNT ( t1.river_name ) FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "how high is the highest point in the largest state",
        "predicted_parse": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
        "gold_parse": "SELECT t2.highest_elevation FROM highlow AS t2 JOIN state AS t1 ON t1.state_name  =  t2.state_name WHERE t1.area  =  ( SELECT MAX ( area ) FROM state );",
        "correctness": 1
    },
    {
        "db_id": "geo",
        "question": "what is the longest river in the state with the highest point",
        "predicted_parse": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
        "gold_parse": "SELECT t1.river_name FROM highlow AS t2 JOIN river AS t1 ON t1.traverse  =  t2.state_name WHERE t2.highest_elevation  =  ( SELECT MAX ( highest_elevation ) FROM highlow ) ORDER BY t1.length DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers that are coauthored by Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers written by Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what are the papers that have Peter Mertens and Dina Barbian as co-authors",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers have Peter Mertens and Dina Barbian written ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what paper did Peter Mertens and Dina Barbian write together ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Has Peter Mertens and Dina Barbian written a paper together ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers by Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by authors Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were written by authors Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers written by authors Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When did Peter Mertens and Dina Barbian collaborate ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what are the collaborations of Peter Mertens and Dina Barbian ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Have Peter Mertens and Dina Barbian written a paper together ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Peter Mertens and Dina Barbian as co-authors",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Does Peter Mertens ever collaborated with Dina Barbian ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which papers have Peter Mertens and Dina Barbian as co-authors ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers coauthored by Peter Mertens and Dina Barbian",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers have been written by Peter Mertens and Dina Barbian ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers have been written by both Peter Mertens and Dina Barbian ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers have been written by Peter Mertens and Dina Barbian .",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Peter Mertens\" AND t1.authorname  =  \"Dina Barbian\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who has written the most syntactic parsing papers ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who is the most published author in syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who has the most publications in syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who has written the most papers on syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List prominent scholars in syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who wrote the most papers on syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who are the authors with the most published papers in syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "top syntactic parsing author",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "top author in syntactic parsing",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published the most in syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published the most papers in syntactic parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"syntactic parsing\" GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many citation noah a smith has ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "noah a smith citation count",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many citations does noah a smith have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many citations does noah a smith have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "number of citations of noah a smith",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many citations does noah a smith have",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many times was noah a smith cited ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many citations does noah a smith has ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"noah a smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "chi papers",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers at chi",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers in chi",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "chi",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers about chi",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Show me chi papers .",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers did chi publish ?",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "list papers published in chi",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers on chi",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Has mirella lapata written any papers in 2016 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t2.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mirella lapata\" AND t3.year  =  2016 GROUP BY t2.authorid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers has sharon goldwater written ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers has written by sharon goldwater ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by sharon goldwater",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what did sharon goldwater write ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers where sharon goldwater is an author",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers authored by sharon goldwater",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "sharon goldwater papers",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers by sharon goldwater",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers written by sharon goldwater",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which papers has sharon goldwater written ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers written by sharon goldwater",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What has sharon goldwater published ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Does sharon goldwater have any papers published ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "sharon goldwater 's papers",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "show me papers by sharon goldwater .",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers are authored by sharon goldwater ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by sharon goldwater ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"sharon goldwater\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What was oren etzioni 's latest paper ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Latest paper by oren etzioni",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the latest paper by oren etzioni ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is oren etzioni 's latest paper ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the latest papers by oren etzioni ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most recent papers by oren etzioni",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"oren etzioni\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "are there any monte carlo simulation papers since 2011 ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "monte carlo simulation papers later than 2011",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "monte carlo simulation later than 2011",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "monte carlo simulation papers published after 2011",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "monte carlo simulation papers since 2011",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"monte carlo simulation\" AND t3.year  >  2011;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "does ras bodik publish a lot ?",
        "predicted_parse": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";",
        "gold_parse": "SELECT COUNT ( t3.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ras bodik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers did David M. Blei publish at AISTATS ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does David M. Blei have in AISTATS ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers has David M. Blei published in AISTATS ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers does David M. Blei have at AISTATS",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers does David M. Blei have in AISTATS ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many David M. Blei papers are in AISTATS ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers David M. Blei has in AISTATS ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does David M. Blei have in AISTATS",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"David M. Blei\" AND t4.venuename  =  \"AISTATS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List all academic papers on machine networks for one shot learning",
        "predicted_parse": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
        "gold_parse": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "machine networks for one shot learning",
        "predicted_parse": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
        "gold_parse": "SELECT DISTINCT paperid FROM paper WHERE title  =  \"machine networks for one shot learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which EMNLP 2010 papers have the most citations ?",
        "predicted_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which paper from EMNLP 2010 was cited most ?",
        "predicted_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most cited EMNLP 2010 papers",
        "predicted_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which EMNLP 2010 papers have been cited the most ?",
        "predicted_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citedpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2010 AND t2.venuename  =  \"EMNLP\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were published at CVPR in 2016 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were published at CVPR '16 about Class consistent multi-modal fusion with binary features applied to RGB-D Object Dataset ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"RGB-D Object Dataset\" AND t3.title  =  \"Class consistent multi-modal fusion with binary features\" AND t3.year  =  2016 AND t4.venuename  =  \"CVPR\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers are in deep learning ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers are about deep learning ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers about deep learning ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers are related to deep learning ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers has Christopher D. Manning written ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does Christopher D. Manning have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers has Christopher D. Manning ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers has Christopher D. Manning published ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers has Christopher D. Manning written ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Has Christopher D. Manning published any papers ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers has Christopher D. Manning published ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers does Christopher D. Manning have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many paper does Christopher D. Manning have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many publications does Christopher D. Manning have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does Christopher D. Manning have",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "number of papers written by Christopher D. Manning",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christopher D. Manning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what kind of papers does Luke Zettlemoyer publish",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Keyphrases used by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What keywords are in papers by Luke Zettlemoyer ?",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keywords used by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what keywords are used by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases used by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "give me the keywords used by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What topic does Luke Zettlemoyer write about ?",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what topics does Luke Zettlemoyer publish in",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keywords in the papers written by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases used by Luke Zettlemoyer .",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "topics used by Luke Zettlemoyer",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Luke Zettlemoyer\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What conference does Daniella Coelho publish in ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "conferences that Daniella Coelho has published in",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "In which conferences does Daniella Coelho typically publish ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "in what conferences does Daniella Coelho publish ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What conferences does Daniella Coelho publish in ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "At which conferences does Daniella Coelho publish ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What conferences does Daniella Coelho submit to ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Daniella Coelho\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers are there ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT paperid ) FROM paper;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers by Ed Desmond contain the keyphrases Semantic Parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does Ed Desmond have in Semantic Parsing area ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many Semantic Parsing papers has Ed Desmond written ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many paper has Ed Desmond written about Semantic Parsing ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperkeyphrase AS t1 JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t1.paperid JOIN author AS t2 ON t3.authorid  =  t2.authorid WHERE t2.authorname  =  \"Ed Desmond\" AND t4.keyphrasename  =  \"Semantic Parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What conferences did li dong submit to in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Where did li dong publish in 2016",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What conferences did li dong publish in in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Where did li dong publish in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"li dong\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "acl papers in 2012 on Parsing",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were published in acl in 2012 about Parsing ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers on Parsing appeared at acl last year",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Parsing papers from acl 2012",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers about Parsing in acl 2012",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "acl papers in 2012 in Parsing",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "acl papers in 2012 about Parsing",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were published at acl in 2012 were about Parsing ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers on Parsing appeared at acl in 2012",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many Parsing papers did acl 2012 have ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published Parsing papers at acl 2012",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which papers in acl 2012 had Parsing in them ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what were some Parsing based papers in acl 2012 ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Parsing\" AND t3.year  =  2012 AND t4.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List the popular publications on dependent types",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which paper should I read about dependent types ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "top dependent types papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"dependent types\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List papers that has a keyword Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Question Answering research papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers on Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers related to Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers about Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers about Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers published in the area of Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Question Answering experiments",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Show me the papers on Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers that used Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers that mention Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Question Answering papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Show me Question Answering papers .",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Question Answering publications",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Fetch me some papers on Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers on Question Answering experiments",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers talk about Question Answering ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the paper about Question Answering ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which papers are about about Question Answering ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "list papers that used Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers for Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List papers that has keyword Question Answering",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers with Question Answering in keyphrases",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Question Answering\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases used by Luke S Zettlemoyer for each year",
        "predicted_parse": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;",
        "gold_parse": "SELECT DISTINCT t2.keyphraseid  ,  t3.year FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year  ,  t2.keyphraseid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "recent research interests of sanjeev arora",
        "predicted_parse": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "recent papers by sanjeev arora",
        "predicted_parse": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "recent papers written by sanjeev arora",
        "predicted_parse": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t1.keyphrasename  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"sanjeev arora\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "list papers published by balakrishnan prabhakaran",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"balakrishnan prabhakaran\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "citation count of zachary tatlock 's papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"zachary tatlock\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "subhasis chaudhuri",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "list papers by subhasis chaudhuri",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List of papers by subhasis chaudhuri",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "conference papers of subhasis chaudhuri",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"subhasis chaudhuri\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many parsing papers in ACL 2014",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many parsing papers appeared in the proceeeding of ACL 2014 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many parsing papers were published at ACL 2014 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"parsing\" AND t3.year  =  2014 AND t4.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "brian curless convolution paper",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "convolution by brian curless",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by brian curless about convolution",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "brian curless 's paper about convolution",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the papers of brian curless in convolution ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers brian curless wrote about convolution",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "brian curless 's papers on convolution",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the paper about convolution from brian curless ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by brian curless in convolution topic",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "I want the papers on keyphrase0 by brian curless",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "convolution papers by brian curless",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers has brian curless written on convolution ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers has brian curless written about convolution ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "convolution paper by brian curless",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Does brian curless do convolution ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "gold_parse": "SELECT DISTINCT t1.authorid  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"brian curless\" AND t5.keyphrasename  =  \"convolution\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers has Liwen Xiong written in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by Liwen Xiong in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What did Liwen Xiong published in 2015 ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers written by Liwen Xiong in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the papers of Liwen Xiong in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by Liwen Xiong from 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers published in 2015 by Liwen Xiong",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what has Liwen Xiong done in the past year",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers did Liwen Xiong publish last year ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers published in 2015 by Liwen Xiong",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Liwen Xiong 's papers in 2015 ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Liwen Xiong 's papers in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Liwen Xiong publication 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers authored by Liwen Xiong in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers from Liwen Xiong in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers are published by Liwen Xiong in 2015",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Liwen Xiong\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What TAIL paper published in NIPS ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List the papers on TAIL that were published in NIPS",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what are the papers in NIPS about TAIL ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers about TAIL in NIPS",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers at NIPS related to TAIL",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers about TAIL published at NIPS",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "TAIL papers in NIPS",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers on TAIL NIPS",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "TAIL papers used in NIPS",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"TAIL\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many co-authors has Mark Steedman had ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t1.authorid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname != \"Mark Steedman\" AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Mark Steedman\" );",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases used by Christof Dallermassl in 2000",
        "predicted_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "gold_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Keyphrases used by Christof Dallermassl in 2000",
        "predicted_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "gold_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases Christof Dallermassl used in papers written last year",
        "predicted_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "gold_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are keyphrases by Christof Dallermassl in 2000 ?",
        "predicted_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "gold_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Christof Dallermassl\" AND t3.year  =  2000;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what author is most cited ?",
        "predicted_parse": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t1.authorname  ,  COUNT ( t3.citingpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.authorname ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "journal articles by mohammad rastegari",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Journal Papers by mohammad rastegari",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"mohammad rastegari\" AND t3.journalid  >=  0;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "best paper in TACL 2014 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What was the best paper at TACL 2014 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.citingpaperid )  ,  t1.paperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2014 AND t2.venuename  =  \"TACL\" GROUP BY t1.paperid ORDER BY COUNT ( DISTINCT t3.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published at acl 2016 ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "acl 2016 authors",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "authors of acl 2016 papers",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List of authors acl 2016",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "author published acl 2016",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who had papers at acl 2016 ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List of authors in acl 2016",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2016 AND t3.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were written on Multiuser Receiver in the Decision Feedback this year ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Multiuser Receiver in the Decision Feedback\" AND t3.year  =  2016 GROUP BY t3.paperid HAVING COUNT ( DISTINCT t1.keyphrasename )  >  1;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers run experiments on ImageNet ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers used ImageNet dataset ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers written on ImageNet ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers are based on ImageNet",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers use ImageNet ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname LIKE \"ImageNet\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers did Mirella Lapata cite ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers does Mirella Lapata cite",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers has Mirella Lapata cited ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.citedpaperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t3 ON t2.paperid  =  t3.citingpaperid WHERE t1.authorname  =  \"Mirella Lapata\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When does Michael Stonebraker publish the first VLDB paper ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;",
        "gold_parse": "SELECT DISTINCT t3.year FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t4.venuename  =  \"VLDB\" ORDER BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "semantic parsing dataset",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "data sets for semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "list datasets for semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets for semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Datasets with semantic parsing information",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets used by semantic parsing papers",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets in semantic parsing papers",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "semantic parsing datasets",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets in papers about semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets used for semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "large-scale datasets used in semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets with semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets used for evaluating semantic parsing",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t1.keyphraseid  =  t4.keyphraseid WHERE t4.keyphrasename  =  \"semantic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "where does Peter Mertens publish ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "gold_parse": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "in what venues does Peter Mertens publish ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "gold_parse": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Where does Peter Mertens publish ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "gold_parse": "SELECT DISTINCT t3.journalid  ,  t4.venueid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Peter Mertens\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers appeared at nature communications last year",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were at nature communications 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers accepted in nature communications 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were published in nature communications in 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers on nature communications in 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers in nature communications 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were accepted at nature communications 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers are presented in nature communications 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers published in nature communications in 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers published in nature communications 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were published in nature communications 2015 conference ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers was published in nature communications in 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"nature communications\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what was the first deep learning paper ?",
        "predicted_parse": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "gold_parse": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what year was the first deep learning paper published ?",
        "predicted_parse": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "gold_parse": "SELECT DISTINCT t2.datasetid  ,  t4.year FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paperkeyphrase AS t1 ON t1.paperid  =  t3.paperid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t5.keyphrasename  =  \"deep learning\" ORDER BY t4.year ASC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets mentioned at ACL",
        "predicted_parse": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what datasets do papers at ACL use most ?",
        "predicted_parse": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t1.datasetid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "the papers on semantic parsing by li dong at acl in 2016",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN paper AS t2 ON t2.paperid  =  t5.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"li dong\" AND t3.keyphrasename  =  \"semantic parsing\" AND t2.year  =  2016 AND t6.venuename  =  \"acl\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were written on convolutional neural networks in the past year ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were published on convolutional neural networks in 2016 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were written on convolutional neural networks in 2016 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were written on the convolutional neural networks this year ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers on convolutional neural networks have been published in the past year ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"convolutional neural networks\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were written on question answering this year ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which year had the most NIPS papers ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what year had the most NIPS papers ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what year had the most number of NIPS papers ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "when were most NIPS papers published ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid )  ,  t1.year FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"NIPS\" GROUP BY t1.year ORDER BY COUNT ( t1.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who writes papers with Noah A Smith ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who is a coauthor with Noah A Smith ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who are Noah A Smith 's co-authors",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who has coauthored with Noah A Smith ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "co-authors of Noah A Smith",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "author who wrote papers with Noah A Smith",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "authors who collaborated with Noah A Smith",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who does Noah A Smith author with ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who are Noah A Smith 's coauthors",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who are all the co-authors of Noah A Smith ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who does Noah A Smith work with ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who does Noah A Smith collaborate with ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who are Noah A Smith 's coauthors ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "coauthors of Noah A Smith",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Noah A Smith\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what datasets did jitendra malik use ?",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what datasets are used in papers by jitendra malik",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what datasets did jitendra malik use in his papers ?",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what datasets were used by jitendra malik ?",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "datasets used in papers written by jitendra malik ?",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Datasets by jitendra malik",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What datasets have jitendra malik used",
        "predicted_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "gold_parse": "SELECT DISTINCT t2.datasetid FROM paper AS t3 JOIN paperdataset AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"jitendra malik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "recent deep learning papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "new deep learning papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the latest publications on deep learning ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Most recent deep learning conference ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Show me some recent papers on deep learning ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are some recent papers written in deep learning ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the most recent paper of deep learning ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are recent papers on deep learning ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Current research on deep learning",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "latest deep learning papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "newest deep learning papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What years did Pedro Domingos publish papers in ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;",
        "gold_parse": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "In what years did Pedro Domingos publish a paper ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;",
        "gold_parse": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Pedro Domingos\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "jamie callan 's publications by year",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" ORDER BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does jamie callan publish each year ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "number of papers by year from jamie callan",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers jamie callan published each year ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"jamie callan\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who does oren etzioni cite",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers does oren etzioni cite",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers citing Daniel Jurafsky",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers cite Daniel Jurafsky ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which papers cite Daniel Jurafsky ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "citations for Daniel Jurafsky",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid JOIN writes AS t2 ON t2.paperid  =  t4.citedpaperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Daniel Jurafsky\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "journal papers for instance segmentation",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"instance segmentation\" AND t3.journalid  >=  0;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who has the most papers in semantic parsing after 2005 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who has written the most papers on semantic parsing since 2005 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published the most in semantic parsing after 2005 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"semantic parsing\" AND t4.year  >  2005 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many citations does Dan Makumbi 's Genetic Identity paper have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t3 ON t2.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN cite AS t5 ON t4.paperid  =  t5.citedpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Dan Makumbi\" AND t3.keyphrasename  =  \"Genetic Identity\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "character recognition papers earlier than 2010",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers before 2010 about character recognition",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "character recognition papers from before 2010",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers about character recognition from before 2010",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "character recognition papers before 2010",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"character recognition\" AND t3.year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what topics does oren etzioni write about most ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.keyphraseid )  ,  t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"oren etzioni\" GROUP BY t2.keyphraseid ORDER BY COUNT ( t2.keyphraseid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers related to deep learning cited the dataset ImageNet ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid ) FROM paperdataset AS t3 JOIN dataset AS t2 ON t3.datasetid  =  t2.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN paperkeyphrase AS t1 ON t4.paperid  =  t1.paperid JOIN keyphrase AS t5 ON t1.keyphraseid  =  t5.keyphraseid WHERE t2.datasetname  =  \"ImageNet\" AND t5.keyphrasename  =  \"deep learning\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most cited papers on parsing",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "parsing top papers",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List top papers for parsing",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "parsing papers that have the most citations",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the paper about parsing of the most citation ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Paper on parsing with most citations",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "parsing papers with most citations",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most cited parsing papers",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what are the parsing papers that have the most citations ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "highly cited parsing papers",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most cited papers for parsing",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Most cited papers on parsing",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"parsing\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What paper did Michael Armstrong wrote in the 90s ?",
        "predicted_parse": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";",
        "gold_parse": "SELECT DISTINCT t3.year  ,  t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Michael Armstrong\" AND t3.year LIKE \"199\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the most cited paper by ohad shamir ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the highest cited paper by ohad shamir ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the most cited paper of ohad shamir ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is ohad shamir 's highest cited paper ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What paper by ohad shamir has the most citation ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what is the most cited paper of ohad shamir ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what is ohad shamir 's most cited paper ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citedpaperid ) FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ohad shamir\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citedpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers did michael i. jordan publish in 2016 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does michael i. jordan have in 2016 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers did michael i. jordan publish in 2016",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"michael i. jordan\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "count of ACL papers by author",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many ACL papers by author",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "number of ACL papers by author",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\" GROUP BY t1.authorid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who wrote the most papers for CVPR 2007",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published papers in CVPR 2007",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who wrote the most CVPR papers in 2007",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most published author at CVPR 2007",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published the most papers in CVPR 2007",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who published the most papers in 2007 at CVPR ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2007 AND t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers in ACL 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "number of papers published in ACL 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers from 2014",
        "predicted_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "gold_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "2014 papers",
        "predicted_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "gold_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  2014;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers does Richard Ladner have in chi ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what paper has Richard Ladner published in chi journal ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what paper has Richard Ladner published in chi ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers by Richard Ladner published at chi",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Does Richard Ladner publish in chi ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What has Richard Ladner published at chi ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers has Richard Ladner written at chi ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which paper did Richard Ladner present at chi ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Richard Ladner\" AND t4.venuename  =  \"chi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the paper with the most citation about Artificial Intelligence ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Fetch me the most cited publications for Artificial Intelligence",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid  ,  COUNT ( t4.citingpaperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"Artificial Intelligence\" GROUP BY t4.citedpaperid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "topics at ACL 2014",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2014 AND t4.venuename  =  \"ACL\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most common topics at NIPS 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "most popular topics at NIPS 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "hot topics at NIPS 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "popular topics at NIPS 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which topics were most popular at NIPS 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "topics popular at NIPS 2015",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t3.year  =  2015 AND t4.venuename  =  \"NIPS\" GROUP BY t1.keyphraseid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers related to deep reinforcement learning in nips ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep reinforcement learning\" AND t4.venuename  =  \"nips\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers on WebKB",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which papers used WebKB ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers about WebKB",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List the papers that used WebKB dataset",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers using WebKB",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers that use WebKB",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "WebKB papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers that used WebKB",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers that use the WebKB dataset",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"WebKB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "conferences in 2013",
        "predicted_parse": "SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;",
        "gold_parse": "SELECT DISTINCT venueid FROM paper WHERE YEAR  =  2013;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how is the most cited author in CVPR ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who is the most cited author at CVPR ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid JOIN cite AS t4 ON t1.paperid  =  t4.citedpaperid WHERE t3.venuename  =  \"CVPR\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what are some syntactic parsing papers that chris dyer did not write ?",
        "predicted_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "gold_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "are there any syntactic parsing papers not written by chris dyer ?",
        "predicted_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "gold_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what are syntactic parsing papers not written by chris dyer",
        "predicted_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "gold_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "syntactic parsing papers not written by chris dyer",
        "predicted_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "gold_parse": "SELECT DISTINCT t1.authorname  ,  t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname != \"chris dyer\" AND t5.keyphrasename  =  \"syntactic parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers published in the last year",
        "predicted_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );",
        "gold_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR  =  ( SELECT MAX ( YEAR ) FROM paper );",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When was benjamin mako hill 's first publication ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When was benjamin mako hill 's first paper written ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"benjamin mako hill\" GROUP BY t3.year ORDER BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When did ameet soni publish ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"ameet soni\" GROUP BY t3.year ORDER BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who cites Daniel A Reed the most",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who cites Daniel A Reed most ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citingpaperid )  ,  t3.authorid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN writes AS t3 ON t3.paperid  =  t4.citingpaperid WHERE t1.authorname  =  \"Daniel A Reed\" GROUP BY t3.authorid ORDER BY COUNT ( t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers are in sigir ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers does sigir have ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers are published in sigir ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "number of papers in sigir conference",
        "predicted_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t1.paperid ) FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigir\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers have fewer than 5 citations by ACL papers ?",
        "predicted_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "gold_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "ACL papers with less than 5 citations",
        "predicted_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "gold_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what ACL papers have less than 5 citations ?",
        "predicted_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "gold_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers have fewer than 5 citations by ACL papers",
        "predicted_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "gold_parse": "SELECT DISTINCT t3.citingpaperid FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  <  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the 5 most recent papers of Mirella Lapata ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;",
        "gold_parse": "SELECT DISTINCT t3.paperid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mirella Lapata\" ORDER BY t3.year DESC LIMIT 5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What were the papers published at pldi 2015 ?",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers from pldi 2015 conference",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers published at pldi 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the papers from pldi 2015 ?",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Papers from pldi 2015 ?",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which papers were accepted in pldi 2015 ?",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were published during the conference pldi 2015 ?",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers in pldi 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List of papers in pldi 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "pldi papers in 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers are published in pldi 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers from pldi 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "pldi papers 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "pldi 2015 conference",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "pldi best paper award 2015",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "pldi 2015 list of papers",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2015 AND t2.venuename  =  \"pldi\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List today 's journals",
        "predicted_parse": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "gold_parse": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List the journals published in March , 2011",
        "predicted_parse": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "gold_parse": "SELECT DISTINCT journalid FROM paper WHERE YEAR  =  2011 GROUP BY journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "ACL papers in 2016 with neural attention in the title",
        "predicted_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t1.paperid FROM venue AS t2 JOIN paper AS t1 ON t2.venueid  =  t1.venueid WHERE t1.title LIKE \"neural attention\" AND t1.year  =  2016 AND t2.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who writes a lot of papers in Machine Learning ?",
        "predicted_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename  =  \"Machine Learning\" GROUP BY t1.authorname ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who wrote sensor fusion ?",
        "predicted_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "gold_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Authors of papers on sensor fusion",
        "predicted_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "gold_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "people working on sensor fusion",
        "predicted_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "gold_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who publishes in sensor fusion ?",
        "predicted_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "gold_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who publishes papers about sensor fusion",
        "predicted_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "gold_parse": "SELECT DISTINCT t1.authorname FROM paperkeyphrase AS t2 JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid JOIN writes AS t3 ON t3.paperid  =  t2.paperid JOIN author AS t1 ON t3.authorid  =  t1.authorid WHERE t4.keyphrasename LIKE \"sensor fusion\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many papers by dan klein are cited by michael i. jordan",
        "predicted_parse": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many of dan klein 's papers cite michael i. jordan",
        "predicted_parse": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t5.citingpaperid ) FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN cite AS t5 ON t3.paperid  =  t5.citedpaperid JOIN writes AS t4 ON t4.paperid  =  t5.citingpaperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"michael i. jordan\" AND t1.authorname  =  \"dan klein\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who else was on the paper with Ameet Soni and Ras Bodik ?",
        "predicted_parse": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";",
        "gold_parse": "SELECT DISTINCT t5.authorid FROM writes AS t3 JOIN author AS t2 ON t3.authorid  =  t2.authorid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t2.authorname  =  \"Ameet Soni\" AND t1.authorname  =  \"Ras Bodik\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "2014 papers using ImageNet",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What journals are Takashi Matsumoto 's articles published in ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "gold_parse": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What journals has Takashi Matsumoto published in ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "gold_parse": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "In what scholarly journals does Takashi Matsumoto publish ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "gold_parse": "SELECT DISTINCT t3.journalid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Takashi Matsumoto\" GROUP BY t3.journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What authors wrote papers about Bacterial Wilt in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who wrote on the topic of Bacterial Wilt in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid JOIN author AS t5 ON t3.authorid  =  t5.authorid WHERE t2.keyphrasename  =  \"Bacterial Wilt\" AND t4.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When did Luke S Zettlemoyer publish ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;",
        "gold_parse": "SELECT DISTINCT t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Luke S Zettlemoyer\" ORDER BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "question answering 2016 papers",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What papers were written on question answering in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  =  2016;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what keyphrases get most citations ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.citingpaperid )  ,  t1.keyphrasename FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t3 ON t2.paperid  =  t3.citedpaperid GROUP BY t1.keyphrasename ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Find journals about Temporal Data .",
        "predicted_parse": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;",
        "gold_parse": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "List the journals related to Temporal Data",
        "predicted_parse": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;",
        "gold_parse": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Temporal Data\" GROUP BY t3.journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which ACL 2014 papers about Parsing used Jeopardy! Questions ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Parsing papers using Jeopardy! Questions published at ACL 2014",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Parsing papers from ACL 2014 using Jeopardy! Questions",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Parsing papers from ACL 2014 that used Jeopardy! Questions",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers about Parsing that used Jeopardy! Questions and were published at ACL 2014",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t5 ON t3.datasetid  =  t5.datasetid JOIN paperkeyphrase AS t4 ON t4.paperid  =  t3.paperid JOIN paper AS t2 ON t2.paperid  =  t3.paperid JOIN venue AS t6 ON t6.venueid  =  t2.venueid JOIN keyphrase AS t1 ON t4.keyphraseid  =  t1.keyphraseid WHERE t5.datasetname  =  \"Jeopardy! Questions\" AND t1.keyphrasename  =  \"Parsing\" AND t2.year  =  2014 AND t6.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "in what journals does linda shapiro publish ?",
        "predicted_parse": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
        "gold_parse": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which journals did linda shapiro submit papers to ?",
        "predicted_parse": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
        "gold_parse": "SELECT DISTINCT t2.journalid FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"linda shapiro\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "NIPS authors",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who are the authors at NIPS ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who authored papers at NIPS ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who publishes in NIPS ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who has papers at NIPS ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which venue publishes the most papers about deep learning",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t4.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t4.venueid ORDER BY COUNT ( t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many publications were added to the Cell journal this year ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many articles were published in the Cell journal in 2015 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paper AS t3 JOIN journal AS t2 ON t3.journalid  =  t2.journalid JOIN paperkeyphrase AS t1 ON t3.paperid  =  t1.paperid WHERE t2.journalname  =  \"Cell\" AND t3.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are all the publication titles by Donald E Knuth ?",
        "predicted_parse": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";",
        "gold_parse": "SELECT DISTINCT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers published in eccv 2016 by ali farhadi",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Does ali farhadi have a paper in eccv in 2016 ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers of ali farhadi in eccv 2016",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"ali farhadi\" AND t3.year  =  2016 AND t4.venuename  =  \"eccv\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are some papers dealing with Semantic Data in YAGO ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paperkeyphrase AS t2 ON t2.paperid  =  t3.paperid JOIN keyphrase AS t4 ON t2.keyphraseid  =  t4.keyphraseid WHERE t1.datasetname  =  \"YAGO\" AND t4.keyphrasename  =  \"Semantic Data\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who has published more papers in chi ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who has written the most papers at chi ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how is the most prolific author in chi ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who published the most at chi",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid )  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"chi\" GROUP BY t1.authorid ORDER BY COUNT ( DISTINCT t2.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "In what year did Ye Cao publish the most papers",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What year did Ye Cao publish the most papers",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname LIKE \"Ye Cao\" GROUP BY t3.year ORDER BY COUNT ( DISTINCT t3.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "conferences that mention ImageNet",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.datasetname  =  \"ImageNet\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "first deep learning paper",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What was the first paper on deep learning written ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When was deep learning proposed ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "when was the first deep learning paper published ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"deep learning\" GROUP BY t3.year ORDER BY t3.year ASC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers were published in Academic radiology in 1995 ?",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paper AS t2 JOIN journal AS t1 ON t2.journalid  =  t1.journalid WHERE t1.journalname  =  \"Academic radiology\" AND t2.year  =  1995;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what papers do parsing papers typically cite ?",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers typically cited by parsing papers",
        "predicted_parse": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
        "gold_parse": "SELECT DISTINCT t4.citedpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citingpaperid WHERE t1.keyphrasename  =  \"parsing\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "venue for Trophic Cascade",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "conferences for Trophic Cascade",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what conferences are related to Trophic Cascade",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What was the conference name that approved Trophic Cascade ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "gold_parse": "SELECT DISTINCT t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers were written on question answering in 2011 through 2016 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"question answering\" AND t3.year  >=  2011;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What are the best NLP conferences ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t3.venueid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid WHERE t1.keyphrasename  =  \"NLP\" GROUP BY t3.venueid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "ACL papers by author",
        "predicted_parse": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";",
        "gold_parse": "SELECT DISTINCT t2.paperid  ,  t1.authorid FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t3.venuename  =  \"ACL\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers with more than 10 citations",
        "predicted_parse": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;",
        "gold_parse": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Which authors published papers in 2015 ?",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "who wrote papers in 2015",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what keyphrase does Brian DeRenzi write about that gets most citations ?",
        "predicted_parse": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "gold_parse": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "main topics of work by Brian DeRenzi",
        "predicted_parse": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "gold_parse": "SELECT DISTINCT t1.keyphrasename  ,  SUM ( t3.numcitedby ) FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t5 ON t4.authorid  =  t5.authorid WHERE t5.authorname  =  \"Brian DeRenzi\" GROUP BY t1.keyphrasename ORDER BY SUM ( t3.numcitedby ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "authors with at least 5 papers",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid )  ,  t1.authorid FROM writes AS t1 JOIN paper AS t2 ON t1.paperid  =  t2.paperid GROUP BY t1.authorid HAVING COUNT ( t2.paperid )  >=  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers that were not published in the last year",
        "predicted_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
        "gold_parse": "SELECT DISTINCT paperid FROM paper WHERE YEAR != 2015;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When was Michael Stonebraker GIS Database published ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When did Michael Stonebraker publish his GIS Database paper ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When does Michael Stonebraker publish the GIS Database paper ?",
        "predicted_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "gold_parse": "SELECT DISTINCT t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN writes AS t4 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname  =  \"Michael Stonebraker\" AND t5.keyphrasename  =  \"GIS Database\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "In 2010 what journal published an article about Trophic Cascade ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;",
        "gold_parse": "SELECT DISTINCT t3.journalid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"Trophic Cascade\" AND t3.year  =  2010 GROUP BY t3.journalid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the most popular paper this year in CVPR ?",
        "predicted_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2016 AND t2.venuename  =  \"CVPR\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many citations does luke zettlemoyer have per year",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.citedpaperid )  ,  t3.year FROM paper AS t3 JOIN cite AS t4 ON t3.paperid  =  t4.citedpaperid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"luke zettlemoyer\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "authors working on ImageNet",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperdataset AS t3 JOIN dataset AS t1 ON t3.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t3.paperid JOIN writes AS t2 ON t2.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t2.paperid;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What articles have been published since 2006 about the effects of juicing for cancer patients ?",
        "predicted_parse": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;",
        "gold_parse": "SELECT DISTINCT paperid  ,  title FROM paper WHERE title LIKE \"the effects of juicing for cancer patients\" AND YEAR  >  2006;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Eric C. Kerrigan 's Liquid Automatica paper",
        "predicted_parse": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "gold_parse": "SELECT DISTINCT t2.paperid FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname  =  \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Where did sergey levine publish his last paper ?",
        "predicted_parse": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.venueid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"sergey levine\" GROUP BY t3.venueid  ,  t3.year ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "keyphrases used by dan klein in his emnlp papers",
        "predicted_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
        "gold_parse": "SELECT DISTINCT t2.keyphraseid FROM paper AS t3 JOIN paperkeyphrase AS t2 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid JOIN writes AS t5 ON t5.paperid  =  t3.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid WHERE t1.authorname  =  \"dan klein\" AND t4.venuename  =  \"emnlp\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Who are the prominent researchers in Neutralizing Antibody in 2012 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.authorid FROM paperkeyphrase AS t1 JOIN keyphrase AS t2 ON t1.keyphraseid  =  t2.keyphraseid JOIN paper AS t4 ON t4.paperid  =  t1.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t2.keyphrasename  =  \"Neutralizing Antibody\" AND t4.year  =  2012 GROUP BY t3.authorid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "the papers at eccv in 2014 using ImageNet dataset",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which papers in eccv 2014 use ImageNet ?",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "eccv 2014 papers using ImageNet",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t3.year  =  2014 AND t4.venuename  =  \"eccv\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Euclidean Distance papers citing NIPS papers",
        "predicted_parse": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";",
        "gold_parse": "SELECT DISTINCT t5.citingpaperid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN cite AS t5 ON t2.paperid  =  t5.citingpaperid JOIN paper AS t3 ON t3.paperid  =  t5.citedpaperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.keyphrasename  =  \"Euclidean Distance\" AND t4.venuename  =  \"NIPS\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "top authors working on ImageNet ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t4.paperid )  ,  t3.paperid FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t4 ON t4.paperid  =  t2.paperid JOIN writes AS t3 ON t3.paperid  =  t4.paperid WHERE t1.datasetname  =  \"ImageNet\" GROUP BY t3.paperid ORDER BY COUNT ( t4.paperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "how many ACL 2012 papers have more than 7 citations ?",
        "predicted_parse": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;",
        "gold_parse": "SELECT DISTINCT ( t1.paperid )  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t1.year  =  2012 AND t2.venuename  =  \"ACL\" GROUP BY t1.paperid HAVING COUNT ( t3.citingpaperid )  >  7;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What was the topic of best paper in 2012 EMNLP-CoNLL ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t4.citingpaperid )  ,  t1.keyphraseid  ,  t2.paperid FROM paper AS t2 JOIN cite AS t4 ON t2.paperid  =  t4.citedpaperid JOIN paperkeyphrase AS t1 ON t2.paperid  =  t1.paperid JOIN venue AS t3 ON t3.venueid  =  t2.venueid WHERE t2.year  =  2012 AND t3.venuename  =  \"EMNLP-CoNLL\" GROUP BY t2.paperid  ,  t1.keyphraseid ORDER BY COUNT ( DISTINCT t4.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers has Noah Smith co-authored since 2009 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t2.paperid ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname != \"Noah Smith\" AND t3.year  >  2009 AND t2.paperid IN ( SELECT t2.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Noah Smith\" );",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Number of ACL papers with more than 2 citations",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"ACL\" GROUP BY t3.citingpaperid HAVING COUNT ( DISTINCT t3.citedpaperid )  >  2;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the name of Eric C. Kerrigan 's Liquid Automatica paper ?",
        "predicted_parse": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "gold_parse": "SELECT DISTINCT t2.title FROM paperkeyphrase AS t5 JOIN keyphrase AS t3 ON t5.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t5.paperid JOIN paper AS t2 ON t4.paperid  =  t2.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid JOIN venue AS t6 ON t6.venueid  =  t2.venueid WHERE t1.authorname LIKE \"Eric C. Kerrigan\" AND t3.keyphrasename  =  \"Liquid\" AND t6.venuename  =  \"Automatica\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers used ImageNet datasets in cvpr ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid ) FROM paperdataset AS t2 JOIN dataset AS t1 ON t2.datasetid  =  t1.datasetid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t1.datasetname  =  \"ImageNet\" AND t4.venuename  =  \"cvpr\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What venues are for Neuroscience ?",
        "predicted_parse": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";",
        "gold_parse": "SELECT DISTINCT venueid FROM venue WHERE venuename  =  \"Neuroscience\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "When was the last time Mary Crainie published a paper ?",
        "predicted_parse": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";",
        "gold_parse": "SELECT DISTINCT MAX ( t3.year ) FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Mary Crainie\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "I want the co-authors of papers on Machine Translation Output with Philipp Koehn",
        "predicted_parse": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";",
        "gold_parse": "SELECT DISTINCT t1.authorid FROM paperkeyphrase AS t6 JOIN keyphrase AS t3 ON t6.keyphraseid  =  t3.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t6.paperid JOIN writes AS t5 ON t5.paperid  =  t4.paperid JOIN author AS t1 ON t5.authorid  =  t1.authorid JOIN author AS t2 ON t4.authorid  =  t2.authorid WHERE t2.authorname  =  \"Philipp Koehn\" AND t3.keyphrasename  =  \"Machine Translation Output\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many papers does Samuel Madden publish outside of PVLDB area ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";",
        "gold_parse": "SELECT DISTINCT COUNT ( DISTINCT t3.paperid ) FROM venue AS t4 JOIN paper AS t3 ON t4.venueid  =  t3.venueid JOIN writes AS t2 ON t2.paperid  =  t3.paperid JOIN author AS t1 ON t2.authorid  =  t1.authorid WHERE t1.authorname  =  \"Samuel Madden\" AND t4.venuename != \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "which journal did Donald E Knuth publish his last paper ?",
        "predicted_parse": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT t3.journalid  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Donald E Knuth\" GROUP BY t3.journalid  ,  t3.year ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the venue of Fracture of acrylic bone cement ?",
        "predicted_parse": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";",
        "gold_parse": "SELECT DISTINCT venueid FROM paper WHERE title  =  \"Fracture of acrylic bone cement\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "How many authors published at sigcse in 2010 ?",
        "predicted_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";",
        "gold_parse": "SELECT DISTINCT COUNT ( t2.paperid ) FROM venue AS t3 JOIN paper AS t2 ON t3.venueid  =  t2.venueid JOIN writes AS t1 ON t1.paperid  =  t2.paperid WHERE t2.year  =  2010 AND t3.venuename  =  \"sigcse\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the year of publication of \" A Switching Architecture For ISDN \" ?",
        "predicted_parse": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";",
        "gold_parse": "SELECT DISTINCT title  ,  YEAR FROM paper WHERE title  =  \"A Switching Architecture For ISDN\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "what keywords are used by papers at uist",
        "predicted_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";",
        "gold_parse": "SELECT DISTINCT t1.keyphraseid FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid JOIN venue AS t4 ON t4.venueid  =  t3.venueid WHERE t4.venuename  =  \"uist\";",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "Give me the papers written by Su-In Lee before 2012 .",
        "predicted_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;",
        "gold_parse": "SELECT DISTINCT t3.paperid FROM writes AS t2 JOIN author AS t1 ON t2.authorid  =  t1.authorid JOIN paper AS t3 ON t2.paperid  =  t3.paperid WHERE t1.authorname  =  \"Su-In Lee\" AND t3.year  <  2012;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers in semantic parsing for each year",
        "predicted_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;",
        "gold_parse": "SELECT DISTINCT COUNT ( t3.paperid )  ,  t3.year FROM paperkeyphrase AS t2 JOIN keyphrase AS t1 ON t2.keyphraseid  =  t1.keyphraseid JOIN paper AS t3 ON t3.paperid  =  t2.paperid WHERE t1.keyphrasename  =  \"semantic parsing\" GROUP BY t3.year ORDER BY t3.year DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers with at least 5 citations",
        "predicted_parse": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "gold_parse": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "papers cited by at least 5 papers",
        "predicted_parse": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "gold_parse": "SELECT DISTINCT t2.citingpaperid FROM paper AS t1 JOIN cite AS t2 ON t1.paperid  =  t2.citedpaperid GROUP BY t2.citingpaperid HAVING COUNT ( DISTINCT t2.citedpaperid )  >=  5;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the most cited paper at sigcomm ?",
        "predicted_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "gold_parse": "SELECT DISTINCT t3.citedpaperid  ,  COUNT ( t3.citingpaperid ) FROM paper AS t1 JOIN cite AS t3 ON t1.paperid  =  t3.citedpaperid JOIN venue AS t2 ON t2.venueid  =  t1.venueid WHERE t2.venuename  =  \"sigcomm\" GROUP BY t3.citedpaperid ORDER BY COUNT ( t3.citingpaperid ) DESC;",
        "correctness": 1
    },
    {
        "db_id": "scholar",
        "question": "What is the name of Ranjit Jhala 's Liquid Haskell paper ?",
        "predicted_parse": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";",
        "gold_parse": "SELECT DISTINCT t3.title FROM paperkeyphrase AS t2 JOIN keyphrase AS t5 ON t2.keyphraseid  =  t5.keyphraseid JOIN writes AS t4 ON t4.paperid  =  t2.paperid JOIN paper AS t3 ON t4.paperid  =  t3.paperid JOIN author AS t1 ON t4.authorid  =  t1.authorid WHERE t1.authorname LIKE \"Ranjit Jhala\" AND t5.keyphrasename  =  \"Liquid Haskell\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the businesses with more than 4.5 stars",
        "predicted_parse": "SELECT name FROM business WHERE rating  >  4.5;",
        "gold_parse": "SELECT name FROM business WHERE rating  >  4.5;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all businesses with rating 3.5",
        "predicted_parse": "SELECT name FROM business WHERE rating  =  3.5;",
        "gold_parse": "SELECT name FROM business WHERE rating  =  3.5;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all user ids with name Michelle",
        "predicted_parse": "SELECT user_id FROM USER WHERE name  =  \"Michelle\";",
        "gold_parse": "SELECT user_id FROM USER WHERE name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all states in which there is a Whataburger",
        "predicted_parse": "SELECT state FROM business WHERE name  =  \"Whataburger\";",
        "gold_parse": "SELECT state FROM business WHERE name  =  \"Whataburger\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all cities in which there is a restaurant called \" MGM Grand Buffet \"",
        "predicted_parse": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";",
        "gold_parse": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t2.category_name  =  \"category_category_name0\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the cities of businesses rated below 1.5",
        "predicted_parse": "SELECT city FROM business WHERE rating  <  1.5;",
        "gold_parse": "SELECT city FROM business WHERE rating  <  1.5;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all cities which has a \" Taj Mahal \" .",
        "predicted_parse": "SELECT city FROM business WHERE name  =  \"Taj Mahal\";",
        "gold_parse": "SELECT city FROM business WHERE name  =  \"Taj Mahal\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the reviews which rated a business less than 1",
        "predicted_parse": "SELECT text FROM review WHERE rating  <  1;",
        "gold_parse": "SELECT text FROM review WHERE rating  <  1;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the restaurant rated more than 3.5",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find all cities which has a \" Taj Mahal \" restaurant",
        "predicted_parse": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Taj Mahal\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "list all the reviews by Niloofar",
        "predicted_parse": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
        "gold_parse": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "list all the businesses which have a review by Niloofar",
        "predicted_parse": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";",
        "gold_parse": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t3.name  =  \"Niloofar\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "list all the businesses which Niloofar rated 5",
        "predicted_parse": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";",
        "gold_parse": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.rating  =  5 AND t3.name  =  \"Niloofar\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the reviews by Michelle for Italian restaurant",
        "predicted_parse": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";",
        "gold_parse": "SELECT t4.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN review AS t4 ON t4.business_id  =  t1.business_id JOIN USER AS t5 ON t5.user_id  =  t4.user_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"category_category_name1\" AND t5.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the number of reviews written for \" Cafe Zinho \" restaurant in Texas",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.text ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all 5 star Italian restaurant",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.rating  =  5 AND t2.category_name  =  \"Italian\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the neighbourhoods with Italian restaurant in Madison",
        "predicted_parse": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the neighbourhoods with Italian restaurant rated less than 2.5 in Madison",
        "predicted_parse": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN category AS t4 ON t4.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  <  2.5 AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find all the restaurant in Pennsylvania",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all businesses that are restaurant in Pennsylvania .",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Pennsylvania\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all the reviews for all Pet Groomers with more than 100 reviews",
        "predicted_parse": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";",
        "gold_parse": "SELECT t3.text FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id WHERE t1.review_count  >  100 AND t2.category_name  =  \"Pet Groomers\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What are all the breweries in \" Los Angeles \" ?",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all breweries in Los Angeles",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all breweries in \" Los Angeles \"",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"breweries\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all users who reviewed restaurant \" Mesa Grill \"",
        "predicted_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Mesa Grill\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List the addresses of all Walmart in \" Los Angeles \"",
        "predicted_parse": "SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";",
        "gold_parse": "SELECT full_address FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Walmart\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all restaurant reviewed by Patrick in \" Dallas \"",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Which restaurant in Dallas were reviewed by user Patrick ?",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"restaurant\" AND t4.name  =  \"Patrick\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Bars reviewed by Patrick",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Bars reviewed by Patrick with at least 3 stars",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.rating  >=  3 AND t2.category_name  =  \"Bars\" AND t4.name  =  \"Patrick\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all users who have written tips for \" Barrio Cafe \" in 2015",
        "predicted_parse": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;",
        "gold_parse": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all businesses in Texas with a rating below 2",
        "predicted_parse": "SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";",
        "gold_parse": "SELECT name FROM business WHERE rating  <  2 AND state  =  \"Texas\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all restaurant Seafood in Los Angeles",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all the Seafood restaurant in \" Los Angeles \"",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all restaurant that serve Seafood in \" Los Angeles \"",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Seafood\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all reviews by Patrick with a rating above 4",
        "predicted_parse": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";",
        "gold_parse": "SELECT t1.text FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.rating  >  4 AND t2.name  =  \"Patrick\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Apple Store in \" Los Angeles \"",
        "predicted_parse": "SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";",
        "gold_parse": "SELECT business_id FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Apple Store\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Dallas restaurant with a rating above 4.5",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  4.5 AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What neighbourhood is restaurant \" Flat Top Grill \" in ?",
        "predicted_parse": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";",
        "gold_parse": "SELECT t1.neighbourhood_name FROM category AS t3 JOIN business AS t2 ON t3.business_id  =  t2.business_id JOIN neighbourhood AS t1 ON t1.business_id  =  t2.business_id WHERE t2.name  =  \"Flat Top Grill\" AND t3.category_name  =  \"category_category_name0\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all tips about \" Vintner Grill \" that received more than 9 likes",
        "predicted_parse": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;",
        "gold_parse": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Vintner Grill\" AND t2.likes  >  9;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all reviews about \" Kabob Palace \" in year 2014",
        "predicted_parse": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;",
        "gold_parse": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Kabob Palace\" AND t2.year  =  2014;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all users who have written tips about businesses in Dallas",
        "predicted_parse": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";",
        "gold_parse": "SELECT t3.name FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Dallas\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all cities in Texas in which there is a restaurant called \" MGM Grand Buffet \"",
        "predicted_parse": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.city FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"MGM Grand Buffet\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the users who have given tips on Pet Groomers",
        "predicted_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";",
        "gold_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN tip AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"Pet Groomers\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all tips for \" Cafe Zinho \" in Texas .",
        "predicted_parse": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";",
        "gold_parse": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Texas\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all users who reviewed businesses that are restaurant .",
        "predicted_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all tips for \" Cafe Zinho \" in Pennsylvania in 2010 .",
        "predicted_parse": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;",
        "gold_parse": "SELECT t2.text FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t1.state  =  \"Pennsylvania\" AND t2.year  =  2010;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "List all users who reviewed businesses that are restaurant in 2010 .",
        "predicted_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;",
        "gold_parse": "SELECT t4.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t2.category_name  =  \"restaurant\" AND t3.year  =  2010;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all the tips from a user who has written a review in 2012",
        "predicted_parse": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;",
        "gold_parse": "SELECT t2.text FROM USER AS t3 JOIN review AS t1 ON t3.user_id  =  t1.user_id JOIN tip AS t2 ON t3.user_id  =  t2.user_id WHERE t1.year  =  2012;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all reviews for businesses rated 2.5",
        "predicted_parse": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;",
        "gold_parse": "SELECT t2.text FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  =  2.5;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the number of escape games in Madison",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the number of escape games in Madison",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many escape games exist in Madison",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the number of escape games in \" Madison \" ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many escape games are there in Madison ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.category_name  =  \"escape games\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the number of restaurant rated more than 3.5",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.rating  >  3.5 AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \"",
        "predicted_parse": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";",
        "gold_parse": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Moroccan\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" on Friday",
        "predicted_parse": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";",
        "gold_parse": "SELECT SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" AND t4.day  =  \"Friday\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the total checkins in Moroccan restaurant in \" Los Angeles \" per day",
        "predicted_parse": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;",
        "gold_parse": "SELECT t4.day  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\" GROUP BY t4.day;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "find the total checkins in Italian Delis in each state on Sunday",
        "predicted_parse": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;",
        "gold_parse": "SELECT t1.state  ,  SUM ( t4.count ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id JOIN checkin AS t4 ON t4.business_id  =  t1.business_id WHERE t2.category_name  =  \"Italian\" AND t3.category_name  =  \"Delis\" AND t4.day  =  \"Sunday\" GROUP BY t1.state;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many reviews has Niloofar written in 2015",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2015 AND t2.name  =  \"Niloofar\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "what is the average rating given in Michelle reviews",
        "predicted_parse": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "gold_parse": "SELECT AVG ( t1.rating ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the number of checkins for \" Cafe Zinho \" on Friday",
        "predicted_parse": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";",
        "gold_parse": "SELECT t2.count FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\" AND t2.day  =  \"Friday\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "how many users reviewed \" Sushi Too \" in Pittsburgh",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"Pittsburgh\" AND t1.name  =  \"Sushi Too\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the number of restaurant in Pittsburgh rated 4.5",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Pittsburgh\" AND t1.rating  =  4.5 AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many tips have been written in 2015",
        "predicted_parse": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;",
        "gold_parse": "SELECT COUNT ( DISTINCT text ) FROM tip WHERE YEAR  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the total likes on tips from Niloofar",
        "predicted_parse": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
        "gold_parse": "SELECT SUM ( t1.likes ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Niloofar\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the total likes on tips about \" Cafe Zinho \"",
        "predicted_parse": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";",
        "gold_parse": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.name  =  \"Cafe Zinho\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the total likes on tips from Niloofar about \" Cafe Zinho \"",
        "predicted_parse": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";",
        "gold_parse": "SELECT SUM ( t2.likes ) FROM tip AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Cafe Zinho\" AND t3.name  =  \"Niloofar\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many tips has Michelle written in 2010",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Return me the number of tips that are written by Michelle in 2010 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.year  =  2010 AND t2.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many tips has Michelle written in April",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"April\" AND t2.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "what is the number of restaurant in Texas",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many Bars in \" Dallas \" have a rating above 3.5 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many Bars in Dallas have a rating above 3.5 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Bars\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many people reviewed the restaurant \" Texas de Brazil \" in Dallas Texas ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t1.name  =  \"Texas de Brazil\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many people reviewed \" Bistro Di Napoli \" in 2015 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.name  =  \"Bistro Di Napoli\" AND t2.year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many restaurant are there in the Hazelwood district of Dallas ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t3.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Hazelwood\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many Starbucks are there in Dallas Texas ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";",
        "gold_parse": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Dallas\" AND name  =  \"Starbucks\" AND state  =  \"Texas\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many reviews does \" Acacia Cafe \" have ?",
        "predicted_parse": "SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";",
        "gold_parse": "SELECT review_count FROM business WHERE name  =  \"Acacia Cafe\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the average number of checkins in restaurant \" Barrio Cafe \" per day",
        "predicted_parse": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;",
        "gold_parse": "SELECT AVG ( t3.count )  ,  t3.day FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN checkin AS t3 ON t3.business_id  =  t1.business_id WHERE t1.name  =  \"Barrio Cafe\" AND t2.category_name  =  \"restaurant\" GROUP BY t3.day;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many businesses are there in the \" Stone Meadows \" neighbourhood in Madison ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM neighbourhood AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t2.neighbourhood_name  =  \"Stone Meadows\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many reviews has Adrienne written ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Adrienne\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many reviews has Michelle written in March 2014 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id WHERE t1.month  =  \"March\" AND t1.year  =  2014 AND t2.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many businesses has Michelle reviewed in 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t2.year  =  2010 AND t3.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many businesses in \" San Diego \" has Christine reviewed in 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN USER AS t3 ON t3.user_id  =  t2.user_id WHERE t1.city  =  \"San Diego\" AND t2.year  =  2010 AND t3.name  =  \"Christine\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many Target are there in \" Los Angeles \" ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
        "gold_parse": "SELECT COUNT ( DISTINCT business_id ) FROM business WHERE city  =  \"Los Angeles\" AND name  =  \"Target\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many users have reviewed Irish Pub in Dallas ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.city  =  \"Dallas\" AND t2.category_name  =  \"Irish Pub\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "What is the average rating of reviews written in year 2014 ?",
        "predicted_parse": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;",
        "gold_parse": "SELECT AVG ( rating ) FROM review WHERE YEAR  =  2014;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many people reviewed restaurant \" Vintner Grill \" in 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN review AS t3 ON t3.business_id  =  t1.business_id JOIN USER AS t4 ON t4.user_id  =  t3.user_id WHERE t1.name  =  \"Vintner Grill\" AND t2.category_name  =  \"category_category_name0\" AND t3.year  =  2010;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the number of reviews on businesses located in \" South Summerlin \" neighbourhood",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.text ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id JOIN review AS t3 ON t3.business_id  =  t2.business_id WHERE t1.neighbourhood_name  =  \"South Summerlin\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the number of users called Michelle",
        "predicted_parse": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT name ) FROM USER WHERE name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Return me the number of businesses that are restaurant .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Return me the number of cities that has \" Panda Express \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";",
        "gold_parse": "SELECT COUNT ( DISTINCT city ) FROM business WHERE name  =  \"Panda Express\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Return me the number of tips that are written by Michelle .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.text ) FROM USER AS t2 JOIN tip AS t1 ON t2.user_id  =  t1.user_id WHERE t2.name  =  \"Michelle\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the total checkins in \" Brighton Heights \" neighbourhood",
        "predicted_parse": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";",
        "gold_parse": "SELECT SUM ( t3.count ) FROM checkin AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t2.neighbourhood_name  =  \"Brighton Heights\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the total number of reviews written in March",
        "predicted_parse": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";",
        "gold_parse": "SELECT COUNT ( DISTINCT text ) FROM review WHERE MONTH  =  \"March\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the number of tips written in each month",
        "predicted_parse": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;",
        "gold_parse": "SELECT COUNT ( DISTINCT text )  ,  MONTH FROM tip GROUP BY MONTH;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many neighbourhoods have a business with rating 5 in Madison ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.neighbourhood_name ) FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" AND t2.rating  =  5;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Give me all the Moroccan restaurant in Texas",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.state  =  \"Texas\" AND t2.category_name  =  \"Moroccan\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "which business has the most number of checkins",
        "predicted_parse": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM checkin AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY SUM ( t2.count ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "which neighbourhood has the most number of businesses in Madison",
        "predicted_parse": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.neighbourhood_name FROM neighbourhood AS t1 JOIN business AS t2 ON t1.business_id  =  t2.business_id WHERE t2.city  =  \"Madison\" GROUP BY t1.neighbourhood_name ORDER BY COUNT ( DISTINCT t2.name ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Mexican restaurant in Dallas with at least 3.5 stars",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Mexican restaurant in Dallas with a rating above 3.5",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.rating  >  3.5 AND t2.category_name  =  \"Mexican\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all restaurant with Valet Service in Dallas Texas",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Dallas\" AND t1.state  =  \"Texas\" AND t2.category_name  =  \"Valet Service\" AND t3.category_name  =  \"restaurant\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Italian restaurant in the Meadowood neighbourhood of Madison",
        "predicted_parse": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";",
        "gold_parse": "SELECT t1.name FROM category AS t3 JOIN business AS t1 ON t3.business_id  =  t1.business_id JOIN category AS t4 ON t4.business_id  =  t1.business_id JOIN neighbourhood AS t2 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Madison\" AND t3.category_name  =  \"Italian\" AND t4.category_name  =  \"restaurant\" AND t2.neighbourhood_name  =  \"Meadowood\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find all Bars in \" Los Angeles \" with at least 30 reviews and average rating above 3 stars",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t1.city  =  \"Los Angeles\" AND t1.rating  >  3 AND t1.review_count  >  30 AND t2.category_name  =  \"Bars\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "How many Egyptian restaurant are there in Edinburgh ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id JOIN category AS t3 ON t3.business_id  =  t1.business_id WHERE t1.city  =  \"Edinburgh\" AND t2.category_name  =  \"restaurant\" AND t3.category_name  =  \"Egyptian\";",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find users whose average review rating is below 3",
        "predicted_parse": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;",
        "gold_parse": "SELECT t2.name FROM USER AS t2 JOIN review AS t1 ON t2.user_id  =  t1.user_id GROUP BY t2.name HAVING AVG ( t1.rating )  <  3;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the business with the most number of reviews in April",
        "predicted_parse": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM review AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id WHERE t2.month  =  \"April\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.text ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "yelp",
        "question": "Find the business which has the most number of categories",
        "predicted_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM category AS t2 JOIN business AS t1 ON t2.business_id  =  t1.business_id GROUP BY t1.name ORDER BY COUNT ( DISTINCT t2.category_name ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the homepage of PVLDB .",
        "predicted_parse": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\";",
        "gold_parse": "SELECT homepage FROM journal WHERE name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the homepage of \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT homepage FROM author WHERE name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the abstract of \" Making database systems usable \" .",
        "predicted_parse": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT abstract FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the year of \" Making database systems usable \"",
        "predicted_parse": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the year of \" Making database systems usable \" .",
        "predicted_parse": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT YEAR FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers after 2000 .",
        "predicted_parse": "SELECT title FROM publication WHERE YEAR  >  2000;",
        "gold_parse": "SELECT title FROM publication WHERE YEAR  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the homepage of the VLDB conference .",
        "predicted_parse": "SELECT homepage FROM conference WHERE name  =  \"VLDB\";",
        "gold_parse": "SELECT homepage FROM conference WHERE name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the keywords .",
        "predicted_parse": "SELECT keyword FROM keyword;",
        "gold_parse": "SELECT keyword FROM keyword;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the organizations .",
        "predicted_parse": "SELECT name FROM organization;",
        "gold_parse": "SELECT name FROM organization;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the organizations in \" North America \" .",
        "predicted_parse": "SELECT name FROM organization WHERE continent  =  \"North America\";",
        "gold_parse": "SELECT name FROM organization WHERE continent  =  \"North America\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the homepage of \" University of Michigan \" .",
        "predicted_parse": "SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";",
        "gold_parse": "SELECT homepage FROM organization WHERE name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of references of \" Making database systems usable \" .",
        "predicted_parse": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the references of \" Making database systems usable \" .",
        "predicted_parse": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT reference_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of citations of \" Making database systems usable \" .",
        "predicted_parse": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the citations of \" Making database systems usable \" .",
        "predicted_parse": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT citation_num FROM publication WHERE title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper with more than 200 citations .",
        "predicted_parse": "SELECT title FROM publication WHERE citation_num  >  200;",
        "gold_parse": "SELECT title FROM publication WHERE citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in PVLDB 2010 .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  =  2010;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in PVLDB after 2010 .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" AND t4.year  >  2010;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in VLDB conference in 2002 .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  =  2002;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in VLDB conference before 2002 .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in VLDB conference before 2002 after 1995 .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" AND t4.year  <  2002 AND t4.year  >  1995;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the area of PVLDB .",
        "predicted_parse": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t3.name FROM DOMAIN AS t3 JOIN domain_journal AS t1 ON t3.did  =  t1.did JOIN journal AS t2 ON t2.jid  =  t1.jid WHERE t2.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in PVLDB .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the organization \" H. V. Jagadish \" is in .",
        "predicted_parse": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t2.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conferences, which have papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the journals, which have papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the domain where \" H. V. Jagadish \" is focused .",
        "predicted_parse": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t2.name FROM domain_author AS t3 JOIN author AS t1 ON t3.aid  =  t1.aid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors of \" Making database systems usable \" .",
        "predicted_parse": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT t1.name FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conference, which published \" Making database systems usable \" .",
        "predicted_parse": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT t1.name FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t2.title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers on VLDB conference .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers on PVLDB .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers on PVLDB after 2000 .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers on VLDB conference after 2000 .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB .",
        "predicted_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference .",
        "predicted_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" after 2000 .",
        "predicted_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "predicted_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "predicted_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the area of the VLDB conference .",
        "predicted_parse": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";",
        "gold_parse": "SELECT t2.name FROM domain_conference AS t3 JOIN conference AS t1 ON t3.cid  =  t1.cid JOIN DOMAIN AS t2 ON t2.did  =  t3.did WHERE t1.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers in the VLDB conference .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the keywords in Databases area .",
        "predicted_parse": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
        "gold_parse": "SELECT t1.keyword FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the papers, which contain the keyword \" Natural Language \" .",
        "predicted_parse": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "gold_parse": "SELECT t3.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords of \" Making database systems usable \" .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords related to \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords in VLDB conference .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords in PVLDB .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords in the papers of \" University of Michigan \" .",
        "predicted_parse": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT t1.keyword FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "predicted_parse": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "gold_parse": "SELECT t5.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers in PVLDB containing keyword \" Keyword search \" .",
        "predicted_parse": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "gold_parse": "SELECT t4.title FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "predicted_parse": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "gold_parse": "SELECT t4.title FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the organizations in Databases area .",
        "predicted_parse": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
        "gold_parse": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the organizations in Databases area located in \" North America \" .",
        "predicted_parse": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
        "gold_parse": "SELECT t2.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the researchers in \" University of Michigan \" .",
        "predicted_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the researchers in Databases area in \" University of Michigan \" .",
        "predicted_parse": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT t1.name FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the papers in \" University of Michigan \" .",
        "predicted_parse": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the papers after 2000 in \" University of Michigan \" .",
        "predicted_parse": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
        "gold_parse": "SELECT t4.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the papers in VLDB conference in \" University of Michigan \" .",
        "predicted_parse": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT t5.title FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the papers in PVLDB in \" University of Michigan \" .",
        "predicted_parse": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me all the papers in PVLDB after 2000 in \" University of Michigan \" .",
        "predicted_parse": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "gold_parse": "SELECT t5.title FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper in Databases area with more than 200 citations .",
        "predicted_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper in PVLDB with more than 200 citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper in VLDB conference with more than 200 citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper by \" H. V. Jagadish \" with more than 200 citations .",
        "predicted_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" on PVLDB with more than 200 citations .",
        "predicted_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers by \" H. V. Jagadish \" on VLDB conference with more than 200 citations .",
        "predicted_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;",
        "gold_parse": "SELECT t4.title FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 with more than 200 citations .",
        "predicted_parse": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;",
        "gold_parse": "SELECT title FROM publication WHERE citation_num  >  200 AND YEAR  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 in Databases area with more than 200 citations .",
        "predicted_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.citation_num  >  200 AND t3.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 in PVLDB with more than 200 citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 in VLDB conference with more than 200 citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.citation_num  >  200 AND t2.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of conferences which have papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of journals which have papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers written by \" H. V. Jagadish \" in each year .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title )  ,  t3.year FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t3.year;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of authors of \" Making database systems usable \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t3.title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of citations of \" Making database systems usable \" in each year .",
        "predicted_parse": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR;",
        "gold_parse": "SELECT YEAR  ,  SUM ( citation_num ) FROM publication WHERE title  =  \"Making database systems usable\" GROUP BY YEAR;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of citations of \" Making database systems usable \" before 2010 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t3 JOIN cite AS t1 ON t3.pid  =  t1.cited JOIN publication AS t2 ON t2.pid  =  t1.citing WHERE t3.title  =  \"Making database systems usable\" AND t2.year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers on VLDB conference .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers on PVLDB .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers after 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT title ) FROM publication WHERE YEAR  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers on PVLDB after 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers on VLDB conference after 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers by \" H. V. Jagadish \" after 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers by \" H. V. Jagadish \" on PVLDB after 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"PVLDB\" AND t4.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers by \" H. V. Jagadish \" on VLDB conference after 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t2.name  =  \"VLDB\" AND t4.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of keywords .",
        "predicted_parse": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
        "gold_parse": "SELECT COUNT ( DISTINCT keyword ) FROM keyword;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of keywords in Databases area .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM DOMAIN AS t3 JOIN domain_keyword AS t2 ON t3.did  =  t2.did JOIN keyword AS t1 ON t1.kid  =  t2.kid WHERE t3.name  =  \"Databases\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers which contain the keyword \" Natural Language \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of the keywords of \" Making database systems usable \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t3.pid WHERE t2.title  =  \"Making database systems usable\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of the keywords related to \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of keywords in VLDB conference .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of keywords in PVLDB .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of keywords in the papers of \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.keyword ) FROM organization AS t6 JOIN author AS t2 ON t6.oid  =  t2.oid JOIN writes AS t4 ON t4.aid  =  t2.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN publication_keyword AS t3 ON t5.pid  =  t3.pid JOIN keyword AS t1 ON t3.kid  =  t1.kid WHERE t6.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of the papers of \" H. V. Jagadish \" containing keyword \" User Study \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t5 ON t5.pid  =  t3.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.keyword  =  \"User Study\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in PVLDB containing keyword \" Keyword search \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t2.pid JOIN journal AS t3 ON t4.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t1.keyword  =  \"Keyword search\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in VLDB conference containing keyword \" Information Retrieval \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM publication_keyword AS t3 JOIN keyword AS t1 ON t3.kid  =  t1.kid JOIN publication AS t4 ON t4.pid  =  t3.pid JOIN conference AS t2 ON t4.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t1.keyword  =  \"Information Retrieval\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of authors who have papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of the papers containing keyword \" Natural Language \"",
        "predicted_parse": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "gold_parse": "SELECT SUM ( t3.citation_num ) FROM publication_keyword AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t2.pid WHERE t1.keyword  =  \"Natural Language\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of the organizations .",
        "predicted_parse": "SELECT COUNT ( DISTINCT name ) FROM organization;",
        "gold_parse": "SELECT COUNT ( DISTINCT name ) FROM organization;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of the organizations in \" North America \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";",
        "gold_parse": "SELECT COUNT ( DISTINCT name ) FROM organization WHERE continent  =  \"North America\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of organizations in Databases area .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of organizations in Databases area located in \" North America \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.continent  =  \"North America\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in \" University of Michigan \" in Databases area .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN domain_publication AS t2 ON t3.did  =  t2.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN publication AS t4 ON t4.pid  =  t2.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers after 2000 in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" AND t4.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in VLDB conference in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t3 JOIN author AS t1 ON t3.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN conference AS t2 ON t5.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" AND t3.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in PVLDB in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers in PVLDB after 2000 in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t4 ON t4.aid  =  t1.aid JOIN publication AS t5 ON t4.pid  =  t5.pid JOIN journal AS t3 ON t5.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" AND t2.name  =  \"University of Michigan\" AND t5.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of the papers in \" University of Michigan \" .",
        "predicted_parse": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT SUM ( t4.citation_num ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of researchers in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid WHERE t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of researchers in Databases area in \" University of Michigan \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM domain_author AS t4 JOIN author AS t1 ON t4.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t4.did JOIN organization AS t2 ON t2.oid  =  t1.oid WHERE t3.name  =  \"Databases\" AND t2.name  =  \"University of Michigan\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of authors who have papers in PVLDB .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of authors who have papers in the VLDB conference .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name ) FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers published on PVLDB before 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers published in the VLDB conference before 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of all the papers in PVLDB .",
        "predicted_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the citations of each paper in PVLDB .",
        "predicted_parse": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t2.citation_num FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of papers in PVLDB in 2005 .",
        "predicted_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  =  2005;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of papers in PVLDB before 2005 .",
        "predicted_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  <  2005;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of papers in PVLDB in each year .",
        "predicted_parse": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "gold_parse": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers published in PVLDB in each year .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" GROUP BY t2.year;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of all the papers in the VLDB conference .",
        "predicted_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the citations of each paper in the VLDB conference .",
        "predicted_parse": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "gold_parse": "SELECT t2.citation_num FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of papers in the VLDB conference in 2005 .",
        "predicted_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  =  2005;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of papers in the VLDB conference before 2005 .",
        "predicted_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;",
        "gold_parse": "SELECT SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  <  2005;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the total citations of papers in the VLDB conference in each year .",
        "predicted_parse": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "gold_parse": "SELECT t2.year  ,  SUM ( t2.citation_num ) FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers published in the VLDB conference in each year .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title )  ,  t2.year FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" GROUP BY t2.year;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have cooperated both with \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "predicted_parse": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";",
        "gold_parse": "SELECT t2.name FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Divesh Srivastava\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have cooperated with \" H. V. Jagadish \" after 2000 .",
        "predicted_parse": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;",
        "gold_parse": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" AND t5.year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "predicted_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" after 2005 .",
        "predicted_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t5.year  >  2005;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB .",
        "predicted_parse": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";",
        "gold_parse": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Yunyao Li \" on PVLDB after 2005 .",
        "predicted_parse": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;",
        "gold_parse": "SELECT t6.title FROM publication AS t6 JOIN journal AS t4 ON t6.jid  =  t4.jid JOIN writes AS t3 ON t3.pid  =  t6.pid JOIN writes AS t5 ON t5.pid  =  t6.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Yunyao Li\" AND t4.name  =  \"PVLDB\" AND t6.year  >  2005;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have cooperated with \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t2.name FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "predicted_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have cited the papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT t2.name FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" before 2000 .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT t5.title ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.year  <  2000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of papers written by \" H. V. Jagadish \" , \" Yunyao Li \" , and \" Cong Yu \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t7.title ) FROM writes AS t4 JOIN author AS t2 ON t4.aid  =  t2.aid JOIN publication AS t7 ON t4.pid  =  t7.pid JOIN writes AS t5 ON t5.pid  =  t7.pid JOIN writes AS t6 ON t6.pid  =  t7.pid JOIN author AS t1 ON t5.aid  =  t1.aid JOIN author AS t3 ON t6.aid  =  t3.aid WHERE t2.name  =  \"Cong Yu\" AND t1.name  =  \"H. V. Jagadish\" AND t3.name  =  \"Yunyao Li\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of authors who have cooperated with \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the number of authors who have cited the papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.name ) FROM publication AS t7 JOIN cite AS t5 ON t7.pid  =  t5.citing JOIN publication AS t6 ON t6.pid  =  t5.cited JOIN writes AS t3 ON t3.pid  =  t7.pid JOIN writes AS t4 ON t4.pid  =  t6.pid JOIN author AS t2 ON t3.aid  =  t2.aid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\";",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with more than 200 citations .",
        "predicted_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"H. V. Jagadish\" AND t1.name  =  \"Divesh Srivastava\" AND t5.citation_num  >  200;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the author who has the most number of papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conference that has the most number of papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conference, which has the most number of papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the journal that has the most number of papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the journal, which has the most number of papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keyword, which have been contained by the most number of papers in VLDB conference .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keyword, which have been contained by the most number of papers in PVLDB .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t2.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keyword, which have been contained by the most number of papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword ORDER BY COUNT ( DISTINCT t3.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the author in the \" University of Michigan \" whose papers have the most total citations .",
        "predicted_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t4.citation_num ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the author in the \" University of Michigan \" whose papers in Databases area have the most total citations .",
        "predicted_parse": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM DOMAIN AS t4 JOIN domain_publication AS t2 ON t4.did  =  t2.did JOIN publication AS t5 ON t5.pid  =  t2.pid JOIN writes AS t3 ON t3.pid  =  t5.pid JOIN author AS t1 ON t3.aid  =  t1.aid JOIN organization AS t6 ON t6.oid  =  t1.oid WHERE t4.name  =  \"Databases\" AND t6.name  =  \"University of Michigan\" GROUP BY t1.name ORDER BY SUM ( t5.citation_num ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the papers written by \" H. V. Jagadish \" and \" Divesh Srivastava \" with the most number of citations .",
        "predicted_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t5.title FROM writes AS t3 JOIN author AS t2 ON t3.aid  =  t2.aid JOIN publication AS t5 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t5.pid JOIN author AS t1 ON t4.aid  =  t1.aid WHERE t2.name  =  \"Divesh Srivastava\" AND t1.name  =  \"H. V. Jagadish\" ORDER BY t5.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conferences, which have more than 10 papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conference, which have the most number of papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the journals, which have more than 10 papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the journal, which have the most number of papers by \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t2.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t1.name  =  \"H. V. Jagadish\" GROUP BY t2.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper with the most citations .",
        "predicted_parse": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT title FROM publication ORDER BY citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper in Databases area with the most citations .",
        "predicted_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper in PVLDB with the most citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper in VLDB conference with the most citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" ORDER BY t2.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper by \" H. V. Jagadish \" with the most citations .",
        "predicted_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t3.title FROM writes AS t2 JOIN author AS t1 ON t2.aid  =  t1.aid JOIN publication AS t3 ON t2.pid  =  t3.pid WHERE t1.name  =  \"H. V. Jagadish\" ORDER BY t3.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 with the most citations .",
        "predicted_parse": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT title FROM publication WHERE YEAR  >  2000 ORDER BY citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 in Databases area with the most citations .",
        "predicted_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t3.title FROM DOMAIN AS t2 JOIN domain_publication AS t1 ON t2.did  =  t1.did JOIN publication AS t3 ON t3.pid  =  t1.pid WHERE t2.name  =  \"Databases\" AND t3.year  >  2000 ORDER BY t3.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 in PVLDB with the most citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN journal AS t1 ON t2.jid  =  t1.jid WHERE t1.name  =  \"PVLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the paper after 2000 in VLDB conference with the most citations .",
        "predicted_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "gold_parse": "SELECT t2.title FROM publication AS t2 JOIN conference AS t1 ON t2.cid  =  t1.cid WHERE t1.name  =  \"VLDB\" AND t2.year  >  2000 ORDER BY t2.citation_num DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have more than 10 papers in PVLDB .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have the most number of papers in PVLDB .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN journal AS t2 ON t4.jid  =  t2.jid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"PVLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have more than 10 papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the conferences, which have more than 60 papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;",
        "gold_parse": "SELECT t2.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t2.name HAVING COUNT ( DISTINCT t3.title )  >  60;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the journals, which have more than 60 papers containing keyword \" Relational Database \" .",
        "predicted_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;",
        "gold_parse": "SELECT t3.name FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t1.keyword  =  \"Relational Database\" GROUP BY t3.name HAVING COUNT ( DISTINCT t2.title )  >  60;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords, which have been contained by more than 100 papers in VLDB conference .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t4.pid JOIN conference AS t2 ON t3.cid  =  t2.cid WHERE t2.name  =  \"VLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  100;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords, which have been contained by more than 100 papers in PVLDB .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t4 JOIN keyword AS t1 ON t4.kid  =  t1.kid JOIN publication AS t2 ON t2.pid  =  t4.pid JOIN journal AS t3 ON t2.jid  =  t3.jid WHERE t3.name  =  \"PVLDB\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t2.title )  >  100;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the keywords, which have been contained by more than 10 papers of \" H. V. Jagadish \" .",
        "predicted_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "gold_parse": "SELECT t1.keyword FROM publication_keyword AS t5 JOIN keyword AS t1 ON t5.kid  =  t1.kid JOIN publication AS t3 ON t3.pid  =  t5.pid JOIN writes AS t4 ON t4.pid  =  t3.pid JOIN author AS t2 ON t4.aid  =  t2.aid WHERE t2.name  =  \"H. V. Jagadish\" GROUP BY t1.keyword HAVING COUNT ( DISTINCT t3.title )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the authors who have more than 10 papers in the VLDB conference .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name HAVING COUNT ( DISTINCT t4.title )  >  10;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the author who has the most number of papers in the VLDB conference .",
        "predicted_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM publication AS t4 JOIN conference AS t2 ON t4.cid  =  t2.cid JOIN writes AS t3 ON t3.pid  =  t4.pid JOIN author AS t1 ON t3.aid  =  t1.aid WHERE t2.name  =  \"VLDB\" GROUP BY t1.name ORDER BY COUNT ( DISTINCT t4.title ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the author in the \" University of Michigan \" whose papers have more than 5000 total citations .",
        "predicted_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "gold_parse": "SELECT t1.name FROM organization AS t2 JOIN author AS t1 ON t2.oid  =  t1.oid JOIN writes AS t3 ON t3.aid  =  t1.aid JOIN publication AS t4 ON t3.pid  =  t4.pid WHERE t2.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "correctness": 1
    },
    {
        "db_id": "academic",
        "question": "return me the author in the \" University of Michigan \" in Databases area whose papers have more than 5000 total citations .",
        "predicted_parse": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "gold_parse": "SELECT t1.name FROM domain_author AS t6 JOIN author AS t1 ON t6.aid  =  t1.aid JOIN DOMAIN AS t3 ON t3.did  =  t6.did JOIN organization AS t5 ON t5.oid  =  t1.oid JOIN writes AS t2 ON t2.aid  =  t1.aid JOIN publication AS t4 ON t2.pid  =  t4.pid WHERE t3.name  =  \"Databases\" AND t5.name  =  \"University of Michigan\" GROUP BY t1.name HAVING SUM ( t4.citation_num )  >  5000;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What year is the movie \" The Imitation Game \" from ?",
        "predicted_parse": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What year was the movie \" The Imitation Game \" produced",
        "predicted_parse": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT release_year FROM movie WHERE title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What year was \" Benedict Cumberbatch \" born ?",
        "predicted_parse": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
        "gold_parse": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "In what year was \" Benedict Cumberbatch \" born",
        "predicted_parse": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
        "gold_parse": "SELECT birth_year FROM actor WHERE name  =  \"Benedict Cumberbatch\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the nationality of the actress \" Christoph Waltz \" ?",
        "predicted_parse": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
        "gold_parse": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the nationality of the actor \" Christoph Waltz \" ?",
        "predicted_parse": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
        "gold_parse": "SELECT nationality FROM actor WHERE name  =  \"Christoph Waltz\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies produced in 2015",
        "predicted_parse": "SELECT title FROM movie WHERE release_year  =  2015;",
        "gold_parse": "SELECT title FROM movie WHERE release_year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors born in \" Tehran \"",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors born in Tehran",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Which actors were born in Tehran",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Tehran\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors who are from Afghanistan",
        "predicted_parse": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "gold_parse": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors from Afghanistan",
        "predicted_parse": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "gold_parse": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Give me the name of all the actors from Afghanistan",
        "predicted_parse": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "gold_parse": "SELECT name FROM actor WHERE nationality  =  \"Afghanistan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors who were born in 1984",
        "predicted_parse": "SELECT name FROM actor WHERE birth_year  =  1984;",
        "gold_parse": "SELECT name FROM actor WHERE birth_year  =  1984;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "When was \" Kevin Spacey \" born ?",
        "predicted_parse": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
        "gold_parse": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "In what year was \" Kevin Spacey \" born ?",
        "predicted_parse": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
        "gold_parse": "SELECT birth_year FROM actor WHERE name  =  \"actor_name0\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Where is the birth place of \" Kevin Spacey \"",
        "predicted_parse": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
        "gold_parse": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "In what city was \" Kevin Spacey \" born ?",
        "predicted_parse": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
        "gold_parse": "SELECT birth_city FROM director WHERE name  =  \"director_name0\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the nationality of \" Kevin Spacey \" ?",
        "predicted_parse": "SELECT nationality FROM director WHERE name  =  \"director_name0\";",
        "gold_parse": "SELECT nationality FROM director WHERE name  =  \"director_name0\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How much was the budget of \" Finding Nemo \"",
        "predicted_parse": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";",
        "gold_parse": "SELECT budget FROM movie WHERE title  =  \"Finding Nemo\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies directed by \" Steven Spielberg \" after 2006",
        "predicted_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;",
        "gold_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\" AND t3.release_year  >  2006;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who is the director of the movie \" James Bond \" ?",
        "predicted_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who directed the movie \" James Bond \" ?",
        "predicted_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "List \" James Bond \" directors",
        "predicted_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"James Bond\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the actor who played \" Alan Turing \" in the movie \" The Imitation Game \"",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who acted \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who was the actor that played \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who acts as \" Alan Turing \" in the movie \" The Imitation Game \" ?",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who is the actor playing \" Alan Turing \" in \" The Imitation Game \" ?",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t2.role  =  \"Alan Turing\" AND t3.title  =  \"The Imitation Game\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the genre of the movie \" Jurassic Park \" ?",
        "predicted_parse": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";",
        "gold_parse": "SELECT t2.genre FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"Jurassic Park\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who was the director of the movie Joy from 2015 ?",
        "predicted_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.release_year  =  2015 AND t3.title  =  \"Joy\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies written by \" Matt Damon \"",
        "predicted_parse": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";",
        "gold_parse": "SELECT t1.title FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t2.name  =  \"Matt Damon\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies written and produced by \" Woody Allen \"",
        "predicted_parse": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";",
        "gold_parse": "SELECT t2.title FROM movie AS t2 JOIN made_by AS t3 ON t2.mid  =  t3.msid JOIN producer AS t1 ON t1.pid  =  t3.pid JOIN written_by AS t5 ON t5.msid  =  t2.mid JOIN writer AS t4 ON t5.wid  =  t4.wid WHERE t1.name  =  \"Woody Allen\" AND t4.name  =  \"Woody Allen\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies featuring \" Robin Wright \"",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are all the movies featuring \" Robin Wright \" ?",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies in which \" Robin Wright \" appears",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Robin Wright\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What was the budget of the movie Juno from 2007 ?",
        "predicted_parse": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";",
        "gold_parse": "SELECT budget FROM movie WHERE release_year  =  2007 AND title  =  \"Juno\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all Sci-Fi produced in year 2010",
        "predicted_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
        "gold_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "List all the Sci-Fi movies which released in 2010",
        "predicted_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
        "gold_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.genre  =  \"Sci-Fi\" AND t3.release_year  =  2010;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors born in \" Austin \" after 1980",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who are the actors born in \" Austin \" after 1980 ?",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors from Austin born after 1980",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND birth_year  >  1980;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies by directors born in \" Los Angeles \"",
        "predicted_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";",
        "gold_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.birth_city  =  \"Los Angeles\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors who were born in \" New York City \" in 1984",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  =  1984;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies about nuclear weapons",
        "predicted_parse": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
        "gold_parse": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are the movies related to nuclear weapons",
        "predicted_parse": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
        "gold_parse": "SELECT t3.title FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"nuclear weapons\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Which movies did \" Alfred Hitchcock \" direct ?",
        "predicted_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";",
        "gold_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Alfred Hitchcock\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \"",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are all the movies directed by \" Asghar Farhadi \" featuring \" Taraneh Alidoosti \" ?",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies are there that are directed by \" Asghar Farhadi \" and featuring \" Taraneh Alidoosti \" ?",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "List all the movies directed by \" Asghar Farhadi \" in which \" Taraneh Alidoosti \" played",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN directed_by AS t2 ON t4.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Taraneh Alidoosti\" AND t3.name  =  \"Asghar Farhadi\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are all the tv series created by \" Shonda Rhimes \" ?",
        "predicted_parse": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";",
        "gold_parse": "SELECT t2.title FROM producer AS t1 JOIN made_by AS t3 ON t1.pid  =  t3.pid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Shonda Rhimes\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who acts \" Olivia Pope \" in the series Scandal ?",
        "predicted_parse": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t3.role  =  \"Olivia Pope\" AND t2.title  =  \"Scandal\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who is the writer of the movie \" The Truman Show \"",
        "predicted_parse": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
        "gold_parse": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who is the writer of \" The Truman Show \"",
        "predicted_parse": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
        "gold_parse": "SELECT t2.name FROM written_by AS t3 JOIN movie AS t1 ON t3.msid  =  t1.mid JOIN writer AS t2 ON t3.wid  =  t2.wid WHERE t1.title  =  \"The Truman Show\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are the series featuring \" Scott Foley \" ?",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are the series in which \" Scott Foley \" is an actor ?",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN tv_series AS t2 ON t2.sid  =  t3.msid WHERE t1.name  =  \"Scott Foley\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the directors of all movies featuring \" Kate Winslet \"",
        "predicted_parse": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";",
        "gold_parse": "SELECT t3.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.name  =  \"Kate Winslet\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the producers of all movies in which \" Kate Winslet \" is an actor",
        "predicted_parse": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t3 JOIN actor AS t2 ON t3.aid  =  t2.aid JOIN movie AS t5 ON t5.mid  =  t3.msid JOIN made_by AS t4 ON t5.mid  =  t4.msid JOIN producer AS t1 ON t1.pid  =  t4.pid WHERE t2.name  =  \"Kate Winslet\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Who is the director of the tv series \" House of Cards \" from 2013 ?",
        "predicted_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";",
        "gold_parse": "SELECT t2.name FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN tv_series AS t3 ON t3.sid  =  t1.msid WHERE t3.release_year  =  2013 AND t3.title  =  \"House of Cards\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all the female actors from Austin",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"Austin\" AND gender  =  \"female\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors from Italy born after 1980",
        "predicted_parse": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";",
        "gold_parse": "SELECT name FROM actor WHERE birth_year  >  1980 AND nationality  =  \"Italy\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all the female actors born in \" New York City \" after 1980",
        "predicted_parse": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "gold_parse": "SELECT name FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all the female actors in the movie \" Saving Private Ryan \"",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.gender  =  \"female\" AND t3.title  =  \"Saving Private Ryan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all the directors who are from Afghanistan",
        "predicted_parse": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";",
        "gold_parse": "SELECT name FROM director WHERE nationality  =  \"Afghanistan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the actors who played in the movie \" Camp X-Ray \"",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Camp X-Ray\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors from Canada who acted in \" James Bond \" movies",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"Canada\" AND t3.title  =  \"James Bond\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "find all films in which \" Rowan Atkinson \" acted as \" Mr. Bean \"",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Rowan Atkinson\" AND t3.role  =  \"Mr. Bean\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "where is the director of \" The Past \" from",
        "predicted_parse": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";",
        "gold_parse": "SELECT t2.birth_city FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t3.title  =  \"The Past\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "who acted the role of \" Mr. Bean \"",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid WHERE t2.role  =  \"Mr. Bean\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "what are the genres of movies directed by \" Asghar Farhadi \"",
        "predicted_parse": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";",
        "gold_parse": "SELECT t3.genre FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN classification AS t1 ON t4.mid  =  t1.msid JOIN genre AS t3 ON t3.gid  =  t1.gid WHERE t5.name  =  \"Asghar Farhadi\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Which movie had the character \" Daffy Duck \"",
        "predicted_parse": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";",
        "gold_parse": "SELECT t1.title FROM movie AS t1 JOIN CAST AS t2 ON t1.mid  =  t2.msid WHERE t2.role  =  \"Daffy Duck\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What are the major roles in the movie \" Daddy Long Legs \"",
        "predicted_parse": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";",
        "gold_parse": "SELECT t2.role FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Daddy Long Legs\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "List all the directors of movies about nuclear weapons",
        "predicted_parse": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";",
        "gold_parse": "SELECT t3.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN tags AS t5 ON t5.msid  =  t4.mid JOIN keyword AS t1 ON t5.kid  =  t1.id WHERE t1.keyword  =  \"nuclear weapons\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of movies in which \" Jennifer Aniston \" acted after 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Jennifer Aniston\" AND t2.release_year  >  2010;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of actors in the movie \" Saving Private Ryan \" ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many actors are in the movie \" Saving Private Ryan \" ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t3.title  =  \"Saving Private Ryan\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Steven Spielberg \" direct ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Steven Spielberg\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies were produced in the year 2013 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "gold_parse": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of movies produced in 2013 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "gold_parse": "SELECT COUNT ( DISTINCT title  ) FROM movie WHERE release_year  =  2013;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of movies directed by \" Woody Allen \" per year ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  )  ,  t3.release_year FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Woody Allen\" GROUP BY t3.release_year;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Shahab Hosseini \" act in ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of movies in which \" Shahab Hosseini \" acted ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of movies featuring \" Shahab Hosseini \" ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Shahab Hosseini \" act in",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Shahab Hosseini\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many actors were born in \" Los Angeles \" after 2000 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;",
        "gold_parse": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"Los Angeles\" AND birth_year  >  2000;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Humphrey Bogart \" act in before 1942 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  ) FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Humphrey Bogart\" AND t2.release_year  <  1942;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the number of movies that \" Brad Pitt \" acts in per year ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;",
        "gold_parse": "SELECT COUNT ( DISTINCT t2.title  )  ,  t2.release_year FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.name  =  \"Brad Pitt\" GROUP BY t2.release_year;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies about Iraq war were produced in 2015 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Iraq war\" AND t3.release_year  =  2015;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies about Persians were released after 1990 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM tags AS t2 JOIN keyword AS t1 ON t2.kid  =  t1.id JOIN movie AS t3 ON t2.msid  =  t3.mid WHERE t1.keyword  =  \"Persians\" AND t3.release_year  >  1990;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Quentin Tarantino \" direct after 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  >  2010;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;",
        "gold_parse": "SELECT COUNT ( DISTINCT t3.title  ) FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" AND t3.release_year  <  2010;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many movies did \" Quentin Tarantino \" direct before 2002 and after 2010 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
        "gold_parse": "SELECT COUNT ( DISTINCT t4.title  ) FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid WHERE t3.name  =  \"Quentin Tarantino\" AND t4.release_year  <  2010 AND t4.release_year  >  2002;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many female actors were born in \" New York City \" after 1980 ?",
        "predicted_parse": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "gold_parse": "SELECT COUNT ( DISTINCT name  ) FROM actor WHERE birth_city  =  \"New York City\" AND birth_year  >  1980 AND gender  =  \"female\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "find the number of actors from Iran who played in \" Jim Jarmusch \" movies",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t1.nationality  =  \"Iran\" AND t3.name  =  \"Jim Jarmusch\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "How many actors from China have acted in \" Rush Hour 3 \"",
        "predicted_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";",
        "gold_parse": "SELECT COUNT ( DISTINCT t1.name  ) FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.nationality  =  \"China\" AND t3.title  =  \"Rush Hour 3\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies that star both \" Woody Strode \" and \" Jason Robards \"",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies featuring \" Woody Strode \" and \" Jason Robards \"",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies featuring both \" Woody Strode \" and \" Jason Robards \"",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all movies featuring \" Jason Robards \" and \" Woody Strode \"",
        "predicted_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "gold_parse": "SELECT t4.title FROM CAST AS t5 JOIN actor AS t1 ON t5.aid  =  t1.aid JOIN movie AS t4 ON t4.mid  =  t5.msid JOIN CAST AS t3 ON t4.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t1.name  =  \"Woody Strode\" AND t2.name  =  \"Jason Robards\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find all actors who acted in the same movie as \" Tom Hanks \"",
        "predicted_parse": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";",
        "gold_parse": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN CAST AS t3 ON t5.mid  =  t3.msid JOIN actor AS t2 ON t3.aid  =  t2.aid WHERE t2.name  =  \"Tom Hanks\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What movies have the same director as the movie \" Revolutionary Road \" ?",
        "predicted_parse": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";",
        "gold_parse": "SELECT t3.title FROM director AS t5 JOIN directed_by AS t2 ON t5.did  =  t2.did JOIN directed_by AS t1 ON t5.did  =  t1.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t4.title  =  \"Revolutionary Road\";",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the movie which is classified in the most number of genres",
        "predicted_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;",
        "gold_parse": "SELECT t3.title FROM genre AS t2 JOIN classification AS t1 ON t2.gid  =  t1.gid JOIN movie AS t3 ON t3.mid  =  t1.msid GROUP BY t3.title ORDER BY COUNT ( DISTINCT t2.genre  ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "which movie has the most number of actors from China ?",
        "predicted_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;",
        "gold_parse": "SELECT t2.title FROM CAST AS t3 JOIN actor AS t1 ON t3.aid  =  t1.aid JOIN movie AS t2 ON t2.mid  =  t3.msid WHERE t1.nationality  =  \"China\" GROUP BY t2.title ORDER BY COUNT ( DISTINCT t1.name  ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the actors who played in the latest movie by \" Quentin Tarantino \"",
        "predicted_parse": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM CAST AS t4 JOIN actor AS t1 ON t4.aid  =  t1.aid JOIN movie AS t5 ON t5.mid  =  t4.msid JOIN directed_by AS t2 ON t5.mid  =  t2.msid JOIN director AS t3 ON t3.did  =  t2.did WHERE t3.name  =  \"Quentin Tarantino\" ORDER BY t5.release_year DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the name and budget of the latest movie by \" Quentin Tarantino \"",
        "predicted_parse": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
        "gold_parse": "SELECT t3.budget  ,  t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Quentin Tarantino\" ORDER BY t3.release_year DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "What is the latest movie by \" Jim Jarmusch \"",
        "predicted_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
        "gold_parse": "SELECT t3.title FROM director AS t2 JOIN directed_by AS t1 ON t2.did  =  t1.did JOIN movie AS t3 ON t3.mid  =  t1.msid WHERE t2.name  =  \"Jim Jarmusch\" ORDER BY t3.release_year DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Which producer has worked with the most number of directors ?",
        "predicted_parse": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM director AS t3 JOIN directed_by AS t2 ON t3.did  =  t2.did JOIN movie AS t4 ON t4.mid  =  t2.msid JOIN made_by AS t5 ON t4.mid  =  t5.msid JOIN producer AS t1 ON t1.pid  =  t5.pid GROUP BY t1.name ORDER BY COUNT ( DISTINCT t3.name  ) DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "imdb",
        "question": "Find the latest movie which \" Gabriele Ferzetti \" acted in",
        "predicted_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
        "gold_parse": "SELECT t1.name FROM CAST AS t2 JOIN actor AS t1 ON t2.aid  =  t1.aid JOIN movie AS t3 ON t3.mid  =  t2.msid WHERE t1.name  =  \"Gabriele Ferzetti\" ORDER BY t3.release_year DESC LIMIT 1;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many buttercup kitchen are there in san francisco ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"buttercup kitchen\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many chinese restaurants are there in the bay area ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many places for chinese food are there in the bay area ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many chinese places are there in the bay area ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many places for chinese are there in the bay area ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"chinese\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many jamerican cuisine are there in santa cruz county ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"santa cruz county\" AND t1.name  =  \"jamerican cuisine\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is jamerican cuisine ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.name  =  \"jamerican cuisine\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is the best french restaurant in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "What is the best french in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "What is the best place in san francisco for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Give me the best place in san francisco for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Where is the best french in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Give me the best french in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Where is the best french restaurant in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Give me the best restaurant in san francisco for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Give me the best french restaurant in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "What is the best restaurant in san francisco for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "Where is the best restaurant in san francisco for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.food_type  =  \"french\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is denny in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good restaurants on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good restaurants on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good restaurant on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is a good restaurant on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can we find a restaurant in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a restaurant in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can we find some restaurants in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a restaurant in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants good for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some restaurants good for french food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many places for french food are there in palo alto ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many french restaurants are there in palo alto ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many french restaurant are there in palo alto ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many places for french are there in palo alto ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"palo alto\" AND t1.food_type  =  \"french\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many italian restaurants are in the yolo county ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.county  =  \"yolo county\" AND t1.food_type  =  \"italian\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i eat french food in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"french\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "how many denny are there in the bay area ?",
        "predicted_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
        "gold_parse": "SELECT COUNT ( * ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.name  =  \"denny\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good restaurant in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good restaurants in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is a good restaurant in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good restaurants in alameda ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"alameda\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good restaurant on buchanan in san francisco for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some good arabics on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good arabic restaurant on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good places for arabic on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good arabic on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants good for arabic food on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good place on buchanan in san francisco for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good place on buchanan in san francisco for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i eat arabic food on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good places on buchanan in san francisco for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a arabic restaurant on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a restaurant on buchanan in san francisco that serves good arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good restaurant on buchanan in san francisco for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a restaurant on buchanan in san francisco that serves good arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good restaurants on buchanan in san francisco for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good places for arabic on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i eat some good arabic food on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good arabic on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some restaurants good for arabic food on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some good places for arabic on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good arabic restaurant on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good arabics on buchanan in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t2.street_name  =  \"buchanan\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i eat french food in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"french\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a restaurant on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can we find a restaurant on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can we find some restaurants on bethel island rd in bethel island ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"bethel island\" AND t2.street_name  =  \"bethel island rd\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is the best restaurant in the bay area for american food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is the best restaurant in bay area for american food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is the best restaurant in bay area for american food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is the best american restaurant in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is the best american restaurant in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is the best american in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me the best restaurant in the bay area for american food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me the best restaurant in bay area for american food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is the best restaurant in the bay area for american food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is the best american in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me the best american in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me the best american restaurant in the bay area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" AND t1.rating  =  ( SELECT MAX ( t1.rating ) FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name WHERE t2.region  =  \"bay area\" AND t1.food_type  =  \"american\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants good for french food in the yosemite and mono lake area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good places in the yosemite and mono lake area for french food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good restaurant in the yosemite and mono lake area for french food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good french restaurant in the yosemite and mono lake area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good place in the yosemite and mono lake area for french food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some restaurants good for french food in the yosemite and mono lake area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good place in the yosemite and mono lake area for french food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good restaurant in the yosemite and mono lake area for french food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good restaurants in the yosemite and mono lake area for french food ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good french restaurant in the yosemite and mono lake area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i eat some good french food in the yosemite and mono lake area ?",
        "predicted_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t3.house_number  ,  t1.name FROM restaurant AS t1 JOIN geographic AS t2 ON t1.city_name  =  t2.city_name JOIN LOCATION AS t3 ON t1.id  =  t3.restaurant_id WHERE t2.region  =  \"yosemite and mono lake area\" AND t1.food_type  =  \"french\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some restaurants good for arabic food in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good places in mountain view for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some good arabic restaurants in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "show me a good arabic restaurant in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good arabic in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good arabic restaurant in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good place in mountain view for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some good arabics in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a restaurant in mountain view that serves good arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good restaurants in mountain view for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants good for arabic food in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i eat some good arabic food in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good places for arabic in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good arabic in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a restaurant in mountain view that serves good arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good arabic restaurants in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where are some good places for arabic in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good arabics in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good restaurant in mountain view for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good arabic restaurant in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good places for arabic in mountain view ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good restaurant in mountain view for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a good place in mountain view for arabic food ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"mountain view\" AND t1.food_type  =  \"arabic\" AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i find a jamerican cuisine in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is jamerican cuisine in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where is a jamerican cuisine in san francisco ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM restaurant AS t1 JOIN LOCATION AS t2 ON t1.id  =  t2.restaurant_id WHERE t2.city_name  =  \"san francisco\" AND t1.name  =  \"jamerican cuisine\";",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can we find some restaurants in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some restaurants in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a restaurant in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "where can i find a restaurant in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"bay area\" );",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me a good restaurant in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what are some good restaurants in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "give me some good restaurants in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "restaurants",
        "question": "what is a good restaurant in the bay area ?",
        "predicted_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "gold_parse": "SELECT t2.house_number  ,  t1.name FROM LOCATION AS t2 JOIN restaurant AS t1 ON t1.id  =  t2.restaurant_id  WHERE t1.city_name IN ( SELECT city_name FROM geographic WHERE region  =  \"region0\" ) AND t1.rating  >  2.5;",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select count(*) from Products",
        "question": "How many products are there?",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products   order by products.product_price asc",
        "question": "List the name of products in ascending order of price.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name , products.product_type_code from Products",
        "question": "What are the names and type codes of products?",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_price from Products where  products.product_name = \"Dining\" or products.product_name = \"Trading Policy\"",
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_price from Products where  products.product_name = \"Diner\" or products.product_name = \"Trading Policy\"",
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_price from Products where  products.product_name = \"Dinner\" or products.product_name = \"Trading Policy\"",
        "question": "Show the prices of the products named \"Dining\" or \"Trading Policy\".",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select avg(products.product_price) from Products",
        "question": "What is the average price for products?",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products   order by products.product_price desc limit 1",
        "question": "What is the name of the product with the highest price?",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_type_code , count(*) from Products  group by products.product_type_code",
        "question": "Show different type codes of products and the number of products with each type code.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_type_code from Products  group by products.product_type_code  order by count(*) desc limit 1",
        "question": "Show the most common type code across products.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_type_code from Products  group by products.product_type_code having  count(*) >= 2",
        "question": "Show the product type codes that have at least two products.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_type_code from Products where  products.product_price > 4500   intersect select products.product_type_code from Products where  products.product_price < 3000",
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_type_code from Products where  products.product_price > 4500   intersect select products.product_type_code from Products where  products.product_price <= 3000",
        "question": "Show the product type codes that have both products with price higher than 4500 and products with price lower than 3000.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name , count(*) from Products_in_Events join Products on Products_in_Events.Product_ID = Products.Product_ID  group by products.product_name",
        "question": "Show the names of products and the number of events they are in.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name , count(*) from Products_in_Events join Products on Products_in_Events.Product_ID = Products.Product_ID  group by products.product_name  order by count(*) desc",
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products_in_Events join Products on Products_in_Events.Product_ID = Products.Product_ID  group by products_in_events.product_id having  count(*) >= 2",
        "question": "Show the names of products that are in at least two events.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products_in_Events join Products on Products_in_Events.Product_ID = Products.Product_ID  group by products.product_name having  count(*) >= 2",
        "question": "Show the names of products that are in at least two events.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products_in_Events join Products on Products_in_Events.Product_ID = Products.Product_ID  group by products.product_name having  count(*) >= 2  order by products.product_name asc",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products_in_Events join Products on Products_in_Events.Product_ID = Products.Product_ID  group by products_in_events.product_id having  count(*) >= 2  order by products.product_name asc",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "correctness": 1
    },
    {
        "db_id": "solvency_ii",
        "query": "select products.product_name from Products where  products.product_id not in (select Products_in_Events.Product_ID from Products_in_Events  )",
        "question": "List the names of products that are not in any event.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select count(*) from editor",
        "question": "How many editors are there?",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor   order by editor.age asc",
        "question": "List the names of editors in ascending order of age.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name , editor.age from editor",
        "question": "What are the names and ages of editors?",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor where  editor.age > 25",
        "question": "List the names of editors who are older than 25.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor where  editor.age = 24 or editor.age = 25",
        "question": "Show the names of editors of age either 24 or 25.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor where  editor.age = \"24\" or editor.age = \"25\"",
        "question": "Show the names of editors of age either 24 or 25.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor   order by editor.age asc limit 1",
        "question": "What is the name of the youngest editor?",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor where  editor.age = (select min(editor.age) from editor  )",
        "question": "What is the name of the youngest editor?",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.age , count(*) from editor  group by editor.age",
        "question": "What are the different ages of editors? Show each age along with the number of editors of that age.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.age from editor  group by editor.age  order by count(*) desc limit 1",
        "question": "Please show the most common age of editors.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select distinct journal.theme from journal",
        "question": "Show the distinct themes of journals.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name , journal.theme from journal_committee join journal on journal_committee.Journal_ID = journal.Journal_ID join editor on journal_committee.Editor_ID = editor.Editor_ID",
        "question": "Show the names of editors and the theme of journals for which they serve on committees.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name , journal.theme from journal_committee join journal on journal_committee.Journal_ID = journal.Journal_ID join editor on journal_committee.Editor_ID = editor.Editor_ID",
        "question": "For each journal_committee, find the editor name and the journal theme.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name , editor.age , journal.theme from journal_committee join journal on journal_committee.Journal_ID = journal.Journal_ID join editor on journal_committee.Editor_ID = editor.Editor_ID   order by journal.theme asc",
        "question": "Show the names and ages of editors and the theme of journals for which they serve on committees, in ascending alphabetical order of theme.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from journal_committee join journal on journal_committee.Journal_ID = journal.Journal_ID join editor on journal_committee.Editor_ID = editor.Editor_ID where  journal.sales > 3000",
        "question": "Show the names of editors that are on the committee of journals with sales bigger than 3000.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.editor_id , editor.name , count(*) from journal_committee join editor on journal_committee.Editor_ID = editor.Editor_ID  group by journal_committee.editor_id",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.editor_id , editor.name , count(*) from journal_committee join editor on journal_committee.Editor_ID = editor.Editor_ID  group by editor.editor_id",
        "question": "Show the id, name of each editor and the number of journal committees they are on.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from journal_committee join editor on journal_committee.Editor_ID = editor.Editor_ID  group by journal_committee.editor_id having  count(*) >= 2",
        "question": "Show the names of editors that are on at least two journal committees.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from journal_committee join editor on journal_committee.Editor_ID = editor.Editor_ID  group by journal_committee.editor_id having  count( distinct journal_committee.journal_id) >= 2",
        "question": "Show the names of editors that are on at least two journal committees.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor where  editor.editor_id not in (select journal_committee.Editor_ID from journal_committee  )",
        "question": "List the names of editors that are not on any journal committee.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select editor.name from editor   except select editor.name from journal_committee join editor on journal_committee.Editor_ID = editor.Editor_ID",
        "question": "List the names of editors that are not on any journal committee.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select journal.date , journal.theme , journal.sales from journal where  journal.journal_id not in (select journal_committee.Journal_ID from journal_committee  )",
        "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select journal.date , journal.theme , journal.sales from journal   except select journal.date , journal.theme , journal.sales from journal_committee join journal on journal_committee.Journal_ID = journal.Journal_ID",
        "question": "List the date, theme and sales of the journal which did not have any of the listed editors serving on committee.",
        "correctness": 1
    },
    {
        "db_id": "journal_committee",
        "query": "select avg(journal.sales) from journal_committee join journal on journal_committee.Journal_ID = journal.Journal_ID where  journal_committee.work_type = \"Photo\"",
        "question": "What is the average sales of the journals that have an editor whose work type is 'Photo'?",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select count(*) from roller_coaster",
        "question": "How many roller coasters are there?",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.name from roller_coaster   order by roller_coaster.length asc",
        "question": "List the names of roller coasters by ascending order of length.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.length , roller_coaster.height from roller_coaster",
        "question": "What are the lengths and heights of roller coasters?",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name from country where  country.languages != \"German\"",
        "question": "List the names of countries whose language is not \"German\".",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.status from roller_coaster where  roller_coaster.length > 3300 or roller_coaster.height > 100",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.speed from roller_coaster   order by roller_coaster.length desc limit 1",
        "question": "What are the speeds of the longest roller coaster?",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select avg(roller_coaster.speed) from roller_coaster",
        "question": "What is the average speed of roller coasters?",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.status , count(*) from roller_coaster  group by roller_coaster.status",
        "question": "Show the different statuses and the numbers of roller coasters for each status.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.status from roller_coaster  group by roller_coaster.status  order by count(*) desc limit 1",
        "question": "Please show the most common status of roller coasters.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.status from roller_coaster  group by roller_coaster.status having  count(*) > 2",
        "question": "List the status shared by more than two roller coaster.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.park from roller_coaster   order by roller_coaster.speed desc limit 1",
        "question": "Show the park of the roller coaster with the highest speed.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select roller_coaster.name , country.name from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID",
        "question": "Show the names of roller coasters and names of country they are in.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID  group by country.name having  count(*) > 1",
        "question": "Show the names of countries that have more than one roller coaster.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID  group by roller_coaster.country_id having  count(*) > 1",
        "question": "Show the names of countries that have more than one roller coaster.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID  group by country.country_id having  count(*) > 1",
        "question": "Show the names of countries that have more than one roller coaster.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name , country.population from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID   order by roller_coaster.height desc limit 1",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name , country.population from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID where  roller_coaster.height > 1   order by roller_coaster.height desc limit 1",
        "question": "Show the name and population of the country that has the highest roller coaster.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select country.name , avg(roller_coaster.speed) from roller_coaster join country on roller_coaster.Country_ID = country.Country_ID  group by country.name",
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select count(*) from country where  country.country_id not in (select roller_coaster.Country_ID from roller_coaster where  roller_coaster.length > 3000  )",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "correctness": 1
    },
    {
        "db_id": "roller_coaster",
        "query": "select count(*) from country where  country.country_id not in (select country.Country_ID from country join roller_coaster on country.Country_ID = roller_coaster.Country_ID where  roller_coaster.length > 3000  )",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select available_policies.customer_phone from Available_Policies where  available_policies.policy_type_code = \"Life Insurance\"",
        "question": "What are the customer phone numbers under the policy \"Life Insurance\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select available_policies.customer_phone from Available_Policies where  available_policies.policy_type_code = \"Life Insurance\"",
        "question": "What are the phone numbers of customers using the policy with the code \"Life Insurance\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select available_policies.policy_type_code from Available_Policies  group by available_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which policy type has the most records in the database?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select available_policies.policy_type_code from Available_Policies  group by available_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which policy type appears most frequently in the available policies?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select available_policies.policy_type_code from Available_Policies  group by available_policies.policy_type_code having  count(*) > 4",
        "question": "Find the policy types more than 4 customers use. Show their type code.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select sum(settlements.settlement_amount) , avg(settlements.settlement_amount) from Settlements",
        "question": "Find the total and average amount of settlements.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select sum(settlements.settlement_amount) , avg(settlements.settlement_amount) from Settlements",
        "question": "Return the sum and average of all settlement amounts.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select services.service_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID  group by first_notification_of_loss.service_id having  count(*) > 2",
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select services.service_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID  group by services.service_name having  count(*) > 2",
        "question": "Find the name of services that have been used for more than 2 times in first notification of loss.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select services.service_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID  group by first_notification_of_loss.service_id having  count(*) > 2",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select services.service_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID  group by services.service_name having  count(*) > 2",
        "question": "Which services have been used more than twice in first notification of loss? Return the service name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select claims.effective_date from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.claim_id  order by sum(settlements.settlement_amount) desc limit 1",
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select claims.effective_date from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID   order by settlements.settlement_amount desc limit 1",
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select claims.effective_date from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.effective_date  order by sum(settlements.settlement_amount) desc limit 1",
        "question": "What is the effective date of the claim that has the largest amount of total settlement?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select count(*) from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name = \"Dayana Robel\"",
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select count(*) from Customers_Policies join Available_Policies on Customers_Policies.Policy_ID = Available_Policies.Policy_ID join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name = \"Dayana Robel\"",
        "question": "How many policies are listed for the customer named \"Dayana Robel\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select count(*) from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name = \"Dayana Robel\"",
        "question": "Count the total number of policies used by the customer named \"Dayana Robel\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_name  order by count(*) desc limit 1",
        "question": "What is the name of the customer who has the most policies listed?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "What is the name of the customer who has the most policies listed?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID  group by customers_policies.customer_id  order by count(*) desc limit 1",
        "question": "What is the name of the customer who has the most policies listed?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_name  order by count(*) desc limit 1",
        "question": "Which customer uses the most policies? Give me the customer name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers_policies.policy_id = (select max(Customers_Policies.Policy_ID) from Customers_Policies  )",
        "question": "Which customer uses the most policies? Give me the customer name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select distinct available_policies.policy_type_code from Customers_Policies join Available_Policies on Customers_Policies.Policy_ID = Available_Policies.Policy_ID join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name = \"Dayana Robel\"",
        "question": "What are all the policy types of the customer named \"Dayana Robel\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select distinct available_policies.policy_type_code from Customers_Policies join Available_Policies on Customers_Policies.Policy_ID = Available_Policies.Policy_ID join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name = \"Dayana Robel\"",
        "question": "Tell me the types of the policy used by the customer named \"Dayana Robel\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select services.service_name from Services   order by services.service_name asc",
        "question": "List all the services in the alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select services.service_name from Services   order by services.service_name asc",
        "question": "Give me a list of all the service names sorted alphabetically.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select count(*) from Services",
        "question": "How many services are there?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select count(*) from Services",
        "question": "Count the total number of available services.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers   except select customers.customer_name from First_Notification_of_Loss join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers where  customers.customer_id not in (select First_Notification_of_Loss.Customer_ID from First_Notification_of_Loss  )",
        "question": "Find the names of users who do not have a first notification of loss record.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers   except select customers.customer_name from First_Notification_of_Loss join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID",
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from Customers where  customers.customer_id not in (select First_Notification_of_Loss.Customer_ID from First_Notification_of_Loss  )",
        "question": "Which customers do not have a first notification of loss record? Give me the customer names.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\" or services.service_name = \"Upgrade a policy\"",
        "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select distinct customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\" or services.service_name = \"Upgrade a policy\"",
        "question": "Find the names of customers who have used either the service \"Close a policy\" or the service \"Upgrade a policy\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\" or services.service_name = \"Upgrade a policy\"",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select distinct customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\" or services.service_name = \"Upgrade a policy\"",
        "question": "Which customers have used the service named \"Close a policy\" or \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\"   intersect select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"New policy application\"",
        "question": "Find the names of customers who have used both the service \"Close a policy\" and the service \"New policy application\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\"   intersect select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Upgrade a policy\"",
        "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"Close a policy\"   intersect select customers.customer_name from First_Notification_of_Loss join Services on First_Notification_of_Loss.Service_ID = Services.Service_ID join Customers on First_Notification_of_Loss.Customer_ID = Customers.Customer_ID where  services.service_name = \"UPgrade a policy\"",
        "question": "Which customers have used both the service named \"Close a policy\" and the service named \"Upgrade a policy\"? Give me the customer names.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_id from Customers where  customers.customer_name like \"%Diana%\"",
        "question": "Find the IDs of customers whose name contains \"Diana\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers.customer_id from Customers where  customers.customer_name like \"%Diana%\"",
        "question": "What are the IDs of customers who have \"Diana\" in part of their names?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select max(settlements.settlement_amount) , min(settlements.settlement_amount) from Settlements",
        "question": "What are the maximum and minimum settlement amount on record?",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select max(settlements.settlement_amount) , min(settlements.settlement_amount) from Settlements",
        "question": "Find the maximum and minimum settlement amount.",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers_policies.date_opened , customers_policies.date_closed from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name like \"%Diana%\"",
        "question": "Retrieve the open and close dates of all the policies associated with the customer whose name contains \"Diana\"",
        "correctness": 1
    },
    {
        "db_id": "insurance_fnol",
        "query": "select customers_policies.date_opened , customers_policies.date_closed from Customers_Policies join Customers on Customers_Policies.Customer_ID = Customers.Customer_ID where  customers.customer_name like \"%Diana%\"",
        "question": "What are the open and close dates of all the policies used by the customer who have \"Diana\" in part of their names?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select count(*) from Investors",
        "question": "Find the number of investors in total.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_details from Investors",
        "question": "Show all investor details.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select distinct lots.lot_details from Lots",
        "question": "Show all distinct lot details.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select max(transactions.amount_of_transaction) from Transactions",
        "question": "Show the maximum amount of transaction.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.date_of_transaction , transactions.share_count from Transactions",
        "question": "Show all date and share count of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select sum(transactions.share_count) from Transactions",
        "question": "What is the total share of transactions?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.transaction_id from Transactions where  transactions.transaction_type_code = \"PUR\"",
        "question": "Show all transaction ids with transaction code 'PUR'.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.date_of_transaction from Transactions where  transactions.transaction_type_code = \"SALE\"",
        "question": "Show all dates of transactions whose type code is \"SALE\".",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.amount_of_transaction) from Transactions where  transactions.transaction_type_code = \"SALE\"",
        "question": "Show the average amount of transactions with type code \"SALE\".",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select ref_transaction_types.transaction_type_description from Ref_Transaction_Types where  ref_transaction_types.transaction_type_code = \"PUR\"",
        "question": "Show the description of transaction type with code \"PUR\".",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select min(transactions.amount_of_transaction) from Transactions where  transactions.transaction_type_code = \"PUR\" and transactions.share_count > 50",
        "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select min(transactions.amount_of_transaction) from Transactions where  transactions.transaction_type_code = \"PUR\" or transactions.share_count > 50",
        "question": "Show the minimum amount of transactions whose type code is \"PUR\" and whose share count is bigger than 50.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select max(transactions.share_count) from Transactions where  transactions.amount_of_transaction < 10000",
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select max(transactions.share_count) from Transactions where  transactions.amount_of_transaction <= 10000",
        "question": "Show the maximum share count of transactions where the amount is smaller than 10000",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.date_of_transaction from Transactions where  transactions.share_count > 100 or transactions.amount_of_transaction > 1000",
        "question": "Show the dates of transactions if the share count is bigger than 100 or the amount is bigger than 1000.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select ref_transaction_types.transaction_type_description , transactions.date_of_transaction from Transactions join Ref_Transaction_Types on Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code where  transactions.share_count < 10",
        "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select ref_transaction_types.transaction_type_description , transactions.date_of_transaction from Transactions join Ref_Transaction_Types on Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code where  transactions.share_count <= 10",
        "question": "Show the transaction type descriptions and dates if the share count is smaller than 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id where  transactions.share_count > 100",
        "question": "Show details of all investors if they make any transaction with share count greater than 100.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select count( distinct transactions.transaction_type_code) from Transactions",
        "question": "How many distinct transaction types are used in the transactions?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select lots.lot_details , lots.investor_id from Lots",
        "question": "Return the lot details and investor ids.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select lots.lot_details , investors.investor_id from Lots join Investors on Lots.investor_id = Investors.investor_id",
        "question": "Return the lot details and investor ids.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select lots.lot_details from Lots join Investors on Lots.investor_id = Investors.investor_id where  investors.investor_details = \"l\"",
        "question": "Return the lot details of lots that belong to investors with details \"l\"?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select purchases.purchase_details from Purchases join Transactions on Purchases.purchase_transaction_id = Transactions.transaction_id where  transactions.amount_of_transaction > 10000",
        "question": "What are the purchase details of transactions with amount bigger than 10000?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select sales.sales_details , transactions.date_of_transaction from Sales join Transactions on Sales.sales_transaction_id = Transactions.transaction_id where  transactions.amount_of_transaction < 3000",
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select sales.sales_details , transactions.date_of_transaction from Sales join Transactions on Sales.sales_transaction_id = Transactions.transaction_id where  transactions.amount_of_transaction <= 3000",
        "question": "What are the sale details and dates of transactions with amount smaller than 3000?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.amount_of_transaction) , transactions.transaction_type_code from Transactions  group by transactions.transaction_type_code",
        "question": "Show the average transaction amount for different transaction types.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.transaction_type_code , avg(transactions.amount_of_transaction) from Transactions  group by transactions.transaction_type_code",
        "question": "Show the average transaction amount for different transaction types.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select max(transactions.share_count) , min(transactions.share_count) , transactions.transaction_type_code from Transactions  group by transactions.transaction_type_code",
        "question": "Show the maximum and minimum share count of different transaction types.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.share_count) , transactions.investor_id from Transactions  group by transactions.investor_id",
        "question": "Show the average share count of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , avg(transactions.share_count) from Transactions  group by transactions.investor_id",
        "question": "Show the average share count of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.share_count) , investors.investor_id from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by investors.investor_id  order by avg(transactions.share_count) asc",
        "question": "Show the average share count of transactions each each investor, ordered by average share count.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , avg(transactions.share_count) from Transactions  group by transactions.investor_id  order by avg(transactions.share_count) asc",
        "question": "Show the average share count of transactions each each investor, ordered by average share count.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , avg(transactions.share_count) from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by investors.investor_id  order by avg(transactions.share_count) asc",
        "question": "Show the average share count of transactions each each investor, ordered by average share count.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.amount_of_transaction) , transactions.investor_id from Transactions  group by transactions.investor_id",
        "question": "Show the average amount of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , avg(transactions.amount_of_transaction) from Transactions  group by transactions.investor_id",
        "question": "Show the average amount of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.amount_of_transaction) , transactions_lots.lot_id from Transactions_Lots join Transactions on Transactions_Lots.transaction_id = Transactions.transaction_id  group by transactions_lots.lot_id",
        "question": "Show the average amount of transactions for different lots.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions_lots.lot_id , avg(transactions.amount_of_transaction) from Transactions_Lots join Transactions on Transactions_Lots.transaction_id = Transactions.transaction_id  group by transactions_lots.lot_id",
        "question": "Show the average amount of transactions for different lots.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions_lots.lot_id , avg(transactions.amount_of_transaction) from Transactions_Lots join Transactions on Transactions_Lots.transaction_id = Transactions.transaction_id  group by transactions_lots.lot_id  order by avg(transactions.amount_of_transaction) asc",
        "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select avg(transactions.amount_of_transaction) , transactions_lots.lot_id from Transactions_Lots join Transactions on Transactions_Lots.transaction_id = Transactions.transaction_id  group by transactions_lots.lot_id  order by avg(transactions.amount_of_transaction) asc",
        "question": "Show the average amount of transactions for different lots, ordered by average amount of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , count(*) from Transactions where  transactions.transaction_type_code = \"SALE\"  group by transactions.investor_id",
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select count(*) , transactions.investor_id from Transactions where  transactions.transaction_type_code = \"SALE\"  group by transactions.investor_id",
        "question": "Show the number of transactions with transaction type code \"SALE\" for different investors if it is larger than 0.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , count(*) from Transactions  group by transactions.investor_id",
        "question": "Show the number of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select count(*) , transactions.investor_id from Transactions  group by transactions.investor_id",
        "question": "Show the number of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , count(*) from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by investors.investor_id",
        "question": "Show the number of transactions for different investors.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.transaction_type_code from Transactions  group by transactions.transaction_type_code  order by count(*) asc limit 1",
        "question": "Show the transaction type code that occurs the fewest times.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.transaction_type_code from Transactions  group by transactions.transaction_type_code  order by count(*) desc limit 1",
        "question": "Show the transaction type code that occurs the most frequently.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select ref_transaction_types.transaction_type_description from Transactions join Ref_Transaction_Types on Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code  group by ref_transaction_types.transaction_type_code  order by count(*) desc limit 1",
        "question": "Show the description of the transaction type that occurs most frequently.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select ref_transaction_types.transaction_type_description from Transactions join Ref_Transaction_Types on Transactions.transaction_type_code = Ref_Transaction_Types.transaction_type_code  group by transactions.transaction_type_code  order by count(*) desc limit 1",
        "question": "Show the description of the transaction type that occurs most frequently.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by transactions.investor_id  order by count(*) desc limit 1",
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by transactions.investor_id  order by count(*) desc limit 1",
        "question": "Show the id and details of the investor that has the largest number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by transactions.investor_id  order by count(*) desc limit 3",
        "question": "Show the id and details for the investors who have the top 3 number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by transactions.investor_id  order by count(*) desc limit 3",
        "question": "Show the id and details for the investors who have the top 3 number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by investors.investor_id  order by count(*) desc limit 3",
        "question": "Show the id and details for the investors who have the top 3 number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by investors.investor_id having  count(*) >= 2",
        "question": "Show the ids of the investors who have at least two transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.investor_id from Transactions  group by transactions.investor_id having  count(*) >= 2",
        "question": "Show the ids of the investors who have at least two transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id from Transactions join Investors on Transactions.investor_id = Investors.investor_id  group by transactions.investor_id having  count(*) >= 2",
        "question": "Show the ids of the investors who have at least two transactions.",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id where  transactions.transaction_type_code = \"SALE\"  group by investors.investor_id having  count(*) >= 2",
        "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select investors.investor_id , investors.investor_details from Transactions join Investors on Transactions.investor_id = Investors.investor_id where  transactions.transaction_type_code = \"SALE\"  group by transactions.investor_id having  count(*) >= 2",
        "question": "Show the ids and details of the investors who have at least two transactions with type code \"SALE\".",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.date_of_transaction from Transactions where  transactions.share_count >= 100 or transactions.amount_of_transaction > 100",
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.date_of_transaction from Transactions where  transactions.share_count > 100 or transactions.amount_of_transaction > 100",
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select transactions.date_of_transaction from Transactions where  transactions.share_count >= 100 or transactions.amount_of_transaction >= 100",
        "question": "What are the dates of transactions with at least 100 share count or amount bigger than 100?",
        "correctness": 1
    },
    {
        "db_id": "tracking_share_transactions",
        "query": "select lots.lot_details from Lots   except select lots.lot_details from Transactions_Lots join Lots on Transactions_Lots.lot_id = Lots.lot_id",
        "question": "What are the details of the lots which are not used in any transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Accounts",
        "question": "Show the number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Accounts",
        "question": "How many accounts are there?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count( distinct accounts.customer_id) from Accounts",
        "question": "How many customers have opened an account?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count( distinct accounts.customer_id) from Accounts",
        "question": "Count the number of customers who have an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_id , accounts.date_account_opened , accounts.account_name , accounts.other_account_details from Accounts",
        "question": "Show the id, the date of account opened, the account name, and other account detail for all accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_id , accounts.date_account_opened , accounts.account_name , accounts.other_account_details from Accounts",
        "question": "What are the ids, date opened, name, and other details for all accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_id , accounts.account_name , accounts.date_account_opened , accounts.other_account_details from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  customers.customer_first_name = \"Meaghan\"",
        "question": "What are the ids, names, dates of opening, and other details for accounts corresponding to the customer with the first name \"Meaghan\"?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , accounts.other_account_details from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  customers.customer_first_name = \"Meaghan\" and customers.customer_last_name = \"Keeling\"",
        "question": "Show the account name and other account detail for all accounts by the customer with first name Meaghan and last name Keeling.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , accounts.other_account_details from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  customers.customer_first_name = \"Meaghan\" and customers.customer_last_name = \"Keeling\"",
        "question": "What are the names and other details for accounts corresponding to the customer named Meaghan Keeling?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  accounts.account_name = \"900\"",
        "question": "Show the first name and last name for the customer with account name 900.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  accounts.account_name = 900",
        "question": "Show the first name and last name for the customer with account name 900.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  accounts.account_name = \"900\"",
        "question": "What are the full names of customers with the account name 900?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  accounts.account_name = \"900\"",
        "question": "What are the full names of customers with the account name 900?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  accounts.account_name = 900",
        "question": "What are the full names of customers with the account name 900?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id where  accounts.account_name = 900",
        "question": "What are the full names of customers with the account name 900?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "How many customers don't have an account?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "Count the number of customers who do not have an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name , customers.phone_number from Accounts join Customers on Accounts.customer_id = Customers.customer_id",
        "question": "Show the unique first names, last names, and phone numbers for all customers with any account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name , customers.phone_number from Accounts join Customers on Accounts.customer_id = Customers.customer_id",
        "question": "What are the distinct first names, last names, and phone numbers for customers with accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id from Customers   except select accounts.customer_id from Accounts",
        "question": "Show customer ids who don't have an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "Show customer ids who don't have an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id from Customers   except select accounts.customer_id from Accounts",
        "question": "What are the customer ids for customers who do not have an account?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "What are the customer ids for customers who do not have an account?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) , accounts.customer_id from Accounts  group by accounts.customer_id",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.customer_id , count(*) from Accounts  group by accounts.customer_id",
        "question": "How many accounts does each customer have? List the number and customer id.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.customer_id , count(*) from Accounts  group by accounts.customer_id",
        "question": "Count the number of accounts corresponding to each customer id.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) , accounts.customer_id from Accounts  group by accounts.customer_id",
        "question": "Count the number of accounts corresponding to each customer id.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer id, first and last name with most number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id , customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer id, first and last name with most number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id  order by count(*) desc limit 1",
        "question": "Return the id and full name of the customer with the most accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id , customers.customer_first_name , customers.customer_last_name , count(*) from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.customer_id , customers.customer_first_name , customers.customer_last_name , count(*) from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_id , customers.customer_first_name , customers.customer_last_name , count(*) from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by customers.customer_id",
        "question": "Show id, first name and last name for all customers and the number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_last_name , accounts.customer_id , count(*) from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id",
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_id , count(*) from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id",
        "question": "What are the the full names and ids for all customers, and how many accounts does each have?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_id from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id having  count(*) >= 2",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_id from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by customers.customer_id having  count(*) >= 2",
        "question": "Show first name and id for all customers with at least 2 accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_id from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by accounts.customer_id having  count(*) >= 2",
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_first_name , customers.customer_id from Accounts join Customers on Accounts.customer_id = Customers.customer_id  group by customers.customer_id having  count(*) >= 2",
        "question": "What are the first names and ids for customers who have two or more accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Customers",
        "question": "Show the number of customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Accounts",
        "question": "Show the number of customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Customers",
        "question": "Count the number of customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Accounts",
        "question": "Count the number of customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) , customers.gender from Customers  group by customers.gender",
        "question": "Show the number of customers for each gender.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.gender , count(*) from Customers  group by customers.gender",
        "question": "Show the number of customers for each gender.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) , customers.gender from Customers  group by customers.gender",
        "question": "How many customers are there of each gender?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.gender , count(*) from Customers  group by customers.gender",
        "question": "How many customers are there of each gender?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) , customers.gender from Customers where  customers.country = \"USA\"  group by customers.gender",
        "question": "How many customers are there of each gender?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Financial_Transactions",
        "question": "How many transactions do we have?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Financial_Transactions",
        "question": "Count the number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id where  accounts.account_name = \"337\"",
        "question": "How many transaction does account with name 337 have?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id where  accounts.account_name = \"337\"",
        "question": "Count the number of financial transactions that the account with the name 337 has.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select avg(financial_transactions.transaction_amount) , min(financial_transactions.transaction_amount) , max(financial_transactions.transaction_amount) , sum(financial_transactions.transaction_amount) from Financial_Transactions",
        "question": "What is the average, minimum, maximum, and total transaction amount?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select avg(financial_transactions.transaction_amount) , min(financial_transactions.transaction_amount) , max(financial_transactions.transaction_amount) , sum(financial_transactions.transaction_amount) from Financial_Transactions",
        "question": "Return the average, minimum, maximum, and total transaction amounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.transaction_id from Financial_Transactions where  financial_transactions.transaction_amount > (select avg(financial_transactions.transaction_amount) from Financial_Transactions  )",
        "question": "Show ids for all transactions whose amounts are greater than the average.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.transaction_id from Financial_Transactions where  financial_transactions.transaction_amount > (select avg(financial_transactions.transaction_amount) from Financial_Transactions  )",
        "question": "What are the ids for transactions that have an amount greater than the average amount of a transaction?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.transaction_type , sum(financial_transactions.transaction_amount) from Financial_Transactions  group by financial_transactions.transaction_type",
        "question": "Show the transaction types and the total amount of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select sum(financial_transactions.transaction_amount) , financial_transactions.transaction_type from Financial_Transactions  group by financial_transactions.transaction_type",
        "question": "What are total transaction amounts for each transaction type?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , financial_transactions.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id",
        "question": "Show the account name, id and the number of transactions for each account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , accounts.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by accounts.account_id",
        "question": "Show the account name, id and the number of transactions for each account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , accounts.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id",
        "question": "Show the account name, id and the number of transactions for each account.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , accounts.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , accounts.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by accounts.account_id",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_name , financial_transactions.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id",
        "question": "Return the names and ids of each account, as well as the number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.account_id from Financial_Transactions  group by financial_transactions.account_id  order by count(*) desc limit 1",
        "question": "Show the account id with most number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.account_id from Financial_Transactions  group by financial_transactions.account_id  order by count(*) desc limit 1",
        "question": "What is the id of the account with the most transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.account_id , accounts.account_name from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id having  count(*) >= 4",
        "question": "Show the account id and name with at least 4 transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_id , accounts.account_name from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id having  count(*) >= 4",
        "question": "Show the account id and name with at least 4 transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.account_id , accounts.account_name from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id having  count(*) >= 4",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select accounts.account_id , accounts.account_name from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id having  count(*) >= 4",
        "question": "What are the ids and names of accounts with 4 or more transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct products.product_size from Products",
        "question": "Show all product sizes.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct products.product_size from Products",
        "question": "What are the different product sizes?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct products.product_color from Products",
        "question": "Show all product colors.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct products.product_color from Products",
        "question": "What are the different product colors?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.invoice_number , count(*) from Financial_Transactions  group by financial_transactions.invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , count(*) from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by financial_transactions.invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , count(*) from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by invoices.invoice_number",
        "question": "Show the invoice number and the number of transactions for each invoice.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select financial_transactions.invoice_number , count(*) from Financial_Transactions  group by financial_transactions.invoice_number",
        "question": "How many transactions correspond to each invoice number?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , count(*) from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by financial_transactions.invoice_number",
        "question": "How many transactions correspond to each invoice number?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , count(*) from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by invoices.invoice_number",
        "question": "How many transactions correspond to each invoice number?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , invoices.invoice_date from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by financial_transactions.invoice_number  order by count(*) desc limit 1",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , invoices.invoice_date from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by invoices.invoice_number  order by count(*) desc limit 1",
        "question": "What is the invoice number and invoice date for the invoice with most number of transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , invoices.invoice_date from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by financial_transactions.invoice_number  order by count(*) desc limit 1",
        "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_number , invoices.invoice_date from Financial_Transactions join Invoices on Financial_Transactions.invoice_number = Invoices.invoice_number  group by invoices.invoice_number  order by count(*) desc limit 1",
        "question": "What is the invoice number and invoice date corresponding to the invoice with the greatest number of transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Invoices",
        "question": "How many invoices do we have?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Invoices",
        "question": "Count the number of invoices.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_date , invoices.order_id , orders.order_details from Invoices join Orders on Invoices.order_id = Orders.order_id",
        "question": "Show invoice dates and order id and details for all invoices.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.invoice_date , invoices.order_id , orders.order_details from Invoices join Orders on Invoices.order_id = Orders.order_id",
        "question": "What are the invoice dates, order ids, and order details for all invoices?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.order_id , count(*) from Invoices  group by invoices.order_id",
        "question": "Show the order ids and the number of invoices for each order.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.order_id , count(*) from Invoices  group by invoices.order_id",
        "question": "How many invoices correspond to each order id?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct invoices.order_id , count(*) from Invoices  group by invoices.order_id",
        "question": "How many invoices correspond to each order id?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select invoices.order_id , orders.order_details from Invoices join Orders on Invoices.order_id = Orders.order_id  group by invoices.order_id having  count(*) > 2",
        "question": "What is the order id and order details for the order more than two invoices.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_last_name , customers.customer_id , customers.phone_number from Orders join Customers on Orders.customer_id = Customers.customer_id  group by orders.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_last_name , customers.customer_id , customers.phone_number from Orders join Customers on Orders.customer_id = Customers.customer_id  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_last_name , orders.customer_id , customers.phone_number from Orders join Customers on Orders.customer_id = Customers.customer_id  group by orders.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer last name, id and phone number with most number of orders?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_last_name , orders.customer_id , customers.phone_number from Orders join Customers on Orders.customer_id = Customers.customer_id  group by orders.customer_id  order by count(*) desc limit 1",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_last_name , customers.customer_id , customers.phone_number from Orders join Customers on Orders.customer_id = Customers.customer_id  group by orders.customer_id  order by count(*) desc limit 1",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select customers.customer_last_name , customers.customer_id , customers.phone_number from Orders join Customers on Orders.customer_id = Customers.customer_id  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "Return the last name, id and phone number of the customer who has made the greatest number of orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name from Products where  products.product_id not in (select Order_Items.product_id from Order_Items  )",
        "question": "Show all product names without an order.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name from Products   except select products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id",
        "question": "Show all product names without an order.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name from Products   except select products.product_name from Order_Items join Orders on Order_Items.order_id = Orders.order_id join Products on Order_Items.product_id = Products.product_id",
        "question": "Show all product names without an order.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name from Products where  products.product_id not in (select Order_Items.product_id from Order_Items  )",
        "question": "What are the names of products that have never been ordered?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name from Products   except select products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id",
        "question": "What are the names of products that have never been ordered?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name from Products   except select products.product_name from Order_Items join Orders on Order_Items.order_id = Orders.order_id join Products on Order_Items.product_id = Products.product_id",
        "question": "What are the names of products that have never been ordered?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name , sum(order_items.product_quantity) from Order_Items join Products on Order_Items.product_id = Products.product_id  group by products.product_name",
        "question": "Show all product names and the total quantity ordered for each product name.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name , sum(order_items.product_quantity) from Order_Items join Products on Order_Items.product_id = Products.product_id  group by products.product_name",
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select sum(order_items.product_quantity) , products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id  group by products.product_name",
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name , sum(order_items.product_quantity) from Order_Items join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id",
        "question": "What are the different product names, and what is the sum of quantity ordered for each product?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select order_items.order_id , count(*) from Order_Items  group by order_items.order_id",
        "question": "Show the order ids and the number of items in each order.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select order_items.order_id , count(*) from Order_Items  group by order_items.order_id",
        "question": "How many order items correspond to each order id?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select distinct order_items.order_id , count(*) from Order_Items  group by order_items.order_id",
        "question": "How many order items correspond to each order id?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) , order_items.order_id from Order_Items  group by order_items.order_id",
        "question": "How many order items correspond to each order id?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_id , count( distinct order_items.order_id) from Order_Items join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id",
        "question": "How many distinct order ids correspond to each product?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select products.product_name , count(*) from Order_Items join Orders on Order_Items.order_id = Orders.order_id join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id",
        "question": "What are teh names of the different products, as well as the number of customers who have ordered each product.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select order_items.order_id , sum(order_items.product_quantity) from Order_Items  group by order_items.order_id",
        "question": "Show order ids and the total quantity in each order.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select orders.order_id , sum(order_items.product_quantity) from Order_Items join Orders on Order_Items.order_id = Orders.order_id  group by orders.order_id",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select order_items.order_id , sum(order_items.product_quantity) from Order_Items  group by order_items.order_id",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select orders.order_id , sum(order_items.product_quantity) from Order_Items join Orders on Order_Items.order_id = Orders.order_id  group by order_items.order_id",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select sum(order_items.product_quantity) , orders.order_id from Order_Items join Orders on Order_Items.order_id = Orders.order_id  group by orders.order_id",
        "question": "Give the order ids for all orders, as well as the total product quantity in each.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Products where  products.product_id not in (select Order_Items.product_id from Order_Items  )",
        "question": "How many products were not included in any order?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_invoices",
        "query": "select count(*) from Products where  products.product_id not in (select Order_Items.product_id from Order_Items  )",
        "question": "Count the number of products that were never ordered.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty",
        "question": "How many faculty do we have?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty",
        "question": "What is the total number of faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select distinct faculty.rank from Faculty",
        "question": "Find the list of distinct ranks for faculty.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select distinct faculty.building from Faculty",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select distinct faculty.building from Faculty   union select distinct faculty.building from Faculty",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building from Faculty   union select faculty.building from Faculty",
        "question": "What buildings have faculty offices?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building from Faculty  group by faculty.building",
        "question": "What buildings have faculty offices?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank , faculty.fname , faculty.lname from Faculty",
        "question": "Show the rank, first name, and last name for all the faculty.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname , faculty.rank from Faculty",
        "question": "Show the rank, first name, and last name for all the faculty.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank , faculty.fname , faculty.lname from Faculty",
        "question": "What are the rank, first name, and last name of the faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname , faculty.rank from Faculty",
        "question": "What are the rank, first name, and last name of the faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname , faculty.phone from Faculty where  faculty.sex = \"F\"",
        "question": "Show the first name, last name, and phone number for all female faculty members.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname , faculty.phone from Faculty where  faculty.sex = \"F\"",
        "question": "What are the first name, last name, and phone number of all the female faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.facid from Faculty where  faculty.sex = \"M\"",
        "question": "Show ids for all the male faculty.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.facid from Faculty where  faculty.sex = \"M\"",
        "question": "What are the faculty ids of all the male faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.sex = \"F\" and faculty.rank = \"Professor\"",
        "question": "How many female Professors do we have?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.rank = \"Professor\" and faculty.sex = \"F\"",
        "question": "How many female Professors do we have?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.sex = \"Female\" and faculty.rank = \"Professor\"",
        "question": "How many female Professors do we have?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.sex = \"F\" and faculty.rank = \"Professor\"",
        "question": "Count the number of female Professors we have.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.rank = \"Professor\" and faculty.sex = \"F\"",
        "question": "Count the number of female Professors we have.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.sex = \"Female\" and faculty.rank = \"Professor\"",
        "question": "Count the number of female Professors we have.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.sex = \"F\" and faculty.rank = 1",
        "question": "Count the number of female Professors we have.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.phone , faculty.room , faculty.building from Faculty where  faculty.fname = \"Jerry\" and faculty.lname = \"Prince\"",
        "question": "Show the phone, room, and building for the faculty named Jerry Prince.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.phone , faculty.room , faculty.building from Faculty where  faculty.fname = \"Jerry\" and faculty.lname = \"Prince\"",
        "question": "What are the phone, room, and building of the faculty member called Jerry Prince?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.building = \"NEB\" and faculty.rank = \"Professor\"",
        "question": "How many Professors are in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "How many Professors are in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "Count the number of Professors who have office in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty_Participates_in join Faculty on Faculty_Participates_in.FacID = Faculty.FacID where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "Count the number of Professors who have office in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty_Participates_in join Faculty on Faculty_Participates_in.FacID = Faculty.FacID where  faculty.building = \"NEB\" and faculty.rank = \"Professor\"",
        "question": "Count the number of Professors who have office in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty where  faculty.building = \"NEB\" and faculty.rank = \"Professor\"",
        "question": "Count the number of Professors who have office in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname from Faculty where  faculty.rank = \"Instructor\"",
        "question": "Show the first name and last name for all the instructors.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname from Faculty where  faculty.rank = \"Instructor\"",
        "question": "What are the first name and last name of all the instructors?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building , count(*) from Faculty  group by faculty.building",
        "question": "Show all the buildings along with the number of faculty members the buildings have.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building , count(*) from Faculty  group by faculty.building",
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) , faculty.building from Faculty  group by faculty.building",
        "question": "How many faculty members does each building have? List the result with the name of the building.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building from Faculty  group by faculty.building  order by count(*) desc limit 1",
        "question": "Which building has most faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building from Faculty  group by faculty.building  order by count(*) desc limit 1",
        "question": "Find the building that has the largest number of faculty members.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building from Faculty where  faculty.rank = \"Professor\"  group by faculty.building having  count(*) >= 10",
        "question": "In which buildings are there at least ten professors?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.building from Faculty where  faculty.rank >= \"Professor\"  group by faculty.building having  count(*) >= 10",
        "question": "In which buildings are there at least ten professors?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank , count(*) from Faculty  group by faculty.rank",
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) , faculty.rank from Faculty  group by faculty.rank",
        "question": "For each faculty rank, show the number of faculty members who have it.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank , count(*) from Faculty  group by faculty.rank",
        "question": "How many faculty members do we have for each faculty rank?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) , faculty.rank from Faculty  group by faculty.rank",
        "question": "How many faculty members do we have for each faculty rank?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) , faculty.rank , faculty.sex from Faculty  group by faculty.rank, faculty.sex",
        "question": "How many faculty members do we have for each rank and gender?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank , faculty.sex , count(*) from Faculty  group by faculty.rank, faculty.sex",
        "question": "How many faculty members do we have for each rank and gender?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank from Faculty  group by faculty.rank  order by count(*) asc limit 1",
        "question": "Which rank has the smallest number of faculty members?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.rank from Faculty  group by faculty.rank  order by count(*) asc limit 1",
        "question": "Find the faculty rank that has the least members.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Activity",
        "question": "What activities do we have?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Activity",
        "question": "List all the activities we have.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Activity",
        "question": "How many activities do we have?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Activity",
        "question": "Find the number of activities available.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count( distinct faculty_participates_in.facid) from Faculty_Participates_in",
        "question": "Give me the number of faculty members who participate in an activity",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.facid from Faculty where  faculty.facid not in (select Faculty_Participates_in.FacID from Faculty_Participates_in  )",
        "question": "Show the ids of the faculty who don't participate in any activity.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.facid from Faculty where  faculty.facid not in (select Faculty_Participates_in.FacID from Faculty_Participates_in  )",
        "question": "Which faculty do not participate in any activity? Find their faculty ids.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid join Faculty on Faculty_Participates_in.FacID = Faculty.FacID where  faculty.fname = \"Mark\" and faculty.lname = \"Giuliano\"",
        "question": "How many activities does Mark Giuliano participate in?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select count(*) from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid join Faculty on Faculty_Participates_in.FacID = Faculty.FacID where  faculty.fname = \"Mark\" and faculty.lname = \"Giuliano\"",
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid join Faculty on Faculty_Participates_in.FacID = Faculty.FacID where  faculty.fname = \"Mark\" and faculty.lname = \"Giuliano\"",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid join Faculty on Faculty_Participates_in.FacID = Faculty.FacID where  faculty.fname = \"Mark\" and faculty.lname = \"Giuliano\"",
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name , count(*) from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by activity.activity_name",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name , count(*) from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by faculty_participates_in.actid",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name , count(*) from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by activity.activity_name",
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name , count(*) from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by faculty_participates_in.actid",
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select faculty.fname , faculty.lname from Faculty_Participates_in join Faculty on Faculty_Participates_in.FacID = Faculty.FacID  group by faculty.fname  order by count(*) desc limit 1",
        "question": "What is the first and last name of the faculty participating in the most activities?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by faculty_participates_in.actid  order by count(*) desc limit 1",
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by activity.activity_name  order by count(*) desc limit 1",
        "question": "What is the name of the activity that has the most faculty members involved in?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by faculty_participates_in.actid  order by count(*) desc limit 1",
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Faculty_Participates_in join Activity on Faculty_Participates_in.actid = Activity.actid  group by activity.activity_name  order by count(*) desc limit 1",
        "question": "Which activity has the most faculty members participating in? Find the activity name.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.stuid from Student where  student.stuid not in (select Participates_in.stuid from Participates_in  )",
        "question": "Show the ids of the students who don't participate in any activity.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.stuid from Student   except select participates_in.stuid from Participates_in",
        "question": "Show the ids of the students who don't participate in any activity.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.stuid from Student where  student.stuid not in (select Participates_in.stuid from Participates_in  )",
        "question": "What are the ids of the students who are not involved in any activity",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.stuid from Student   except select participates_in.stuid from Participates_in",
        "question": "What are the ids of the students who are not involved in any activity",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.stuid from Participates_in join Student on Participates_in.stuid = Student.StuID where  student.age < 20  group by student.stuid having  count(*) >= 1",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.fname , student.lname from Participates_in join Student on Participates_in.stuid = Student.StuID  group by participates_in.stuid  order by count(*) desc limit 1",
        "question": "What is the first and last name of the student participating in the most activities?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.fname , student.lname from Participates_in join Activity on Participates_in.actid = Activity.actid join Student on Participates_in.stuid = Student.StuID  group by student.fname, student.lname  order by count(*) desc limit 1",
        "question": "Tell me the first and last name of the student who has the most activities.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select student.fname , student.lname from Participates_in join Activity on Participates_in.actid = Activity.actid join Student on Participates_in.stuid = Student.StuID  group by student.stuid  order by count(*) desc limit 1",
        "question": "Tell me the first and last name of the student who has the most activities.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Participates_in join Activity on Participates_in.actid = Activity.actid  group by activity.activity_name  order by count(*) desc limit 1",
        "question": "What is the name of the activity with the most students?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Participates_in join Activity on Participates_in.actid = Activity.actid join Student on Participates_in.stuid = Student.StuID  group by activity.activity_name  order by count(*) desc limit 1",
        "question": "What is the name of the activity with the most students?",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Participates_in join Activity on Participates_in.actid = Activity.actid  group by participates_in.actid  order by count(*) desc limit 1",
        "question": "Find the name of the activity that has the largest number of student participants.",
        "correctness": 1
    },
    {
        "db_id": "activity_1",
        "query": "select activity.activity_name from Participates_in join Activity on Participates_in.actid = Activity.actid  group by activity.activity_name  order by count(*) desc limit 1",
        "question": "Find the name of the activity that has the largest number of student participants.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select count(*) from candidate",
        "question": "How many candidates are there?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select count(*) from candidate",
        "question": "Count the number of candidates.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.poll_source from candidate  group by candidate.poll_source  order by count(*) desc limit 1",
        "question": "Which poll resource provided the most number of candidate information?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.poll_source from candidate  group by candidate.poll_source  order by count(*) desc limit 1",
        "question": "Return the poll resource associated with the most candidates.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.support_rate from candidate   order by candidate.support_rate desc limit 3",
        "question": "what are the top 3 highest support rates?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.support_rate from candidate   order by candidate.support_rate desc limit 3",
        "question": "Return the top 3 greatest support rates.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.candidate_id from candidate   order by candidate.oppose_rate asc limit 1",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.candidate_id from candidate   order by candidate.oppose_rate asc limit 1",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.support_rate , candidate.consider_rate , candidate.oppose_rate from candidate   order by candidate.unsure_rate asc",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.support_rate , candidate.consider_rate , candidate.oppose_rate from candidate   order by candidate.unsure_rate asc",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.poll_source from candidate   order by candidate.oppose_rate desc limit 1",
        "question": "which poll source does the highest oppose rate come from?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.poll_source from candidate where  candidate.oppose_rate = (select max(candidate.oppose_rate) from candidate  )",
        "question": "which poll source does the highest oppose rate come from?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.poll_source from candidate   order by candidate.oppose_rate desc limit 1",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select candidate.poll_source from candidate where  candidate.oppose_rate = (select max(candidate.oppose_rate) from candidate  )",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people   order by people.date_of_birth asc",
        "question": "List all people names in the order of their date of birth from old to young.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people   order by people.date_of_birth asc",
        "question": "What are the names of all people, ordered by their date of birth?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select avg(people.height) , avg(people.weight) from people where  people.sex = \"M\"",
        "question": "Find the average height and weight for all males (sex is M).",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select avg(people.height) , avg(people.weight) from people where  people.sex = \"M\"",
        "question": "What are the average height and weight across males (sex is M)?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select avg(people.height) , avg(people.weight) from people where  people.sex = \"M\"  group by people.sex",
        "question": "What are the average height and weight across males (sex is M)?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height > 200 or people.height < 190",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height > 200 or people.height <= 190",
        "question": "find the names of people who are taller than 200 or lower than 190.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height > 200 or people.height < 190",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height > 200 or people.height <= 190",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select avg(people.weight) , min(people.weight) , people.sex from people  group by people.sex",
        "question": "Find the average and minimum weight for each gender.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.sex , avg(people.weight) , min(people.weight) from people  group by people.sex",
        "question": "Find the average and minimum weight for each gender.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select avg(people.weight) , min(people.weight) , people.sex from people  group by people.sex",
        "question": "What are the average and minimum weights for people of each sex?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.sex , avg(people.weight) , min(people.weight) from people  group by people.sex",
        "question": "What are the average and minimum weights for people of each sex?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name , people.sex from candidate join people on candidate.People_ID = people.People_ID   order by candidate.support_rate desc limit 1",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name , people.sex from candidate join people on candidate.People_ID = people.People_ID where  candidate.support_rate = (select max(candidate.Support_rate) from candidate  )",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name , people.sex from candidate join people on candidate.People_ID = people.People_ID   order by candidate.support_rate desc limit 1",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name , people.sex from candidate join people on candidate.People_ID = people.People_ID where  candidate.support_rate = (select max(candidate.Support_rate) from candidate  )",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.sex from candidate join people on candidate.People_ID = people.People_ID  group by people.sex  order by avg(candidate.unsure_rate) desc limit 1",
        "question": "which gender got the highest average uncertain ratio.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.sex from candidate join people on candidate.People_ID = people.People_ID where  candidate.unsure_rate = (select max(candidate.Unsure_rate) from candidate  )",
        "question": "What is the sex of the candidate who had the highest unsure rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.sex from candidate join people on candidate.People_ID = people.People_ID where  candidate.unsure_rate = (select max(candidate.Unsure_rate) from candidate   order by candidate.unsure_rate asc limit 1 )",
        "question": "What is the sex of the candidate who had the highest unsure rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.sex from candidate join people on candidate.People_ID = people.People_ID  group by people.sex  order by candidate.unsure_rate desc limit 1",
        "question": "What is the sex of the candidate who had the highest unsure rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.people_id not in (select candidate.People_ID from candidate  )",
        "question": "what are the names of people who did not participate in the candidate election.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people   except select people.name from candidate join people on candidate.People_ID = people.People_ID",
        "question": "what are the names of people who did not participate in the candidate election.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.people_id not in (select candidate.People_ID from candidate  )",
        "question": "Give the names of people who did not participate in the candidate election.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people   except select people.name from candidate join people on candidate.People_ID = people.People_ID",
        "question": "Give the names of people who did not participate in the candidate election.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from candidate join people on candidate.People_ID = people.People_ID where  candidate.support_rate < candidate.oppose_rate",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from candidate join people on candidate.People_ID = people.People_ID where  candidate.support_rate <= candidate.oppose_rate",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from candidate join people on candidate.People_ID = people.People_ID where  candidate.support_rate < candidate.oppose_rate",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from candidate join people on candidate.People_ID = people.People_ID where  candidate.support_rate <= candidate.oppose_rate",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select count(*) , people.sex from people where  people.weight > 85  group by people.sex",
        "question": "how many people are there whose weight is higher than 85 for each gender?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select count(*) , people.sex from people where  people.weight > 85  group by people.sex",
        "question": "Count the number of people of each sex who have a weight higher than 85.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select max(candidate.support_rate) , min(candidate.consider_rate) , min(candidate.oppose_rate) from candidate",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from candidate join people on candidate.People_ID = people.People_ID where  people.sex = \"F\"   order by people.name asc",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height < (select avg(people.height) from people  )",
        "question": "find the name of people whose height is lower than the average.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height <= (select avg(people.height) from people  )",
        "question": "find the name of people whose height is lower than the average.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height < (select avg(people.height) from people  )",
        "question": "What are the names of people who are shorter than average?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select people.name from people where  people.height <= (select avg(people.height) from people  )",
        "question": "What are the names of people who are shorter than average?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select * from people",
        "question": "List all info about all people.",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select * from people",
        "question": "What is all the information about all people?",
        "correctness": 1
    },
    {
        "db_id": "candidate_poll",
        "query": "select distinct * from people",
        "question": "What is all the information about all people?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.director = \"Steven Spielberg\"",
        "question": "Find the titles of all movies directed by steven spielberg.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.director = \"Steven Spielberg\"",
        "question": "What are the names of all movies directed by Steven Spielberg?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year > 2000 and movie.director = \"James Cameron\"",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  movie.year > 2000 and reviewer.name = \"James Cameron\"",
        "question": "What is the name of the movie produced after 2000 and directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.director = \"James Cameron\" and movie.year > 2000",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"James Cameron\" and movie.year > 2000",
        "question": "What are the titles of all movies that James Cameron directed after 2000?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Movie where  movie.year < 2000",
        "question": "How many movies were made before 2000?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Movie where  movie.year <= 2000",
        "question": "How many movies were made before 2000?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Movie where  movie.year < 2000",
        "question": "How many movies were made before 2000?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Movie where  movie.year <= 2000",
        "question": "How many movies were made before 2000?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director from Movie where  movie.title = \"Avatar\"",
        "question": "Who is the director of movie Avatar?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director from Movie where  movie.title = \"Avatar\"",
        "question": "Who directed Avatar?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Reviewer",
        "question": "How many reviewers listed?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Reviewer",
        "question": "How many reviewers are there?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.rid from Reviewer where  reviewer.name like \"%Mike%\"",
        "question": "What is the id of the reviewer whose name has substring \u201cMike\u201d?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.rid from Reviewer where  reviewer.name like \"%Mike%\"",
        "question": "What is the id of the reviewer whose name includes the word \"Mike\"?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.rid from Reviewer where  reviewer.name = \"Daniel Lewis\"",
        "question": "What is the reviewer id of Daniel Lewis?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.rid from Reviewer where  reviewer.name = \"Daniel Lewis\"",
        "question": "What is the id of the reviewer named Daniel Lewis?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Rating where  rating.stars > 3",
        "question": "What is the total number of ratings that has more than 3 stars?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Rating where  rating.stars > 3",
        "question": "How many movie ratings have more than 3 stars?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) from Rating join Movie on Rating.mID = Movie.mID where  rating.stars > 3",
        "question": "How many movie ratings have more than 3 stars?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select min(rating.stars) , max(rating.stars) from Rating",
        "question": "What is the lowest and highest rating star?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select max(rating.stars) , min(rating.stars) from Rating",
        "question": "What is the maximum and mininum number of stars a rating can receive?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = 5",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = \"5\"",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = 5  group by movie.director",
        "question": "What are the names of directors who directed movies with 5 star rating? Also return the title of these movies.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = 5",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = \"5\"",
        "question": "What are the names of the directors who created a movie with a 5 star rating, and what was the name of those movies?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select avg(rating.stars) , reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.name",
        "question": "What is the average rating star for each reviewer?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name , avg(rating.stars) from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.name",
        "question": "What is the average rating star for each reviewer?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select avg(rating.stars) , reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.name",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name , avg(rating.stars) from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.name",
        "question": "What is the average number of stars that each reviewer awards for a movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.mid not in (select Rating.mID from Rating  )",
        "question": "Find the titles of all movies that have no ratings.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie   except select movie.title from Rating join Movie on Rating.mID = Movie.mID",
        "question": "Find the titles of all movies that have no ratings.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.mid not in (select Rating.mID from Rating  )",
        "question": "What are the titles of all movies that have not been rated?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie   except select movie.title from Rating join Movie on Rating.mID = Movie.mID",
        "question": "What are the titles of all movies that have not been rated?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.ratingdate = \"NULL\"",
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.ratingdate = \"Null\"",
        "question": "Find the names of all reviewers who have ratings with a NULL value for the date.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select avg(rating.stars) , movie.title from Rating join Movie on Rating.mID = Movie.mID  group by movie.year  order by movie.year asc limit 1",
        "question": "What is the average rating stars and title for the oldest movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie   order by movie.year desc limit 1",
        "question": "What is the name of the most recent movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie   order by movie.year desc limit 1",
        "question": "What is the title of the newest movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year > (select max(movie.year) from Movie where  movie.director = \"Steven Spielberg\"  )",
        "question": "What are the names of all movies that were created after the most recent Steven Spielberg film?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , movie.director from Rating join Movie on Rating.mID = Movie.mID where  rating.stars > (select avg(Rating.stars) from Rating join Movie on Rating.mID = Movie.mID where  movie.director = \"James Cameron\"  )",
        "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select distinct movie.title , movie.director from Rating join Movie on Rating.mID = Movie.mID where  rating.stars > (select avg(Rating.stars) from Rating join Movie on Rating.mID = Movie.mID where  movie.director = \"James Cameron\"  )",
        "question": "What are the titles and directors of the movies whose star is greater than the average stars of the movies directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , movie.director from Rating join Movie on Rating.mID = Movie.mID where  rating.stars > (select avg(Rating.stars) from Rating join Movie on Rating.mID = Movie.mID where  movie.director = \"James Cameron\"  )",
        "question": "What are the titles and directors of all movies that have a rating higher than the average James Cameron film rating?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name , movie.title , rating.stars , rating.ratingdate from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID   order by reviewer.name,movie.title,rating.stars asc",
        "question": "Return reviewer name, movie title, stars, and ratingDate. And sort the data first by reviewer name, then by movie title, and lastly by number of stars.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.name having  count(*) >= 3",
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.rid having  count(*) >= 3",
        "question": "Find the names of all reviewers who have contributed three or more ratings.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID  group by reviewer.name having  count(*) >= 3",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID  group by reviewer.name having  count(*) >= 3",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID  group by reviewer.rid having  count(*) >= 3",
        "question": "What are the names of all reviewers that have rated 3 or more movies?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select distinct reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  movie.title = \"Gone with the Wind\"",
        "question": "What are the names of all the different reviewers who rates Gone with the Wind?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select distinct movie.director from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"Sarah Martinez\"",
        "question": "Find the names of all directors whose movies are rated by Sarah Martinez.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select distinct movie.director from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"Sarah Martinez\"",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"Sarah Martinez\"   intersect select movie.director from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"Sarah Martinez\"",
        "question": "What are the names of all directors whose movies have been reviewed by Sarah Martinez?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director from Movie  group by movie.director having  count(*) = 1",
        "question": "What are the names of the directors who made exactly one movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director from Movie  group by movie.director having  count( distinct movie.title) = 1",
        "question": "What are the names of the directors who made exactly one movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director from Movie  group by movie.director having  count(*) = 1",
        "question": "What are the names of all directors who made one movie?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , count(*) from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID  group by movie.director",
        "question": "How many movie reviews does each director get?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , count(*) from Rating join Movie on Rating.mID = Movie.mID  group by movie.director",
        "question": "How many movie reviews does each director get?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , count(*) from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID  group by movie.director",
        "question": "For each director, how many reviews have they received?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.director , count(*) from Rating join Movie on Rating.mID = Movie.mID  group by movie.director",
        "question": "For each director, how many reviews have they received?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select count(*) , movie.director from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID  group by movie.director",
        "question": "For each director, how many reviews have they received?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , avg(rating.stars) from Rating join Movie on Rating.mID = Movie.mID  group by movie.title  order by avg(rating.stars) desc limit 1",
        "question": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , avg(rating.stars) from Rating join Movie on Rating.mID = Movie.mID  group by rating.mid  order by avg(rating.stars) desc limit 1",
        "question": "Find the movies with the highest average rating. Return the movie titles and average rating.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , avg(rating.stars) from Rating join Movie on Rating.mID = Movie.mID  group by movie.title  order by avg(rating.stars) desc limit 1",
        "question": "What are the movie titles with the highest average rating and what are those ratings?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , avg(rating.stars) from Rating join Movie on Rating.mID = Movie.mID  group by movie.title  order by avg(rating.stars) asc limit 1",
        "question": "What are the movie titles and average rating of the movies with the lowest average rating?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , avg(rating.stars) from Rating join Movie on Rating.mID = Movie.mID  group by movie.title  order by avg(rating.stars) asc limit 1",
        "question": "What are the titles and average ratings for all movies that have the lowest average rating?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , movie.year from Rating join Movie on Rating.mID = Movie.mID   order by rating.stars desc limit 3",
        "question": "What are the names and years of the movies that has the top 3 highest rating star?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title , movie.year from Rating join Movie on Rating.mID = Movie.mID   order by rating.stars desc limit 3",
        "question": "What are the names and years released for the movies with the top 3 highest ratings?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars between 3 and 5",
        "question": "What are the titles of all movies that have rating star is between 3 and 5?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars between 3 and 5",
        "question": "What are the titles of all movies that have between 3 and 5 stars?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars > 3",
        "question": "Find the names of reviewers who had given higher than 3 star ratings.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars > 3",
        "question": "What are the names of the reviewers who have rated a movie more than 3 stars before?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.rid from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars != 4",
        "question": "Find the ids of reviewers who didn't only give 4 star.",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year > 2000   union select movie.title from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"Brittany Harris\"",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year > 2000   union select movie.title from Movie where  movie.mid in (select Rating.mID from Rating join Reviewer on Rating.rID = Reviewer.rID where  reviewer.name = \"Brittany Harris\"  )",
        "question": "What are names of the movies that are either made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year > 2000   union select movie.title from Rating join Reviewer on Rating.rID = Reviewer.rID join Movie on Rating.mID = Movie.mID where  reviewer.name = \"Brittany Harris\"",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year > 2000   union select movie.title from Movie where  movie.mid in (select Rating.mID from Rating join Reviewer on Rating.rID = Reviewer.rID where  reviewer.name = \"Brittany Harris\"  )",
        "question": "What are the names of all movies that were made after 2000 or reviewed by Brittany Harris?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year < 1980 or movie.director = \"James Cameron\"",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year < 1980   union select movie.title from Movie where  movie.director = \"James Cameron\"",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year <= 1980 or movie.director = \"James Cameron\"",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year < 1980   union select movie.title from Movie where  movie.mid in (select Movie.mID from Movie where  movie.director = \"James Cameron\"  )",
        "question": "What are names of the movies that are either made before 1980 or directed by James Cameron?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year < 1980 or movie.director = \"James Cameron\"",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Movie where  movie.year <= 1980 or movie.director = \"James Cameron\"",
        "question": "What are the names of all movies made before 1980 or had James Cameron as the director?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars = 3   intersect select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars = 4",
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars = \"3\"   intersect select reviewer.name from Rating join Reviewer on Rating.rID = Reviewer.rID where  rating.stars = \"4\"",
        "question": "What are the names of reviewers who had rated 3 star and 4 star?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = 3   intersect select movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = 4",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "correctness": 1
    },
    {
        "db_id": "movie_1",
        "query": "select movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = \"3\"   intersect select movie.title from Rating join Movie on Rating.mID = Movie.mID where  rating.stars = \"4\"",
        "question": "What are the names of movies that get 3 star and 4 star?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID",
        "question": "Display the first name and department name for each employee.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID",
        "question": "What are the first name and department name of all employees?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.department_id from employees where  employees.last_name = \"McEwen\"",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.department_id from employees where  employees.last_name = \"McEwen\"",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from departments where  departments.department_name = \"Marketing\"",
        "question": "Display all the information about the department Marketing.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from departments where  departments.department_name = \"Marketing\"",
        "question": "What is all the information about the Marketing department?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.phone_number from employees where  employees.salary between 8000 and 12000",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.phone_number from employees where  employees.salary between 8000 and 12000",
        "question": "Return the phone numbers of employees with salaries between 8000 and 12000.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , employees.salary from employees where  employees.commission_pct = \"NULL\"",
        "question": "Return the full names and salaries of employees with null commissions.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , employees.salary from employees where  employees.commission_pct = \"Null\"",
        "question": "Return the full names and salaries of employees with null commissions.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , employees.salary from employees where  employees.commission_pct = \"1\"",
        "question": "Return the full names and salaries of employees with null commissions.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , employees.salary from employees where  employees.commission_pct = \"Nil\"",
        "question": "Return the full names and salaries of employees with null commissions.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , employees.salary from employees where  employees.commission_pct = \"0%\"",
        "question": "Return the full names and salaries of employees with null commissions.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.job_id , employees.hire_date from employees where  employees.hire_date between 2007 and 2009",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.department_id = 70 or employees.department_id = 90",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.department_id = 70   union select employees.first_name , employees.last_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID where  departments.department_id = 90",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.department_id = 70 or employees.department_id = 90",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.department_id = 70   union select employees.first_name , employees.last_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID where  departments.department_id = 90",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.salary , employees.manager_id from employees",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.salary , employees.manager_id from employees join jobs on employees.JOB_ID = jobs.JOB_ID",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.salary , employees.manager_id from employees",
        "question": "What are the salaries and manager ids for employees who have managers?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.hire_date < \"2002-06-21\"",
        "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.hire_date <= \"2002-06-21\"",
        "question": "display all the details from Employees table for those employees who was hired before 2002-06-21.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.hire_date < \"June 21 , 2002\"",
        "question": "What is all the information about employees hired before June 21, 2002?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.hire_date < \"July 21 , 2002\"",
        "question": "What is all the information about employees hired before June 21, 2002?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.first_name like \"%D%\" or employees.first_name like \"%S%\"   order by employees.salary desc",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.first_name like \"%D%\" or employees.first_name like \"%S%\"   order by employees.salary desc",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.hire_date > \"1987-09-07\"",
        "question": "display those employees who joined after 7th September, 1987.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.hire_date > \"1987-09-07\"",
        "question": "Which employees were hired after September 7th, 1987?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select jobs.job_title from jobs where  jobs.min_salary > 9000",
        "question": "display the job title of jobs which minimum salary is greater than 9000.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.email from employees where  employees.commission_pct = \"1\" and employees.salary between 7000 and 12000 and employees.department_id = 50",
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) > 10",
        "question": "What are the department ids for which more than 10 employees had a commission?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(*) >= 4",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) >= 4",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(departments.department_id) > 3",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID where  departments.manager_id > 3  group by departments.department_id having  count(*) > 3",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(departments.manager_id) > 3",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.employee_id from job_history join employees on job_history.EMPLOYEE_ID = employees.EMPLOYEE_ID  group by employees.employee_id having  count(*) >= 2",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.employee_id from job_history join employees on job_history.EMPLOYEE_ID = employees.EMPLOYEE_ID  group by job_history.employee_id having  count(*) >= 2",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id",
        "question": "display the department name and number of employees in each of the department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_name",
        "question": "display the department name and number of employees in each of the department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id",
        "question": "display the department name and number of employees in each of the department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id",
        "question": "Give the name of each department and the number of employees in each.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_name",
        "question": "Give the name of each department and the number of employees in each.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from job_history join employees on job_history.EMPLOYEE_ID = employees.EMPLOYEE_ID where  employees.salary > 12000",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select jobs.job_title , avg(employees.salary) from employees join jobs on employees.JOB_ID = jobs.JOB_ID  group by jobs.job_title",
        "question": "display job title and average salary of employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select jobs.job_title , avg(employees.salary) from employees join jobs on employees.JOB_ID = jobs.JOB_ID  group by jobs.job_id",
        "question": "display job title and average salary of employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.salary > (select min(employees.salary) from employees where  employees.employee_id = 163  )",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.salary > (select max(employees.salary) from employees where  employees.employee_id = 163  )",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.salary > (select min(employees.salary) from employees where  employees.employee_id = 163   ) and employees.salary > (select min(employees.salary) from employees where  employees.employee_id = 163  )",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.salary > (select min(employees.salary) from employees where  employees.employee_id = 163   intersect select min(employees.salary) from employees where  employees.employee_id = 163   )",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.salary > (select min(employees.salary) from employees where  employees.employee_id = 163  )",
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name from employees where  employees.salary > (select max(employees.salary) from employees where  employees.employee_id = 163  )",
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.employee_id from employees where  employees.salary > (select avg(employees.salary) from employees  )",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.employee_id from employees where  employees.salary > (select avg(employees.salary) from employees  )",
        "question": "What are the employee ids for employees who make more than the average?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) >= 1",
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_name having  count(departments.department_name) >= 1",
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(departments.department_id) >= 1",
        "question": "find the name of all departments that do actually have one or more employees assigned to them.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) >= 1",
        "question": "What are the names of departments that have at least one employee.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(departments.department_id) >= 1",
        "question": "What are the names of departments that have at least one employee.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(departments.department_id) >= 1",
        "question": "What are the names of departments that have at least one employee.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_name having  count(*) >= 1",
        "question": "What are the names of departments that have at least one employee.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from departments where  departments.department_name = \"Marketing\"",
        "question": "display all the information about the department Marketing.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from departments where  departments.department_name = \"Marketing\"",
        "question": "What is all the information about the Marketing department?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select distinct departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(*) >= 4",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select distinct employees.department_id from employees  group by employees.department_id having  count(*) >= 4",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select distinct departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) >= 4",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(*) >= 4",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select distinct employees.department_id from employees  group by employees.department_id having  count(*) >= 4",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select distinct departments.department_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) >= 4",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.job_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID where  departments.department_name = \"Finance\"",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.job_id from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID where  departments.department_name = \"Finance\"",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.salary between 2000 and 2500",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id , sum(employees.salary) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id having  count(*) >= 2",
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_id , sum(employees.salary) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id having  count(*) >= 2",
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.department_id , sum(employees.salary) from employees  group by employees.department_id having  count(*) >= 2",
        "question": "display the department id and the total salary for those departments which contains at least two employees.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.employee_id not in (select job_history.EMPLOYEE_ID from job_history  )",
        "question": "display all the information of those employees who did not have any job in the past.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select * from employees where  employees.employee_id not in (select job_history.EMPLOYEE_ID from job_history  )",
        "question": "What is all the information about employees who have never had a job in the past?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , departments.department_name , locations.city , locations.state_province from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID join locations on departments.LOCATION_ID = locations.LOCATION_ID",
        "question": "display the first and last name, department, city, and state province for each employee.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select employees.first_name , employees.last_name , departments.department_name , locations.city , locations.state_province from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID join locations on departments.LOCATION_ID = locations.LOCATION_ID",
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , employees.first_name , employees.last_name , locations.city , locations.state_province from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID join locations on departments.LOCATION_ID = locations.LOCATION_ID",
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , locations.city , locations.state_province from locations join departments on locations.LOCATION_ID = departments.LOCATION_ID",
        "question": "display the department name, city, and state province for each department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , locations.state_province , locations.city from locations join departments on locations.LOCATION_ID = departments.LOCATION_ID",
        "question": "display the department name, city, and state province for each department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , locations.city , locations.state_province from locations join departments on locations.LOCATION_ID = departments.LOCATION_ID",
        "question": "What are the department names, cities, and state provinces for each department?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id",
        "question": "display the department name and number of employees in each of the department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_name",
        "question": "display the department name and number of employees in each of the department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_id",
        "question": "display the department name and number of employees in each of the department.",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by employees.department_id",
        "question": "What are the department names and how many employees work in each of them?",
        "correctness": 1
    },
    {
        "db_id": "hr_1",
        "query": "select departments.department_name , count(*) from employees join departments on employees.DEPARTMENT_ID = departments.DEPARTMENT_ID  group by departments.department_name",
        "question": "What are the department names and how many employees work in each of them?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.date from weather where  weather.max_temperature_f > 85",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.date from weather where  weather.max_temperature_f > 85",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.city , max(station.lat) from station  group by station.city",
        "question": "For each city, return the highest latitude among its stations.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select max(station.lat) , station.city from station  group by station.city",
        "question": "For each city, what is the highest latitude for its stations?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select avg(station.lat) , avg(station.long) from station where  station.city = \"San Jose\"",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select avg(station.lat) , avg(station.long) from station where  station.city = \"San Jose\"",
        "question": "What is the average latitude and longitude in San Jose?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip   order by trip.duration asc limit 1",
        "question": "What is the id of the trip that has the shortest duration?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip   order by trip.duration asc limit 1",
        "question": "What is the id of the shortest trip?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select sum(trip.duration) , max(trip.duration) from trip where  trip.bike_id = 636",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select max(trip.duration) , sum(trip.duration) from trip where  trip.bike_id = 636",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select sum(trip.duration) , max(trip.duration) from trip where  trip.bike_id = \"636\"",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select sum(trip.duration) , max(trip.duration) from trip where  trip.bike_id = 636",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select sum(trip.duration) , max(trip.duration) from trip where  trip.bike_id = \"636\"",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count( distinct trip.bike_id) from trip",
        "question": "From the trip record, find the number of unique bikes.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count( distinct trip.bike_id) from trip",
        "question": "How many different bike ids are there?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count( distinct station.city) from station",
        "question": "What is the number of distinct cities the stations are located at?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count( distinct station.city) from station",
        "question": "How many different cities have these stations?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count(*) from station where  station.city = \"Mountain View\"",
        "question": "How many stations does Mountain View city has?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count(*) from station where  station.city = \"Mountain View\"",
        "question": "How many stations are in Mountain View?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct station.name from status join station on status.station_id = station.id where  status.bikes_available = 7",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct station.name from status join station on status.station_id = station.id where  status.bikes_available = 7",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct station.name from status join station on status.station_id = station.id where  status.bikes_available = 7  group by status.station_id having  count(*) >= 1",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct station.name from status join station on status.station_id = station.id where  status.bikes_available = 7  group by station.id having  count(*) >= 1",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.bike_id from trip where  trip.zip_code = \"94002\"  group by trip.bike_id  order by count(*) desc limit 1",
        "question": "Which bike traveled the most often in zip code 94002?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count(*) from weather where  weather.mean_humidity > 50 and weather.mean_visibility_miles > 8",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.id from station where  station.city = \"San Francisco\"   intersect select status.station_id from status  group by status.station_id  having  avg(status.bikes_available) > 10",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select status.station_id from status join station on status.station_id = station.id where  station.city = \"San Francisco\"   intersect select status.station_id from status  group by status.station_id having  avg(status.bikes_available) > 10",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.cloud_cover from weather where  weather.zip_code = \"94107\"  group by weather.cloud_cover  order by count(*) desc limit 3",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.cloud_cover from weather join station where  weather.zip_code = \"94107\"  group by weather.cloud_cover  order by count(*) desc limit 3",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.cloud_cover from weather where  weather.zip_code = \"94107\"  group by weather.cloud_cover  order by count(*) desc limit 3",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.cloud_cover from weather join station where  weather.zip_code = \"94107\"  group by weather.cloud_cover  order by count(*) desc limit 3",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code from weather  group by weather.zip_code  order by avg(weather.mean_sea_level_pressure_inches) asc limit 1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code from weather  group by weather.zip_code  order by avg(weather.mean_sea_level_pressure_inches) asc limit 1",
        "question": "What is the zip code that has the lowest average mean sea level pressure?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select avg(status.bikes_available) from status join station on status.station_id = station.id where  station.city != \"Palo Alto\"",
        "question": "What is the average bike availability in stations that are not located in Palo Alto?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select avg(status.bikes_available) from status join station on status.station_id = station.id where  station.city != \"Palo Alto\"",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select avg(station.long) from station where  station.id not in (select status.station_id from status where  status.bikes_available > 10  )",
        "question": "What is the average longitude of stations that never had bike availability more than 10?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code , weather.date from weather where  weather.max_temperature_f >= 80",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip join weather on trip.zip_code = weather.zip_code  group by trip.zip_code having  avg(weather.mean_temperature_f) >= 60",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip join weather on trip.zip_code = weather.zip_code  group by trip.zip_code having  avg(weather.mean_temperature_f) > 60",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip join weather on trip.zip_code = weather.zip_code  group by trip.zip_code having  avg(weather.mean_temperature_f) >= 60",
        "question": "For each zip code, find the ids of all trips that have a higher average mean temperature above 60?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count(*) , weather.zip_code from weather where  weather.max_wind_speed_mph >= 25  group by weather.zip_code",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select count(*) , weather.zip_code from weather where  weather.max_wind_speed_mph >= 25  group by weather.zip_code",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.date from weather where  weather.zip_code = \"94107\" and weather.events != \"Fog\" and weather.zip_code = \"94107\" and weather.events != \"Rain\"",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name from status join station on status.station_id = station.id  group by status.station_id having  avg(status.bikes_available) > 10  except select station.name from station where  station.city = \"San Jose\"",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name , station.lat , station.city from station   order by station.lat asc limit 1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.city , count(*) from station  group by station.city having  count(*) >= 15",
        "question": "List the name and the number of stations for all the cities that have at least 15 stations.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.city , count(*) from station  group by station.city having  count(*) >= 15",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.city , count(*) from station  group by station.city having  count(station.id) >= 15",
        "question": "What is the name of every city that has at least 15 stations and how many stations does it have?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code from weather  group by weather.zip_code having  avg(weather.mean_visibility_miles) < 10",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code from weather  group by weather.zip_code having  avg(weather.mean_visibility_miles) <= 10",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code from weather  group by weather.zip_code having  avg(weather.mean_visibility_miles) < 10",
        "question": "For each zip code, select all those that have an average mean visiblity below 10.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.zip_code from weather  group by weather.zip_code having  avg(weather.mean_visibility_miles) <= 10",
        "question": "For each zip code, select all those that have an average mean visiblity below 10.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.date , weather.cloud_cover from weather   order by weather.cloud_cover desc limit 5",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select weather.date , weather.cloud_cover from weather   order by weather.cloud_cover desc limit 5",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id , trip.duration from trip   order by trip.duration desc limit 3",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id , trip.duration from trip  group by trip.id  order by trip.duration desc limit 3",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id , trip.duration from trip  group by trip.id  order by sum(trip.duration) desc limit 3",
        "question": "What are the ids and durations of the trips with the top 3 durations?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct trip.start_station_name from trip where  trip.duration < 100",
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct trip.start_station_name from trip where  trip.duration <= 100",
        "question": "List all the distinct stations from which a trip of duration below 100 started.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct trip.start_station_name from trip where  trip.duration < 100",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct trip.start_station_name from trip where  trip.duration <= 100",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip where  trip.duration > (select avg(trip.duration) from trip where  trip.zip_code = \"94103\"  )",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select trip.id from trip where  trip.duration > (select avg(trip.duration) from trip where  trip.zip_code = \"94103\"  )",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.id , station.name from status join station on status.station_id = station.id where  status.bikes_available > 12  group by status.station_id having  count(*) > 1",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.id , station.name from status join station on status.station_id = station.id where  status.bikes_available > 12  group by status.station_id having  count(*) > 2",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.id , station.name from status join station on status.station_id = station.id where  status.bikes_available > 12  group by status.station_id",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.id , station.name from status join station on status.station_id = station.id where  status.bikes_available > 12  group by status.station_id having  count(*) > 3",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct station.id , station.name from status join station on status.station_id = station.id where  status.bikes_available > 12",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select distinct status.station_id , station.name from status join station on status.station_id = station.id where  status.bikes_available > 12",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name from station where  station.city = \"Palo Alto\"   except select station.name from station join trip on station.id = trip.id where  trip.end_station_name > 100",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name from station where  station.city = \"Palo Alto\"   except select station.name from station join trip on station.id = trip.id  group by trip.end_station_name having  count(*) > 100",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name from station where  station.city = \"Palo Alto\"   except select station.name from station join trip on station.id = trip.id",
        "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name from station where  station.city = \"Palo Alto\"   except select station.name from station join trip on station.id = trip.id where  trip.end_station_name = \"Palo Alto\"",
        "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
        "correctness": 1
    },
    {
        "db_id": "bike_1",
        "query": "select station.name from station where  station.city = \"Palo Alto\"   except select station.name from station join trip on station.id = trip.id where  trip.end_station_name = 1",
        "question": "What are the names of the stations that are located in Palo Alto but have never been the ending point of the trips",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select count(*) from browser where  browser.market_share >= 5",
        "question": "How many main stream browsers whose market share is at least 5 exist?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name from browser   order by browser.market_share desc",
        "question": "List the name of browsers in descending order by market share.",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.id , browser.name , browser.market_share from browser",
        "question": "List the ids, names and market shares of all browsers.",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select max(browser.market_share) , min(browser.market_share) , avg(browser.market_share) from browser",
        "question": "What is the maximum, minimum and average market share of the listed browsers?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.id , browser.market_share from browser where  browser.name = \"Safari\"",
        "question": "What is the id and market share of the browser Safari?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.name , web_client_accelerator.operating_system from Web_client_accelerator where  web_client_accelerator.connection != \"Broadband\"",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.name , web_client_accelerator.operating_system from Web_client_accelerator   except select web_client_accelerator.name , web_client_accelerator.operating_system from Web_client_accelerator where  web_client_accelerator.connection = \"Broadband\"",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.name , web_client_accelerator.operating_system from Web_client_accelerator where  web_client_accelerator.connection != \"Broadband\" and web_client_accelerator.id not in (select Web_client_accelerator.id from Web_client_accelerator where  web_client_accelerator.connection = \"Broadband\"  )",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  web_client_accelerator.name = \"CProxy\" and accelerator_compatible_browser.compatible_since_year > 1998",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  accelerator_compatible_browser.compatible_since_year > 1998 and web_client_accelerator.name = \"CProxy\"",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  accelerator_compatible_browser.compatible_since_year >= 1998 and web_client_accelerator.name = \"CProxy\"",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  web_client_accelerator.name = \"CProxy\" and accelerator_compatible_browser.compatible_since_year >= 1998",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.id , web_client_accelerator.name from accelerator_compatible_browser join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id  group by accelerator_compatible_browser.accelerator_id having  count(*) >= 2",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.id , browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id  group by accelerator_compatible_browser.browser_id  order by count(*) desc limit 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.id , browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id  group by accelerator_compatible_browser.browser_id  order by count(*) desc limit 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name , browser.id from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id  group by accelerator_compatible_browser.browser_id  order by count(*) desc limit 1",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select accelerator_compatible_browser.compatible_since_year from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  web_client_accelerator.name = \"CACHEbox\" and browser.name = \"Internet Explorer\"",
        "question": "When did the web accelerator 'CACHEbox' and browser 'Internet Explorer' become compatible?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select count( distinct web_client_accelerator.client) from Web_client_accelerator",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select count(*) from Web_client_accelerator where  web_client_accelerator.id not in (select accelerator_compatible_browser.accelerator_id from accelerator_compatible_browser  )",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select distinct web_client_accelerator.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  browser.market_share > 15",
        "question": "What distinct accelerator names are compatible with the browswers that have market share higher than 15?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  web_client_accelerator.name = \"CACHEbox\"   intersect select browser.name from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  web_client_accelerator.name = \"Fasterfox\"",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.name , web_client_accelerator.operating_system from Web_client_accelerator   except select web_client_accelerator.name , web_client_accelerator.operating_system from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id join Web_client_accelerator on accelerator_compatible_browser.accelerator_id = Web_client_accelerator.id where  browser.name = \"Opera\"",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.name , web_client_accelerator.operating_system from Web_client_accelerator where  web_client_accelerator.id not in (select accelerator_compatible_browser.accelerator_id from accelerator_compatible_browser join browser on accelerator_compatible_browser.browser_id = browser.id where  browser.name = \"Opera\"  )",
        "question": "Show the accelerator names and supporting operating systems that are not compatible with the browser named 'Opera'.",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.name from Web_client_accelerator where  web_client_accelerator.name like \"%Opera%\"",
        "question": "Which accelerator name contains substring \"Opera\"?",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select count(*) , web_client_accelerator.operating_system from Web_client_accelerator  group by web_client_accelerator.operating_system",
        "question": "Find the number of web accelerators used for each Operating system.",
        "correctness": 1
    },
    {
        "db_id": "browser_web",
        "query": "select web_client_accelerator.operating_system , count(*) from Web_client_accelerator  group by web_client_accelerator.operating_system",
        "question": "Find the number of web accelerators used for each Operating system.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.gender = \"female\"",
        "question": "How many females does this network has?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.gender = \"female\"",
        "question": "How many females are in the network?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) from Person",
        "question": "What is the average age for all person?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) from Person",
        "question": "What is the average age for all people in the table?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count( distinct person.city) from Person",
        "question": "How many different cities are they from?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count( distinct person.city) from Person",
        "question": "How many different cities do people originate from?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count( distinct person.job) from Person",
        "question": "How many type of jobs do they have?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count( distinct person.job) from Person",
        "question": "How many different jobs are listed?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person   order by person.age desc limit 1",
        "question": "What is the name of the person who is the oldest?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person where  person.gender = \"male\"   order by person.age asc limit 1",
        "question": "What is the name of the youngest male?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.age from Person where  person.job = \"doctor\" and person.name = \"Zach\"",
        "question": "How old is the doctor named Zach?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person where  person.age < 30",
        "question": "What is the name of the person whose age is below 30?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person where  person.age <= 30",
        "question": "What is the name of the person whose age is below 30?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.age > 30 and person.job = \"engineer\"",
        "question": "How many people whose age is greater 30 and job is engineer?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.job = \"engineer\" and person.age > 30",
        "question": "HOw many engineers are older than 30?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) , person.gender from Person  group by person.gender",
        "question": "What is the average age for each gender?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.gender , avg(person.age) from Person  group by person.gender",
        "question": "What is the average age for each gender?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.gender , avg(person.age) from Person  group by person.gender",
        "question": "How old is each gender, on average?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) , person.gender from Person  group by person.gender",
        "question": "How old is each gender, on average?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) , person.job from Person  group by person.job",
        "question": "What is average age for different job title?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.job , avg(person.age) from Person  group by person.job",
        "question": "What is average age for different job title?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) , person.job from Person  group by person.job",
        "question": "How old is the average person for each job?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.job , avg(person.age) from Person  group by person.job",
        "question": "How old is the average person for each job?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) , person.job from Person where  person.gender = \"male\"  group by person.job",
        "question": "What is average age of male for different job title?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.job , avg(person.age) from Person where  person.gender = \"male\"  group by person.job",
        "question": "What is average age of male for different job title?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select avg(person.age) , person.job from Person where  person.gender = \"male\"  group by person.job",
        "question": "What is the average age for a male in each job?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select min(person.age) , person.job from Person  group by person.job",
        "question": "What is minimum age for different job title?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select min(person.age) , person.job from Person  group by person.job",
        "question": "How old is the youngest person for each job?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) , person.gender from Person where  person.age < 40  group by person.gender",
        "question": "Find the number of people who is under 40 for each gender.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) , person.gender from Person where  person.age <= 40  group by person.gender",
        "question": "Find the number of people who is under 40 for each gender.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) , person.gender from Person where  person.age < 40  group by person.gender",
        "question": "How many people are under 40 for each gender?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) , person.gender from Person where  person.age <= 40  group by person.gender",
        "question": "How many people are under 40 for each gender?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.gender , count(*) from Person where  person.age < 40  group by person.gender",
        "question": "How many people are under 40 for each gender?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person where  person.age > (select max(person.age) from Person where  person.job = \"engineer\"  )    order by person.age asc",
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.job = \"engineer\"",
        "question": "Find the number of people whose age is greater than all engineers.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.age > (select max(person.age) from Person where  person.job = \"engineer\"  )",
        "question": "Find the number of people whose age is greater than all engineers.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.age > (select min(person.age) from Person where  person.job = \"engineer\"  )",
        "question": "Find the number of people whose age is greater than all engineers.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.age > (select person.age from Person where  person.job = \"engineer\"  )",
        "question": "Find the number of people whose age is greater than all engineers.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.job = \"engineer\"",
        "question": "How many people are older than every engineer?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.age > (select min(person.age) from Person where  person.job = \"engineer\"  )",
        "question": "How many people are older than every engineer?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select count(*) from Person where  person.age > (select max(person.age) from Person where  person.job = \"engineer\"  )",
        "question": "How many people are older than every engineer?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name , person.job from Person   order by person.name asc",
        "question": "list the name, job title of all people ordered by their names.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name , person.job from Person   order by person.name asc",
        "question": "What are the names and job titles of every person ordered alphabetically by name?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name , person.job from Person   order by person.name,person.job asc",
        "question": "What are the names and job titles of every person ordered alphabetically by name?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person   order by person.age desc",
        "question": "Find the names of all person sorted in the descending order using age.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person   order by person.age desc",
        "question": "What are the names of everybody sorted by age in descending order?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend where  personfriend.name = \"Bob\"",
        "question": "Who are the friends of Bob?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend where  personfriend.name = \"Bob\"",
        "question": "Who are Bob's friends?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.name from PersonFriend join Person on PersonFriend.friend = Person.name where  person.name = \"Bob\"",
        "question": "What are the names of all of Bob's friends?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from PersonFriend join Person on PersonFriend.friend = Person.name where  person.gender = \"female\" and personfriend.name = \"Zach\"",
        "question": "Find the names of females who are friends with Zach",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend join Person on PersonFriend.friend = Person.name where  person.name = \"Alice\" and person.gender = \"female\"",
        "question": "Find the female friends of Alice.",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend join Person on PersonFriend.friend = Person.name where  person.name = \"Alice\" and person.gender = \"female\"",
        "question": "What are all the friends of Alice who are female?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend join Person on PersonFriend.friend = Person.name where  person.gender = \"female\" and person.name = \"Alice\"",
        "question": "What are all the friends of Alice who are female?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend join Person on PersonFriend.friend = Person.name where  person.gender = \"Female\" and person.name = \"Alice\"",
        "question": "What are all the friends of Alice who are female?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend join Person on PersonFriend.friend = Person.name where  person.name = \"Alison\" and person.gender = \"female\"",
        "question": "What are all the friends of Alice who are female?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend join Person on PersonFriend.friend = Person.name where  person.name = \"Alice\" and person.gender = \"Female\"",
        "question": "What are all the friends of Alice who are female?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select distinct personfriend.name from PersonFriend join Person on PersonFriend.friend = Person.name where  person.age < (select avg(Person.age) from Person  )",
        "question": "What are the different names of friends who are younger than the average age for a friend?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select distinct personfriend.name from PersonFriend join Person on PersonFriend.friend = Person.name where  person.age <= (select avg(Person.age) from Person  )",
        "question": "What are the different names of friends who are younger than the average age for a friend?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name , personfriend.friend , person.age from PersonFriend join Person on PersonFriend.friend = Person.name where  person.age > (select avg(person.age) from Person  )",
        "question": "Whare the names, friends, and ages of all people who are older than the average age of a person?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select personfriend.friend from PersonFriend where  personfriend.name = \"Zach\"   order by personfriend.year desc limit 1",
        "question": "Who is the friend of Zach with longest year relationship?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.age from PersonFriend join Person on PersonFriend.friend = Person.name where  personfriend.name = \"Zach\"   order by personfriend.year desc limit 1",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.age from PersonFriend join Person on PersonFriend.friend = Person.name where  personfriend.name = \"Zach\"   order by personfriend.year desc limit 1",
        "question": "What are the ages of all of Zach's friends who are in the longest relationship?",
        "correctness": 1
    },
    {
        "db_id": "network_2",
        "query": "select person.name from Person   except select personfriend.name from PersonFriend",
        "question": "What are the names of all people who do not have friends?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select count(*) from branch where  branch.membership_amount > (select avg(branch.membership_amount) from branch  )",
        "question": "How many branches where have more than average number of memberships are there?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select count(*) from branch where  branch.membership_amount > (select avg(branch.membership_amount) from branch  )",
        "question": "What is the number of branches that have more than the average number of memberships?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.address_road , branch.city from branch   order by branch.open_year asc",
        "question": "Show name, address road, and city for all branches sorted by open year.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.address_road , branch.city from branch   order by branch.open_year asc",
        "question": "What are the names, address roads, and cities of the branches ordered by opening year?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name from branch   order by branch.membership_amount desc limit 3",
        "question": "What are names for top three branches with most number of membership?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select distinct branch.city from branch where  branch.membership_amount >= 100",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select distinct branch.city from branch where  branch.membership_amount >= 100  group by branch.city having  count(*) >= 1",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select distinct branch.city from branch where  branch.membership_amount > 100",
        "question": "What are the different cities that have more than 100 memberships?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.open_year from branch  group by branch.open_year having  count(*) >= 2",
        "question": "List all open years when at least two shops are opened.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.open_year from branch  group by branch.open_year having  count(*) >= 2",
        "question": "What are the opening years in which at least two shops opened?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select min(branch.membership_amount) , max(branch.membership_amount) from branch where  branch.city = \"London\" or branch.open_year = 2011",
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select min(branch.membership_amount) , max(branch.membership_amount) from branch where  branch.open_year = 2011 or branch.city = \"London\"",
        "question": "Show minimum and maximum amount of memberships for all branches opened in 2011 or located at city London.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select min(branch.membership_amount) , max(branch.membership_amount) from branch where  branch.city = \"London\" or branch.open_year = 2011",
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select min(branch.membership_amount) , max(branch.membership_amount) from branch where  branch.open_year = 2011 or branch.city = \"London\"",
        "question": "What are the minimum and maximum membership amounts for all branches that either opened in 2011 or are located in London?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city , count(*) from branch where  branch.open_year < 2010  group by branch.city",
        "question": "Show the city and the number of branches opened before 2010 for each city.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city , count(*) from branch where  branch.open_year <= 2010  group by branch.city",
        "question": "Show the city and the number of branches opened before 2010 for each city.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select count(*) , branch.city from branch where  branch.open_year < 2010  group by branch.city",
        "question": "For each city, how many branches opened before 2010?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city , count(*) from branch where  branch.open_year < 2010  group by branch.city",
        "question": "For each city, how many branches opened before 2010?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select count(*) , branch.city from branch where  branch.open_year <= 2010  group by branch.city",
        "question": "For each city, how many branches opened before 2010?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city , count(*) from branch where  branch.open_year <= 2010  group by branch.city",
        "question": "For each city, how many branches opened before 2010?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select count( distinct member.level) from member",
        "question": "How many different levels do members have?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.card_number , member.name , member.hometown from member   order by member.level desc",
        "question": "Show card number, name, and hometown for all members in a descending order of level.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.card_number , member.name , member.hometown from member   order by member.level desc",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.level from member  group by member.level  order by count(*) desc limit 1",
        "question": "Show the membership level with most number of members.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.level from member  group by member.level  order by count(*) desc limit 1",
        "question": "What is the membership level with the most people?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name , branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID   order by membership_register_branch.register_year asc",
        "question": "Show all member names and registered branch names sorted by register year.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name , branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID   order by membership_register_branch.register_year asc",
        "question": "What are the names of the members and branches at which they are registered sorted by year of registration?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , count(*) from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID where  membership_register_branch.register_year > 2015  group by branch.name",
        "question": "Show all branch names with the number of members in each branch registered after 2015.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , count(*) from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  membership_register_branch.register_year > 2015  group by branch.name",
        "question": "Show all branch names with the number of members in each branch registered after 2015.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , count(*) from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID where  membership_register_branch.register_year > 2014  group by branch.name",
        "question": "Show all branch names with the number of members in each branch registered after 2015.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name from member where  member.member_id not in (select membership_register_branch.Member_ID from membership_register_branch  )",
        "question": "Show member names without any registered branch.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name from member where  member.member_id not in (select membership_register_branch.Member_ID from membership_register_branch  )",
        "question": "What are the names of the members that have never registered at any branch?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name from member   except select member.name from membership_register_branch join member on membership_register_branch.Member_ID = member.Member_ID",
        "question": "What are the names of the members that have never registered at any branch?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.city from branch where  branch.branch_id not in (select membership_register_branch.Branch_ID from membership_register_branch  )",
        "question": "List the branch name and city without any registered members.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.city from branch   except select branch.name , branch.city from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID",
        "question": "List the branch name and city without any registered members.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.city from branch where  branch.branch_id not in (select membership_register_branch.Branch_ID from membership_register_branch  )",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.city from branch   except select branch.name , branch.city from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.open_year from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID where  membership_register_branch.register_year = 2016  group by membership_register_branch.branch_id  order by count(*) desc limit 1",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.open_year from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID where  membership_register_branch.register_year = 2016  group by branch.name  order by count(*) desc limit 1",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.open_year from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID where  membership_register_branch.register_year = 2016  group by membership_register_branch.branch_id  order by count(*) desc limit 1",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.open_year from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  membership_register_branch.register_year = 2016  group by membership_register_branch.branch_id  order by count(*) desc limit 1",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name , branch.open_year from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  membership_register_branch.register_year = 2016  group by branch.Branch_ID  order by count(*) desc limit 1",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name , member.hometown from membership_register_branch join member on membership_register_branch.Member_ID = member.Member_ID where  membership_register_branch.register_year = 2016",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.name , member.hometown from membership_register_branch join member on membership_register_branch.Member_ID = member.Member_ID where  membership_register_branch.register_year = 2016",
        "question": "What are the member names and hometowns of those who registered at a branch in 2016?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city from branch where  branch.open_year = 2001 and branch.membership_amount > 100",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city from branch where  branch.open_year = 2001 and branch.membership_amount > 100",
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city from branch   except select branch.city from branch where  branch.membership_amount > 100",
        "question": "Show all cities without a branch having more than 100 memberships.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.city from branch   except select branch.city from branch where  branch.membership_amount > 100",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select sum(purchase.total_pounds) from purchase join branch on purchase.Branch_ID = branch.Branch_ID where  branch.city = \"London\" and purchase.year = 2018",
        "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select sum(purchase.total_pounds) from purchase join branch on purchase.Branch_ID = branch.Branch_ID where  branch.city like \"%London%\" and purchase.year = 2018",
        "question": "What is the sum of total pounds of purchase in year 2018 for all branches in London?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select sum(purchase.total_pounds) from purchase join branch on purchase.Branch_ID = branch.Branch_ID where  branch.city = \"London\" and purchase.year = 2018",
        "question": "How many total pounds were purchased in the year 2018 at all London branches?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select sum(purchase.total_pounds) from purchase join branch on purchase.Branch_ID = branch.Branch_ID where  branch.city = \"London\" and purchase.year = 2018 and branch.branch_id in (select branch.Branch_ID from branch where  branch.city = \"London\"  )",
        "question": "How many total pounds were purchased in the year 2018 at all London branches?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select count(*) from purchase join member on purchase.Member_ID = member.Member_ID where  member.level = 6",
        "question": "What is the total number of purchases for members with level 6?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Louisville , Kentucky\"   intersect select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Hiram , Georgia\"",
        "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Louisville\"   intersect select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Hiram\"",
        "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Louisville , Kentucky\"   intersect select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Hiram , Goergia\"",
        "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Louisville , KY\"   intersect select branch.name from membership_register_branch join branch on membership_register_branch.Branch_ID = branch.Branch_ID join member on membership_register_branch.Member_ID = member.Member_ID where  member.hometown = \"Hiram , Goergia\"",
        "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.card_number from member where  member.hometown like \"%Kentucky%\"",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.card_number from member where  member.hometown like \"% Kentucky%\"",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "correctness": 1
    },
    {
        "db_id": "shop_membership",
        "query": "select member.card_number from member where  member.hometown like \"%kentucky%\"",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id   order by product_suppliers.total_amount_purchased desc limit 3",
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id   order by product_suppliers.total_amount_purchased desc limit 3",
        "question": "Give the ids of the three products purchased in the largest amounts.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_type_code from Products   order by products.product_price asc limit 1",
        "question": "What are the product id and product type of the cheapest product?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_type_code from Products  group by products.product_id  order by products.product_price asc limit 1",
        "question": "What are the product id and product type of the cheapest product?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_type_code from Products   order by products.product_price asc limit 1",
        "question": "Give the id and product type of the product with the lowest price.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count( distinct products.product_type_code) from Products",
        "question": "Find the number of different product types.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count( distinct products.product_type_code) from Products",
        "question": "Count the number of distinct product types.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select addresses.address_details from Customer_Addresses join Addresses on Customer_Addresses.address_id = Addresses.address_id where  customer_addresses.customer_id = 10",
        "question": "What is the address for the customer with id 10?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select addresses.address_details from Customer_Addresses join Customers on Customer_Addresses.customer_id = Customers.customer_id join Addresses on Customer_Addresses.address_id = Addresses.address_id where  customers.customer_id = 10",
        "question": "What is the address for the customer with id 10?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_id , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Department Manager\"",
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff_department_assignments.staff_id , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Department Manager\"",
        "question": "What are the staff ids and genders of all staffs whose job title is Department Manager?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_id , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Department Manager\"",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff_department_assignments.staff_id , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Department Manager\"",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.payment_method_code , count(*) from Customers  group by customers.payment_method_code",
        "question": "For each payment method, return how many customers use it.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count(*) , customers.payment_method_code from Customers  group by customers.payment_method_code",
        "question": "For each payment method, return how many customers use it.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.payment_method_code , count(*) from Customers  group by customers.payment_method_code",
        "question": "How many customers use each payment method?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count(*) , customers.payment_method_code from Customers  group by customers.payment_method_code",
        "question": "How many customers use each payment method?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Order_Items join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id  order by count(*) desc limit 1",
        "question": "What is the id of the product that was ordered the most often?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select order_items.product_id from Order_Items  group by order_items.product_id  order by count(*) desc limit 1",
        "question": "What is the id of the product that was ordered the most often?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Order_Items join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id  order by count(*) desc limit 1",
        "question": "Give the product id for the product that was ordered most frequently.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select order_items.product_id from Order_Items  group by order_items.product_id  order by count(*) desc limit 1",
        "question": "Give the product id for the product that was ordered most frequently.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_phone , customers.customer_email from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_phone , customers.customer_email from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customer_orders.customer_id  order by count(*) desc limit 1",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_phone , customers.customer_email from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customer_orders.customer_id  order by count(*) desc limit 1",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_phone , customers.customer_email from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code , avg(products.product_price) from Products  group by products.product_type_code",
        "question": "What is the average price for each type of product?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select avg(products.product_price) , products.product_type_code from Products  group by products.product_type_code",
        "question": "What is the average price for each type of product?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select avg(products.product_price) , products.product_type_code from Products  group by products.product_type_code",
        "question": "Return the average price for each product type.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code , avg(products.product_price) from Products  group by products.product_type_code",
        "question": "Return the average price for each product type.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count(*) from Department_Stores join Department_Store_Chain on Department_Stores.dept_store_chain_id = Department_Store_Chain.dept_store_chain_id where  department_store_chain.dept_store_chain_name = \"South\"",
        "question": "How many department stores does the store chain South have?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count(*) from Department_Stores where  department_stores.dept_store_chain_id in (select Department_Store_Chain.dept_store_chain_id from Department_Store_Chain where  department_store_chain.dept_store_chain_name = \"South\"   intersect select Department_Store_Chain.dept_store_chain_id from Department_Store_Chain where  department_store_chain.dept_store_chain_name = \"South\"   )",
        "question": "How many department stores does the store chain South have?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select count(*) from Department_Stores join Department_Store_Chain on Department_Stores.dept_store_chain_id = Department_Store_Chain.dept_store_chain_id where  department_store_chain.dept_store_chain_name = \"South\"",
        "question": "Count the number of stores the chain South has.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name , staff_department_assignments.job_title_code from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id   order by staff_department_assignments.date_assigned_to desc limit 1",
        "question": "What is the name and job title of the staff who was assigned the latest?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name , staff_department_assignments.job_title_code from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id   order by staff_department_assignments.date_assigned_to desc limit 1",
        "question": "Return the name and job title of the staff with the latest date assigned.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name , staff_department_assignments.job_title_code from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.date_assigned_to = (select max(staff_department_assignments.date_assigned_to) from Staff_Department_Assignments  )",
        "question": "Return the name and job title of the staff with the latest date assigned.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code , products.product_name , products.product_price from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id where  product_suppliers.supplier_id = 3",
        "question": "Give me the product type, name and price for all the products supplied by supplier id 3.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code , products.product_name , products.product_price from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id where  product_suppliers.supplier_id = 3",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"   order by customer_orders.customer_id asc",
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"   order by customers.customer_id asc",
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"   order by customer_orders.customer_id asc",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"   order by customers.customer_id asc",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"  group by customer_orders.customer_id  order by customer_orders.customer_id asc",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_address from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"New\"   intersect select customers.customer_name , customers.customer_address from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_address from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"New\"   intersect select customers.customer_name , customers.customer_address from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Pending\"",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id where  product_suppliers.supplier_id = 2 and products.product_price > (select avg(products.product_price) from Products  )",
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id where  product_suppliers.supplier_id = 2 and products.product_price > (select avg(products.product_price) from Products  )",
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select department_stores.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"marketing\"   intersect select department_stores.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"managing\"",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select departments.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"marketing\"   intersect select departments.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"managing\"",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select department_stores.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"marketing\"   intersect select department_stores.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"managing\"",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select departments.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"marketing\"   intersect select departments.dept_store_id , department_stores.store_name from Departments join Department_Stores on Departments.dept_store_id = Department_Stores.dept_store_id where  departments.department_name = \"managing\"",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select department_stores.dept_store_chain_id from Department_Stores  group by department_stores.dept_store_chain_id  order by count(*) desc limit 2",
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select department_stores.dept_store_chain_id from Department_Stores  group by department_stores.dept_store_chain_id  order by count(*) desc limit 2",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select departments.department_id from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id join Departments on Staff_Department_Assignments.department_id = Departments.department_id  group by departments.department_id  order by count(*) asc limit 1",
        "question": "What is the id of the department with the least number of staff?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select departments.department_id from Staff_Department_Assignments join Departments on Staff_Department_Assignments.department_id = Departments.department_id  group by departments.department_id  order by count(*) asc limit 1",
        "question": "Return the id of the department with the fewest staff assignments.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff_department_assignments.department_id from Staff_Department_Assignments  group by staff_department_assignments.department_id  order by count(*) asc limit 1",
        "question": "Return the id of the department with the fewest staff assignments.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select departments.department_id from Staff_Department_Assignments join Departments on Staff_Department_Assignments.department_id = Departments.department_id  group by staff_department_assignments.department_id  order by count(*) asc limit 1",
        "question": "Return the id of the department with the fewest staff assignments.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select max(products.product_price) , min(products.product_price) , products.product_type_code from Products  group by products.product_type_code",
        "question": "For each product type, return the maximum and minimum price.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code , max(products.product_price) , min(products.product_price) from Products  group by products.product_type_code",
        "question": "For each product type, return the maximum and minimum price.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select max(products.product_price) , min(products.product_price) , products.product_type_code from Products  group by products.product_type_code",
        "question": "What are the maximum and minimum product prices for each product type?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code from Products  group by products.product_type_code having  avg(products.product_price) > (select avg(products.product_price) from Products  )",
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_type_code from Products  group by products.product_type_code having  avg(products.product_price) > (select avg(products.product_price) from Products  )",
        "question": "What is the code of the product type with an average price higher than the average price of all products?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name , products.product_id from Products where  products.product_price between 600 and 700",
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct products.product_name , products.product_id from Products where  products.product_price between 600 and 700",
        "question": "Return the names and ids of all products whose price is between 600 and 700.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name , products.product_id from Products where  products.product_price between 600 and 700",
        "question": "What are the names and ids of products costing between 600 and 700?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_id from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.date_assigned_to < (select max(staff_department_assignments.date_assigned_to) from Staff_Department_Assignments where  staff_department_assignments.job_title_code = \"Clerical Staff\"  )",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_id from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.date_assigned_to < (select max(Staff_Department_Assignments.date_assigned_to) from Staff_Department_Assignments where  staff_department_assignments.job_title_code = \"Clerical Staff\"  )",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_id from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.date_assigned_to < (select max(Staff_Department_Assignments.date_assigned_to) from Staff_Department_Assignments where  staff_department_assignments.job_title_code = \"Clerical Staff\"  )",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_id from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.date_assigned_to < (select max(staff_department_assignments.date_assigned_to) from Staff_Department_Assignments where  staff_department_assignments.job_title_code = \"Clerical Staff\"  )",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name , customers.customer_id from Customers where  customers.customer_address like \"%TN%\"",
        "question": "What are the names and ids of customers whose address contains TN?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id  group by staff.staff_name having  count(*) > 1",
        "question": "List the name of staff who has been assigned multiple jobs.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id  group by staff.staff_name having  count(*) > 1",
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_phone from Customers   union select suppliers.supplier_phone from Suppliers",
        "question": "What are the phone numbers of all customers and suppliers.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_phone from Customers   union select suppliers.supplier_phone from Suppliers",
        "question": "Return the phone numbers for all customers and suppliers.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select order_items.product_id from Order_Items  group by order_items.product_id having  count(*) > 3  union select order_items.product_id from Order_Items join Products on Order_Items.product_id = Products.product_id join Product_Suppliers on Products.product_id = Product_Suppliers.product_id  group by order_items.product_id having  sum(product_suppliers.total_amount_purchased) > 80000",
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id from Order_Items join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id having  count(*) > 3  union select product_suppliers.product_id from Product_Suppliers  group by product_suppliers.product_id  having  sum(product_suppliers.total_amount_purchased) > 80000",
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_name from Products where  products.product_price < 600 or products.product_price > 900",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_name from Products where  products.product_price <= 600 or products.product_price > 900",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_name from Products where  products.product_price < 600 or products.product_price > 900",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_id , products.product_name from Products where  products.product_price <= 600 or products.product_price > 900",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select product_suppliers.supplier_id from Product_Suppliers  group by product_suppliers.supplier_id having  avg(product_suppliers.total_amount_purchased) >= 50000 or avg(product_suppliers.total_amount_purchased) < 30000",
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select product_suppliers.supplier_id from Product_Suppliers  group by product_suppliers.supplier_id having  avg(product_suppliers.total_amount_purchased) >= 50000 or avg(product_suppliers.total_amount_purchased) <= 30000",
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select product_suppliers.supplier_id from Product_Suppliers  group by product_suppliers.supplier_id having  avg(product_suppliers.total_amount_purchased) > 50000 or avg(product_suppliers.total_amount_purchased) < 30000",
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select product_suppliers.supplier_id from Product_Suppliers  group by product_suppliers.supplier_id having  avg(product_suppliers.total_amount_purchased) >= 50000 or avg(product_suppliers.total_amount_purchased) < 30000",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select product_suppliers.supplier_id from Product_Suppliers  group by product_suppliers.supplier_id having  avg(product_suppliers.total_amount_purchased) > 50000 or avg(product_suppliers.total_amount_purchased) < 30000",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select product_suppliers.supplier_id from Product_Suppliers  group by product_suppliers.supplier_id having  avg(product_suppliers.total_amount_purchased) >= 50000 or avg(product_suppliers.total_amount_purchased) <= 30000",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select avg(product_suppliers.total_amount_purchased) , avg(product_suppliers.total_value_purchased) from Product_Suppliers  group by product_suppliers.supplier_id  order by count(*) desc limit 1",
        "question": "What are the average amount purchased and value purchased for the supplier who supplies the most products.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select max(customers.customer_code) , min(customers.customer_code) from Customers",
        "question": "What is the largest and smallest customer codes?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select min(customers.customer_code) , max(customers.customer_code) from Customers",
        "question": "What is the largest and smallest customer codes?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select max(customers.customer_code) , min(customers.customer_code) from Customers",
        "question": "Return the maximum and minimum customer codes.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id where  products.product_name = \"keyboard\"",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id where  products.product_name = \"keyboard\"",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct suppliers.supplier_name , suppliers.supplier_phone from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id join Suppliers on Product_Suppliers.supplier_id = Suppliers.supplier_id where  products.product_name = \"red jeans\"",
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select suppliers.supplier_name , suppliers.supplier_phone from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id join Suppliers on Product_Suppliers.supplier_id = Suppliers.supplier_id where  products.product_name = \"red jeans\"",
        "question": "List the names and phone numbers of all the distinct suppliers who supply red jeans.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct suppliers.supplier_name , suppliers.supplier_phone from Product_Suppliers join Products on Product_Suppliers.product_id = Products.product_id join Suppliers on Product_Suppliers.supplier_id = Suppliers.supplier_id where  products.product_name = \"red jeans\"",
        "question": "What are the distinct names and phone numbers for suppliers who have red jeans?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select max(products.product_price) , min(products.product_price) , products.product_type_code from Products  group by products.product_type_code  order by products.product_type_code asc",
        "question": "What are the highest and lowest prices of products, grouped by and alphabetically ordered by product type?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select max(products.product_price) , min(products.product_price) , products.product_type_code from Products  group by products.product_type_code  order by products.product_type_code asc",
        "question": "Give the maximum and minimum product prices for each product type, grouped and ordered by product type.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customer_orders.order_id , customer_orders.customer_id from Customer_Orders where  customer_orders.order_status_code = \"Cancelled\"   order by customer_orders.order_date asc",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customer_orders.order_id , customer_orders.customer_id from Customer_Orders where  customer_orders.order_status_code = \"Cancelled\"   order by customer_orders.order_date asc",
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customer_orders.order_id , customer_orders.customer_id from Customer_Orders where  customer_orders.order_status_code = \"Cancelled\"  group by customer_orders.order_date  order by customer_orders.order_date asc",
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by order_items.product_id having  count(*) >= 2",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by order_items.product_id having  count( distinct customers.customer_name) >= 2",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by order_items.product_id having  count(*) >= 2",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id  group by order_items.product_id having  count(*) >= 2",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct products.product_name from Order_Items join Products on Order_Items.product_id = Products.product_id join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by order_items.product_id having  count( distinct customers.customer_name) >= 2",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_name having  count(*) >= 3",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_name having  count( distinct order_items.product_id) >= 3",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_name from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customer_orders.customer_id having  count(*) >= 3",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_name having  count(*) >= 3",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_id having  count(*) >= 3",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select distinct customers.customer_name from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_id having  count( distinct order_items.product_id) >= 3",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Sales Person\"   except select staff.staff_name , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Clerical Staff\"",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select staff.staff_name , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Sales Person\"   except select staff.staff_name , staff.staff_gender from Staff_Department_Assignments join Staff on Staff_Department_Assignments.staff_id = Staff.staff_id where  staff_department_assignments.job_title_code = \"Clerical Staff\"",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_id , customers.customer_name from Customers where  customers.customer_address like \"%WY%\" and customers.customer_id not in (select Customers.customer_id from Customers where  customers.payment_method_code = \"Credit Card\"  )",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_id , customers.customer_name from Customers where  customers.customer_address like \"%WY%\" and customers.payment_method_code != \"Credit Card\"",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customers.customer_id , customers.customer_name from Customers where  customers.customer_address like \"%WY%\" and customers.customer_id not in (select Customers.customer_id from Customers where  customers.payment_method_code = \"Credit Card\"  )",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select customer_addresses.customer_id , customers.customer_name from Customer_Addresses join Customers on Customer_Addresses.customer_id = Customers.customer_id where  customers.customer_address like \"%WY%\" and customers.customer_id not in (select Customers.customer_id from Customers where  customers.payment_method_code = \"Credit Card\"  )",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select avg(products.product_price) from Products where  products.product_type_code = \"Clothes\"",
        "question": "Find the average price of all product clothes.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select avg(products.product_price) from Products where  products.product_type_code = \"Clothes\"",
        "question": "What is the average price of clothes?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Products where  products.product_price = (select max(products.product_price) from Products where  products.product_type_code = \"Hardware\"   order by products.product_price desc limit 1 )",
        "question": "Find the name of the most expensive hardware product.",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Products where  products.product_price = (select max(products.product_price) from Products   order by products.product_price desc limit 1 )",
        "question": "What is the name of the hardware product with the greatest price?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Products where  products.product_type_code = \"Hardware\"   order by products.product_price desc limit 1",
        "question": "What is the name of the hardware product with the greatest price?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Products where  products.product_price = (select max(products.product_price) from Products where  products.product_type_code = \"Hardware\"   order by products.product_price desc limit 1 )",
        "question": "What is the name of the hardware product with the greatest price?",
        "correctness": 1
    },
    {
        "db_id": "department_store",
        "query": "select products.product_name from Products where  products.product_price = (select max(products.product_price) from Products  )",
        "question": "What is the name of the hardware product with the greatest price?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select count(*) from entrepreneur",
        "question": "How many entrepreneurs are there?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select count(*) from entrepreneur",
        "question": "Count the number of entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company from entrepreneur   order by entrepreneur.money_requested desc",
        "question": "List the companies of entrepreneurs in descending order of money requested.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company from entrepreneur   order by entrepreneur.money_requested desc",
        "question": "What are the companies of entrepreneurs, ordered descending by amount of money requested?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company , entrepreneur.investor from entrepreneur",
        "question": "List the companies and the investors of entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company , entrepreneur.investor from entrepreneur",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select distinct entrepreneur.company , entrepreneur.investor from entrepreneur",
        "question": "What are the companies and investors that correspond to each entrepreneur?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select avg(entrepreneur.money_requested) from entrepreneur",
        "question": "What is the average money requested by all entrepreneurs?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select avg(entrepreneur.money_requested) from entrepreneur",
        "question": "Return the average money requested across all entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people   order by people.weight asc",
        "question": "What are the names of people in ascending order of weight?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people   order by people.weight asc",
        "question": "Return the names of people, ordered by weight ascending.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID",
        "question": "What are the names of entrepreneurs?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID",
        "question": "Return the names of entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID where  entrepreneur.investor != \"Rachel Elnaugh\"",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID where  entrepreneur.investor != \"Rachel Elnaugh\"",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.weight from people   order by people.height asc limit 1",
        "question": "What is the weight of the shortest person?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.weight from people   order by people.height asc limit 1",
        "question": "Return the weight of the shortest person.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by people.weight desc limit 1",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people where  people.people_id in (select entrepreneur.People_ID from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by people.weight desc limit 1 )",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people where  people.weight = (select max(people.weight) from people  )",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by people.weight desc limit 1",
        "question": "Return the name of the heaviest entrepreneur.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people where  people.weight = (select max(people.weight) from people  )",
        "question": "Return the name of the heaviest entrepreneur.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.date_of_birth from entrepreneur join people on entrepreneur.People_ID = people.People_ID where  entrepreneur.investor = \"Simon Woodroffe\" or entrepreneur.investor = \"Peter Jones\"",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.date_of_birth from entrepreneur join people on entrepreneur.People_ID = people.People_ID where  entrepreneur.investor = \"Simon Woodroffe\" or entrepreneur.investor = \"Peter Jones\"",
        "question": "Return the dates of birth for entrepreneurs who have either the investor Simon Woodroffe or Peter Jones.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.weight from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by entrepreneur.money_requested desc",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.weight from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by entrepreneur.money_requested desc",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor , count(*) from entrepreneur  group by entrepreneur.investor",
        "question": "What are the investors of entrepreneurs and the corresponding number of entrepreneurs invested by each investor?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor , count(*) from entrepreneur  group by entrepreneur.investor",
        "question": "How many entrepreneurs correspond to each investor?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur  group by entrepreneur.investor  order by count(*) desc limit 1",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur  group by entrepreneur.investor  order by count(*) desc limit 1",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur  group by entrepreneur.investor having  count(*) >= 2",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur  group by entrepreneur.investor having  count(*) >= 2",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people where  people.people_id not in (select entrepreneur.People_ID from entrepreneur  )",
        "question": "List the names of people that are not entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people   except select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID",
        "question": "List the names of people that are not entrepreneurs.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people where  people.people_id not in (select entrepreneur.People_ID from entrepreneur  )",
        "question": "What are the names of people who are not entrepreneurs?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select people.name from people   except select people.name from entrepreneur join people on entrepreneur.People_ID = people.People_ID",
        "question": "What are the names of people who are not entrepreneurs?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested > 140000   intersect select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested < 120000",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested > 140000   intersect select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested <= 120000",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested > 140000   intersect select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested < 120000",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested > 140000   intersect select entrepreneur.investor from entrepreneur where  entrepreneur.money_requested <= 120000",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select count( distinct entrepreneur.company) from entrepreneur",
        "question": "How many distinct companies are there?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select count( distinct entrepreneur.company) from entrepreneur",
        "question": "Count the number of different companies.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by people.height desc limit 1",
        "question": "Show the company of the tallest entrepreneur.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company from entrepreneur join people on entrepreneur.People_ID = people.People_ID where  people.height = (select max(people.Height) from people  )",
        "question": "Show the company of the tallest entrepreneur.",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company from entrepreneur join people on entrepreneur.People_ID = people.People_ID   order by people.height desc limit 1",
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "correctness": 1
    },
    {
        "db_id": "entrepreneur",
        "query": "select entrepreneur.company from entrepreneur join people on entrepreneur.People_ID = people.People_ID where  people.height = (select max(people.Height) from people  )",
        "question": "Which company was started by the entrepreneur with the greatest height?",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , station.location , station.number_of_platforms from station",
        "question": "Show the name, location, and number of platforms for all stations.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select distinct station.location from station",
        "question": "What are all locations of train stations?",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , station.total_passengers from station where  station.location != \"London\"",
        "question": "Show the names and total passengers for all train stations not in London.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , station.main_services from station   order by station.total_passengers desc limit 3",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , station.main_services from station  group by station.total_passengers  order by station.total_passengers desc limit 3",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.main_services , station.name from station   order by station.total_passengers desc limit 3",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select avg(station.total_passengers) , max(station.total_passengers) from station where  station.location = \"London\" or station.location = \"Glasgow\"",
        "question": "What is the average and maximum number of total passengers for train stations in London or Glasgow?",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.location , sum(station.number_of_platforms) , sum(station.total_passengers) from station  group by station.location",
        "question": "Show all locations and the total number of platforms and passengers for all train stations in each location.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.location from station   except select station.location from station where  station.number_of_platforms >= 15",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.location from station   except select station.location from station where  station.number_of_platforms > 15",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name , train.time , train.service from train",
        "question": "Show the name, time, and service for all trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select count(*) from train",
        "question": "Show the number of trains",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select count(*) from train_station",
        "question": "Show the number of trains",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name , train.service from train   order by train.time asc",
        "question": "Show the name and service for all trains in order by time.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.service , train.name from train   order by train.time asc",
        "question": "Show the name and service for all trains in order by time.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , count(*) from train_station join station on train_station.Station_ID = station.Station_ID  group by train_station.station_id",
        "question": "Show the station name and number of trains in each station.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , count(*) from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID  group by train_station.station_id",
        "question": "Show the station name and number of trains in each station.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name , station.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID",
        "question": "show the train name and station name for each train.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name , train.time from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  station.location = \"London\"   order by train.time desc",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID  group by train_station.station_id  order by count(*) desc limit 1",
        "question": "Show the station name with greatest number of trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from train_station join station on train_station.Station_ID = station.Station_ID  group by train_station.station_id  order by count(*) desc limit 1",
        "question": "Show the station name with greatest number of trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID  group by train_station.station_id having  count(*) >= 2",
        "question": "Show the station name with at least two trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from train_station join station on train_station.Station_ID = station.Station_ID  group by train_station.station_id having  count(*) >= 2",
        "question": "Show the station name with at least two trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID  group by station.station_id having  count(*) >= 2",
        "question": "Show the station name with at least two trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.location from station  group by station.location having  count(*) <= 1",
        "question": "Show all locations with only 1 station.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from station where  station.station_id not in (select train_station.Station_ID from train_station  )",
        "question": "Show station names without any trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from station   except select station.name from train_station join station on train_station.Station_ID = station.Station_ID",
        "question": "Show station names without any trains.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  train.name = \"Ananthapuri Express\"   intersect select station.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  train.name = \"Guruvayur Express\"",
        "question": "What are the names of the stations which serve both \"Ananthapuri Express\" and \"Guruvayur Express\" trains?",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name from train where  train.train_id not in (select train.Train_ID from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  station.location = \"London\"  )",
        "question": "Find the names of the trains that do not pass any station located in London.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  station.location != \"London\" and train.train_id not in (select train.Train_ID from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  station.location = \"London\"  )",
        "question": "Find the names of the trains that do not pass any station located in London.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name from train where  train.train_id not in (select train_station.Train_ID from train_station join station on train_station.Station_ID = station.Station_ID where  station.location = \"London\"  )",
        "question": "Find the names of the trains that do not pass any station located in London.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select train.name from train_station join station on train_station.Station_ID = station.Station_ID join train on train_station.Train_ID = train.Train_ID where  station.location != \"London\" and train_station.train_id not in (select train_station.Train_ID from train_station join station on train_station.Station_ID = station.Station_ID where  station.location = \"London\"  )",
        "question": "Find the names of the trains that do not pass any station located in London.",
        "correctness": 1
    },
    {
        "db_id": "train_station",
        "query": "select station.name , station.location from station   order by station.annual_entry_exit,station.annual_interchanges asc",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_details from Events join Services on Events.Service_ID = Services.Service_ID where  services.service_type_code = \"Marriage\"",
        "question": "what are the event details of the services that have the type code 'Marriage'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id , events.event_details from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by participants_in_events.event_id having  count(*) > 1",
        "question": "What are the ids and details of events that have more than one participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id , events.event_details from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID  group by participants_in_events.event_id having  count(*) > 1",
        "question": "What are the ids and details of events that have more than one participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id , events.event_details from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by events.event_id having  count(*) > 1",
        "question": "What are the ids and details of events that have more than one participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id , events.event_details from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID  group by events.event_id having  count(*) > 1",
        "question": "What are the ids and details of events that have more than one participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select participants.participant_id , participants.participant_type_code , count(*) from Participants_in_Events join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by participants_in_events.participant_id",
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select participants.participant_id , participants.participant_type_code , count(*) from Participants_in_Events join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by participants.participant_id",
        "question": "How many events have each participants attended? List the participant id, type and the number.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select participants.participant_id , participants.participant_type_code , participants.participant_details from Participants",
        "question": "What are all the the participant ids, type code and details?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select count(*) from Participants where  participants.participant_type_code = \"Organizer\"",
        "question": "How many participants belong to the type 'Organizer'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select services.service_type_code from Services   order by services.service_type_code asc",
        "question": "List the type of the services in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.service_id , events.event_details from Events",
        "question": "List the service id and details for the events.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select services.service_id , events.event_details from Events join Services on Events.Service_ID = Services.Service_ID",
        "question": "List the service id and details for the events.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select count(*) from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID where  participants.participant_details like \"%Dr.%\"",
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select participants.participant_type_code from Participants  group by participants.participant_type_code  order by count(*) desc limit 1",
        "question": "What is the most common participant type?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select services.service_id , services.service_type_code from Events join Services on Events.Service_ID = Services.Service_ID join Participants_in_Events on Events.Event_ID = Participants_in_Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by services.service_id  order by count(*) asc limit 1",
        "question": "Which service id and type has the least number of participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select services.service_id , services.service_type_code from Events join Services on Events.Service_ID = Services.Service_ID join Participants_in_Events on Events.Event_ID = Participants_in_Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by services.service_type_code  order by count(*) asc limit 1",
        "question": "Which service id and type has the least number of participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select services.service_id , services.service_type_code from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Services on Events.Service_ID = Services.Service_ID  group by services.service_id  order by count(*) asc limit 1",
        "question": "Which service id and type has the least number of participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select services.service_id , services.service_type_code from Events join Services on Events.Service_ID = Services.Service_ID join Participants_in_Events on Events.Event_ID = Participants_in_Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by events.service_id  order by count(*) asc limit 1",
        "question": "Which service id and type has the least number of participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select participants_in_events.event_id from Participants_in_Events join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by participants_in_events.event_id  order by count(*) desc limit 1",
        "question": "What is the id of the event with the most participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select participants_in_events.event_id from Participants_in_Events  group by participants_in_events.event_id  order by count(*) desc limit 1",
        "question": "What is the id of the event with the most participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by participants_in_events.event_id  order by count(*) desc limit 1",
        "question": "What is the id of the event with the most participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID  group by participants_in_events.event_id  order by count(*) desc limit 1",
        "question": "What is the id of the event with the most participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID  group by events.event_id  order by count(*) desc limit 1",
        "question": "What is the id of the event with the most participants?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select events.event_id from Events   except select events.event_id from Participants_in_Events join Events on Participants_in_Events.Event_ID = Events.Event_ID join Participants on Participants_in_Events.Participant_ID = Participants.Participant_ID where  participants.participant_details = \"Kenyatta Kuhn\"",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_in_alabama",
        "query": "select count(*) from Events where  events.event_id not in (select Participants_in_Events.Event_ID from Participants_in_Events  )",
        "question": "How many events did not have any participants?",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select count(*) from church where  church.open_date < 1850",
        "question": "How many churches opened before 1850 are there?",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select count(*) from church where  church.open_date <= 1850",
        "question": "How many churches opened before 1850 are there?",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name , church.open_date , church.organized_by from church",
        "question": "Show the name, open date, and organizer for all churches.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name from church   order by church.open_date desc",
        "question": "List all church names in descending order of opening date.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.open_date from church  group by church.open_date having  count(*) >= 2",
        "question": "Show the opening year in whcih at least two churches opened.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.organized_by , church.name from church where  church.open_date between 1830 and 1840",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.organized_by , church.name from church where  church.open_date between 1830 and 1841",
        "question": "Show the organizer and name for churches that opened between 1830 and 1840.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.open_date , count(*) from church  group by church.open_date",
        "question": "Show all opening years and the number of churches that opened in that year.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name , church.open_date from church   order by church.open_date desc limit 3",
        "question": "Show the name and opening year for three churches that opened most recently.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select count(*) from people where  people.age > 30 and people.is_male = \"F\"",
        "question": "How many female people are older than 30 in our record?",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select min(people.age) , max(people.age) , avg(people.age) from people",
        "question": "Show the minimum, maximum, and average age for all people.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select people.name , people.country from people where  people.age < (select avg(people.age) from people  )",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select people.name , people.country from people where  people.age <= (select avg(people.age) from people  )",
        "question": "Show the name and country for all people whose age is smaller than the average.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name from church   except select church.name from wedding join church on wedding.Church_ID = church.Church_ID where  wedding.year = 2015",
        "question": "Show all church names except for those that had a wedding in year 2015.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name from wedding join church on wedding.Church_ID = church.Church_ID  group by wedding.church_id having  count(*) >= 2",
        "question": "Show all church names that have hosted least two weddings.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name from wedding join church on wedding.Church_ID = church.Church_ID  group by church.church_id having  count(*) >= 2",
        "question": "Show all church names that have hosted least two weddings.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select count(*) from wedding where  wedding.year = 2016",
        "question": "How many weddings are there in year 2016?",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select church.name from wedding join people on wedding.Female_ID = people.People_ID join church on wedding.Church_ID = church.Church_ID where  people.age > 30",
        "question": "Show the church names for the weddings of all people older than 30.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select people.country , count(*) from people  group by people.country",
        "question": "Show all countries and the number of people from each country.",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select count( distinct wedding.church_id) from wedding where  wedding.year = 2016",
        "question": "How many churches have a wedding in year 2016?",
        "correctness": 1
    },
    {
        "db_id": "wedding",
        "query": "select count( distinct church.church_id) from wedding join church on wedding.Church_ID = church.Church_ID where  wedding.year = 2016",
        "question": "How many churches have a wedding in year 2016?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.year = 2008",
        "question": "Find the names of all wines produced in 2008.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.year = 2008",
        "question": "What are the names of all wines produced in 2008?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , wine.appelation from wine join grapes on wine.Grape = grapes.Grape",
        "question": "List the grapes and appelations of all wines.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , wine.appelation from wine join grapes on wine.Grape = grapes.Grape",
        "question": "What are the grapes and appelations of each wine?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , appellations.appelation from wine join appellations on wine.Appelation = appellations.Appelation join grapes on wine.Grape = grapes.Grape",
        "question": "What are the grapes and appelations of each wine?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name , wine.score from wine",
        "question": "List the names and scores of all wines.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name , wine.score from wine",
        "question": "What are the names and scores of all wines?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area , appellations.county from appellations",
        "question": "List the area and county of all appelations.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area , appellations.county from appellations",
        "question": "What are the areas and counties for all appelations?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.price from wine where  wine.year < 2010",
        "question": "What are the prices of wines produced before the year of 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.price from wine where  wine.year <= 2010",
        "question": "What are the prices of wines produced before the year of 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.price from wine where  wine.year < 2010",
        "question": "Return the prices of wines produced before 2010.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.price from wine where  wine.year <= 2010",
        "question": "Return the prices of wines produced before 2010.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.score > 90",
        "question": "What are the names of wines with scores higher than 90?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine join grapes on wine.Grape = grapes.Grape where  grapes.color = \"Red\"",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine join appellations on wine.Appelation = appellations.Appelation where  appellations.area = \"North Coast\"",
        "question": "Find the names of all distinct wines that have appellations in North Coast area.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine join appellations on wine.Appelation = appellations.Appelation where  appellations.area = \"North Coast\"",
        "question": "What are the distinct names of wines that have appellations in the North Coast area?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select count(*) from wine where  wine.winery = \"Robert Biale\"",
        "question": "How many wines are produced at Robert Biale winery?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select count(*) from wine where  wine.winery = \"Robert Biale\"",
        "question": "Count the number of wines produced at Robert Biale winery.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select count(*) from appellations where  appellations.county = \"Napa\"",
        "question": "How many appelations are in Napa Country?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select count(*) from appellations where  appellations.county = \"Napa\"",
        "question": "Count the number of appelations in Napa County.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name , wine.score from wine join grapes on wine.Grape = grapes.Grape where  grapes.color = \"White\"",
        "question": "What are the names and scores of wines that are made of white color grapes?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name , wine.score from wine join grapes on wine.Grape = grapes.Grape where  grapes.color = \"White\"",
        "question": "Give the names and scores of wines made from white grapes.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) from wine join appellations on wine.Appelation = appellations.Appelation where  appellations.area = \"Central Coast\" and wine.year < 2005",
        "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) from wine join appellations on wine.Appelation = appellations.Appelation where  appellations.area = \"Central Coast\" and wine.year <= 2005",
        "question": "Find the maximum price of wins from the appelations in Central Coast area and produced before the year of 2005.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) from wine join appellations on wine.Appelation = appellations.Appelation where  appellations.area = \"Central Coast\" and wine.year < 2005",
        "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) from wine join appellations on wine.Appelation = appellations.Appelation where  appellations.area = \"Central Coast\" and wine.year <= 2005",
        "question": "What is the maximum price of wines from the appelation in the Central Coast area, which was produced before 2005?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine join grapes on wine.Grape = grapes.Grape where  grapes.color = \"Red\" and wine.price > 50",
        "question": "What are the names of wines made from red grapes and with prices above 50?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.grape , count(*) from wine  group by wine.grape",
        "question": "What are the numbers of wines for different grapes?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , count(*) from wine join grapes on wine.Grape = grapes.Grape  group by wine.grape",
        "question": "What are the numbers of wines for different grapes?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , count(*) from wine join grapes on wine.Grape = grapes.Grape  group by grapes.grape",
        "question": "What are the numbers of wines for different grapes?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.grape , count(*) from wine  group by wine.grape",
        "question": "How many wines are there for each grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , count(*) from wine join grapes on wine.Grape = grapes.Grape  group by wine.grape",
        "question": "How many wines are there for each grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , count(*) from wine join grapes on wine.Grape = grapes.Grape  group by grapes.grape",
        "question": "How many wines are there for each grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select count(*) , wine.grape from wine  group by wine.grape",
        "question": "How many wines are there for each grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.year , avg(wine.price) from wine  group by wine.year",
        "question": "What are the average prices of wines for different years?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , wine.year from wine  group by wine.year",
        "question": "What are the average prices of wines for different years?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine where  wine.price > (select min(wine.price) from wine where  wine.winery = \"John Anthony\"  )",
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine where  wine.price > (select min(wine.price) from wine where  wine.winery = \"John Anthony\"  )",
        "question": "What are the distinct names of wines with prices higher than any wine from John Anthony winery.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine   order by wine.name asc",
        "question": "List the names of all distinct wines in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine   order by wine.price asc",
        "question": "List the names of all distinct wines ordered by price.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area from wine join appellations on wine.Appelation = appellations.Appelation where  wine.year < 2010  group by wine.appelation  order by count(*) desc limit 1",
        "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area from wine join appellations on wine.Appelation = appellations.Appelation where  wine.year <= 2010  group by wine.appelation  order by count(*) desc limit 1",
        "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area from wine join appellations on wine.Appelation = appellations.Appelation where  wine.year < 2010  group by appellations.appelation  order by count(*) desc limit 1",
        "question": "What is the area of the appelation that produces the highest number of wines before the year of 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area from wine join appellations on wine.Appelation = appellations.Appelation where  wine.year < 2010  group by wine.appelation  order by count(*) desc limit 1",
        "question": "What is the area for the appelation which produced the most wines prior to 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.area from wine join appellations on wine.Appelation = appellations.Appelation where  wine.year <= 2010  group by wine.appelation  order by count(*) desc limit 1",
        "question": "What is the area for the appelation which produced the most wines prior to 2010?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.color from wine join grapes on wine.Grape = grapes.Grape  group by wine.grape  order by avg(wine.price) desc limit 1",
        "question": "Give the color of the grape whose wine products have the highest average price?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine where  wine.year < 2000 or wine.year > 2010",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine where  wine.year <= 2000 or wine.year > 2010",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine where  wine.year < 2000 or wine.year > 2010",
        "question": "Give the distinct names of wines made before 2000 or after 2010.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.name from wine where  wine.year <= 2000 or wine.year > 2010",
        "question": "Give the distinct names of wines made before 2000 or after 2010.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.winery from wine where  wine.price between 50 and 100",
        "question": "Find the distinct winery of wines having price between 50 and 100.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select distinct wine.winery from wine where  wine.price between 50 and 100",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine where  wine.year = 2009 and wine.grape = \"Zinfandel\"",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine join grapes on wine.Grape = grapes.Grape where  wine.year = 2009 and grapes.grape = \"Zinfandel\"",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine where  wine.grape = \"Zinfandel\" and wine.year = 2009",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine where  wine.grape = \"Zinfandel\" and wine.year = 2009",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine where  wine.year = 2009 and wine.grape = \"Zinfandel\"",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine join grapes on wine.Grape = grapes.Grape where  grapes.grape = \"Zinfandel\" and wine.year = 2009",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.cases) from wine join grapes on wine.Grape = grapes.Grape where  wine.year = 2009 and grapes.grape = \"Zinfandel\"",
        "question": "Give the average price and case of wines made from Zinfandel grapes in the year 2009.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) , max(wine.score) from wine where  wine.appelation = \"St. Helena\"",
        "question": "What are the maximum price and score of wines produced by St. Helena appelation?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) , max(wine.score) from wine where  wine.appelation = \"St. Helena\"",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) , max(wine.score) , wine.year from wine  group by wine.year",
        "question": "What are the maximum price and score of wines in each year?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select max(wine.price) , max(wine.score) , wine.year from wine  group by wine.year",
        "question": "What are the maximum price and score of wines for each year?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.score) , wine.appelation from wine  group by wine.appelation",
        "question": "What are the average price and score of wines grouped by appelation?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.score) , wine.appelation from wine  group by wine.appelation",
        "question": "What are the average price and score of wines for each appelation?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select avg(wine.price) , avg(wine.score) , appellations.appelation from wine join appellations on wine.Appelation = appellations.Appelation  group by appellations.appelation",
        "question": "What are the average price and score of wines for each appelation?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.appelation , avg(wine.price) , avg(wine.score) from wine  group by wine.appelation",
        "question": "What are the average price and score of wines for each appelation?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.winery from wine  group by wine.winery having  count(*) >= 4",
        "question": "Find the wineries that have at least four wines.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.winery from wine  group by wine.winery having  count(*) >= 4",
        "question": "Which wineries produce at least four wines?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.county from wine join appellations on wine.Appelation = appellations.Appelation  group by wine.appelation having  count(*) <= 3",
        "question": "Find the country of all appelations who have at most three wines.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.county from wine join appellations on wine.Appelation = appellations.Appelation  group by wine.appelation having  count(*) <= 3",
        "question": "What are the countries for appelations with at most 3 wines?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.year < (select max(wine.year) from wine where  wine.winery = \"Brander\"  )",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.year < (select min(wine.year) from wine where  wine.winery = \"Brander\"  )",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.price > (select max(wine.price) from wine where  wine.year = 2006  )",
        "question": "What are the names of wines that are more expensive then all wines made in the year 2006?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.name from wine where  wine.price > (select max(wine.price) from wine where  wine.year = 2006  )",
        "question": "Give the names of wines with prices above any wine produced in 2006.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.winery from wine join grapes on wine.Grape = grapes.Grape where  grapes.color = \"White\"  group by wine.winery  order by count(*) desc limit 3",
        "question": "Find the top 3 wineries with the greatest number of wines made of white color grapes.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.winery from wine join grapes on wine.Grape = grapes.Grape where  grapes.color = \"White\"  group by wine.winery  order by count(*) desc limit 3",
        "question": "Which 3 wineries produce the most wines made from white grapes?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , wine.winery , wine.year from wine join grapes on wine.Grape = grapes.Grape where  wine.price > 100   order by wine.year asc",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.grape , wine.winery , wine.year from wine where  wine.price > 100   order by wine.year asc",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , wine.winery , wine.year from wine join grapes on wine.Grape = grapes.Grape where  wine.price > 100   order by wine.year asc",
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , wine.appelation , wine.name from wine join grapes on wine.Grape = grapes.Grape where  wine.score > 93   order by wine.name asc",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select wine.grape , wine.appelation , wine.name from wine where  wine.score > 93   order by wine.name asc",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , appellations.appelation , wine.name from wine join appellations on wine.Appelation = appellations.Appelation join grapes on wine.Grape = grapes.Grape where  wine.score > 93   order by wine.name asc",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , appellations.appelation , wine.name from wine join appellations on wine.Appelation = appellations.Appelation join grapes on wine.Grape = grapes.Grape where  wine.score > 93   order by wine.name asc",
        "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select grapes.grape , wine.appelation , wine.name from wine join grapes on wine.Grape = grapes.Grape where  wine.score > 93   order by wine.name asc",
        "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.county from wine join appellations on wine.Appelation = appellations.Appelation where  wine.score > 90  group by appellations.county  order by count(*) desc limit 1",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.county from wine join appellations on wine.Appelation = appellations.Appelation join grapes on wine.Grape = grapes.Grape where  wine.score > 90  group by appellations.county  order by count(*) desc limit 1",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.county from wine join appellations on wine.Appelation = appellations.Appelation where  wine.score > 90  group by appellations.county  order by count(*) desc limit 1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "correctness": 1
    },
    {
        "db_id": "wine_1",
        "query": "select appellations.county from wine join appellations on wine.Appelation = appellations.Appelation join grapes on wine.Grape = grapes.Grape where  wine.score > 90  group by appellations.county  order by count(*) desc limit 1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list",
        "question": "Find the number of students in total.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list",
        "question": "How many students are there?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.classroom = 111",
        "question": "Find the last names of students studying in room 111.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.classroom = \"111\"",
        "question": "Find the last names of students studying in room 111.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.classroom = 111",
        "question": "What are the last names of students in room 111?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.classroom = \"111\"",
        "question": "What are the last names of students in room 111?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = 108",
        "question": "Find the first names of students studying in room 108.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = \"108\"",
        "question": "Find the first names of students studying in room 108.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = 108",
        "question": "What are the first names of students in room 108?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = \"108\"",
        "question": "What are the first names of students in room 108?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = \"107\"",
        "question": "What are the first names of students studying in room 107?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = 107",
        "question": "What are the first names of students studying in room 107?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = 107",
        "question": "List the first names of all the students in room 107.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname from list where  list.classroom = \"107\"",
        "question": "List the first names of all the students in room 107.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , list.grade from list  group by list.classroom",
        "question": "For each classroom report the grade that is taught in it. Report just the classroom number and the grade number.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.classroom from list where  list.grade = 4",
        "question": "Find the classrooms in which grade 4 is studying.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname from teachers where  teachers.classroom = 110",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname from teachers where  teachers.classroom = 110",
        "question": "Which teachers teach in classroom 110? Give me their first names.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers where  teachers.classroom = 109",
        "question": "Find the last names of teachers teaching in classroom 109.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers where  teachers.classroom = \"109\"",
        "question": "Find the last names of teachers teaching in classroom 109.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers where  teachers.classroom = 109",
        "question": "Which teachers teach in classroom 109? Give me their last names.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers where  teachers.classroom = \"109\"",
        "question": "Which teachers teach in classroom 109? Give me their last names.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers",
        "question": "Report the first name and last name of all the teachers.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers",
        "question": "What are the first name and last name of all the teachers?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list",
        "question": "Report the first name and last name of all the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.firstname , list.lastname from list",
        "question": "Report the first name and last name of all the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list",
        "question": "Show each student's first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"OTHA\" and teachers.lastname = \"MOYER\"",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"OTHA\" and teachers.firstname = \"MOYER\"",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"OTHA\" and teachers.lastname = \"MOYER\"",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"OTHA\" and teachers.lastname = \"MOUYER\"",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"OTHA\" and teachers.lastname = \"MOYER\"",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"OTHA\" and teachers.firstname = \"MOYER\"",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"OTHA\" and teachers.lastname = \"MOYER\"",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"OTHA\" and teachers.firstname = \"MOYER\"",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"MARROTTE\" and teachers.firstname = \"KIRK\"",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"MARROTTE\" and teachers.lastname = \"KIRK\"",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"MARROTTE\" and teachers.firstname = \"KIRK\"",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"MARROTE\" and teachers.firstname = \"KIRK\"",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"MARROTTE\" and teachers.firstname = \"KIRC\"",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"MARROTTE\" and teachers.lastname = \"KIRK\"",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"MARROTTE\" and teachers.firstname = \"KIRK\"",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select distinct list.firstname , list.lastname from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"MARROTTE\" and teachers.lastname = \"KIRK\"",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BROMLEY\"",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BOMLIEY\"",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BROLLEY\"",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BOMERLEY\"",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BOLMLEY\"",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BROMLEY\"",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.lastname = \"EVELINA\" and list.firstname = \"BROMLEY\"",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BOMLIEY\"",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BLOMLEY\"",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.firstname , teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"EVELINA\" and list.lastname = \"BOMERLEY\"",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"GELL\" and list.lastname = \"TAMI\"",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"GEL\" and list.lastname = \"TAMI\"",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.lastname = \"GELL\" and list.firstname = \"TAMI\"",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"TAMI\" and list.lastname = \"GELL\"",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.lastname = \"GELL\" and list.firstname = \"TAMI\"",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"GELL\" and list.lastname = \"TAMI\"",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"GALL\" and list.lastname = \"TAMI\"",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select teachers.lastname from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"GAL\" and list.lastname = \"TAMI\"",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"LORIA\" and teachers.lastname = \"ONDERSMA\"",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers where  teachers.firstname = \"LORIA\" and teachers.lastname = \"ONDERSMA\"",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"LORIA\" and teachers.lastname = \"ONDERSMA\"",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers where  teachers.firstname = \"LORIA\" and teachers.lastname = \"ONDERSMA\"",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"KAWA\" and teachers.lastname = \"GORDON\"",
        "question": "How many students does KAWA GORDON teaches?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"KAWA\" and teachers.firstname = \"GORDON\"",
        "question": "How many students does KAWA GORDON teaches?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"KAWA\" and teachers.lastname = \"GODON\"",
        "question": "How many students does KAWA GORDON teaches?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers where  teachers.firstname = \"KAWA\" and teachers.lastname = \"GORDON\"",
        "question": "How many students does KAWA GORDON teaches?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"KAWA\" and teachers.lastname = \"GORDON\"",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"KAWA\" and teachers.firstname = \"GORDON\"",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"KAWA\" and teachers.lastname = \"GODON\"",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"TARRING\" and teachers.firstname = \"LEIA\"",
        "question": "Find the number of students taught by TARRING LEIA.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"TARRING\" and teachers.lastname = \"LEIA\"",
        "question": "Find the number of students taught by TARRING LEIA.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.lastname = \"TARRING\" and teachers.firstname = \"LEIA\"",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"TARRING\" and teachers.lastname = \"LEIA\"",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from list join teachers on list.LastName = teachers.LastName where  teachers.firstname = \"LEIA\" and teachers.lastname = \"TARRING\"",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers where  teachers.lastname = \"TARRING\" and teachers.firstname = \"LEIA\"",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers where  teachers.firstname = \"TARRING\" and teachers.lastname = \"LEIA\"",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"CHRISSY\" and list.lastname = \"NABOZNY\"",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"CHIRSSY\" and list.lastname = \"NABOZNY\"",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"ChRISSY\" and list.lastname = \"NABOZNY\"",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"CHASSY\" and list.lastname = \"NABOZNY\"",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"CHRISSY\" and list.lastname = \"NABOZNY\"",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"CHIRSSY\" and list.lastname = \"NABOZNY\"",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"CHASSY\" and list.lastname = \"NABOZNY\"",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.lastname = \"MADLOCK\" and list.firstname = \"RAY\"",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"MADLOCK\" and list.lastname = \"RAY\"",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"MADLOCK\" and list.lastname = \"RADY\"",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.lastname = \"MADLOCK\" and list.firstname = \"RAY\"",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) from teachers join list on teachers.LastName = list.LastName where  list.firstname = \"MADLOCK\" and list.lastname = \"RAY\"",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.grade = \"3\"   except select teachers.lastname from teachers where  teachers.lastname = \"COVIN\" and teachers.firstname = \"JEROME\"",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.grade = \"3\"   except select teachers.lastname from teachers where  teachers.lastname = \"COVIN\" and teachers.firstname = \"JEROME\"",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.lastname from list where  list.grade = 3   except select teachers.lastname from teachers where  teachers.lastname = \"COVIN\" and teachers.firstname = \"JEROME\"",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count( distinct list.grade) from list  group by list.classroom",
        "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count( distinct list.grade) , list.classroom from list  group by list.classroom",
        "question": "For each classroom, show the classroom number and count the number of distinct grades that use the room.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom from list  group by list.classroom  order by count(*) desc limit 1",
        "question": "Which classroom has the most students?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom from list  group by list.classroom  order by count(*) desc limit 1",
        "question": "Find the classroom that the most students use.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list  group by list.classroom",
        "question": "Report the number of students in each classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list  group by list.classroom",
        "question": "Report the number of students in each classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list  group by list.classroom",
        "question": "For each classroom, show the classroom number and find how many students are using it.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list where  list.grade = \"0\"  group by list.classroom",
        "question": "For each grade 0 classroom, report the total number of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list where  list.grade = 0  group by list.classroom",
        "question": "For each grade 0 classroom, report the total number of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list where  list.grade = \"0\"  group by list.classroom",
        "question": "For each grade 0 classroom, report the total number of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list where  list.grade = 0  group by list.classroom",
        "question": "For each grade 0 classroom, report the total number of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list where  list.grade = \"0\"  group by list.classroom",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list where  list.grade = \"4\"  group by list.classroom",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list where  list.grade = \"4\"  group by list.classroom",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list where  list.grade = 4  group by list.classroom",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list where  list.grade = 4  group by list.classroom",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list  group by list.classroom",
        "question": "Find the number of students in one classroom.",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select count(*) , list.classroom from list  group by list.classroom",
        "question": "How many students does one classroom have?",
        "correctness": 1
    },
    {
        "db_id": "student_1",
        "query": "select list.classroom , count(*) from list  group by list.classroom",
        "question": "How many students does one classroom have?",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select count(*) from School",
        "question": "How many schools are there?",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select count(*) from School",
        "question": "Count the number of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.school_name from School   order by school.school_name asc",
        "question": "Show all school names in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.school_name , school.location , school.mascot from School",
        "question": "List the name, location, mascot for all schools.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select sum(school.enrollment) , avg(school.enrollment) from School",
        "question": "What are the total and average enrollment of all schools?",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.mascot from School where  school.enrollment > (select avg(school.enrollment) from School  )",
        "question": "What are the mascots for schools with enrollments above the average?",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.school_name from School   order by school.enrollment asc limit 1",
        "question": "List the name of the school with the smallest enrollment.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select avg(school.enrollment) , max(school.enrollment) , min(school.enrollment) from School",
        "question": "Show the average, maximum, minimum enrollment of all schools.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.county , count(*) , sum(school.enrollment) from School  group by school.county",
        "question": "Show each county along with the number of schools and total enrollment in each county.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select count( distinct endowment.donator_name) from endowment join School on endowment.School_id = School.School_id where  school.school_name = \"Glenn\"",
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.donator_name , sum(endowment.amount) from endowment  group by endowment.donator_name  order by sum(endowment.amount) desc",
        "question": "List each donator name and the amount of endowment in descending order of the amount of endowment.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.school_name from School where  school.school_id not in (select endowment.School_id from endowment  )",
        "question": "List the names of the schools without any endowment.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.donator_name from endowment join School on endowment.School_id = School.School_id where  school.school_name = \"Glenn\"   intersect select endowment.donator_name from endowment join School on endowment.School_id = School.School_id where  school.school_name = \"Triton\"",
        "question": "Show the names of donors who donated to both school \"Glenn\" and \"Triton.\"",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.donator_name from endowment   except select endowment.donator_name from endowment where  endowment.amount < 9",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.donator_name from endowment   except select endowment.donator_name from endowment where  endowment.amount <= 9",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.amount , endowment.donator_name from endowment   order by endowment.amount desc limit 1",
        "question": "List the amount and donor name for the largest amount of donation.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.amount , endowment.donator_name from endowment  group by endowment.donator_name  order by sum(endowment.amount) desc limit 1",
        "question": "List the amount and donor name for the largest amount of donation.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select count(*) from budget where  budget.year <= 2001 and budget.budgeted > 3000",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select school.school_name , budget.budgeted , budget.invested from budget join School on budget.School_id = School.School_id where  budget.year >= 2002",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select endowment.donator_name from endowment",
        "question": "Show all donor names.",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select count(*) from budget where  budget.budgeted < budget.invested",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "correctness": 1
    },
    {
        "db_id": "school_finance",
        "query": "select count(*) from budget where  budget.budgeted <= budget.invested",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select sum(furniture.num_of_component) from furniture",
        "question": "How many furniture components are there in total?",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.name , furniture.furniture_id from furniture   order by furniture.market_rate desc limit 1",
        "question": "Return the name and id of the furniture with the highest market rate.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.name , furniture.furniture_id from furniture  group by furniture.furniture_id  order by furniture.market_rate desc limit 1",
        "question": "Return the name and id of the furniture with the highest market rate.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select sum(furniture.market_rate) from furniture   order by furniture.market_rate desc limit 2",
        "question": "find the total market rate of the furnitures that have the top 2 market shares.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.num_of_component , furniture.name from furniture where  furniture.num_of_component > 10",
        "question": "Find the component amounts and names of all furnitures that have more than 10 components.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID where  furniture_manufacte.price_in_dollar < (select max(furniture_manufacte.Price_in_Dollar) from furniture_manufacte  )",
        "question": "Find the names of furnitures whose prices are lower than the highest price.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name , manufacturer.open_year from manufacturer   order by manufacturer.num_of_shops desc limit 1",
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name , manufacturer.open_year from manufacturer  group by manufacturer.open_year  order by sum(manufacturer.num_of_shops) desc limit 1",
        "question": "Which manufacturer has the most number of shops? List its name and year of opening.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select avg(manufacturer.num_of_factories) from manufacturer where  manufacturer.num_of_shops > 20",
        "question": "Find the average number of factories for the manufacturers that have more than 20 shops.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name , manufacturer.manufacturer_id from manufacturer   order by manufacturer.open_year asc",
        "question": "List all manufacturer names and ids ordered by their opening year.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name , manufacturer.open_year from manufacturer where  manufacturer.num_of_factories < 10 or manufacturer.num_of_shops > 10",
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name , manufacturer.open_year from manufacturer where  manufacturer.num_of_factories <= 10 or manufacturer.num_of_shops > 10",
        "question": "Give me the name and year of opening of the manufacturers that have either less than 10 factories or more than 10 shops.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select avg(manufacturer.num_of_factories) , max(manufacturer.num_of_shops) from manufacturer where  manufacturer.open_year < 1990",
        "question": "what is the average number of factories and maximum number of shops for manufacturers that opened before 1990.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.manufacturer_id , manufacturer.num_of_shops from furniture_manufacte join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID   order by furniture_manufacte.price_in_dollar desc limit 1",
        "question": "Find the id and number of shops for the company that produces the most expensive furniture.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select count(*) , manufacturer.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID  group by manufacturer.name",
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name , count(*) from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID  group by manufacturer.name",
        "question": "Find the number of funiture types produced by each manufacturer as well as the company names.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.name , furniture_manufacte.price_in_dollar from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID",
        "question": "Give me the names and prices of furnitures which some companies are manufacturing.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.market_rate , furniture.name from furniture where  furniture.furniture_id not in (select furniture_manufacte.Furniture_ID from furniture_manufacte  )",
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select furniture.market_rate , furniture.name from furniture   except select furniture.market_rate , furniture.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID",
        "question": "Find the market shares and names of furnitures which no any company is producing in our records.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID where  furniture.num_of_component < 6   intersect select manufacturer.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID where  furniture.num_of_component > 10",
        "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "correctness": 1
    },
    {
        "db_id": "manufacturer",
        "query": "select manufacturer.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID where  furniture.num_of_component <= 6   intersect select manufacturer.name from furniture_manufacte join furniture on furniture_manufacte.Furniture_ID = furniture.Furniture_ID join manufacturer on furniture_manufacte.Manufacturer_ID = manufacturer.Manufacturer_ID where  furniture.num_of_component > 10",
        "question": "Find the name of the company that produces both furnitures with less than 6 components and furnitures with more than 10 components.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select count(*) from Addresses where  addresses.country = \"USA\"",
        "question": "How many addresses are there in country USA?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select distinct addresses.city from Addresses",
        "question": "Show all distinct cities in the address record.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select addresses.state_province_county , count(*) from Addresses  group by addresses.state_province_county",
        "question": "Show each state and the number of addresses in each state.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name , customers.customer_phone from Customers where  customers.customer_id not in (select Customer_Address_History.customer_id from Customer_Address_History  )",
        "question": "Show names and phones of customers who do not have address information.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name , customers.customer_phone from Customers   except select customers.customer_name , customers.customer_phone from Customer_Address_History join Customers on Customer_Address_History.customer_id = Customers.customer_id",
        "question": "Show names and phones of customers who do not have address information.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_name  order by count(*) desc limit 1",
        "question": "Show the name of the customer who has the most orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customer_orders.customer_id  order by count(*) desc limit 1",
        "question": "Show the name of the customer who has the most orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "Show the name of the customer who has the most orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select products.product_type_code from Products  group by products.product_type_code having  count(*) >= 2",
        "question": "Show the product type codes which have at least two products.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Completed\"   intersect select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.order_status_code = \"Part\"",
        "question": "Show the names of customers who have both an order in completed status and an order in part status.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name , customers.customer_phone , customers.payment_method_code from Customers   order by customers.customer_number desc",
        "question": "Show the name, phone, and payment method code for all customers in descending order of customer number.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select products.product_name , sum(order_items.order_quantity) from Order_Items join Products on Order_Items.product_id = Products.product_id  group by order_items.product_id",
        "question": "Show the product name and total order quantity for each product.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select min(products.product_price) , max(products.product_price) , avg(products.product_price) from Products",
        "question": "Show the minimum, maximum, average price for all products.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select count(*) from Products where  products.product_price > (select avg(products.product_price) from Products  )",
        "question": "How many products have a price higher than the average?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name , addresses.city , customer_address_history.date_from , customer_address_history.date_to from Customer_Address_History join Addresses on Customer_Address_History.address_id = Addresses.address_id join Customers on Customer_Address_History.customer_id = Customers.customer_id",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customers.payment_method_code = \"Credit Card\"  group by customers.customer_name having  count(*) > 2",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customers.payment_method_code = \"Credit Card\"  group by customers.customer_id having  count(*) > 2",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select customers.customer_name , customers.customer_phone from Order_Items join Customer_Orders on Order_Items.order_id = Customer_Orders.order_id join Customers on Customer_Orders.customer_id = Customers.customer_id  group by customers.customer_id  order by sum(order_items.order_quantity) desc limit 1",
        "question": "What are the name and phone of the customer with the most ordered product quantity?",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select products.product_type_code , products.product_name from Products where  products.product_price > 1000 or products.product_price < 500",
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "correctness": 1
    },
    {
        "db_id": "customers_and_products_contacts",
        "query": "select products.product_type_code , products.product_name from Products where  products.product_price > 1000 or products.product_price <= 500",
        "question": "Show the product type and name for the products with price higher than 1000 or lower than 500.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select department.dname from department   order by department.mgr_start_date asc",
        "question": "List all department names ordered by their starting date.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select dependent.dependent_name from dependent where  dependent.relationship = \"Spouse\"",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select count(*) from dependent where  dependent.sex = \"F\"",
        "question": "how many female dependents are there?",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select count(*) from dependent where  dependent.sex = \"F\"  group by dependent.sex",
        "question": "how many female dependents are there?",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select department.dname from department join dept_locations on department.Dnumber = dept_locations.Dnumber where  dept_locations.dlocation = \"Houston\"",
        "question": "Find the names of departments that are located in Houston.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select employee.fname , employee.lname from employee where  employee.salary > 30000",
        "question": "Return the first names and last names of employees who earn more than 30000 in salary.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select count(*) , employee.sex from employee where  employee.salary < 50000  group by employee.sex",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select count(*) , employee.sex from employee where  employee.salary <= 50000  group by employee.sex",
        "question": "Find the number of employees of each gender whose salary is lower than 50000.",
        "correctness": 1
    },
    {
        "db_id": "company_1",
        "query": "select employee.fname , employee.lname , employee.address from employee   order by employee.bdate asc",
        "question": "list the first and last names, and the addresses of all employees in the ascending order of their birth date.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select distinct grants.grant_amount from Documents join Grants on Documents.grant_id = Grants.grant_id where  documents.sent_date < \"1986-08-26 20:49:27\" and grants.grant_end_date > \"1989-03-16 18:27:16\"",
        "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select distinct grants.grant_amount from Documents join Grants on Documents.grant_id = Grants.grant_id where  documents.sent_date <= \"1986-08-26 20:49:27\" and grants.grant_end_date > \"1989-03-16 18:27:16\"",
        "question": "What are the distinct grant amount for the grants where the documents were sent before '1986-08-26 20:49:27' and grant were ended after '1989-03-16 18:27:16'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select distinct grants.grant_amount from Documents join Grants on Documents.grant_id = Grants.grant_id where  documents.sent_date < \"1986-08-26 20:49:27\" and grants.grant_end_date > \"1989-03-16 18:27:16\"",
        "question": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select distinct grants.grant_amount from Documents join Grants on Documents.grant_id = Grants.grant_id where  documents.sent_date <= \"1986-08-26 20:49:27\" and grants.grant_end_date > \"1989-03-16 18:27:16\"",
        "question": "What are the different grant amounts for documents sent before '1986-08-26 20:49:27' and after the grant ended on '1989-03-16 18:27:16'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id where  project_outcomes.outcome_code = \"Patent\"   intersect select projects.project_details from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id where  project_outcomes.outcome_code = \"Paper\"",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Patent\"   intersect select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Paper\"",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Paper\"   intersect select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Patent\"",
        "question": "List the project details of the project both producing patent and paper as outcomes.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Patent\"   intersect select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Paper\"",
        "question": "What are the details of the project that is producing both patents and papers as outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id where  project_outcomes.outcome_code = \"Patent\"   intersect select projects.project_details from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id where  project_outcomes.outcome_code = \"Paper\"",
        "question": "What are the details of the project that is producing both patents and papers as outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Paper\"   intersect select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_code = \"Patent\"",
        "question": "What are the details of the project that is producing both patents and papers as outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select sum(grants.grant_amount) from Grants join Organisations on Grants.organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type where  organisation_types.organisation_type_description = \"Research\"",
        "question": "What is the total grant amount of the organisations described as research?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , organisations.organisation_details from Grants join Organisations on Grants.organisation_id = Organisations.organisation_id where  grants.grant_amount > 6000",
        "question": "What are the ids and details for all organizations that have grants of more than 6000 dollars?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by research_staff.employer_organisation_id  order by count(*) desc limit 1",
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by research_staff.employer_organisation_id  order by count(*) desc limit 1",
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What is the organisation type and id of the organisation which has the most number of research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by research_staff.employer_organisation_id  order by count(*) desc limit 1",
        "question": "What is the type and id of the organization that has the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What is the type and id of the organization that has the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What is the type and id of the organization that has the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type , organisations.organisation_id from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by research_staff.employer_organisation_id  order by count(*) desc limit 1",
        "question": "What is the type and id of the organization that has the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type from Organisation_Types where  organisation_types.organisation_type_description = \"Research\"  group by organisation_types.organisation_type",
        "question": "Which organisation type hires most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by organisation_types.organisation_type_description  order by count(*) desc limit 1",
        "question": "What is the type of the organization with the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by organisation_types.organisation_type  order by count(*) desc limit 1",
        "question": "What is the type of the organization with the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select documents.response_received_date from Documents join Grants on Documents.grant_id = Grants.grant_id join Document_Types on Documents.document_type_code = Document_Types.document_type_code where  document_types.document_description = \"Regular\" or grants.grant_amount > 100",
        "question": "What are the response received dates for the documents described as 'Regular' or granted with more than 100?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects   except select projects.project_details from Project_Staff join Projects on Project_Staff.project_id = Projects.project_id where  project_staff.role_code = \"researcher\"",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects   except select projects.project_details from Project_Staff join Staff_Roles on Project_Staff.role_code = Staff_Roles.role_code join Projects on Project_Staff.project_id = Projects.project_id where  staff_roles.role_code = \"researcher\"",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects where  projects.project_id not in (select Project_Staff.project_id from Project_Staff where  project_staff.role_code = \"researcher\"  )",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects where  projects.project_id not in (select Project_Staff.project_id from Project_Staff join Staff_Roles on Project_Staff.role_code = Staff_Roles.role_code where  staff_roles.role_code = \"researcher\"  )",
        "question": "List the project details of the projects which did not hire any staff for a researcher role.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects   except select projects.project_details from Project_Staff join Staff_Roles on Project_Staff.role_code = Staff_Roles.role_code join Projects on Project_Staff.project_id = Projects.project_id where  staff_roles.role_code = \"researcher\"",
        "question": "What are the details for all projects that did not hire any staff in a research role?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select project_staff.date_to , project_staff.date_from from Project_Staff where  project_staff.role_code = \"researcher\"",
        "question": "When did researchers start and stop working?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count( distinct staff_roles.role_code) from Staff_Roles",
        "question": "How many kinds of roles are there for the staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count( distinct staff_roles.role_code) from Staff_Roles",
        "question": "How many different roles are there on the project staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count( distinct project_staff.role_code) from Project_Staff",
        "question": "How many different roles are there on the project staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select sum(grants.grant_amount) , grants.organisation_id from Grants  group by grants.organisation_id",
        "question": "What is the total amount of grants given by each organisations? Also list the organisation id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select grants.organisation_id , sum(grants.grant_amount) from Grants  group by grants.organisation_id",
        "question": "What is the total amount of grants given by each organisations? Also list the organisation id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select sum(grants.grant_amount) , grants.organisation_id from Grants  group by grants.organisation_id",
        "question": "What is the total amount of grant money given to each organization and what is its id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_description like \"%Published%\"",
        "question": "List the project details of the projects with the research outcome described with the substring 'Published'.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  research_outcomes.outcome_description = (select research_outcomes.outcome_description from Research_Outcomes  )",
        "question": "What are the details for the project whose research has been published?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select project_staff.project_id , count(*) from Project_Staff  group by project_staff.project_id  order by count(*) asc",
        "question": "How many staff does each project has? List the project id and the number in an ascending order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_id , count(*) from Project_Staff join Projects on Project_Staff.project_id = Projects.project_id  group by project_staff.project_id  order by count(*) asc",
        "question": "How many staff does each project has? List the project id and the number in an ascending order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_id , count(*) from Project_Staff join Projects on Project_Staff.project_id = Projects.project_id  group by projects.project_id  order by count(*) asc",
        "question": "How many staff does each project has? List the project id and the number in an ascending order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select project_staff.project_id , count(*) from Project_Staff  group by project_staff.project_id  order by count(*) asc",
        "question": "For each project id, how many staff does it have? List them in increasing order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) , project_staff.project_id from Project_Staff  group by project_staff.project_id  order by count(*) asc",
        "question": "For each project id, how many staff does it have? List them in increasing order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select staff_roles.role_description from Staff_Roles where  staff_roles.role_code = \"researcher\"",
        "question": "What is the complete description of the researcher role.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select staff_roles.role_description from Staff_Roles where  staff_roles.role_code = \"researcher\"",
        "question": "What is the complete description of the job of a researcher?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details , projects.project_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id  group by projects.project_id  order by count(*) desc limit 1",
        "question": "Which project made the most number of outcomes? List the project details and the project id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details , projects.project_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id  group by project_outcomes.project_id  order by count(*) desc limit 1",
        "question": "Which project made the most number of outcomes? List the project details and the project id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details , project_outcomes.project_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id  group by project_outcomes.project_id  order by count(*) desc limit 1",
        "question": "Which project made the most number of outcomes? List the project details and the project id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details , projects.project_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id  group by project_outcomes.project_id  order by count(*) desc limit 1",
        "question": "What are the details and id of the project with the most outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details , project_outcomes.project_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id  group by project_outcomes.project_id  order by count(*) desc limit 1",
        "question": "What are the details and id of the project with the most outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details , projects.project_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id  group by projects.project_id  order by count(*) desc limit 1",
        "question": "What are the details and id of the project with the most outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects where  projects.project_id not in (select Project_Outcomes.project_id from Project_Outcomes  )",
        "question": "Which projects have no outcome? List the project details.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects   except select projects.project_details from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id",
        "question": "Which projects have no outcome? List the project details.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects where  projects.project_id not in (select Project_Outcomes.project_id from Project_Outcomes  )",
        "question": "What are the details of the project with no outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select projects.project_details from Projects   except select projects.project_details from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id",
        "question": "What are the details of the project with no outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , organisations.organisation_type , organisations.organisation_details from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , organisation_types.organisation_type , organisations.organisation_details from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , organisations.organisation_type , organisations.organisation_details from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by research_staff.employer_organisation_id  order by count(*) desc limit 1",
        "question": "Which organisation hired the most number of research staff? List the organisation id, type and detail.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , organisation_types.organisation_type , organisations.organisation_details from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What are the ids, types, and details of the organization with the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , organisations.organisation_type , organisations.organisation_details from Research_Staff join Organisations on Research_Staff.employer_organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What are the ids, types, and details of the organization with the most research staff?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select staff_roles.role_description , project_staff.staff_id from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id join Project_Staff on Projects.project_id = Project_Staff.project_id join Staff_Roles on Project_Staff.role_code = Staff_Roles.role_code  group by project_staff.staff_id  order by count(*) desc limit 1",
        "question": "Show the role description and the id of the project staff involved in most number of project outcomes?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select document_types.document_type_code from Document_Types where  document_types.document_description like \"%Initial%\"",
        "question": "Which document type is described with the prefix 'Initial'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select document_types.document_type_code from Document_Types where  document_types.document_description like \"%Initial%\"",
        "question": "What is the type of the document whose description starts with the word 'Initial'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select document_types.document_type_code from Document_Types where  document_types.document_description like \"%Itial%\"",
        "question": "What is the type of the document whose description starts with the word 'Initial'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select grants.grant_start_date from Documents join Grants on Documents.grant_id = Grants.grant_id join Document_Types on Documents.document_type_code = Document_Types.document_type_code where  document_types.document_description = \"Regular\"   intersect select grants.grant_start_date from Documents join Grants on Documents.grant_id = Grants.grant_id join Document_Types on Documents.document_type_code = Document_Types.document_type_code where  document_types.document_description = \"Initial Application\"",
        "question": "For grants with both documents described as 'Regular' and documents described as 'Initial Application', list its start date.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select grants.grant_start_date from Documents join Grants on Documents.grant_id = Grants.grant_id join Document_Types on Documents.document_type_code = Document_Types.document_type_code where  document_types.document_description = \"Regular\"   intersect select grants.grant_start_date from Documents join Grants on Documents.grant_id = Grants.grant_id join Document_Types on Documents.document_type_code = Document_Types.document_type_code where  document_types.document_description = \"Initial Application\"",
        "question": "For grants that have descriptions of Regular and Initial Applications, what are their start dates?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select documents.grant_id , count(*) from Documents  group by documents.grant_id  order by count(*) desc limit 1",
        "question": "How many documents can one grant have at most? List the grant id and number.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select documents.grant_id , count(*) from Documents  group by documents.grant_id  order by count(*) desc limit 1",
        "question": "For each grant id, how many documents does it have, and which one has the most?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) , documents.grant_id from Documents  group by documents.grant_id  order by count(*) desc limit 1",
        "question": "For each grant id, how many documents does it have, and which one has the most?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type_description from Organisations join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type where  organisations.organisation_details = \"quo\"",
        "question": "Find the organisation type description of the organisation detailed as 'quo'.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisation_types.organisation_type_description from Organisations join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type where  organisations.organisation_details = \"quo\"",
        "question": "What is the type description of the organization whose detail is listed as 'quo'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_details from Organisations join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type where  organisation_types.organisation_type_description = \"Sponsor\"   order by organisations.organisation_details asc",
        "question": "What are all the details of the organisations described as 'Sponsor'? Sort the result in an ascending order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_details from Organisations join Organisation_Types on Organisations.organisation_type = Organisation_Types.organisation_type where  organisation_types.organisation_type_description = \"Sponsor\"   order by organisations.organisation_details asc",
        "question": "What are the details of all organizations that are described as Sponsors and sort the results in ascending order?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Project_Outcomes where  project_outcomes.outcome_code = \"Patent\"",
        "question": "How many Patent outcomes are generated from all the projects?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code where  project_outcomes.outcome_code = \"Patent\"",
        "question": "How many Patent outcomes are generated from all the projects?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code where  research_outcomes.outcome_code = \"Patent\"",
        "question": "How many Patent outcomes are generated from all the projects?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Project_Outcomes where  project_outcomes.outcome_code = \"Patent\"",
        "question": "How many patents outcomes were listed for all the projects?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Project_Staff where  project_staff.role_code = \"leader\" or project_staff.date_from < \"1989-04-24 23:51:54\"",
        "question": "How many project staff worked as leaders or started working before '1989-04-24 23:51:54'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Project_Staff where  project_staff.role_code = \"leader\" or project_staff.date_from < \"1989-04-24 23:51:54\"",
        "question": "How many project members were leaders or started working before '1989-04-24 23:51:54'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select research_outcomes.outcome_description from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  projects.project_details = \"sint\"",
        "question": "What are the result description of the project whose detail is 'sint'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select research_outcomes.outcome_description from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id where  projects.project_details = \"sint\"",
        "question": "What is the description for the results whose project detail is 'sint'?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , count(*) from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id join Organisations on Projects.organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "List the organisation id with the maximum outcome count, and the count.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , count(*) from Project_Outcomes join Projects on Project_Outcomes.project_id = Projects.project_id join Organisations on Projects.organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select organisations.organisation_id , count(*) from Project_Outcomes join Research_Outcomes on Project_Outcomes.outcome_code = Research_Outcomes.outcome_code join Projects on Project_Outcomes.project_id = Projects.project_id join Organisations on Projects.organisation_id = Organisations.organisation_id  group by organisations.organisation_id  order by count(*) desc limit 1",
        "question": "What is the id of the organization with the maximum number of outcomes and how many outcomes are there?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select research_staff.staff_details from Research_Staff   order by research_staff.staff_details asc",
        "question": "List the research staff details, and order in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select research_staff.staff_details from Research_Staff   order by research_staff.staff_details asc",
        "question": "What details are there on the research staff? List the result in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Tasks",
        "question": "How many tasks are there in total?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) from Tasks",
        "question": "How many tasks are there?",
        "correctness": 1
    },
    {
        "db_id": "tracking_grants_for_research",
        "query": "select count(*) , projects.project_details from Tasks join Projects on Tasks.project_id = Projects.project_id  group by projects.project_details",
        "question": "How many tasks does each project have? List the task count and the project detail.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select count(*) from journalist",
        "question": "How many journalists are there?",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name from journalist   order by journalist.years_working asc",
        "question": "List the names of journalists in ascending order of years working.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.nationality , journalist.age from journalist",
        "question": "What are the nationalities and ages of journalists?",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name from journalist where  journalist.nationality = \"England\" or journalist.nationality = \"Wales\"",
        "question": "Show the names of journalists from \"England\" or \"Wales\".",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select avg(journalist.years_working) from journalist",
        "question": "What is the average number of years spent working as a journalist?",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.nationality from journalist   order by journalist.years_working desc limit 1",
        "question": "What is the nationality of the journalist with the largest number of years working?",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.nationality , count(*) from journalist  group by journalist.nationality",
        "question": "Show the different nationalities and the number of journalists of each nationality.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.nationality from journalist  group by journalist.nationality  order by count(*) desc limit 1",
        "question": "Show the most common nationality for journalists.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.nationality from journalist where  journalist.years_working > 10   intersect select journalist.nationality from journalist where  journalist.years_working < 3",
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.nationality from journalist where  journalist.years_working > 10   intersect select journalist.nationality from journalist where  journalist.years_working <= 3",
        "question": "Show the nations that have both journalists with more than 10 years of working and journalists with less than 3 years of working.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select event.date , event.venue , event.name from event   order by event.event_attendance desc",
        "question": "Show the dates, places, and names of events in descending order of the attendance.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name , event.date from news_report join event on news_report.Event_ID = event.Event_ID join journalist on news_report.journalist_ID = journalist.journalist_ID",
        "question": "Show the names of journalists and the dates of the events they reported.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name , count(*) from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID  group by journalist.name",
        "question": "Show the names of journalists and the number of events they reported.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name , count(*) from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID  group by news_report.journalist_id",
        "question": "Show the names of journalists and the number of events they reported.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name , count(*) from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID  group by journalist.journalist_id",
        "question": "Show the names of journalists and the number of events they reported.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID  group by news_report.journalist_id having  count(*) > 1",
        "question": "Show the names of journalists that have reported more than one event.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID  group by news_report.journalist_id having  count( distinct news_report.event_id) > 1",
        "question": "Show the names of journalists that have reported more than one event.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name from journalist where  journalist.journalist_id not in (select news_report.journalist_ID from news_report  )",
        "question": "List the names of journalists who have not reported any event.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select journalist.name from journalist   except select journalist.name from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID",
        "question": "List the names of journalists who have not reported any event.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select avg(event.event_attendance) , max(event.event_attendance) from event",
        "question": "what are the average and maximum attendances of all events?",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select avg(journalist.age) , avg(journalist.years_working) , news_report.work_type from news_report join journalist on news_report.journalist_ID = journalist.journalist_ID  group by news_report.work_type",
        "question": "Find the average age and experience working length of journalists working on different role type.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select event.venue , event.name from event   order by event.event_attendance desc limit 2",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "correctness": 1
    },
    {
        "db_id": "news_report",
        "query": "select event.venue , event.name from event  group by event.venue  order by event.event_attendance desc limit 2",
        "question": "List the event venues and names that have the top 2 most number of people attended.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count( distinct captain.rank) from captain",
        "question": "How many different captain ranks are there?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count( distinct captain.rank) from captain",
        "question": "Count the number of different ranks of captain.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank , count(*) from captain  group by captain.rank",
        "question": "How many captains are in each rank?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , captain.rank from captain  group by captain.rank",
        "question": "How many captains are in each rank?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank , count(*) from captain  group by captain.rank",
        "question": "Count the number of captains that have each rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , captain.rank from captain  group by captain.rank",
        "question": "Count the number of captains that have each rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , captain.rank from captain where  captain.age < 50  group by captain.rank",
        "question": "How many captains with younger than 50 are in each rank?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank , count(*) from captain where  captain.age < 50  group by captain.rank",
        "question": "How many captains with younger than 50 are in each rank?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , captain.rank from captain where  captain.age <= 50  group by captain.rank",
        "question": "How many captains with younger than 50 are in each rank?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank , count(*) from captain where  captain.age <= 50  group by captain.rank",
        "question": "How many captains with younger than 50 are in each rank?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , captain.rank from captain where  captain.age < 50  group by captain.rank",
        "question": "Count the number of captains younger than 50 of each rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , captain.rank from captain where  captain.age <= 50  group by captain.rank",
        "question": "Count the number of captains younger than 50 of each rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank , count(*) from captain where  captain.age < 50  group by captain.rank",
        "question": "Count the number of captains younger than 50 of each rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.name from captain   order by captain.age desc",
        "question": "Sort all captain names by their ages from old to young.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.name from captain   order by captain.age desc",
        "question": "What are the names of captains, sorted by age descending?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.name , captain.class , captain.rank from captain",
        "question": "Find the name, class and rank of all captains.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.name , captain.class , captain.rank from captain",
        "question": "What are the names, classes, and ranks of all captains?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank from captain  group by captain.rank  order by count(*) desc limit 1",
        "question": "Which rank is the most common among captains?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank from captain  group by captain.rank  order by count(*) desc limit 1",
        "question": "Return the rank for which there are the fewest captains.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.class from captain  group by captain.class having  count(*) > 2",
        "question": "Which classes have more than two captains?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.class from captain  group by captain.class having  count(*) > 2",
        "question": "Give the classes that have more than two captains.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select avg(captain.age) , min(captain.age) , captain.class from captain  group by captain.class",
        "question": "What are the average and minimum age of captains in different class?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.class , avg(captain.age) , min(captain.age) from captain  group by captain.class",
        "question": "What are the average and minimum age of captains in different class?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select avg(captain.age) , min(captain.age) , captain.class from captain  group by captain.class",
        "question": "Return the average and minimum age of captains in each class.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.class , avg(captain.age) , min(captain.age) from captain  group by captain.class",
        "question": "Return the average and minimum age of captains in each class.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank from captain where  captain.class = \"Cutter\"   intersect select captain.rank from captain where  captain.class = \"Armed schooner\"",
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank from captain where  captain.class = \"Cutter\"   intersect select captain.rank from captain where  captain.class = \"Armed schooner\"",
        "question": "What are the ranks of captains that are both in the Cutter and Armed schooner classes?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank from captain   except select captain.rank from captain where  captain.class = \"Third-rate ship of the line\"",
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.rank from captain   except select captain.rank from captain where  captain.class = \"Third-rate ship of the line\"",
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.name from captain   order by captain.age asc limit 1",
        "question": "What is the name of the youngest captain?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select captain.name from captain   order by captain.age asc limit 1",
        "question": "Return the name of the youngest captain.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) from Ship",
        "question": "how many ships are there?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) from Ship",
        "question": "Count the number of ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.type , ship.flag from Ship   order by ship.built_year desc limit 1",
        "question": "Find the name, type, and flag of the ship that is built in the most recent year.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.type , ship.flag from Ship   order by ship.built_year desc limit 1",
        "question": "What is the name, type, and flag of the ship that was built in the most recent year?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.flag , count(*) from Ship  group by ship.flag",
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , ship.flag from Ship  group by ship.flag",
        "question": "Group by ships by flag, and return number of ships that have each flag.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.flag , count(*) from Ship  group by ship.flag",
        "question": "What are the different ship flags, and how many ships have each?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select count(*) , ship.flag from Ship  group by ship.flag",
        "question": "What are the different ship flags, and how many ships have each?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.flag from Ship  group by ship.flag  order by count(*) desc limit 1",
        "question": "Which flag is most widely used among all ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.flag from Ship  group by ship.flag  order by count(*) desc limit 1",
        "question": "Return the flag that is most common among all ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from Ship   order by ship.built_year,ship.class asc",
        "question": "List all ship names in the order of built year and class.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.type from Ship where  ship.flag = \"Panama\"   intersect select ship.type from Ship where  ship.flag = \"Malta\"",
        "question": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.type from Ship where  ship.flag = \"Malta\"   intersect select ship.type from Ship where  ship.flag = \"Panama\"",
        "question": "Find the ship type that are used by both ships with Panama and Malta flags.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.type from Ship where  ship.flag = \"Panama\"   intersect select ship.type from Ship where  ship.flag = \"Malta\"",
        "question": "What types of ships have both ships that have Panama Flags and Malta flags?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.built_year from Ship  group by ship.built_year  order by count(*) desc limit 1",
        "question": "In which year were most of ships built?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.built_year from Ship  group by ship.built_year  order by count(*) desc limit 1",
        "question": "What is the year in which most ships were built?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID  group by captain.ship_id having  count(*) > 1",
        "question": "Find the name of the ships that have more than one captain.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID  group by captain.ship_id having  count(*) > 1",
        "question": "What are the names of ships that have more than one captain?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.class from Ship where  ship.ship_id not in (select captain.Ship_ID from captain  )",
        "question": "what are the names and classes of the ships that do not have any captain yet?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.class from Ship where  ship.ship_id not in (select captain.Ship_ID from captain  )",
        "question": "Return the names and classes of ships that do not have a captain?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID   order by captain.age asc limit 1",
        "question": "Find the name of the ship that is steered by the youngest captain.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID   order by captain.age asc limit 1",
        "question": "What is the name of the ship that is commanded by the youngest captain?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.flag from Ship   except select ship.name , ship.flag from captain join Ship on captain.Ship_ID = Ship.Ship_ID where  captain.rank = \"Midshipman\"",
        "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.flag from Ship where  ship.ship_id not in (select captain.Ship_ID from captain where  captain.rank = \"Midshipman\"  )",
        "question": "Find the name and flag of ships that are not steered by any captain with Midshipman rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name , ship.flag from Ship   except select ship.name , ship.flag from captain join Ship on captain.Ship_ID = Ship.Ship_ID where  captain.rank = \"Midshipman\"",
        "question": "What are the names and flags of ships that do not have a captain with the rank of Midshipman?",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID where  captain.rank = \"Midshipman\"   intersect select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID where  captain.rank = \"Lieutenant\"",
        "question": "Find the name of the ships that are steered by both a captain with Midshipman rank and a captain with Lieutenant rank.",
        "correctness": 1
    },
    {
        "db_id": "ship_1",
        "query": "select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID where  captain.rank = \"Midshipman\"   intersect select ship.name from captain join Ship on captain.Ship_ID = Ship.Ship_ID where  captain.rank = \"Lieutenant\"",
        "question": "What are the names of ships that are commanded by both captains with the rank of Midshipman and captains with the rank of Lieutenant?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents",
        "question": "Find the names of all the catalog entries.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select distinct catalog_contents.catalog_entry_name from Catalog_Contents",
        "question": "Find the names of all the catalog entries.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents",
        "question": "What are all the catalog entry names?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select distinct catalog_contents.catalog_entry_name from Catalog_Contents",
        "question": "What are all the catalog entry names?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_data_type from Attribute_Definitions  group by attribute_definitions.attribute_data_type having  count(*) > 3",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select distinct attribute_definitions.attribute_data_type from Attribute_Definitions  group by attribute_definitions.attribute_data_type having  count(*) > 3",
        "question": "Find the list of attribute data types possessed by more than 3 attribute definitions.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_data_type from Attribute_Definitions  group by attribute_definitions.attribute_data_type having  count(*) > 3",
        "question": "What are the attribute data types with more than 3 attribute definitions?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_data_type from Attribute_Definitions where  attribute_definitions.attribute_name = \"Green\"",
        "question": "What is the attribute data type of the attribute with name \"Green\"?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_data_type from Attribute_Definitions where  attribute_definitions.attribute_name = \"Green\"",
        "question": "Find the attribute data type for the attribute named \"Green\".",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_structure.catalog_level_name , catalog_structure.catalog_level_number from Catalog_Structure where  catalog_structure.catalog_level_number between 5 and 10",
        "question": "Find the name and level of catalog structure with level between 5 and 10.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_structure.catalog_level_name , catalog_structure.catalog_level_number from Catalog_Structure where  catalog_structure.catalog_level_number between 5 and 10",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalogs.catalog_publisher from Catalogs  group by catalogs.catalog_publisher  order by count(*) desc limit 1",
        "question": "Which catalog publisher has published the most catalogs?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalogs.catalog_publisher from Catalogs  group by catalogs.catalog_publisher  order by count(*) desc limit 1",
        "question": "Find the catalog publisher that has the most catalogs.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalogs.catalog_name , catalogs.date_of_publication from Catalog_Structure join Catalogs on Catalog_Structure.catalog_id = Catalogs.catalog_id where  catalog_structure.catalog_level_number > 5",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalogs.catalog_name , catalogs.date_of_publication from Catalog_Structure join Catalogs on Catalog_Structure.catalog_id = Catalogs.catalog_id where  catalog_structure.catalog_level_number > 5",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents   order by catalog_contents.price_in_dollars desc limit 1",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents where  catalog_contents.price_in_dollars = (select max(catalog_contents.price_in_dollars) from Catalog_Contents   order by catalog_contents.price_in_dollars desc limit 1 )",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents where  catalog_contents.price_in_dollars = (select max(catalog_contents.price_in_dollars) from Catalog_Contents  )",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents   order by catalog_contents.price_in_dollars desc limit 1",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_structure.catalog_level_name from Catalog_Contents join Catalog_Structure on Catalog_Contents.catalog_level_number = Catalog_Structure.catalog_level_number   order by catalog_contents.price_in_dollars asc limit 1",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_structure.catalog_level_name from Catalog_Contents join Catalog_Structure on Catalog_Contents.catalog_level_number = Catalog_Structure.catalog_level_number   order by catalog_contents.price_in_dollars asc limit 1",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select avg(catalog_contents.price_in_euros) , min(catalog_contents.price_in_euros) from Catalog_Contents",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select avg(catalog_contents.price_in_euros) , min(catalog_contents.price_in_euros) from Catalog_Contents",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents   order by catalog_contents.height desc limit 1",
        "question": "What is the product with the highest height? Give me the catalog entry name.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents   order by catalog_contents.height desc limit 1",
        "question": "Which catalog content has the highest height? Give me the catalog entry name.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents   order by catalog_contents.capacity asc limit 1",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents where  catalog_contents.product_stock_number like \"2%\"",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_name , attribute_definitions.attribute_id from Attribute_Definitions join Catalog_Contents_Additional_Attributes on Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id where  catalog_contents_additional_attributes.attribute_value = 0",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_name , attribute_definitions.attribute_id from Attribute_Definitions join Catalog_Contents_Additional_Attributes on Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id where  catalog_contents_additional_attributes.attribute_value = \"0\"",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_name , attribute_definitions.attribute_id from Attribute_Definitions join Catalog_Contents_Additional_Attributes on Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id where  catalog_contents_additional_attributes.attribute_value = 0",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select attribute_definitions.attribute_name , attribute_definitions.attribute_id from Attribute_Definitions join Catalog_Contents_Additional_Attributes on Attribute_Definitions.attribute_id = Catalog_Contents_Additional_Attributes.attribute_id where  catalog_contents_additional_attributes.attribute_value = \"0\"",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name , catalog_contents.capacity from Catalog_Contents where  catalog_contents.price_in_dollars > 700",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalogs.date_of_latest_revision from Catalogs  group by catalogs.date_of_latest_revision having  count(*) > 1",
        "question": "Find the dates on which more than one revisions were made.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalogs.date_of_latest_revision from Catalogs  group by catalogs.date_of_latest_revision having  count(*) > 1",
        "question": "On which days more than one revisions were made on catalogs.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select count(*) from Catalog_Contents",
        "question": "How many products are there in the records?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select count(*) from Catalog_Contents",
        "question": "Find the total number of catalog contents.",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents where  catalog_contents.next_entry_id > 8",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "correctness": 1
    },
    {
        "db_id": "product_catalog",
        "query": "select catalog_contents.catalog_entry_name from Catalog_Contents where  catalog_contents.next_entry_id > 8   order by catalog_contents.next_entry_id desc limit 8",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select count(*) from performance",
        "question": "How many performances are there?",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.host from performance   order by performance.attendance asc",
        "question": "List the hosts of performances in ascending order of attendance.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.date , performance.location from performance",
        "question": "What are the dates and locations of performances?",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.attendance from performance where  performance.location = \"TD Garden\" or performance.location = \"Bell Centre\"",
        "question": "Show the attendances of the performances at location \"TD Garden\" or \"Bell Centre\"",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select avg(performance.attendance) from performance",
        "question": "What is the average number of attendees for performances?",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.date from performance   order by performance.attendance desc limit 1",
        "question": "What is the date of the performance with the highest number of attendees?",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.location , count(*) from performance  group by performance.location",
        "question": "Show different locations and the number of performances at each location.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.location from performance  group by performance.location  order by count(*) desc limit 1",
        "question": "Show the most common location of performances.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.location from performance  group by performance.location having  count(*) >= 2",
        "question": "Show the locations that have at least two performances.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.location from performance where  performance.attendance > 2000   intersect select performance.location from performance where  performance.attendance < 1000",
        "question": "Show the locations that have both performances with more than 2000 attendees and performances with less than 1000 attendees.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select member.name , performance.location from member_attendance join performance on member_attendance.Performance_ID = performance.Performance_ID join member on member_attendance.Member_ID = member.Member_ID",
        "question": "Show the names of members and the location of the performances they attended.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select member.name , performance.location from member_attendance join performance on member_attendance.Performance_ID = performance.Performance_ID join member on member_attendance.Member_ID = member.Member_ID   order by member.name asc",
        "question": "Show the names of members and the location of performances they attended in ascending alphabetical order of their names.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.date from member_attendance join performance on member_attendance.Performance_ID = performance.Performance_ID join member on member_attendance.Member_ID = member.Member_ID where  member.role = \"Violin\"",
        "question": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select performance.date from member_attendance join performance on member_attendance.Performance_ID = performance.Performance_ID join member on member_attendance.Member_ID = member.Member_ID where  member.role = \"Violin\" or performance.attendance = 1",
        "question": "Show the dates of performances with attending members whose roles are \"Violin\".",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select member.name , performance.date from member_attendance join performance on member_attendance.Performance_ID = performance.Performance_ID join member on member_attendance.Member_ID = member.Member_ID   order by performance.attendance desc",
        "question": "Show the names of members and the dates of performances they attended in descending order of attendance of the performances.",
        "correctness": 1
    },
    {
        "db_id": "performance_attendance",
        "query": "select member.name from member where  member.member_id not in (select member_attendance.Member_ID from member_attendance  )",
        "question": "List the names of members who did not attend any performance.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from channel where  channel.owner != \"CCTV\"",
        "question": "Find the names of channels that are not owned by CCTV.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from channel   order by channel.rating_in_percent desc",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from channel   order by channel.rating_in_percent desc",
        "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from channel   order by channel.share_in_percent desc",
        "question": "Give me a list of all the channel names sorted by the channel rating in descending order.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.owner from channel   order by channel.rating_in_percent desc limit 1",
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.owner from channel   order by channel.share_in_percent desc limit 1",
        "question": "What is the owner of the channel that has the highest rating ratio?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.owner from channel   order by channel.rating_in_percent desc limit 1",
        "question": "Show me the owner of the channel with the highest rating.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.owner from channel   order by channel.share_in_percent desc limit 1",
        "question": "Show me the owner of the channel with the highest rating.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count(*) from program",
        "question": "how many programs are there?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count(*) from program",
        "question": "Count the number of programs.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program   order by program.launch asc",
        "question": "list all the names of programs, ordering by launch time.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program   order by program.launch asc",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name , program.origin , program.owner from program",
        "question": "List the name, origin and owner of each program.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name , program.origin , program.owner from program",
        "question": "What are the name, origin and owner of each program?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program   order by program.launch desc limit 1",
        "question": "find the name of the program that was launched most recently.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program   order by program.launch desc limit 1",
        "question": "Which program was launched most recently? Return the program name.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select sum(channel.share_in_percent) from channel where  channel.owner = \"CCTV\"",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select sum(channel.share_in_percent) from channel where  channel.owner = \"CCTV\"",
        "question": "What is the total share (in percent) of all the channels owned by CCTV?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from broadcast join channel on broadcast.Channel_ID = channel.Channel_ID where  broadcast.time_of_day = \"Morning\"",
        "question": "Find the names of the channels that are broadcast in the morning.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from broadcast join channel on broadcast.Channel_ID = channel.Channel_ID where  broadcast.time_of_day = \"Morning\"",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from broadcast join channel on broadcast.Channel_ID = channel.Channel_ID where  broadcast.time_of_day = \"Morning\"   intersect select channel.name from broadcast join channel on broadcast.Channel_ID = channel.Channel_ID where  broadcast.time_of_day = \"Night\"",
        "question": "what are the names of the channels that broadcast in both morning and night?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from broadcast join channel on broadcast.Channel_ID = channel.Channel_ID where  broadcast.time_of_day = \"Morning\"   intersect select channel.name from broadcast join channel on broadcast.Channel_ID = channel.Channel_ID where  broadcast.time_of_day = \"Night\"",
        "question": "Which channels broadcast both in the morning and at night? Give me the channel names.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select broadcast.time_of_day , count(*) from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.time_of_day",
        "question": "how many programs are broadcast in each time section of the day?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count(*) , broadcast.time_of_day from broadcast  group by broadcast.time_of_day",
        "question": "how many programs are broadcast in each time section of the day?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count(*) , broadcast.time_of_day from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.time_of_day",
        "question": "how many programs are broadcast in each time section of the day?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select broadcast.time_of_day , count(*) from broadcast  group by broadcast.time_of_day",
        "question": "how many programs are broadcast in each time section of the day?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count(*) , broadcast.time_of_day from broadcast  group by broadcast.time_of_day",
        "question": "Count the number of programs broadcast for each time section of a day.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count(*) , broadcast.time_of_day from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.time_of_day",
        "question": "Count the number of programs broadcast for each time section of a day.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select broadcast.time_of_day , count(*) from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.time_of_day",
        "question": "Count the number of programs broadcast for each time section of a day.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select broadcast.time_of_day , count(*) from broadcast  group by broadcast.time_of_day",
        "question": "Count the number of programs broadcast for each time section of a day.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count( distinct broadcast.program_id) from broadcast where  broadcast.time_of_day = \"Night\"",
        "question": "find the number of different programs that are broadcast during night time.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count( distinct program.program_id) from broadcast join program on broadcast.Program_ID = program.Program_ID where  broadcast.time_of_day = \"Night\"",
        "question": "find the number of different programs that are broadcast during night time.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count( distinct broadcast.program_id) from broadcast where  broadcast.time_of_day = \"Night\"",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count( distinct program.program_id) from broadcast join program on broadcast.Program_ID = program.Program_ID where  broadcast.time_of_day = \"Night\"",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program where  program.program_id not in (select broadcast.Program_ID from broadcast where  broadcast.time_of_day = \"Morning\"  )",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.owner from broadcast join program on broadcast.Program_ID = program.Program_ID where  broadcast.time_of_day = \"Morning\"   intersect select program.owner from broadcast join program on broadcast.Program_ID = program.Program_ID where  broadcast.time_of_day = \"Night\"",
        "question": "find the program owners that have some programs in both morning and night time.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.owner from broadcast join program on broadcast.Program_ID = program.Program_ID where  broadcast.time_of_day = \"Morning\"   intersect select program.owner from broadcast join program on broadcast.Program_ID = program.Program_ID where  broadcast.time_of_day = \"Night\"",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.origin from program   order by program.origin asc",
        "question": "List all program origins in the alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.origin from program   order by program.origin asc",
        "question": "What is the list of program origins ordered alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count( distinct channel.owner) from channel",
        "question": "what is the number of different channel owners?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select count( distinct channel.owner) from channel",
        "question": "Count the number of distinct channel owners.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program where  program.origin != \"Beijing\"",
        "question": "find the names of programs whose origin is not in Beijing.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from program where  program.origin != \"Beijing\"",
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from channel where  channel.owner = \"CCTV\" or channel.owner = \"HBS\"",
        "question": "What are the names of the channels owned by CCTV or HBS?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.name from channel where  channel.owner = \"CCTV\" or channel.owner = \"HBS\"",
        "question": "List the names of all the channels owned by either CCTV or HBS",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select sum(channel.rating_in_percent) , channel.owner from channel  group by channel.owner",
        "question": "Find the total rating ratio for each channel owner.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.owner , sum(channel.rating_in_percent) from channel  group by channel.owner",
        "question": "Find the total rating ratio for each channel owner.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select sum(channel.rating_in_percent) , channel.owner from channel  group by channel.owner",
        "question": "What is the total rating of channel for each channel owner?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select channel.owner , sum(channel.rating_in_percent) from channel  group by channel.owner",
        "question": "What is the total rating of channel for each channel owner?",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.program_id  order by count(*) desc limit 1",
        "question": "Find the name of the program that is broadcast most frequently.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.program_id, broadcast.program_id  order by count(*) desc limit 1",
        "question": "Find the name of the program that is broadcast most frequently.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.program_id, program.name  order by count(*) desc limit 1",
        "question": "Find the name of the program that is broadcast most frequently.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.program_id  order by count(*) desc limit 1",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.program_id, broadcast.program_id  order by count(*) desc limit 1",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.Program_ID  order by count(*) desc limit 1",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "correctness": 1
    },
    {
        "db_id": "program_share",
        "query": "select program.name from broadcast join program on broadcast.Program_ID = program.Program_ID  group by broadcast.program_id, program.name  order by count(*) desc limit 1",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Ref_Calendar",
        "question": "How many calendar items do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Ref_Calendar",
        "question": "Count the number of all the calendar items.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_calendar.calendar_date , ref_calendar.day_number from Ref_Calendar",
        "question": "Show all calendar dates and day Numbers.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_calendar.calendar_date , ref_calendar.day_number from Ref_Calendar",
        "question": "What are all the calendar dates and day Numbers?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Ref_Document_Types",
        "question": "Show the number of document types.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Ref_Document_Types",
        "question": "How many document types are there?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_code , ref_document_types.document_type_name from Ref_Document_Types",
        "question": "List all document type codes and document type names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_code , ref_document_types.document_type_name from Ref_Document_Types",
        "question": "What are all the document type codes and document type names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_name , ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_code = \"RV\"",
        "question": "What is the name and description for document type code RV?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_name , ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_code = \"RV\"",
        "question": "Give me the name and description of the document type code RV.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_code from Ref_Document_Types where  ref_document_types.document_type_name = \"Paper\"",
        "question": "What is the document type code for document type \"Paper\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_code from Ref_Document_Types where  ref_document_types.document_type_name = \"Paper\"",
        "question": "Find the code of the document type \"Paper\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from All_Documents where  all_documents.document_type_code = \"CV\" or all_documents.document_type_code = \"BK\"",
        "question": "Show the number of documents with document type code CV or BK.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from All_Documents join Ref_Document_Types on All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  ref_document_types.document_type_code = \"CV\" or ref_document_types.document_type_code = \"BK\"",
        "question": "Show the number of documents with document type code CV or BK.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from All_Documents where  all_documents.document_type_code = \"CV\" or all_documents.document_type_code = \"BK\"",
        "question": "How many documents have document type code CV or BK?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from All_Documents join Ref_Document_Types on All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  ref_document_types.document_type_code = \"CV\" or ref_document_types.document_type_code = \"BK\"",
        "question": "How many documents have document type code CV or BK?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select all_documents.date_stored from All_Documents where  all_documents.document_name = \"Marry CV\"",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select all_documents.date_stored from All_Documents where  all_documents.document_name = \"Marry CV\" and all_documents.document_type_code = \"CV\"",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select all_documents.date_stored from All_Documents where  all_documents.document_name = \"Marry CV\"",
        "question": "When was the document named \"Marry CV\" stored? Give me the date.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select all_documents.date_stored from Documents_to_be_Destroyed join All_Documents on Documents_to_be_Destroyed.Document_ID = All_Documents.Document_ID where  all_documents.document_name = \"Marry CV\"",
        "question": "When was the document named \"Marry CV\" stored? Give me the date.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select all_documents.date_stored from All_Documents where  all_documents.document_name = \"Marry CV\" and all_documents.document_type_code = \"CV\"",
        "question": "When was the document named \"Marry CV\" stored? Give me the date.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_calendar.day_number , all_documents.date_stored from All_Documents join Ref_Calendar on All_Documents.Date_Stored = Ref_Calendar.Calendar_Date",
        "question": "What is the day Number and date of all the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_calendar.day_number , all_documents.date_stored from All_Documents join Ref_Calendar on All_Documents.Date_Stored = Ref_Calendar.Calendar_Date",
        "question": "Return the day Number and stored date for all the documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_name from All_Documents join Ref_Document_Types on All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  all_documents.document_name = \"How to read a book\"",
        "question": "What is the document type name for the document with name \"How to read a book\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_document_types.document_type_name from All_Documents join Ref_Document_Types on All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  all_documents.document_name = \"How to read a book\"",
        "question": "Find the document type name of the document named \"How to read a book\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Ref_Locations",
        "question": "Show the number of locations.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Ref_Locations",
        "question": "How many locations are listed in the database?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_code , ref_locations.location_name from Ref_Locations",
        "question": "List all location codes and location names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_code , ref_locations.location_name from Ref_Locations",
        "question": "What are all the location codes and location names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select distinct ref_locations.location_code , ref_locations.location_name from Ref_Locations",
        "question": "What are all the location codes and location names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_description from Ref_Locations where  ref_locations.location_code = \"x\"",
        "question": "What are the name and description for location code x?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_description from Ref_Locations where  ref_locations.location_code = \"x\"",
        "question": "Give me the name and description of the location with code x.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_code from Ref_Locations where  ref_locations.location_name = \"Canada\"",
        "question": "What is the location code for the country \"Canada\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_code from Ref_Locations where  ref_locations.location_name = \"Canada\"   intersect select ref_locations.location_code from Ref_Locations where  ref_locations.location_name = \"Canada\"",
        "question": "What is the location code for the country \"Canada\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_code from Ref_Locations where  ref_locations.location_name = \"Canada\"",
        "question": "Show the location code of the country \"Canada\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_code from Ref_Locations where  ref_locations.location_name = \"Canada\"   intersect select ref_locations.location_code from Ref_Locations where  ref_locations.location_name = \"Canada\"",
        "question": "Show the location code of the country \"Canada\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Roles",
        "question": "How many roles are there?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Roles",
        "question": "Count the total number of roles listed.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code , roles.role_name , roles.role_description from Roles",
        "question": "List all role codes, role names, and role descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code , roles.role_name , roles.role_description from Roles",
        "question": "What are all the role codes, role names, and role descriptions?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_name , roles.role_description from Roles where  roles.role_code = \"MG\"",
        "question": "What are the name and description for role code \"MG\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_name , roles.role_description from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  employees.role_code = \"MG\"",
        "question": "What are the name and description for role code \"MG\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_name , roles.role_description from Roles where  roles.role_code = \"MG\"",
        "question": "Find the name and description of the role with code \"MG\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_name , roles.role_description from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  employees.role_code = \"MG\"",
        "question": "Find the name and description of the role with code \"MG\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_description from Roles where  roles.role_name = \"Proof Reader\"",
        "question": "Show the description for role name \"Proof Reader\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_description from Roles where  roles.role_name = \"Proof Reader\"",
        "question": "What is the description of the role named \"Proof Reader\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Employees",
        "question": "How many employees do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) from Employees",
        "question": "Find the number of employees we have.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees where  employees.employee_name = \"Ebba\"",
        "question": "What is the id for the employee called Ebba?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees where  employees.employee_name = \"Ebba\"",
        "question": "Show the id of the employee named Ebba.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_name from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_code = \"HR\"",
        "question": "Show the names of all the employees with role \"HR\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_name from Employees where  employees.role_code = \"HR\"",
        "question": "Show the names of all the employees with role \"HR\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_name from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_code = \"HR\"",
        "question": "Which employees have the role with code \"HR\"? Find their names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_name from Employees where  employees.role_code = \"HR\"",
        "question": "Which employees have the role with code \"HR\"? Find their names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code , count(*) from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code",
        "question": "Show all role codes and the number of employees in each role.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code , count(*) from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code",
        "question": "Show all role codes and the number of employees in each role.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code , count(*) from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code",
        "question": "Show all role codes and the number of employees in each role.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code , count(*) from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code",
        "question": "What is the code of each role and the number of employees in each role?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code , count(*) from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code",
        "question": "What is the code of each role and the number of employees in each role?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees  group by employees.role_code  order by count(*) desc limit 1",
        "question": "What is the role code with the largest number of employees?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code  order by count(*) desc limit 1",
        "question": "What is the role code with the largest number of employees?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code  order by count(*) desc limit 1",
        "question": "What is the role code with the largest number of employees?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code  order by count(*) desc limit 1",
        "question": "Find the code of the role that have the most employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code  order by count(*) desc limit 1",
        "question": "Find the code of the role that have the most employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees  group by employees.role_code  order by count(*) desc limit 1",
        "question": "Find the code of the role that have the most employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code  order by count(*) desc limit 1",
        "question": "Find the code of the role that have the most employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Roles  group by roles.role_code  order by count(*) desc limit 1",
        "question": "Find the code of the role that have the most employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code having  count(*) >= 3",
        "question": "Show all role codes with at least 3 employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code having  count(*) >= 3",
        "question": "Show all role codes with at least 3 employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees  group by employees.role_code having  count(*) >= 3",
        "question": "Show all role codes with at least 3 employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code having  count(*) >= 3",
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees  group by employees.role_code having  count(*) >= 3",
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code having  count(*) >= 3",
        "question": "What are the roles with three or more employees? Give me the role codes.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code  order by count(*) asc limit 1",
        "question": "Show the role code with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by roles.role_code  order by count(*) asc limit 1",
        "question": "Show the role code with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees  group by employees.role_code  order by count(*) asc limit 1",
        "question": "Show the role code with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.role_code from Employees join Roles on Employees.Role_Code = Roles.Role_Code  group by employees.role_code  order by count(*) asc limit 1",
        "question": "Show the role code with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_name , roles.role_description from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  employees.employee_name = \"Ebba\"",
        "question": "What is the role name and role description for employee called Ebba?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select roles.role_name , roles.role_description from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  employees.employee_name = \"Ebba\"",
        "question": "Show the name and description of the role played by the employee named Ebba.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_name from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_name = \"Editor\"",
        "question": "Show the names of employees with role name Editor.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_name from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_name = \"Editor\"",
        "question": "Find the names of all the employees whose the role name is \"Editor\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select distinct employees.employee_name from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_name = \"Editor\"",
        "question": "Find the names of all the employees whose the role name is \"Editor\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_name = \"Human Resource\" or roles.role_name = \"Manager\"",
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees join Roles on Employees.Role_Code = Roles.Role_Code where  roles.role_name = \"Human Resource\" or roles.role_name = \"Manager\"",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select distinct document_locations.location_code from Document_Locations",
        "question": "What are the different location codes for documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select distinct document_locations.location_code from Document_Locations",
        "question": "Give me all the distinct location codes for documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name from Document_Locations join All_Documents on Document_Locations.Document_ID = All_Documents.Document_ID join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code where  all_documents.document_name = \"Robin CV\"",
        "question": "Show the location name for document \"Robin CV\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name from Document_Locations join All_Documents on Document_Locations.Document_ID = All_Documents.Document_ID join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code where  all_documents.document_name = \"Robin CV\"",
        "question": "What is the location name of the document \"Robin CV\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code , document_locations.date_in_locaton_to , document_locations.date_in_locaton_to from Document_Locations",
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code , document_locations.date_in_locaton_to , document_locations.date_in_locaton_to from Document_Locations",
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code , document_locations.date_in_location_from , document_locations.date_in_locaton_to from Document_Locations",
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.date_in_location_from , document_locations.date_in_locaton_to from Document_Locations join All_Documents on Document_Locations.Document_ID = All_Documents.Document_ID where  all_documents.document_name = \"Robin CV\"",
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.date_in_locaton_to , document_locations.date_in_locaton_to from Document_Locations join All_Documents on Document_Locations.Document_ID = All_Documents.Document_ID where  all_documents.document_name = \"Robin CV\"",
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code , count(*) from Document_Locations  group by document_locations.location_code",
        "question": "Show the location codes and the number of documents in each location.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code , count(*) from Document_Locations  group by document_locations.location_code",
        "question": "What is the code of each location and the number of documents in that location?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code from Document_Locations  group by document_locations.location_code  order by count(*) desc limit 1",
        "question": "What is the location code with the most documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code from Document_Locations  group by document_locations.location_code  order by count(*) desc limit 1",
        "question": "Find the code of the location with the largest number of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code from Document_Locations  group by document_locations.location_code having  count(*) >= 3",
        "question": "Show the location codes with at least 3 documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code from Document_Locations  group by document_locations.location_code having  count(*) >= 3",
        "question": "What are the codes of the locations with at least three documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select document_locations.location_code from Document_Locations join All_Documents on Document_Locations.Document_ID = All_Documents.Document_ID join Ref_Document_Types on All_Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code  group by document_locations.location_code having  count(*) >= 3",
        "question": "What are the codes of the locations with at least three documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by ref_locations.location_code  order by count(*) asc limit 1",
        "question": "Show the location name and code with the least documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , document_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by document_locations.location_code  order by count(*) asc limit 1",
        "question": "Show the location name and code with the least documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_code from Ref_Locations  group by ref_locations.location_code  order by count(*) asc limit 1",
        "question": "Show the location name and code with the least documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by document_locations.location_code  order by count(*) asc limit 1",
        "question": "Show the location name and code with the least documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , document_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by ref_locations.location_code  order by count(*) asc limit 1",
        "question": "Show the location name and code with the least documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , document_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by document_locations.location_code  order by count(*) asc limit 1",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by ref_locations.location_code  order by count(*) asc limit 1",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select ref_locations.location_name , ref_locations.location_code from Document_Locations join Ref_Locations on Document_Locations.Location_Code = Ref_Locations.Location_Code  group by document_locations.location_code  order by count(*) asc limit 1",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id , count(*) from Documents_to_be_Destroyed join Employees on Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID = Employees.Employee_ID  group by employees.employee_id",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id , count(*) from Documents_to_be_Destroyed join Employees on Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID = Employees.Employee_ID  group by employees.employee_id",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select count(*) , employees.employee_id from Documents_to_be_Destroyed join Employees on Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID = Employees.Employee_ID  group by employees.employee_id",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees where  employees.employee_id not in (select Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID from Documents_to_be_Destroyed  )",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees   except select documents_to_be_destroyed.destruction_authorised_by_employee_id from Documents_to_be_Destroyed",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees where  employees.employee_id not in (select Documents_to_be_Destroyed.Destruction_Authorised_by_Employee_ID from Documents_to_be_Destroyed  )",
        "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select employees.employee_id from Employees   except select documents_to_be_destroyed.destruction_authorised_by_employee_id from Documents_to_be_Destroyed",
        "question": "Which employees do not authorize destruction for any document? Give me their employee ids.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select documents_to_be_destroyed.destroyed_by_employee_id from Documents_to_be_Destroyed   union select documents_to_be_destroyed.destroyed_by_employee_id from Documents_to_be_Destroyed",
        "question": "Show the ids of all employees who have destroyed a document.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "query": "select documents_to_be_destroyed.destroyed_by_employee_id from Documents_to_be_Destroyed   union select documents_to_be_destroyed.destroyed_by_employee_id from Documents_to_be_Destroyed",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) from region",
        "question": "How many regions do we have?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) from region",
        "question": "Count the number of regions.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select distinct region.region_name from region   order by region.label asc",
        "question": "Show all distinct region names ordered by their labels.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select distinct region.region_name from region   order by region.label asc",
        "question": "What are the different region names, ordered by labels?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count( distinct party.party_name) from party",
        "question": "Count the number of different parties.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister , party.took_office , party.left_office from party   order by party.left_office asc",
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister , party.took_office , party.left_office from party   order by party.took_office asc",
        "question": "Show the ministers and the time they took and left office, listed by the time they left office.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister , party.took_office , party.left_office from party   order by party.left_office asc",
        "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister , party.took_office , party.left_office from party   order by party.took_office asc",
        "question": "Who are the ministers, when did they take office, and when did they leave office, ordered by when they left office?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party where  party.took_office > 1961 or party.took_office < 1959",
        "question": "Show the minister who took office after 1961 or before 1959.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party where  party.took_office > 1961 or party.took_office < 1959",
        "question": "Who are the ministers who took office after 1961 or before 1959?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party where  party.party_name != \"Progress Party\"",
        "question": "Show all ministers who do not belong to Progress Party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party where  party.party_id not in (select party.Party_ID from party where  party.party_name = \"Progress Party\"  )",
        "question": "Show all ministers who do not belong to Progress Party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party where  party.party_name != \"Progress Party\"",
        "question": "Which ministers are not a part of the Progress Party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party where  party.party_id not in (select party.Party_ID from party where  party.party_name = \"Progress Party\"  )",
        "question": "Which ministers are not a part of the Progress Party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister , party.party_name from party   order by party.took_office desc",
        "question": "Show all ministers and parties they belong to in descending order of the time they took office.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister , party.party_name from party   order by party.took_office desc",
        "question": "Who are the ministers and what parties do they belong to, listed descending by the times they took office?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party   order by party.left_office desc limit 1",
        "question": "Return the minister who left office at the latest time.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.minister from party   order by party.left_office desc limit 1",
        "question": "Which minister left office the latest?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name , party.party_name from member join party on member.Party_ID = party.Party_ID",
        "question": "List member names and their party names.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name , party.party_name from member join party on member.Party_ID = party.Party_ID",
        "question": "What are the names of members and their corresponding parties?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name , party.party_name from member join party on member.Party_ID = party.Party_ID   union select member.member_name , party.party_name from member join party on member.Party_ID = party.Party_ID",
        "question": "What are the names of members and their corresponding parties?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from member join party on member.Party_ID = party.Party_ID  group by member.party_id",
        "question": "Show all party names and the number of members in each party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from member join party on member.Party_ID = party.Party_ID  group by party.party_name",
        "question": "Show all party names and the number of members in each party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) , party.party_name from member join party on member.Party_ID = party.Party_ID  group by party.party_name",
        "question": "How many members are in each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from member join party on member.Party_ID = party.Party_ID  group by party.party_name",
        "question": "How many members are in each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from member join party on member.Party_ID = party.Party_ID  group by member.party_id",
        "question": "How many members are in each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by member.party_id  order by count(*) desc limit 1",
        "question": "What is the name of party with most number of members?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by party.party_name  order by count(*) desc limit 1",
        "question": "What is the name of party with most number of members?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by member.party_id, party.party_name  order by count(*) desc limit 1",
        "question": "What is the name of party with most number of members?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by member.party_id  order by count(*) desc limit 1",
        "question": "Return the name of the party with the most members.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by party.party_name  order by count(*) desc limit 1",
        "question": "Return the name of the party with the most members.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by member.Party_ID  order by count(*) desc limit 1",
        "question": "Return the name of the party with the most members.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from member join party on member.Party_ID = party.Party_ID  group by member.party_id, party.party_name  order by count(*) desc limit 1",
        "question": "Return the name of the party with the most members.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , region.region_name from party join region on party.Region_ID = region.Region_ID",
        "question": "Show all party names and their region names.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , region.region_name from party join region on party.Region_ID = region.Region_ID",
        "question": "What are the names of parties and their respective regions?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party where  party.party_id not in (select member.Party_ID from member  )",
        "question": "Show names of parties that does not have any members.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party where  party.party_id not in (select member.Party_ID from member  )",
        "question": "What are the names of parties that have no members?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member where  member.party_id = 3   intersect select member.member_name from member where  member.party_id = 1",
        "question": "Show the member names which are in both the party with id 3 and the party with id 1.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member where  member.party_id = 3   intersect select member.member_name from member where  member.party_id = 1",
        "question": "Which member names are shared among members in the party with the id 3 and the party with the id 1?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member join party on member.Party_ID = party.Party_ID where  party.party_name != \"Progress Party\"",
        "question": "Show member names that are not in the Progress Party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member   except select member.member_name from member join party on member.Party_ID = party.Party_ID where  party.party_name = \"Progress Party\"",
        "question": "Show member names that are not in the Progress Party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member where  member.party_id not in (select party.Party_ID from party where  party.party_name = \"Progress Party\"  )",
        "question": "Show member names that are not in the Progress Party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member join party on member.Party_ID = party.Party_ID where  party.party_name != \"Progress Party\"",
        "question": "Which member names corresponding to members who are not in the Progress Party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) from party_events",
        "question": "How many party events do we have?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) from party_events",
        "question": "Count the number of party events.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_name",
        "question": "Show party names and the number of events for each party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_id",
        "question": "Show party names and the number of events for each party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from party_events join party on party_events.Party_ID = party.Party_ID  group by party_events.party_id",
        "question": "Show party names and the number of events for each party.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_name",
        "question": "How many events are there for each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_id",
        "question": "How many events are there for each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) , party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_name",
        "question": "How many events are there for each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name , count(*) from party_events join party on party_events.Party_ID = party.Party_ID  group by party_events.party_id",
        "question": "How many events are there for each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select count(*) , party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party_events.party_id",
        "question": "How many events are there for each party?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member where  member.member_id not in (select party_events.Member_in_charge_ID from party_events  )",
        "question": "Show all member names who are not in charge of any event.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member   except select member.member_name from party_events join member on party_events.Member_in_charge_ID = member.Member_ID",
        "question": "Show all member names who are not in charge of any event.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member where  member.member_id not in (select party_events.Member_in_charge_ID from party_events  )",
        "question": "What are the names of members who are not in charge of any events?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from member   except select member.member_name from party_events join member on party_events.Member_in_charge_ID = member.Member_ID",
        "question": "What are the names of members who are not in charge of any events?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party_events.party_id having  count(*) >= 2",
        "question": "What are the names of parties with at least 2 events?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_name having  count(*) >= 2",
        "question": "What are the names of parties with at least 2 events?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_id having  count(*) >= 2",
        "question": "What are the names of parties with at least 2 events?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party_events.party_id having  count(*) >= 2",
        "question": "Return the names of parties that have two or more events.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_name having  count(*) >= 2",
        "question": "Return the names of parties that have two or more events.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party.party_name from party_events join party on party_events.Party_ID = party.Party_ID  group by party.party_id having  count(*) >= 2",
        "question": "Return the names of parties that have two or more events.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from party_events join member on party_events.Member_in_charge_ID = member.Member_ID  group by party_events.member_in_charge_id  order by count(*) desc limit 1",
        "question": "What is the name of member in charge of greatest number of events?",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from party_events join member on party_events.Member_in_charge_ID = member.Member_ID  group by party_events.member_in_charge_id  order by count(*) desc limit 1",
        "question": "Return the name of the member who is in charge of the most events.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select member.member_name from party_events join member on party_events.Member_in_charge_ID = member.Member_ID  group by member.member_name  order by count(*) desc limit 1",
        "question": "Return the name of the member who is in charge of the most events.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party_events.event_name from party_events  group by party_events.event_name having  count(*) > 2",
        "question": "find the event names that have more than 2 records.",
        "correctness": 1
    },
    {
        "db_id": "party_people",
        "query": "select party_events.event_name from party_events  group by party_events.event_name having  count(*) > 2",
        "question": "Which event names were used more than twice for party events?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count(*) from bank",
        "question": "How many bank branches are there?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count(*) from bank",
        "question": "Count the number of bank branches.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(bank.no_of_customers) from bank",
        "question": "What is the total number of customers across banks?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(bank.no_of_customers) from bank where  bank.city = \"New York City\"",
        "question": "Find the number of customers in the banks at New York City.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(bank.no_of_customers) from bank where  bank.city = \"New York City\"",
        "question": "What is the total number of customers who use banks in New York City?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(bank.no_of_customers) from bank where  bank.state = \"Utah\"",
        "question": "Find the average number of customers in all banks of Utah state.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(bank.no_of_customers) from bank where  bank.state = \"Utah\"",
        "question": "What is the average number of customers across banks in the state of Utah?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(bank.no_of_customers) from customer join bank on customer.branch_ID = bank.branch_ID where  customer.state = \"Utah\"",
        "question": "What is the average number of customers across banks in the state of Utah?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(bank.no_of_customers) from bank",
        "question": "Find the average number of customers cross all banks.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(bank.no_of_customers) from bank",
        "question": "What is the average number of bank customers?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.city , bank.state from bank where  bank.bname = \"morningside\"",
        "question": "Find the city and state of the bank branch named morningside.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.city , bank.state from bank where  bank.bname = \"morningside\"",
        "question": "What city and state is the bank with the name morningside in?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from bank where  bank.state = \"New York\"",
        "question": "Find the branch names of banks in the New York state.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from bank where  bank.state = \"New York\"",
        "question": "What are the names of banks in the state of New York?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer   order by customer.acc_bal asc",
        "question": "List the name of all customers sorted by their account balance in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer   order by customer.acc_bal asc",
        "question": "What are the names of all customers, ordered by account balance?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.state , customer.acc_type , customer.credit_score from customer where  customer.no_of_loans <= 0",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.state , customer.acc_type , customer.credit_score from customer where  customer.no_of_loans = 0",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count( distinct bank.city) from bank",
        "question": "Find the number of different cities which banks are located at.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count( distinct bank.city) from bank",
        "question": "In how many different cities are banks located?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count( distinct bank.state) from bank",
        "question": "Find the number of different states which banks are located at.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count( distinct bank.state) from bank",
        "question": "In how many different states are banks located?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count( distinct customer.acc_type) from customer",
        "question": "How many distinct types of accounts are there?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select count( distinct customer.acc_type) from customer",
        "question": "Count the number of different account types.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name , customer.acc_bal from customer where  customer.cust_name like \"%a%\"",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name , customer.acc_bal from customer where  customer.cust_name like \"%A%\"",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name , customer.acc_bal from customer where  customer.cust_name like \"%a%\"",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name , customer.acc_bal from customer where  customer.cust_name like \"%A%\"",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(customer.acc_bal) from customer where  customer.state = \"Utah\" or customer.state = \"Texas\"",
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"saving\"   intersect select customer.cust_name from customer where  customer.acc_type = \"checking\"",
        "question": "Find the name of customers who have both saving and checking account types.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"savings\"   intersect select customer.cust_name from customer where  customer.acc_type = \"checking\"",
        "question": "Find the name of customers who have both saving and checking account types.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"save\"   intersect select customer.cust_name from customer where  customer.acc_type = \"checking\"",
        "question": "Find the name of customers who have both saving and checking account types.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"saving\"   intersect select customer.cust_name from customer where  customer.acc_type = \"check\"",
        "question": "Find the name of customers who have both saving and checking account types.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"savings\"   intersect select customer.cust_name from customer where  customer.acc_type = \"checking\"",
        "question": "What are the names of customers who have both savings and checking accounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"saving\"   intersect select customer.cust_name from customer where  customer.acc_type = \"checking\"",
        "question": "What are the names of customers who have both savings and checking accounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type = \"save\"   intersect select customer.cust_name from customer where  customer.acc_type = \"checking\"",
        "question": "What are the names of customers who have both savings and checking accounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer   except select customer.cust_name from customer where  customer.acc_type = \"saving\"",
        "question": "Find the name of customers who do not have an saving account.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type != \"saving\"",
        "question": "Find the name of customers who do not have an saving account.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.acc_type != \"saving\"",
        "question": "What are the names of customers who do not have saving accounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer   except select customer.cust_name from customer where  customer.acc_type = \"saving\"",
        "question": "What are the names of customers who do not have saving accounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.credit_score < (select avg(customer.credit_score) from customer  )",
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.credit_score <= (select avg(customer.credit_score) from customer  )",
        "question": "Find the name of customers whose credit score is below the average credit scores of all customers.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.credit_score < (select avg(customer.credit_score) from customer  )",
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.credit_score <= (select avg(customer.credit_score) from customer  )",
        "question": "What are the names of customers with credit score less than the average credit score across customers?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from bank   order by bank.no_of_customers desc limit 1",
        "question": "Find the branch name of the bank that has the most number of customers.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from bank  group by bank.branch_id  order by bank.no_of_customers desc limit 1",
        "question": "Find the branch name of the bank that has the most number of customers.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from bank   order by bank.no_of_customers desc limit 1",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from bank  group by bank.branch_id  order by bank.no_of_customers desc limit 1",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer   order by customer.credit_score asc limit 1",
        "question": "Find the name of customer who has the lowest credit score.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer   order by customer.credit_score asc limit 1",
        "question": "What is the name of the customer with the worst credit score?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.credit_score = (select min(customer.credit_score) from customer  )",
        "question": "What is the name of the customer with the worst credit score?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer where  customer.credit_score = (select customer.credit_score from customer   order by customer.credit_score asc limit 1 )",
        "question": "What is the name of the customer with the worst credit score?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name , customer.acc_type , customer.acc_bal from customer   order by customer.credit_score desc limit 1",
        "question": "Find the name, account type, and account balance of the customer who has the highest credit score.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name , customer.acc_type , customer.acc_bal from customer   order by customer.credit_score desc limit 1",
        "question": "What is the name, account type, and account balance corresponding to the customer with the highest credit score?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.acc_type , avg(customer.acc_bal) from customer where  customer.credit_score < 50  group by customer.acc_type",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.acc_type , avg(customer.acc_bal) from customer where  customer.credit_score <= 50  group by customer.acc_type",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(customer.acc_bal) , customer.acc_type from customer where  customer.credit_score < 50  group by customer.acc_type",
        "question": "What is the average account balance of customers with credit score below 50 for the different account types?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(customer.acc_bal) , customer.state from customer where  customer.credit_score > 100  group by customer.state",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.state , sum(customer.acc_bal) from customer where  customer.credit_score > 100  group by customer.state",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(customer.acc_bal) , customer.state from customer where  customer.credit_score > 100  group by customer.state",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname , sum(loan.amount) from loan join bank on loan.branch_ID = bank.branch_ID  group by loan.branch_id",
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(loan.amount) , bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by loan.branch_id",
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname , sum(loan.amount) from loan join bank on loan.branch_ID = bank.branch_ID  group by bank.branch_id",
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(loan.amount) , bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by bank.branch_id",
        "question": "What are the names of the different bank branches, and what are their total loan amounts?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by loan.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by bank.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by bank.bname  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID   order by loan.amount desc limit 1",
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by loan.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID  group by loan.branch_id  order by loan.amount desc limit 1",
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID where  loan.amount = (select max(loan.amount) from loan  )",
        "question": "What is the name of the bank branch that has lent the greatest amount?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score < 100  group by customer.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score < 100  group by loan.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score <= 100  group by customer.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score < 100  group by bank.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score <= 100  group by loan.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "Find the name of bank branch that provided the greatest total amount of loans to customers with credit score is less than 100.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score < 100  group by loan.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score < 100  group by customer.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score <= 100  group by loan.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  customer.credit_score < 100  group by bank.branch_id  order by sum(loan.amount) desc limit 1",
        "question": "What is the name of the bank branch that has lended the largest total amount in loans, specifically to customers with credit scores below 100?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID",
        "question": "Find the name of bank branches that provided some loans.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from loan join bank on loan.branch_ID = bank.branch_ID",
        "question": "What are the names of the different banks that have provided loans?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select distinct bank.bname from loan join bank on loan.branch_ID = bank.branch_ID",
        "question": "What are the names of the different banks that have provided loans?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  loan.amount > 3000",
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select distinct customer.cust_name from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  loan.amount > 3000",
        "question": "Find the the name of the customers who have a loan with amount more than 3000.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select customer.cust_name from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  loan.amount > 3000",
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select distinct customer.cust_name from customer join bank on customer.branch_ID = bank.branch_ID join loan on bank.branch_ID = loan.branch_ID where  loan.amount > 3000",
        "question": "What are the names of customers who have a loan of more than 3000 in amount?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.city , bank.bname from loan join bank on loan.branch_ID = bank.branch_ID where  loan.loan_type = \"Business\"",
        "question": "Find the city and name of bank branches that provide business loans.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname , bank.city from loan join bank on loan.branch_ID = bank.branch_ID where  loan.loan_type = \"Business\"",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID where  customer.credit_score < 100",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select bank.bname from customer join bank on customer.branch_ID = bank.branch_ID where  customer.credit_score <= 100",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(loan.amount) from loan join bank on loan.branch_ID = bank.branch_ID where  bank.state = \"New York\"",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select sum(loan.amount) from loan join bank on loan.branch_ID = bank.branch_ID where  bank.state = \"New York\"",
        "question": "What is the total amount of money loaned by banks in New York state?",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(customer.credit_score) from customer where  customer.cust_id in (select loan.cust_ID from loan  )",
        "question": "Find the average credit score of the customers who have some loan.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(customer.credit_score) from customer where  customer.cust_id not in (select loan.cust_ID from loan  )",
        "question": "Find the average credit score of the customers who do not have any loan.",
        "correctness": 1
    },
    {
        "db_id": "loan_1",
        "query": "select avg(customer.credit_score) from customer where  customer.cust_id not in (select loan.cust_ID from loan  )",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select count(*) from debate",
        "question": "How many debates are there?",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select debate.venue from debate   order by debate.num_of_audience asc",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select debate.date , debate.venue from debate",
        "question": "What are the date and venue of each debate?",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select debate.date from debate where  debate.num_of_audience > 150",
        "question": "List the dates of debates with number of audience bigger than 150",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select people.name from people where  people.age = 35 or people.age = 36",
        "question": "Show the names of people aged either 35 or 36.",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select people.name from people where  people.age = \"35\" or people.age = \"36\"",
        "question": "Show the names of people aged either 35 or 36.",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select people.party from people   order by people.age asc limit 1",
        "question": "What is the party of the youngest people?",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select people.party from people where  people.age = (select min(people.age) from people  )",
        "question": "What is the party of the youngest people?",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select people.party , count(*) from people  group by people.party",
        "question": "Show different parties of people along with the number of people in each party.",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select people.party from people  group by people.party  order by count(*) desc limit 1",
        "question": "Show the party that has the most people.",
        "correctness": 1
    },
    {
        "db_id": "debate",
        "query": "select distinct debate.venue from debate",
        "question": "Show the distinct venues of debates",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select count(*) from railway",
        "question": "How many railways are there?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.builder from railway   order by railway.builder asc",
        "question": "List the builders of railways in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.wheels , railway.location from railway",
        "question": "List the wheels and locations of the railways.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select max(manager.level) from manager where  manager.country != \"Australien\"",
        "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select max(manager.level) from manager where  manager.country != \"Australian\"",
        "question": "What is the maximum level of managers in countries that are not \"Australia\"?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select avg(manager.age) from manager",
        "question": "What is the average age for all managers?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select manager.name from manager   order by manager.level asc",
        "question": "What are the names of managers in ascending order of level?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select train.name , train.arrival from train",
        "question": "What are the names and arrival times of trains?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select manager.name from manager   order by manager.age desc limit 1",
        "question": "What is the name of the oldest manager?",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select train.name , railway.location from train join railway on train.Railway_ID = railway.Railway_ID",
        "question": "Show the names of trains and locations of railways they are in.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.builder from train join railway on train.Railway_ID = railway.Railway_ID where  train.name = \"Andaman Exp\"",
        "question": "Show the builder of railways associated with the trains named \"Andaman Exp\".",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.railway_id , railway.location from train join railway on train.Railway_ID = railway.Railway_ID  group by train.railway_id having  count(*) > 1",
        "question": "Show id and location of railways that are associated with more than one train.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.railway_id , railway.location from train join railway on train.Railway_ID = railway.Railway_ID  group by railway.railway_id having  count(*) > 1",
        "question": "Show id and location of railways that are associated with more than one train.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.railway_id , railway.builder from train join railway on train.Railway_ID = railway.Railway_ID  group by train.railway_id  order by count(*) desc limit 1",
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.railway_id , railway.builder from train join railway on train.Railway_ID = railway.Railway_ID  group by railway.railway_id  order by count(*) desc limit 1",
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.builder , count(*) from railway  group by railway.builder",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.builder from railway  group by railway.builder  order by count(*) desc limit 1",
        "question": "Show the most common builder of railways.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.location , count(*) from railway  group by railway.location",
        "question": "Show different locations of railways along with the corresponding number of railways at each location.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.location from railway  group by railway.location having  count(*) > 1",
        "question": "Show the locations that have more than one railways.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.location from railway  group by railway.location having  count( distinct railway.railway) > 1",
        "question": "Show the locations that have more than one railways.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.objectnumber from railway where  railway.railway_id not in (select train.Railway_ID from train  )",
        "question": "List the object number of railways that do not have any trains.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select railway.objectnumber from railway   except select railway.objectnumber from train join railway on train.Railway_ID = railway.Railway_ID",
        "question": "List the object number of railways that do not have any trains.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select manager.country from manager where  manager.age > 50   intersect select manager.country from manager where  manager.age < 46",
        "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select manager.country from manager where  manager.age > 50   intersect select manager.country from manager where  manager.age <= 46",
        "question": "Show the countries that have both managers of age above 50 and managers of age below 46.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select distinct manager.country from manager",
        "question": "Show the distinct countries of managers.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select manager.working_year_starts from manager   order by manager.level desc",
        "question": "Show the working years of managers in descending order of their level.",
        "correctness": 1
    },
    {
        "db_id": "railway",
        "query": "select manager.country from manager where  manager.age > 50 or manager.age < 46",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count(*) from artist",
        "question": "How many artists are there?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count(*) from artist",
        "question": "Count the number of artists.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.age from artist",
        "question": "List the age of all music artists.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.age from artist",
        "question": "What are the ages of all music artists?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select avg(artist.age) from artist",
        "question": "What is the average age of all artists?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select avg(artist.age) from artist",
        "question": "Return the average age across all artists.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from artist where  artist.artist = \"Triumfall\"",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from artist where  artist.artist = \"Triumfall\"",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select distinct artist.famous_release_date from artist",
        "question": "What are the distinct Famous release dates?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select distinct artist.famous_release_date from artist",
        "question": "Give the distinct famous release dates for all artists.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony , music_festival.result from music_festival",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony , music_festival.result from music_festival",
        "question": "What are the dates of ceremony and results for each music festival?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category from music_festival where  music_festival.result = \"Awarded\"",
        "question": "What are the category of music festivals with result \"Awarded\"?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category from music_festival where  music_festival.result = \"Awarded\"",
        "question": "Return the categories of music festivals that have the result \"Awarded\".",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select max(volume.weeks_on_top) , min(volume.weeks_on_top) from volume",
        "question": "What are the maximum and minimum week on top of all volumes?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select max(volume.weeks_on_top) , min(volume.weeks_on_top) from volume",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume where  volume.weeks_on_top > 1",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume where  volume.weeks_on_top > 1",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume   order by volume.song asc",
        "question": "Please list all songs in volumes in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume   order by volume.song asc",
        "question": "What are the the songs in volumes, listed in ascending order?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count( distinct volume.artist_id) from volume",
        "question": "How many distinct artists do the volumes associate to?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count( distinct volume.artist_id) from volume",
        "question": "Count the number of distinct artists who have volumes.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival join volume on music_festival.Volume = volume.Volume_ID where  volume.weeks_on_top > 2",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival join volume on music_festival.Volume = volume.Volume_ID where  volume.weeks_on_top like \"%2%\"",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival join volume on music_festival.Volume = volume.Volume_ID where  volume.weeks_on_top > 2",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival join volume on music_festival.Volume = volume.Volume_ID where  volume.weeks_on_top like \"%2%\"",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival join volume on music_festival.Volume = volume.Volume_ID where  volume.weeks_on_top > 2  group by music_festival.volume",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival join volume on music_festival.Volume = volume.Volume_ID where  volume.weeks_on_top > 2  group by music_festival.music_festival",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from music_festival join volume on music_festival.Volume = volume.Volume_ID where  music_festival.result = \"Nominated\"",
        "question": "Please show the songs that have result \"nominated\" at music festivals.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.artist = \"Gorgoroth\"",
        "question": "What are the issue dates of volumes associated with the artist \"Gorgoroth\"?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.artist = \"Gorgoroth\"",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age >= 32",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age > 32",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age >= 32",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age > 32",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select avg(volume.weeks_on_top) from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age < 25",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select avg(volume.weeks_on_top) from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age <= 25",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select avg(volume.weeks_on_top) from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age < 25",
        "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select avg(volume.weeks_on_top) from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age <= 25",
        "question": "Return the average number of weeks on top for volumes by artists that are at most 25 years old.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID where  volume.weeks_on_top > 2",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID where  volume.weeks_on_top > 2",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.age , artist.famous_title from artist   order by artist.age desc",
        "question": "Please list the age and famous title of artists in descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title , artist.age from artist   order by artist.age desc",
        "question": "What are the famous titles and ages of each artist, listed in descending order by age?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_release_date from artist   order by artist.age desc limit 1",
        "question": "What is the famous release date of the artist with the oldest age?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_release_date from artist where  artist.age = (select max(artist.age) from artist  )",
        "question": "What is the famous release date of the artist with the oldest age?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_release_date from artist   order by artist.age desc limit 1",
        "question": "Return the famous release date for the oldest artist.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category , count(*) from music_festival  group by music_festival.category",
        "question": "Please show the categories of the music festivals and the count.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count(*) , music_festival.category from music_festival  group by music_festival.category",
        "question": "Return the number of music festivals of each category.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category , count(*) from music_festival  group by music_festival.category",
        "question": "Return the number of music festivals of each category.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.result from music_festival  group by music_festival.result  order by count(*) desc limit 1",
        "question": "What is the most common result of the music festival?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.result from music_festival  group by music_festival.result  order by count(*) desc limit 1",
        "question": "Return the result that is most frequent at music festivals.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category from music_festival  group by music_festival.category having  count(*) > 1",
        "question": "Please show the categories of the music festivals with count more than 1.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category from music_festival  group by music_festival.category having  count(music_festival.music_festival) > 1",
        "question": "Please show the categories of the music festivals with count more than 1.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.category from music_festival  group by music_festival.category having  count(*) > 1",
        "question": "What are the categories of music festivals for which there have been more than 1 music festival?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume   order by volume.weeks_on_top desc limit 1",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.song from volume   order by volume.weeks_on_top desc limit 1",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from artist where  artist.artist_id not in (select volume.Artist_ID from volume  )",
        "question": "Find the famous titles of artists that do not have any volume.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from artist   except select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID",
        "question": "Find the famous titles of artists that do not have any volume.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from artist   except select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from artist where  artist.artist_id not in (select volume.Artist_ID from volume  )",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID where  volume.weeks_on_top > 2   intersect select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID where  volume.weeks_on_top < 2",
        "question": "Show the famous titles of the artists with both volumes that lasted more than 2 weeks on top and volumes that lasted less than 2 weeks on top.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID where  volume.weeks_on_top > 2   intersect select artist.famous_title from volume join artist on volume.Artist_ID = artist.Artist_ID where  volume.weeks_on_top < 2",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival where  music_festival.category = \"Best Song\" and music_festival.result = \"Awarded\"",
        "question": "What are the date of ceremony of music festivals with category \"Best Song\" and result \"Awarded\"?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.date_of_ceremony from music_festival where  music_festival.category = \"Best Song\" and music_festival.result = \"Awarded\"",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume   order by volume.weeks_on_top asc limit 1",
        "question": "What is the issue date of the volume with the minimum weeks on top?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume   order by volume.weeks_on_top asc limit 1",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count( distinct volume.artist_id) from volume",
        "question": "How many distinct artists have volumes?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count( distinct volume.artist_id) from volume",
        "question": "Count the number of artists who have had volumes.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count( distinct artist.artist_id) from volume join artist on volume.Artist_ID = artist.Artist_ID",
        "question": "Count the number of artists who have had volumes.",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select music_festival.result , count(*) from music_festival  group by music_festival.result  order by count(*) desc",
        "question": "How many music festivals have had each kind of result, ordered descending by count?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select count(*) , music_festival.result from music_festival  group by music_festival.result  order by count(*) desc",
        "question": "How many music festivals have had each kind of result, ordered descending by count?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age < 23",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age <= 23",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age < 23",
        "question": "Return the issue dates of volumes by artists who are at most 23 years old?",
        "correctness": 1
    },
    {
        "db_id": "music_4",
        "query": "select volume.issue_date from volume join artist on volume.Artist_ID = artist.Artist_ID where  artist.age <= 23",
        "question": "Return the issue dates of volumes by artists who are at most 23 years old?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select count(*) from county",
        "question": "How many counties are there in total?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select count(*) from county",
        "question": "Count the total number of counties.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name , county.population from county",
        "question": "Show the county name and population of all counties.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name , county.population from county",
        "question": "What are the name and population of each county?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select avg(county.population) from county",
        "question": "Show the average population of all counties.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select avg(county.population) from county",
        "question": "On average how large is the population of the counties?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select max(county.population) , min(county.population) from county",
        "question": "Return the maximum and minimum population among all counties.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select max(county.population) , min(county.population) from county",
        "question": "What are the maximum and minimum population of the counties?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select distinct election.district from election",
        "question": "Show all the distinct districts for elections.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select distinct election.district from election",
        "question": "What are the distinct districts for elections?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.zip_code from county where  county.county_name = \"Howard\"",
        "question": "Show the zip code of the county with name \"Howard\".",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.zip_code from county where  county.county_name = \"Howard\"",
        "question": "What is the zip code the county named \"Howard\" is located in?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate from election where  election.district = 1",
        "question": "Show the delegate from district 1 in election.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate from election where  election.district = 1",
        "question": "Who is the delegate of district 1 in the elections?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , election.committee from election",
        "question": "Show the delegate and committee information of elections.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , election.committee from election",
        "question": "What are the delegate and committee information for each election record?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select count( distinct party.governor) from party",
        "question": "How many distinct governors are there?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select count( distinct party.governor) from party",
        "question": "Count the number of distinct governors.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.lieutenant_governor , party.comptroller from party where  party.party = \"Democratic\"",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.lieutenant_governor , party.comptroller from party where  party.party = \"Democratic\"",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select distinct party.year from party where  party.governor = \"Eliot Spitzer\"",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select distinct party.year from party where  party.governor = \"Eliot Spitzer\"",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select * from election",
        "question": "Show all the information about election.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select * from election",
        "question": "Return all the information for each election record.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , county.county_name from election join county on election.District = county.County_Id",
        "question": "Show the delegates and the names of county they belong to.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , county.county_name from election join county on election.District = county.County_Id",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate from election join county on election.District = county.County_Id where  county.population < 100000",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate from election join county on election.District = county.County_Id where  county.population <= 100000",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate from election join county on election.District = county.County_Id where  county.population < 100000",
        "question": "Find the delegates who are from counties with population below 100000.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate from election join county on election.District = county.County_Id where  county.population <= 100000",
        "question": "Find the delegates who are from counties with population below 100000.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select count( distinct election.delegate) from election join county on election.District = county.County_Id where  county.population > 50000",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select count( distinct election.delegate) from election join county on election.District = county.County_Id where  county.population > 50000",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from election join county on election.District = county.County_Id where  election.committee = \"Appropriations\"",
        "question": "What are the names of the county that the delegates on \"Appropriations\" committee belong to?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from election join county on election.District = county.County_Id where  election.committee = \"Appropriations\"",
        "question": "Which county do the delegates on \"Appropriations\" committee belong to? Give me the county names.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , party.party from election join party on election.Party = party.Party_ID",
        "question": "Show the delegates and the names of the party they belong to.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , party.party from election join party on election.Party = party.Party_ID  group by election.delegate",
        "question": "Show the delegates and the names of the party they belong to.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party , election.delegate from election join party on election.Party = party.Party_ID",
        "question": "For each delegate, find the names of the party they are part of.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.delegate , party.party from election join party on election.Party = party.Party_ID",
        "question": "For each delegate, find the names of the party they are part of.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.governor from election join party on election.Party = party.Party_ID where  election.district = 1",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.comptroller from election join party on election.Party = party.Party_ID where  election.district = 1 or election.district = 2",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.comptroller from election join party on election.Party = party.Party_ID where  election.district = \"1\" or election.district = \"2\"",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.comptroller from election join party on election.Party = party.Party_ID where  election.district = 1 or election.district = 2",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.committee from election join party on election.Party = party.Party_ID where  party.party = \"Democratic\"",
        "question": "Return all the committees that have delegates from Democratic party.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.committee from election join party on election.Party = party.Party_ID where  party.party = \"Democratic\"",
        "question": "Which committees have delegates from the Democratic party?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name , count(*) from election join county on election.District = county.County_Id  group by county.county_name",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name , count(*) from election join county on election.District = county.County_Id  group by county.county_id",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name , count(*) from election join county on election.District = county.County_Id  group by county.county_name",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party , count(*) from election join party on election.Party = party.Party_ID  group by election.party",
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party , count(*) from election join party on election.Party = party.Party_ID  group by election.party",
        "question": "For each party, return the name of the party and the number of delegates from that party.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.population asc",
        "question": "Return the names of all counties sorted by population in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.population asc",
        "question": "Sort the names of all counties in ascending order of population.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.county_name desc",
        "question": "Return the names of all counties sorted by county name in descending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.county_name desc",
        "question": "Sort the names of all counties in descending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.population desc limit 1",
        "question": "Show the name of the county with the biggest population.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.population desc limit 1",
        "question": "Which county has the largest population? Give me the name of the county.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.population asc limit 3",
        "question": "Show the 3 counties with the smallest population.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from county   order by county.population asc limit 3",
        "question": "What are the 3 counties that have the smallest population? Give me the county names.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from election join county on election.District = county.County_Id  group by county.county_name having  count(*) >= 2",
        "question": "Show the names of counties that have at least two delegates.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from election join county on election.District = county.County_Id  group by county.county_id having  count(*) >= 2",
        "question": "Show the names of counties that have at least two delegates.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from election join county on election.District = county.County_Id  group by county.county_name having  count(*) >= 2",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select county.county_name from election join county on election.District = county.County_Id  group by county.county_id having  count(*) >= 2",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from party  group by party.party having  count(*) >= 2",
        "question": "Show the name of the party that has at least two records.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from party  group by party.party having  count(*) >= 2",
        "question": "Which party has two or more records?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from election join party on election.Party = party.Party_ID  group by election.party  order by count(*) desc limit 1",
        "question": "Show the name of the party that has the most delegates.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from election join party on election.Party = party.Party_ID  group by election.party  order by count(*) desc limit 1",
        "question": "Which party has the largest number of delegates?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.governor from party  group by party.governor  order by count(*) desc limit 1",
        "question": "Show the people that have been governor the most times.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.governor from party  group by party.governor  order by count(*) desc limit 1",
        "question": "Which people severed as governor most frequently?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.comptroller , count(*) from party  group by party.comptroller  order by count(*) desc limit 1",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from party where  party.party_id not in (select election.Party from election  )",
        "question": "What are the names of parties that do not have delegates in election?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from party where  party.party_id not in (select election.Party from election  )",
        "question": "Which parties did not have any delegates in elections?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select party.party from election join party on election.Party = party.Party_ID where  election.committee = \"Appropriations\"   intersect select party.party from election join party on election.Party = party.Party_ID where  election.committee = \"Economic Matters\"",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.committee from election join party on election.Party = party.Party_ID where  party.party = \"Democratic\"   intersect select election.committee from election join party on election.Party = party.Party_ID where  party.party = \"Liberal\"",
        "question": "Which committees have delegates from both democratic party and liberal party?",
        "correctness": 1
    },
    {
        "db_id": "election",
        "query": "select election.committee from election join party on election.Party = party.Party_ID where  party.party = \"Democratic\"   intersect select election.committee from election join party on election.Party = party.Party_ID where  party.party = \"Liberal\"",
        "question": "Find the committees that have delegates both from from the democratic party and the liberal party.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select sum(college.enr) from College",
        "question": "What is the total enrollment number of all colleges?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(college.enr) from College",
        "question": "What is the average enrollment number?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from College",
        "question": "How many colleges in total?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from Player where  player.hs > 1000",
        "question": "How many players have more than 1000 hours of training?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from College where  college.enr > 15000",
        "question": "How many colleges has more than 15000 students?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from College where  college.enr > 15000",
        "question": "What is the number of colleges with a student population greater than 15000?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(player.hs) from Player",
        "question": "What is the average training hours of all players?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(player.hs) from Player",
        "question": "How many hours do the players train on average?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname , player.hs from Player where  player.hs < 1500",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname , player.hs from Player where  player.hs <= 1500",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct tryout.cname) from Tryout",
        "question": "How many different colleges do attend the tryout test?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct college.cname) from College",
        "question": "How many different colleges do attend the tryout test?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct tryout.cname) from Tryout",
        "question": "How many different colleges were represented at tryouts?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct college.cname) from College",
        "question": "How many different colleges were represented at tryouts?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct tryout.ppos) from Tryout",
        "question": "What are the unique types of player positions in the tryout?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from Tryout where  tryout.decision = \"yes\"",
        "question": "How many students received a yes from tryouts?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from Tryout where  tryout.ppos = \"goalie\"",
        "question": "How many students whose are playing the role of goalie?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from Tryout where  tryout.ppos = \"goalie\"",
        "question": "What is the number of students playing as a goalie?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select max(player.hs) , avg(player.hs) , min(player.hs) from Player",
        "question": "Find the max, average and min training hours of all players.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(player.hs) , max(player.hs) , min(player.hs) from Player",
        "question": "What is the average, maximum, and minimum for the number of hours spent training?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(college.enr) from College where  college.state = \"FL\"",
        "question": "What is average enrollment of colleges in the state FL?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.hs between 500 and 1500",
        "question": "What are the names of players whose training hours is between 500 and 1500?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.hs between 500 and 1500",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.pname like \"%a%\"",
        "question": "Find the players whose names contain letter 'a'.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.pname like \"%A%\"",
        "question": "Find the players whose names contain letter 'a'.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.pname like \"%a%\"",
        "question": "Who are the players that have names containing the letter a?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.pname like \"%A%\"",
        "question": "Who are the players that have names containing the letter a?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname , college.enr from College where  college.state = \"LA\" and college.state > 10000",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select * from College   order by college.enr asc",
        "question": "List all information about college sorted by enrollment number in the ascending order.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select * from College   order by college.enr asc",
        "question": "What information do you have on colleges sorted by increasing enrollment numbers?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.enr > 18000   order by college.cname asc",
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.enr > 18000  group by college.cname  order by college.cname asc",
        "question": "List the name of the colleges whose enrollment is greater 18000 sorted by the college's name.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.enr > 18000   order by college.cname asc",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.ycard = \"yes\"   order by player.hs desc",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Player where  player.ycard = \"yes\"   order by player.pname asc",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College   order by college.cname asc",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select distinct college.cname from College   order by college.cname asc",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College   order by college.cname asc",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select distinct college.cname from College   order by college.cname asc",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select distinct college.cname from Tryout join College on Tryout.cName = College.cName   order by tryout.cname asc",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select distinct tryout.cname from Tryout   order by tryout.cname asc",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select tryout.ppos from Tryout  group by tryout.ppos  order by count(*) desc limit 1",
        "question": "Which position is most popular among players in the tryout?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select tryout.ppos from Tryout join Player on Tryout.pID = Player.pID  group by tryout.ppos  order by count(*) desc limit 1",
        "question": "Which position is most popular among players in the tryout?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select tryout.ppos from Tryout  group by tryout.ppos  order by count(*) desc limit 1",
        "question": "What was the most popular position at tryouts?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) , college.cname from Tryout join College on Tryout.cName = College.cName  group by college.cname  order by count(*) desc",
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname , count(*) from Tryout join College on Tryout.cName = College.cName  group by college.cname  order by count(*) desc",
        "question": "Find the number of students who participate in the tryout for each college ordered by descending count.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname , count(*) from Tryout join College on Tryout.cName = College.cName  group by college.cname  order by count(*) desc",
        "question": "How many students participated in tryouts for each college by descennding count?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College   order by college.enr desc limit 3",
        "question": "What are the names of schools with the top 3 largest size?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from College   union select college.state from Tryout join College on Tryout.cName = College.cName",
        "question": "Find the states where have some college students in tryout.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select distinct college.state from Tryout join College on Tryout.cName = College.cName",
        "question": "What are the different states that have students trying out?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select distinct college.state from College",
        "question": "What are the different states that have students trying out?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.decision = \"yes\"",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname , college.cname from Tryout join College on Tryout.cName = College.cName join Player on Tryout.pID = Player.pID where  tryout.decision = \"yes\"",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"striker\"",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"striker\"",
        "question": "What are the states of the colleges where students who tried out for the striker position attend?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName join Player on Tryout.pID = Player.pID where  player.pname = \"Charles\"",
        "question": "Find the state of the college which player Charles is attending.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName join Player on Tryout.pID = Player.pID where  player.pname = \"Charles\"",
        "question": "In which state is the college that Charles attends?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(player.hs) , max(player.hs) from Tryout join Player on Tryout.pID = Player.pID where  tryout.decision = \"yes\"",
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select avg(player.hs) from Tryout join Player on Tryout.pID = Player.pID where  tryout.decision = \"no\"",
        "question": "Find the average hours for the students whose tryout decision is no.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select player.pname from Tryout join College on Tryout.cName = College.cName join Player on Tryout.pID = Player.pID   order by college.enr desc limit 1",
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.state = \"LA\" and college.state > 15000   union select college.cname from College where  college.state = \"AZ\" and college.enr < 13000",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"goalie\"   intersect select tryout.cname from Tryout where  tryout.ppos = \"mid\"",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"goalie\"   intersect select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"mid\"",
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from College where  college.cname in (select Tryout.cName from Tryout where  tryout.ppos = \"goalie\"   intersect select Tryout.cName from Tryout where  tryout.ppos = \"mid\"   )",
        "question": "How many schools have some students playing in goalie and mid positions.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"mid\"   except select tryout.cname from Tryout where  tryout.ppos = \"goalie\"",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"mid\"   except select tryout.cname from Tryout where  tryout.ppos = \"goalie\"",
        "question": "What are the names of the schools with some players in the mid position but no goalies?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"mid\"   except select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"goalie\"",
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"mid\"   except select college.state from Tryout join College on Tryout.cName = College.cName where  tryout.ppos = \"goalie\"",
        "question": "What are the names of all the states with college students playing in the mid position but no goalies?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from College where  college.cname in (select Tryout.cName from Tryout where  tryout.ppos = \"mid\"   except select Tryout.cName from Tryout where  tryout.ppos = \"goalie\"   )",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count(*) from College where  college.cname in (select Tryout.cName from Tryout where  tryout.ppos = \"mid\"   except select Tryout.cName from Tryout where  tryout.ppos = \"goalie\"   )",
        "question": "What is the count of states with college students playing in the mid position but not as goalies?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from College where  college.enr < (select max(college.enr) from College  )",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.state from College where  college.enr < (select max(college.enr) from College  )",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.enr > (select max(college.enr) from College where  college.state = \"FL\"  )",
        "question": "Find names of colleges with enrollment greater than that of some (at least one) college in the FL state.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.enr > (select max(college.enr) from College where  college.state = \"FL\"  )",
        "question": "Find names of all colleges whose enrollment is greater than that of all colleges in the FL state.",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select college.cname from College where  college.enr > (select max(college.enr) from College where  college.state = \"FL\"  )",
        "question": "What are the names of all colleges with a larger enrollment than the largest college in Florida?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct college.state) from College where  college.enr > (select avg(college.enr) from College  )",
        "question": "What is the number of states that has some college whose enrollment is larger than the average enrollment?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct college.state) from College where  college.enr > (select avg(college.enr) from College  )",
        "question": "How many states have a college with more students than average?",
        "correctness": 1
    },
    {
        "db_id": "soccer_2",
        "query": "select count( distinct college.state) from College where  college.enr < (select avg(college.enr) from College  )",
        "question": "What is the number of states that has some colleges whose enrollment is smaller than the average enrollment?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct actor.last_name) from actor",
        "question": "How many different last names do the actors and actresses have?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct actor.last_name) from actor   union select count( distinct actor.last_name) from film_actor join actor on film_actor.actor_id = actor.actor_id",
        "question": "How many different last names do the actors and actresses have?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct actor.last_name) from film_actor join actor on film_actor.actor_id = actor.actor_id",
        "question": "How many different last names do the actors and actresses have?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct actor.last_name) from actor   union select count( distinct actor.last_name) from actor",
        "question": "How many different last names do the actors and actresses have?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct actor.last_name) from actor",
        "question": "Count the number of different last names actors have.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name from actor  group by actor.first_name  order by count(*) desc limit 1",
        "question": "What is the most popular first name of the actors?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name from actor  group by actor.first_name  order by count(*) desc limit 1",
        "question": "Return the most common first name among all actors.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name from actor  group by actor.first_name, actor.last_name  order by count(*) desc limit 1",
        "question": "Return the most common full name among all actors.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.district from address  group by address.district having  count(*) >= 2",
        "question": "Which districts have at least two addresses?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.district from address  group by address.district having  count(address.address) >= 2",
        "question": "Which districts have at least two addresses?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.district from address  group by address.district having  count(*) >= 2",
        "question": "Give the districts which have two or more addresses.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.phone , address.postal_code from address where  address.address = \"1031 Daugavpils Parkway\"",
        "question": "What is the phone number and postal code of the address 1031 Daugavpils Parkway?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.phone , address.postal_code from address where  address.address = \"1031 Daugavpils Parkway\"",
        "question": "Give the phone and postal code corresponding to the address '1031 Daugavpils Parkway'.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , count(*) , address.city_id from address join city on address.city_id = city.city_id  group by address.city_id  order by count(*) desc limit 1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , count(*) , city.city_id from address join city on address.city_id = city.city_id  group by address.city_id  order by count(*) desc limit 1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , count(*) , address.city_id from address join city on address.city_id = city.city_id  group by address.city_id  order by count(address.address) desc limit 1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , count(*) , city.city_id from address join city on address.city_id = city.city_id  group by city.city_id  order by count(*) desc limit 1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , address.city_id , count(*) from address join city on address.city_id = city.city_id  group by address.city_id  order by count(*) desc limit 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , city.city_id , count(*) from address join city on address.city_id = city.city_id  group by address.city_id  order by count(*) desc limit 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , address.city_id , count(*) from address join city on address.city_id = city.city_id  group by city.city_id  order by count(*) desc limit 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , address.city_id , count(*) from address join city on address.city_id = city.city_id  group by address.city_id  order by count(address.address) desc limit 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select city.city , city.city_id , count(*) from address join city on address.city_id = city.city_id  group by city.city_id  order by count(*) desc limit 1",
        "question": "What are the city name, id, and number of addresses corresponding to the city with the most addressed?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from address where  address.district = \"California\"",
        "question": "How many addresses are in the district of California?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from address where  address.district = \"California\"",
        "question": "Count the number of addressed in the California district.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from city join country on city.country_id = country.country_id where  country.country = \"Australia\"",
        "question": "How many cities are in Australia?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from city join country on city.country_id = country.country_id where  country.country = \"Australia\"",
        "question": "Count the number of cities in Australia.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select country.country from city join country on city.country_id = country.country_id  group by country.country having  count(*) >= 3",
        "question": "Which countries have at least 3 cities?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select country.country from city join country on city.country_id = country.country_id  group by city.country_id having  count(*) >= 3",
        "question": "Which countries have at least 3 cities?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select country.country from city join country on city.country_id = country.country_id  group by country.country_id having  count(*) >= 3",
        "question": "Which countries have at least 3 cities?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select country.country from city join country on city.country_id = country.country_id  group by country.country having  count(*) >= 3",
        "question": "What are the countries that contain 3 or more cities?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select country.country from city join country on city.country_id = country.country_id  group by city.country_id having  count(*) >= 3",
        "question": "What are the countries that contain 3 or more cities?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select country.country from city join country on city.country_id = country.country_id  group by country.country_id having  count(*) >= 3",
        "question": "What are the countries that contain 3 or more cities?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.payment_date from payment where  payment.amount > 10   union select payment.payment_date from payment join staff on payment.staff_id = staff.staff_id where  staff.first_name = \"Elsa\"",
        "question": "Find all the payment dates for the payments with an amount larger than 10 and the payments handled by a staff person with the first name Elsa.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.payment_date from payment where  payment.amount > 10   union select payment.payment_date from payment join staff on payment.staff_id = staff.staff_id where  staff.first_name = \"Elsa\"",
        "question": "What are the payment dates for any payments that have an amount greater than 10 or were handled by a staff member with the first name Elsa?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from customer where  customer.active = 1",
        "question": "How many customers have an active value of 1?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from customer where  customer.active = 1",
        "question": "Count the number of customers who are active.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.rental_rate from film   order by film.rental_rate desc limit 1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.rental_rate from film  group by film.film_id  order by film.rental_rate desc limit 1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.rental_rate from film   order by film.rental_rate desc limit 1",
        "question": "What are the title and rental rate of the film with the highest rental rate?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id  group by film.film_id  order by count(*) desc limit 1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id  group by film_actor.film_id  order by count(*) desc limit 1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id  group by film.title  order by count(*) desc limit 1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id join actor on film_actor.actor_id = actor.actor_id  group by film.film_id  order by count(*) desc limit 1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id  group by film.film_id  order by count(*) desc limit 1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id  group by film_actor.film_id  order by count(*) desc limit 1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id , film.description from film_actor join film on film_actor.film_id = film.film_id  group by film.title  order by count(*) desc limit 1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name , film_actor.actor_id from film_actor join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id  order by count(*) desc limit 1",
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name , actor.actor_id from film_actor join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id  order by count(*) desc limit 1",
        "question": "Which film actor (actress) starred the most films? List his or her first name, last name and actor id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name , film_actor.actor_id from film_actor join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id  order by count(*) desc limit 1",
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name , actor.actor_id from film_actor join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id  order by count(*) desc limit 1",
        "question": "Return the full name and id of the actor or actress who starred in the greatest number of films.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name from film_actor join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id having  count(*) > 30",
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name from film_actor join actor on film_actor.actor_id = actor.actor_id  group by actor.actor_id having  count(*) > 30",
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name from film_actor join film on film_actor.film_id = film.film_id join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id having  count(*) > 30",
        "question": "Which film actors (actresses) played a role in more than 30 films? List his or her first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name from film_actor join actor on film_actor.actor_id = actor.actor_id  group by film_actor.actor_id having  count(*) > 30",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select actor.first_name , actor.last_name from film_actor join actor on film_actor.actor_id = actor.actor_id  group by actor.actor_id having  count(*) > 30",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select inventory.store_id from inventory  group by inventory.store_id  order by count(*) desc limit 1",
        "question": "What is the id of the store that has the most items in inventory?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select inventory.store_id from inventory  group by inventory.store_id  order by sum(inventory.inventory_id) desc limit 1",
        "question": "What is the id of the store that has the most items in inventory?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select sum(payment.amount) from payment",
        "question": "What is the total amount of all payments?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select sum(payment.amount) from payment",
        "question": "Return the sum of all payment amounts.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name , customer.customer_id from payment join customer on payment.customer_id = customer.customer_id  group by payment.customer_id having  count(*) >= 1  order by sum(payment.amount) asc limit 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name , customer.customer_id from payment join customer on payment.customer_id = customer.customer_id  group by customer.customer_id having  count(*) >= 1  order by sum(payment.amount) asc limit 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name , customer.customer_id from payment join customer on payment.customer_id = customer.customer_id  group by customer.customer_id  order by sum(payment.amount) asc limit 1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name , customer.customer_id from payment join customer on payment.customer_id = customer.customer_id  group by payment.customer_id  order by sum(payment.amount) asc limit 1",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name , payment.customer_id from payment join customer on payment.customer_id = customer.customer_id  group by payment.customer_id  order by sum(payment.amount) asc limit 1",
        "question": "What is the full name and id of the customer who has the lowest total amount of payment?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select category.name from film_category join category on film_category.category_id = category.category_id join film on film_category.film_id = film.film_id where  film.title = \"HUNGER ROOF\"",
        "question": "Return the name of the category to which the film 'HUNGER ROOF' belongs.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select category.name , film_category.category_id , count(*) from film_category join category on film_category.category_id = category.category_id  group by film_category.category_id",
        "question": "How many films are there in each category? List the genre name, genre id and the count.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select category.name , film_category.category_id , count(*) from film_category join category on film_category.category_id = category.category_id  group by film_category.category_id",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select category.name , category.category_id , count(*) from film_category join category on film_category.category_id = category.category_id  group by film_category.category_id",
        "question": "What are the names and ids of the different categories, and how many films are in each?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id from inventory join film on inventory.film_id = film.film_id  group by inventory.film_id  order by count(*) desc limit 1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id from inventory join film on inventory.film_id = film.film_id  group by inventory.film_id  order by count(*) desc limit 1",
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , film.film_id from inventory join film on inventory.film_id = film.film_id  group by film.film_id  order by count(*) desc limit 1",
        "question": "What is the title and id of the film that has the greatest number of copies in inventory?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , inventory.inventory_id from inventory join film on inventory.film_id = film.film_id where  inventory.inventory_id in (select rental.inventory_id from rental  group by rental.inventory_id  order by count(*) desc limit 1 )",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , inventory.inventory_id from rental join inventory on rental.inventory_id = inventory.inventory_id join film on inventory.film_id = film.film_id  group by rental.inventory_id  order by count(*) desc limit 1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title , inventory.inventory_id from rental join inventory on rental.inventory_id = inventory.inventory_id join film on inventory.film_id = film.film_id  group by rental.inventory_id  order by count(*) desc limit 1",
        "question": "Return the title and inventory id of the film that is rented most often.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct film.language_id) from film",
        "question": "How many languages are in these films?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct film.language_id) from film",
        "question": "Count the number of different languages in these films.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.rating = \"R\"",
        "question": "What are all the movies rated as R? List the titles.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.rating = \"R\"",
        "question": "Return the titles of any movies with an R rating.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address from store join address on store.address_id = address.address_id where  store.store_id = 1",
        "question": "Return the address of store 1.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select staff.first_name , staff.last_name , payment.staff_id from payment join staff on payment.staff_id = staff.staff_id  group by payment.staff_id  order by count(*) asc limit 1",
        "question": "Which staff handled least number of payments? List the full name and the id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select staff.first_name , staff.last_name , staff.staff_id from payment join staff on payment.staff_id = staff.staff_id  group by payment.staff_id  order by count(*) asc limit 1",
        "question": "Which staff handled least number of payments? List the full name and the id.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select staff.first_name , staff.last_name , payment.staff_id from payment join staff on payment.staff_id = staff.staff_id  group by payment.staff_id  order by count(*) asc limit 1",
        "question": "Give the full name and staff id of the staff who has handled the fewest payments.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select staff.first_name , staff.last_name , staff.staff_id from payment join staff on payment.staff_id = staff.staff_id  group by payment.staff_id  order by count(*) asc limit 1",
        "question": "Give the full name and staff id of the staff who has handled the fewest payments.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select language.name from film join language on film.original_language_id = language.language_id where  film.title = \"AIRPORT POLLOCK\"",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select language.name from film join language on film.original_language_id = language.language_id where  film.title = \"AIRPORT POOLLOCK\"",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select language.name from film join language on film.original_language_id = language.language_id where  film.title = \"AIRPORT POLOCK\"",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select language.name from film join language on film.original_language_id = language.language_id where  film.title = \"AIRPORT POLLOCK\"",
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select language.name from film join language on film.original_language_id = language.language_id where  film.title = \"AIRPORT POOLLOCK\"",
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select language.name from film join language on film.original_language_id = language.language_id where  film.title = \"AIRPORT POLOCK\"",
        "question": "What is the name of the language that the film 'AIRPORT POLLOCK' is in?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from store",
        "question": "How many stores are there?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from store",
        "question": "Count the number of stores.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct film.rating) from film",
        "question": "How many kinds of different ratings are listed?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count( distinct film.rating) from film",
        "question": "Count the number of different film ratings.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.special_features like \"%Deleted Scenes%\"",
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.special_features like \"%Deleted Scenes%\"",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.special_features like \"%Deleted Scene%\"",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from inventory where  inventory.store_id = 1",
        "question": "How many items in inventory does store 1 have?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from inventory where  inventory.inventory_id in (select inventory.inventory_id from inventory where  inventory.store_id = 1  )",
        "question": "How many items in inventory does store 1 have?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from inventory where  inventory.store_id = 1",
        "question": "Count the number of items store 1 has in stock.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select count(*) from inventory where  inventory.inventory_id in (select inventory.inventory_id from inventory where  inventory.store_id = 1  )",
        "question": "Count the number of items store 1 has in stock.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.payment_date from payment   order by payment.payment_date asc limit 1",
        "question": "When did the first payment happen?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.payment_date from payment where  payment.payment_date = (select payment.payment_date from payment   order by payment.payment_date asc limit 1 )",
        "question": "When did the first payment happen?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.payment_date from payment   order by payment.payment_date asc limit 1",
        "question": "What was the date of the earliest payment?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address , customer.email from customer join address on customer.address_id = address.address_id where  customer.first_name = \"LINDA\"",
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address , customer.email from customer join address on customer.address_id = address.address_id where  customer.first_name = \"LINDA\"",
        "question": "Return the address and email of the customer with the first name Linda.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.length > 100 or film.rating = \"PG\"   except select film.title from film where  film.replacement_cost > 200",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.length > 100 or film.rating = \"PG\"",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select film.title from film where  film.length > 100 or film.rating = \"PG\"   except select film.title from film where  film.replacement_cost > 200",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name from rental join customer on rental.customer_id = customer.customer_id   order by rental.rental_date asc limit 1",
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.first_name , customer.last_name from rental join customer on rental.customer_id = customer.customer_id   order by rental.rental_date asc limit 1",
        "question": "Return the full name of the customer who made the first rental.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select customer.store_id from customer  group by customer.store_id  order by count(*) desc limit 1",
        "question": "Return the id of the store with the most customers.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.amount from payment   order by payment.amount desc limit 1",
        "question": "What is the largest payment amount?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select payment.amount from payment   order by payment.amount desc limit 1",
        "question": "Return the amount of the largest payment.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address from staff join address on staff.address_id = address.address_id where  staff.first_name = \"Elsa\"",
        "question": "Where does the staff member with the first name Elsa live?",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address from staff join address on staff.address_id = address.address_id where  staff.first_name = \"Elsa\"",
        "question": "Give the address of the staff member who has the first name Elsa.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address from staff join address on staff.address_id = address.address_id where  staff.first_name = \"Ella\"",
        "question": "Give the address of the staff member who has the first name Elsa.",
        "correctness": 1
    },
    {
        "db_id": "sakila_1",
        "query": "select address.address from staff join address on staff.address_id = address.address_id where  staff.first_name = \"Else\"",
        "question": "Give the address of the staff member who has the first name Elsa.",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select count(*) from flight where  flight.velocity > 200",
        "question": "How many flights have a velocity larger than 200?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select flight.vehicle_flight_number , flight.date , flight.pilot from flight   order by flight.altitude asc",
        "question": "List the vehicle flight number, date and pilot of all the flights, ordered by altitude.",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.id , airport.country , airport.city , airport.name from airport   order by airport.name asc",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select max(operate_company.group_equity_shareholding) from operate_company",
        "question": "What is maximum group equity shareholding of the companies?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select operate_company.name , operate_company.type from flight join operate_company on flight.company_id = operate_company.id",
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.name from airport where  airport.country != \"Iceland\"",
        "question": "What are the names of the airports which are not in the country 'Iceland'?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select distinct operate_company.type from flight join operate_company on flight.company_id = operate_company.id where  flight.velocity < 200",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select distinct operate_company.type from flight join operate_company on flight.company_id = operate_company.id where  flight.velocity <= 200",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select flight.company_id , operate_company.name from flight join operate_company on flight.company_id = operate_company.id  group by flight.company_id having  count(*) > 1",
        "question": "What are the ids and names of the companies that operated more than one flight?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.id , airport.name , airport.iata from flight join airport on flight.airport_id = airport.id  group by flight.id  order by count(*) desc limit 1",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select distinct flight.pilot from flight join airport on flight.airport_id = airport.id where  airport.country = \"United States\" or airport.name = \"Billund Airport\"",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select distinct flight.pilot from flight join airport on flight.airport_id = airport.id where  airport.country = \"United States\" or airport.name = \"Billind Airport\"",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select operate_company.type , count(*) from operate_company  group by operate_company.type  order by count(*) desc limit 1",
        "question": "What is the most common company type, and how many are there?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select count(*) from flight join airport on flight.airport_id = airport.id where  flight.pilot != \"Thompson\"",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select count(*) from airport where  airport.id not in (select flight.airport_id from flight where  flight.pilot = \"Thompson\"  )",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select flight.pilot from flight join operate_company on flight.company_id = operate_company.id where  operate_company.principal_activities = \"Cargo\"   intersect select flight.pilot from flight join operate_company on flight.company_id = operate_company.id where  operate_company.principal_activities = \"Catering services\"",
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.name from airport where  airport.name like \"%international%\"",
        "question": "Which of the airport names contains the word 'international'?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.name from airport where  airport.name like \"%International%\"",
        "question": "Which of the airport names contains the word 'international'?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.name from airport where  airport.name like \"% international%\"",
        "question": "Which of the airport names contains the word 'international'?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.country , count(*) from airport  group by airport.country",
        "question": "how many airports are there in each country?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select count(*) , airport.country from airport  group by airport.country",
        "question": "how many airports are there in each country?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select airport.country from airport  group by airport.country having  count(*) > 2",
        "question": "which countries have more than 2 airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select flight.pilot from flight  group by flight.pilot  order by count(*) desc limit 1",
        "question": "which pilot is in charge of the most number of flights?",
        "correctness": 1
    },
    {
        "db_id": "flight_company",
        "query": "select flight.pilot from flight join airport on flight.airport_id = airport.id  group by flight.pilot  order by count(*) desc limit 1",
        "question": "which pilot is in charge of the most number of flights?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select department.head from Department  group by department.head  order by count(*) asc limit 1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select department.head from Department  group by department.departmentid  order by count(*) asc limit 1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select department.head from Department  group by department.head  order by count(*) asc limit 1",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select department.head from Department  group by department.departmentid  order by count(*) asc limit 1",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select department.head from Department where  department.departmentid = (select min(department.departmentid) from Department  )",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Appointment join Patient on Appointment.Patient = Patient.SSN",
        "question": "What are names of patients who made an appointment?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Appointment join Patient on Appointment.Patient = Patient.SSN",
        "question": "List the names of patients who have made appointments.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name , patient.phone from Appointment join Patient on Appointment.Patient = Patient.SSN  group by appointment.patient having  count(*) > 1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name , patient.phone from Appointment join Patient on Appointment.Patient = Patient.SSN  group by appointment.patient having  count( distinct appointment.appointmentid) > 1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name , patient.phone from Appointment join Patient on Appointment.Patient = Patient.SSN  group by appointment.patient having  count(*) > 1",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select appointment.appointmentid from Appointment   order by appointment.start desc limit 1",
        "question": "Find the id of the appointment with the most recent start date?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select appointment.appointmentid from Appointment   order by appointment.start desc limit 1",
        "question": "What is the id of the appointment that started most recently?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Appointment join Physician on Appointment.Physician = Physician.EmployeeID",
        "question": "List the name of physicians who took some appointment.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Appointment join Physician on Appointment.Physician = Physician.EmployeeID",
        "question": "What are the names of all the physicians who took appointments.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician where  physician.employeeid not in (select Appointment.Physician from Appointment  )",
        "question": "List the name of physicians who never took any appointment.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician   except select physician.name from Appointment join Physician on Appointment.Physician = Physician.EmployeeID",
        "question": "List the name of physicians who never took any appointment.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician where  physician.employeeid not in (select Appointment.Physician from Appointment  )",
        "question": "Which physicians have never taken any appointment? Find their names.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician   except select physician.name from Appointment join Physician on Appointment.Physician = Physician.EmployeeID",
        "question": "Which physicians have never taken any appointment? Find their names.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Appointment join Patient on Appointment.Patient = Patient.SSN   order by appointment.start desc limit 1",
        "question": "Find the name of the patient who made the appointment with the most recent start date.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count( distinct prescribes.patient) from Prescribes join Physician on Prescribes.Physician = Physician.EmployeeID where  physician.name = \"John Dorian\"",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select medication.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Patient on Prescribes.Patient = Patient.SSN join Stay on Patient.SSN = Stay.Patient where  stay.room = 111",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select medication.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Patient on Prescribes.Patient = Patient.SSN join Stay on Patient.SSN = Stay.Patient where  stay.room = \"111\"",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select medication.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Patient on Prescribes.Patient = Patient.SSN join Stay on Patient.SSN = Stay.Patient where  stay.room = 111",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select medication.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Patient on Prescribes.Patient = Patient.SSN join Stay on Patient.SSN = Stay.Patient where  stay.room = \"111\"",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Appointment join Nurse on Appointment.PrepNurse = Nurse.EmployeeID  group by nurse.name  order by count(*) desc limit 1",
        "question": "What is the name of the nurse has the most appointments?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Appointment join Nurse on Appointment.PrepNurse = Nurse.EmployeeID  group by appointment.prepnurse  order by count(*) desc limit 1",
        "question": "What is the name of the nurse has the most appointments?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Appointment join Nurse on Appointment.PrepNurse = Nurse.EmployeeID  group by appointment.prepnurse  order by count(*) desc limit 1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Appointment join Nurse on Appointment.PrepNurse = Nurse.EmployeeID  group by nurse.position, nurse.name  order by count(*) desc limit 1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Appointment join Nurse on Appointment.PrepNurse = Nurse.EmployeeID  group by nurse.name  order by count(*) desc limit 1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name , count(*) from Patient join Physician on Patient.PCP = Physician.EmployeeID  group by physician.name",
        "question": "How many patients do each physician take care of? List their names and number of patients they take care of.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Patient join Physician on Patient.PCP = Physician.EmployeeID  group by physician.name having  count(*) > 1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Patient join Physician on Patient.PCP = Physician.EmployeeID  group by physician.name having  count(*) > 1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select room.blockfloor , count(*) from Room  group by room.blockfloor",
        "question": "Find the number of rooms located on each block floor.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) , room.blockfloor from Room  group by room.blockfloor",
        "question": "Find the number of rooms located on each block floor.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select room.blockfloor , count(*) from Room  group by room.blockfloor",
        "question": "How many rooms does each block floor have?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select room.blockcode , count(*) from Room  group by room.blockcode",
        "question": "Find the number of rooms for different block code?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) , room.blockcode from Room  group by room.blockcode",
        "question": "Find the number of rooms for different block code?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select room.blockcode , count(*) from Room  group by room.blockcode",
        "question": "How many rooms are located for each block code?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) , room.blockcode from Room  group by room.blockcode",
        "question": "How many rooms are located for each block code?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct room.blockcode from Room where  room.unavailable = 1",
        "question": "What are the unique block codes that have available rooms?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct room.blockcode from Room",
        "question": "What are the unique block codes that have available rooms?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct room.blockcode from Room   union select distinct room.blockcode from Room",
        "question": "What are the unique block codes that have available rooms?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct room.blockcode from Room",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct room.blockcode from Room where  room.unavailable = 1",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count( distinct room.roomtype) from Room",
        "question": "How many different types of rooms are there?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count( distinct room.roomtype) from Room",
        "question": "Find the number of distinct room types available.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name , physician.position from Prescribes join Medication on Prescribes.Medication = Medication.Code join Physician on Prescribes.Physician = Physician.EmployeeID where  medication.brand = \"X\"",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.position , physician.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Physician on Prescribes.Physician = Physician.EmployeeID where  medication.brand = \"X\"",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name , physician.position from Prescribes join Medication on Prescribes.Medication = Medication.Code join Physician on Prescribes.Physician = Physician.EmployeeID where  medication.brand = \"X\"",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.position , physician.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Physician on Prescribes.Physician = Physician.EmployeeID where  medication.brand = \"X\"",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician where  physician.position like \"%senior%\"",
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician where  physician.position like \"%Senior%\"",
        "question": "Find the name of physicians whose position title contains the word 'senior'.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Physician where  physician.position like \"%senior%\"",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct nurse.name from Nurse   order by nurse.name asc",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Nurse   order by nurse.name asc",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct nurse.name from Nurse   order by nurse.name asc",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Nurse   order by nurse.name asc",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.name from Nurse   union select nurse.name from Undergoes join Nurse on Undergoes.AssistingNurse = Nurse.EmployeeID",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct medication.name from Medication   order by medication.name asc",
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select medication.name from Medication   order by medication.name asc",
        "question": "List the names of all distinct medications, ordered in an alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct medication.name from Medication   order by medication.name asc",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select medication.name from Medication   order by medication.name asc",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Prescribes join Physician on Prescribes.Physician = Physician.EmployeeID   order by prescribes.dose desc limit 1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Prescribes join Physician on Prescribes.Physician = Physician.EmployeeID   order by prescribes.dose desc limit 1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select department.name from Affiliated_With join Department on Affiliated_With.Department = Department.DepartmentID  group by department.name",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select nurse.employeeid from On_Call join Nurse on On_Call.Nurse = Nurse.EmployeeID where  on_call.blockfloor = 1 and on_call.blockcode = 1",
        "question": "Find the ids of the nurses who are on call in block floor 1 and block code 1.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select max(procedures.cost) , min(procedures.cost) , avg(procedures.cost) from Procedures",
        "question": "What are the highest cost, lowest cost and average cost of procedures?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select max(procedures.cost) , min(procedures.cost) , avg(procedures.cost) from Procedures",
        "question": "Tell me the highest, lowest, and average cost of procedures.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select procedures.name , procedures.cost from Procedures   order by procedures.cost desc",
        "question": "List the name and cost of all procedures sorted by the cost from the highest to the lowest.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select procedures.name , procedures.cost from Procedures   order by procedures.cost desc",
        "question": "Sort the list of names and costs of all procedures in the descending order of cost.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  procedures.cost = (select max(Procedures.Cost) from Procedures  )",
        "question": "Find the physician who was trained in the most expensive procedure?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select physician.name from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID   order by procedures.cost desc limit 1",
        "question": "Find the physician who was trained in the most expensive procedure?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select avg(procedures.cost) from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  physician.name = \"John Wen\"",
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select avg(procedures.cost) from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  physician.name = \"John Wen\" or trained_in.physician = 1",
        "question": "What is the average cost of procedures that physician John Wen was trained in?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select procedures.name from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  physician.name = \"John Wen\"",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select procedures.name from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  physician.name = \"John Wen\" or trained_in.physician = 1",
        "question": "Find the names of procedures which physician John Wen was trained in.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select procedures.name from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  physician.name = \"John Wen\"",
        "question": "What are the names of procedures physician John Wen was trained in?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select procedures.name from Trained_In join Procedures on Trained_In.Treatment = Procedures.Code join Physician on Trained_In.Physician = Physician.EmployeeID where  procedures.cost < 5000 and physician.name = \"John Wen\"",
        "question": "Find the names of all procedures such that the cost is less than 5000 and physician John Wen was trained in.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Patient   except select patient.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Patient on Prescribes.Patient = Patient.SSN where  medication.name = \"Procrastin-X\"",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Patient where  patient.ssn not in (select Prescribes.Patient from Prescribes join Medication on Prescribes.Medication = Medication.Code where  medication.name = \"Procrastin-X\"  )",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Patient   except select patient.name from Prescribes join Medication on Prescribes.Medication = Medication.Code join Patient on Prescribes.Patient = Patient.SSN where  medication.name = \"Procrastin-X\"",
        "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select patient.name from Patient where  patient.ssn not in (select Prescribes.Patient from Prescribes join Medication on Prescribes.Medication = Medication.Code where  medication.name = \"Procrastin-X\"  )",
        "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) from Patient where  patient.ssn not in (select Prescribes.Patient from Prescribes join Medication on Prescribes.Medication = Medication.Code where  medication.name = \"Procrastin-X\"  )",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) from Patient where  patient.ssn not in (select Prescribes.Patient from Prescribes join Medication on Prescribes.Medication = Medication.Code where  medication.name != \"Procrastin-X\"  )",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) from Patient where  patient.ssn not in (select Prescribes.Patient from Prescribes join Medication on Prescribes.Medication = Medication.Code where  medication.name != \"Procrastin-X\"  )",
        "question": "How many patients are not using Procrastin-X as medication?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) from Patient where  patient.ssn not in (select Prescribes.Patient from Prescribes join Medication on Prescribes.Medication = Medication.Code where  medication.name = \"Procrastin-X\"  )",
        "question": "How many patients are not using Procrastin-X as medication?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) from Appointment",
        "question": "How many appointments are there?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select count(*) from Appointment",
        "question": "Count how many appointments have been made in total.",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct nurse.name from Nurse",
        "question": "What are the distinct names of nurses on call?",
        "correctness": 1
    },
    {
        "db_id": "hospital_1",
        "query": "select distinct nurse.name from On_Call join Nurse on On_Call.Nurse = Nurse.EmployeeID",
        "question": "What are the distinct names of nurses on call?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) from enzyme",
        "question": "How many kinds of enzymes are there?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) from enzyme",
        "question": "What is the total count of enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme   order by enzyme.name desc",
        "question": "List the name of enzymes in descending lexicographical order.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme   order by enzyme.name desc",
        "question": "What are the names of enzymes in descending order?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name , enzyme.location from enzyme",
        "question": "List the names and the locations that the enzymes can make an effect.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name , enzyme.location from enzyme",
        "question": "What are the names and locations of all enzymes listed?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select max(enzyme.omim) from enzyme",
        "question": "What is the maximum Online Mendelian Inheritance in Man (OMIM) value of the enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select max(enzyme.omim) from enzyme",
        "question": "What is the maximum OMIM value in the database?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.product , enzyme.chromosome , enzyme.porphyria from enzyme where  enzyme.location = \"Cytosol\"",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.product , enzyme.chromosome , enzyme.porphyria from enzyme where  enzyme.location = \"Cytosol\"",
        "question": "What is the product, chromosome, and porphyria of the enzymes located at 'Cytosol'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.product != \"Heme\"",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.product != \"Heme\"",
        "question": "What are the names of enzymes whose product is not 'Heme'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine.trade_name from medicine where  medicine.fda_approved = \"Yes\"",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine.trade_name from medicine where  medicine.fda_approved = \"Yes\"",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id join enzyme on medicine_enzyme_interaction.enzyme_id = enzyme.id where  medicine.name = \"Amisulpride\" and medicine_enzyme_interaction.interaction_type = \"inhibitor\"",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id join enzyme on medicine_enzyme_interaction.enzyme_id = enzyme.id where  medicine.name = \"Amisulpride\" and medicine_enzyme_interaction.interaction_type = \"inhibitor\"",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) >= 2",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.medicine_id , medicine.name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) >= 2",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine.id from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) > 1",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine_enzyme_interaction.medicine_id from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) > 1",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.name , medicine.fda_approved from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id  order by count(*) desc",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.name , medicine.fda_approved from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine.id  order by count(*) desc",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.medicine_id , medicine.name , medicine.fda_approved from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id  order by count(*) desc",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.name , medicine.fda_approved from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id  order by count(*) desc",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.name , medicine.fda_approved from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine.id  order by count(*) desc",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.interaction_type from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id join enzyme on medicine_enzyme_interaction.enzyme_id = enzyme.id where  enzyme.name = \"ALA synthase\" and medicine.name = \"Aripiprazole\"",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.interaction_type from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id join enzyme on medicine_enzyme_interaction.enzyme_id = enzyme.id where  enzyme.name = \"ALA synthase\" and medicine.name = \"Aripiprazole\"",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.interaction_type , count(*) from medicine_enzyme_interaction  group by medicine_enzyme_interaction.interaction_type  order by count(*) desc limit 1",
        "question": "What is the most common interaction type between enzymes and medicine? And how many are there?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.interaction_type , count(*) from medicine_enzyme_interaction  group by medicine_enzyme_interaction.interaction_type  order by count(*) desc limit 1",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) , medicine_enzyme_interaction.interaction_type from medicine_enzyme_interaction  group by medicine_enzyme_interaction.interaction_type  order by count(*) desc limit 1",
        "question": "What are the most common types of interactions between enzymes and medicine, and how many types are there?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) from medicine where  medicine.fda_approved = \"No\"",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) from enzyme where  enzyme.id not in (select medicine_enzyme_interaction.enzyme_id from medicine_enzyme_interaction  )",
        "question": "How many enzymes do not have any interactions?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) from enzyme where  enzyme.id not in (select medicine_enzyme_interaction.enzyme_id from medicine_enzyme_interaction  )",
        "question": "What is the count of enzymes without any interactions?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) >= 3",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.medicine_id , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) >= 3",
        "question": "What is the id and trade name of the medicines can interact with at least 3 enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.id , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) >= 3",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine_enzyme_interaction.medicine_id , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id  group by medicine_enzyme_interaction.medicine_id having  count(*) >= 3",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select distinct enzyme.name , enzyme.location , enzyme.product from medicine_enzyme_interaction join enzyme on medicine_enzyme_interaction.enzyme_id = enzyme.id where  medicine_enzyme_interaction.interaction_type = \"inhibitor\"",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select distinct enzyme.name , enzyme.location , enzyme.product from medicine_enzyme_interaction join enzyme on medicine_enzyme_interaction.enzyme_id = enzyme.id where  medicine_enzyme_interaction.interaction_type = \"inhibitor\"",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id where  medicine_enzyme_interaction.interaction_type = \"inhibitor\"   intersect select medicine.name , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id where  medicine_enzyme_interaction.interaction_type = \"activitor\"",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id where  medicine_enzyme_interaction.interaction_type = \"activitor\"   intersect select medicine.name , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id where  medicine_enzyme_interaction.interaction_type = \"inhibitor\"",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.name , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id where  medicine_enzyme_interaction.interaction_type = \"inhibitor\"   intersect select medicine.name , medicine.trade_name from medicine_enzyme_interaction join medicine on medicine_enzyme_interaction.medicine_id = medicine.id where  medicine_enzyme_interaction.interaction_type = \"activitor\"",
        "question": "What are the medicine and trade names that can interact as an inhibitor and activitor with enzymes?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count( distinct medicine.fda_approved) from medicine",
        "question": "How many distinct FDA approval statuses are there for the medicines?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count( distinct medicine.fda_approved) from medicine",
        "question": "How many different FDA approval statuses exist for medicines?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%ALA%\"",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%ala%\"",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%AlA%\"",
        "question": "Which enzyme names have the substring \"ALA\"?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%ALA%\"",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%AlA%\"",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%ala%\"",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select enzyme.name from enzyme where  enzyme.name like \"%Ala%\"",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.trade_name , count(*) from medicine  group by medicine.trade_name",
        "question": "find the number of medicines offered by each trade.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select count(*) , medicine.trade_name from medicine  group by medicine.trade_name",
        "question": "find the number of medicines offered by each trade.",
        "correctness": 1
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "query": "select medicine.trade_name , count(*) from medicine  group by medicine.trade_name",
        "question": "How many medicines are offered by each trade name?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select distinct classroom.building from classroom where  classroom.capacity > 50",
        "question": "What are the distinct buildings with capacities of greater than 50?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building != \"Lamberton\"",
        "question": "Count the number of rooms that are not in the Lamberton building.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building != \"Lamberton\"",
        "question": "How many classrooms are not in Lamberton?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department where  department.budget > (select avg(department.budget) from department  )",
        "question": "What is the name and building of the departments whose budget is more than the average budget?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department where  department.budget > (select avg(department.budget) from department  )",
        "question": "Give the name and building of the departments with greater than average budget.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select classroom.room_number , classroom.building from classroom where  classroom.capacity between 50 and 100",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select classroom.room_number , classroom.building from classroom where  classroom.capacity between 50 and 100",
        "question": "What are the room numbers and corresponding buildings for classrooms which can seat between 50 to 100 students?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department   order by department.budget desc limit 1",
        "question": "Find the name and building of the department with the highest budget.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.building , department.dept_name from department   order by department.budget desc limit 1",
        "question": "Find the name and building of the department with the highest budget.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department   order by department.budget desc limit 1",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department where  department.budget = (select max(department.budget) from department  )",
        "question": "What is the department name and corresponding building for the department with the greatest budget?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from student join department on student.dept_name = department.dept_name where  department.dept_name = \"History\"   order by student.tot_cred desc limit 1",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from student where  student.dept_name = \"History\"   order by student.tot_cred desc limit 1",
        "question": "What is the name of the student who has the highest total credits in the History department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building = \"Lamberton\"",
        "question": "How many rooms does the Lamberton building have?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building = \"Lamberton\"",
        "question": "Count the number of classrooms in Lamberton.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct student.id) from student",
        "question": "How many students have advisors?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct advisor.s_id) from advisor",
        "question": "How many students have advisors?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct advisor.s_id) from advisor",
        "question": "Count the number of students who have advisors.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct student.id) from student",
        "question": "Count the number of students who have advisors.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.dept_name) from course",
        "question": "How many departments offer courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.dept_name) from course",
        "question": "Count the number of departments which offer courses.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.course_id) from course where  course.dept_name = \"Physics\"",
        "question": "How many different courses offered by Physics department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.course_id) from course join department on course.dept_name = department.dept_name where  department.dept_name = \"Physics\"",
        "question": "How many different courses offered by Physics department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.course_id) from course join department on course.dept_name = department.dept_name where  course.dept_name = \"Physics\" and department.dept_name = \"Physics\"",
        "question": "How many different courses offered by Physics department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.course_id) from course where  course.course_id in (select course.course_id from course where  course.dept_name = \"Physics\"   intersect select course.course_id from course where  course.dept_name = \"Physics\"   )",
        "question": "How many different courses offered by Physics department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct course.course_id) from course where  course.dept_name = \"Physics\"",
        "question": "Count the number of courses in the Physics department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct teaches.id) from teaches",
        "question": "How many different instructors have taught some course?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count( distinct teaches.id) from teaches",
        "question": "Count the number of distinct instructors who have taught a course.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select sum(department.budget) from department where  department.dept_name = \"Marketing\" or department.dept_name = \"Finance\"",
        "question": "Find the total budgets of the Marketing or Finance department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from instructor join department on instructor.dept_name = department.dept_name where  instructor.name like \"%Soisalon%\"",
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from instructor join department on instructor.dept_name = department.dept_name where  instructor.name like \"%SOISALON%\"",
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.dept_name from instructor where  instructor.name like \"%Soisalon%\"",
        "question": "Find the department name of the instructor whose name contains 'Soisalon'.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from instructor join department on instructor.dept_name = department.dept_name where  instructor.name like \"%Soisalon%\"",
        "question": "What is the name of the department with an instructure who has a name like 'Soisalon'?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building = \"Lamberton\" and classroom.capacity < 50",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building = \"Lamberton\" and classroom.capacity <= 50",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building = \"Lamberton\" and classroom.capacity < 50",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) from classroom where  classroom.building = \"Lamberton\" and classroom.capacity <= 50",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.budget from department where  department.budget > (select avg(department.budget) from department  )",
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.budget , department.dept_name from department where  department.budget > (select avg(department.budget) from department  )",
        "question": "Find the name and budget of departments whose budgets are more than the average budget.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.budget from department where  department.budget > (select avg(department.budget) from department  )",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.budget , department.dept_name from department where  department.budget > (select avg(department.budget) from department  )",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.dept_name = \"Statistics\"   order by instructor.salary asc limit 1",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Statistics\"   order by instructor.salary asc limit 1",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Statistics\"   order by instructor.salary asc limit 1",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course where  course.dept_name = \"Statistics\"   intersect select course.title from course where  course.dept_name = \"Psychology\"",
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course where  course.dept_name = \"Psychology\"   intersect select course.title from course where  course.dept_name = \"Statistics\"",
        "question": "Find the title of course that is provided by both Statistics and Psychology departments.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course where  course.dept_name = \"Statistics\"   intersect select course.title from course where  course.dept_name = \"Psychology\"",
        "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course where  course.dept_name = \"Psychology\"   intersect select course.title from course where  course.dept_name = \"Statistics\"",
        "question": "What is the title of a course that is listed in both the Statistics and Psychology departments?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course where  course.dept_name = \"Statistics\"   except select course.title from course where  course.dept_name = \"Psychology\"",
        "question": "Find the title of course that is provided by Statistics but not Psychology departments.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course where  course.dept_name = \"Statistics\"   except select course.title from course where  course.dept_name = \"Psychology\"",
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from course join department on course.dept_name = department.dept_name  group by course.dept_name  order by count(*) desc limit 3",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from takes join student on takes.ID = student.ID join department on student.dept_name = department.dept_name  group by department.dept_name  order by count(*) desc limit 3",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from course join department on course.dept_name = department.dept_name  group by course.dept_name  order by count(*) desc limit 3",
        "question": "What are the names of the 3 departments with the most courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from course join department on course.dept_name = department.dept_name  group by course.dept_name  order by sum(course.credits) desc limit 1",
        "question": "Find the name of the department that offers the highest total credits?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from course join department on course.dept_name = department.dept_name  group by course.dept_name  order by sum(course.credits) desc limit 1",
        "question": "What is the name of the department with the most credits?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course   order by course.title,course.credits asc",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course   order by course.title asc",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course   order by course.title,course.credits + course.credits asc",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from department   order by department.budget asc limit 1",
        "question": "Which department has the lowest budget?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from department   order by department.budget asc limit 1",
        "question": "Give the name of the department with the lowest budget.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department   order by department.budget desc",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , department.building from department   order by department.budget desc",
        "question": "What are the names and buildings of the deparments, sorted by budget descending?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   order by instructor.salary desc limit 1",
        "question": "Who is the instructor with the highest salary?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   order by instructor.salary desc limit 1",
        "question": "Give the name of the highest paid instructor.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select * from instructor   order by instructor.salary asc",
        "question": "List the information of all instructors ordered by their salary in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select * from instructor   order by instructor.salary asc",
        "question": "Give all information regarding instructors, in order of salary from least to greatest.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name , student.dept_name from student   order by student.tot_cred asc",
        "question": "Find the name of the students and their department names sorted by their total credits in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name , student.dept_name from student   order by student.tot_cred asc",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title , instructor.name from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id where  teaches.year = 2008   order by course.title asc",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title , instructor.name from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id where  teaches.year = 2008   order by course.title,instructor.name asc",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title , instructor.name from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id where  teaches.year = 2008   order by course.title asc",
        "question": "Show all titles and their instructors' names for courses in 2008, in alphabetical order by title.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID  group by instructor.name having  count(*) > 1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID  group by instructor.id having  count(*) > 1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID  group by advisor.i_id having  count(*) > 1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join instructor on advisor.i_ID = instructor.ID  group by advisor.i_id having  count(*) > 1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join instructor on advisor.i_ID = instructor.ID  group by instructor.name having  count(*) > 1",
        "question": "Find the name of instructors who are advising more than one student.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join instructor on advisor.i_ID = instructor.ID  group by instructor.name having  count(*) > 1",
        "question": "What are the names of instructors who advise more than one student?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID  group by instructor.name having  count(*) > 1",
        "question": "What are the names of instructors who advise more than one student?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join instructor on advisor.i_ID = instructor.ID  group by advisor.i_id having  count(*) > 1",
        "question": "What are the names of instructors who advise more than one student?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID  group by advisor.i_id having  count(*) > 1",
        "question": "What are the names of instructors who advise more than one student?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID  group by instructor.id having  count(*) > 1",
        "question": "What are the names of instructors who advise more than one student?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from advisor join student on advisor.s_ID = student.ID  group by advisor.s_id having  count(*) > 1",
        "question": "Find the name of the students who have more than one advisor?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from advisor join student on advisor.s_ID = student.ID  group by advisor.s_id having  count(*) > 1",
        "question": "What are the names of students who have more than one advisor?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , classroom.building from classroom where  classroom.capacity > 50  group by classroom.building",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select classroom.building , count(*) from classroom where  classroom.capacity > 50  group by classroom.building",
        "question": "Find the number of rooms with more than 50 capacity for each building.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select classroom.building , count(*) from classroom where  classroom.capacity > 50  group by classroom.building",
        "question": "How many rooms in each building have a capacity of over 50?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , classroom.building from classroom where  classroom.capacity > 50  group by classroom.building",
        "question": "How many rooms in each building have a capacity of over 50?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select max(classroom.capacity) , avg(classroom.capacity) , classroom.building from classroom  group by classroom.building",
        "question": "Find the maximum and average capacity among rooms in each building.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select max(classroom.capacity) , avg(classroom.capacity) , classroom.building from classroom  group by classroom.building",
        "question": "What are the greatest and average capacity for rooms in each building?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course  group by course.title having  count(*) > 1",
        "question": "What are the titles of courses that are offered in more than one department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from course  group by course.title having  count( distinct course.dept_name) > 1",
        "question": "What are the titles of courses that are offered in more than one department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select sum(course.credits) , course.dept_name from course  group by course.dept_name",
        "question": "Find the total credits of courses provided by different department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.dept_name , sum(course.credits) from course  group by course.dept_name",
        "question": "Find the total credits of courses provided by different department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , sum(course.credits) from course join department on course.dept_name = department.dept_name  group by course.dept_name",
        "question": "How many total credits are offered by each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , sum(course.credits) from course join department on course.dept_name = department.dept_name  group by department.dept_name",
        "question": "How many total credits are offered by each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.dept_name , sum(course.credits) from course  group by course.dept_name",
        "question": "How many total credits are offered by each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select sum(course.credits) , department.dept_name from course join department on course.dept_name = department.dept_name  group by course.dept_name",
        "question": "How many total credits are offered by each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select min(instructor.salary) , department.dept_name from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name having  avg(instructor.salary) > (select avg(instructor.salary) from instructor  )",
        "question": "Find the minimum salary for the departments whose average salary is above the average payment of all instructors.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , section.semester , section.year from section join course on section.course_id = course.course_id  group by section.semester, section.year",
        "question": "Find the number of courses provided in each semester and year.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.semester , section.year , count(*) from section join course on section.course_id = course.course_id  group by section.semester, section.year",
        "question": "Find the number of courses provided in each semester and year.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.semester , section.year , count(*) from section join course on section.course_id = course.course_id  group by section.semester, section.year",
        "question": "How many courses are provided in each semester and year?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , section.semester , section.year from section join course on section.course_id = course.course_id  group by section.semester, section.year",
        "question": "How many courses are provided in each semester and year?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.year from section join course on section.course_id = course.course_id  group by section.year  order by count(*) desc limit 1",
        "question": "Find the year which offers the largest number of courses.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.year from section join course on section.course_id = course.course_id  group by section.year  order by count(*) desc limit 1",
        "question": "Which year had the greatest number of courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from student join department on student.dept_name = department.dept_name  group by student.dept_name  order by count(*) desc limit 1",
        "question": "Find the name of department has the highest amount of students?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.dept_name from student  group by student.dept_name  order by count(*) desc limit 1",
        "question": "Find the name of department has the highest amount of students?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from student join department on student.dept_name = department.dept_name  group by department.dept_name  order by count(*) desc limit 1",
        "question": "What is the name of the deparment with the highest enrollment?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from student join department on student.dept_name = department.dept_name  group by student.dept_name  order by count(*) desc limit 1",
        "question": "What is the name of the deparment with the highest enrollment?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , department.dept_name from student join department on student.dept_name = department.dept_name  group by student.dept_name",
        "question": "Find the total number of students in each department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , department.dept_name from student join department on student.dept_name = department.dept_name  group by department.dept_name",
        "question": "Find the total number of students in each department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , student.dept_name from student  group by student.dept_name",
        "question": "Find the total number of students in each department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , count(*) from student join department on student.dept_name = department.dept_name  group by student.dept_name",
        "question": "Find the total number of students in each department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , department.dept_name from student join department on student.dept_name = department.dept_name  group by student.dept_name",
        "question": "How many students are in each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , department.dept_name from student join department on student.dept_name = department.dept_name  group by department.dept_name",
        "question": "How many students are in each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , count(*) from student join department on student.dept_name = department.dept_name  group by student.dept_name",
        "question": "How many students are in each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select count(*) , student.dept_name from student  group by student.dept_name",
        "question": "How many students are in each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , count(*) from student join department on student.dept_name = department.dept_name  group by department.dept_name",
        "question": "How many students are in each department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select advisor.i_id from advisor join student on advisor.s_ID = student.ID where  student.dept_name = \"History\"",
        "question": "What is the id of the instructor who advises of all students from History department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select advisor.i_id from advisor join student on advisor.s_ID = student.ID join department on student.dept_name = department.dept_name where  department.dept_name = \"History\"",
        "question": "Give id of the instructor who advises students in the History department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID where  student.dept_name = \"History\"",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID where  student.dept_name = \"History\"",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.course_id from course   except select prereq.course_id from prereq",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.course_id from course where  course.course_id not in (select prereq.course_id from prereq  )",
        "question": "What are the ids of courses without prerequisites?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select course.title from section join course on section.course_id = course.course_id where  section.building = \"Chandler\" and section.year = 2010 and section.semester = \"Fall\"",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id where  course.title = \"C Programming\"",
        "question": "Find the name of the instructors who taught C Programming course before.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id where  course.title = \"C Programming\"",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID where  student.dept_name = \"Math\"",
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID where  student.dept_name = \"Math\"",
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID where  student.dept_name = \"Math\"   order by student.tot_cred asc",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID   order by student.tot_cred desc limit 1",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from advisor join student on advisor.s_ID = student.ID join instructor on advisor.i_ID = instructor.ID   order by student.tot_cred desc limit 1",
        "question": "What is the name of the instructor who advises the student with the greatest number of total credits?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.id not in (select teaches.ID from teaches  )",
        "question": "Find the name of instructors who didn't teach any courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   except select instructor.name from teaches join instructor on teaches.ID = instructor.ID",
        "question": "Find the name of instructors who didn't teach any courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   except select instructor.name from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id",
        "question": "Find the name of instructors who didn't teach any courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.id not in (select teaches.ID from teaches  )",
        "question": "What are the names of instructors who didn't teach?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   except select instructor.name from teaches join instructor on teaches.ID = instructor.ID",
        "question": "What are the names of instructors who didn't teach?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.id from instructor where  instructor.id not in (select teaches.ID from teaches  )",
        "question": "Find the id of instructors who didn't teach any courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.id from instructor   except select teaches.id from teaches",
        "question": "Find the id of instructors who didn't teach any courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.id from instructor where  instructor.id not in (select teaches.ID from teaches  )",
        "question": "What are the ids of instructors who didnt' teach?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.id from instructor   except select teaches.id from teaches",
        "question": "What are the ids of instructors who didnt' teach?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   except select instructor.name from teaches join instructor on teaches.ID = instructor.ID where  teaches.semester = \"Spring\"",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   except select instructor.name from teaches join instructor on teaches.ID = instructor.ID where  teaches.semester = \"Spring\"",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name  order by avg(instructor.salary) desc limit 1",
        "question": "Find the name of the department which has the highest average salary of professors.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name  order by avg(instructor.salary) desc limit 1",
        "question": "Which department has the highest average instructor salary?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name from instructor join department on instructor.dept_name = department.dept_name  group by department.dept_name  order by avg(instructor.salary) desc limit 1",
        "question": "Which department has the highest average instructor salary?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from student where  student.id not in (select takes.ID from takes join course on takes.course_id = course.course_id where  course.dept_name = \"Biology\"  )",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from student where  student.id not in (select takes.ID from takes join course on takes.course_id = course.course_id where  course.dept_name = \"Biology\"  )",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from instructor where  instructor.salary < (select avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Physics\"  )",
        "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from instructor where  instructor.salary <= (select avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Physics\"  )",
        "question": "Find the name and salary of instructors whose salary is below the average salary of the instructors in the Physics department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from instructor where  instructor.salary < (select avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Physics\"  )",
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , instructor.salary from instructor where  instructor.salary <= (select avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Physics\"  )",
        "question": "What are the names and salaries for instructors who earn less than the average salary of instructors in the Physics department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from takes join student on takes.ID = student.ID join course on takes.course_id = course.course_id where  course.dept_name = \"Statistics\"",
        "question": "Find the name of students who took some course offered by Statistics department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select student.name from takes join student on takes.ID = student.ID join course on takes.course_id = course.course_id where  course.dept_name = \"Statistics\"",
        "question": "What are the names of students who have taken Statistics courses?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.building , section.room_number , section.semester , section.year from section join course on section.course_id = course.course_id where  course.dept_name = \"Psychology\"   order by course.title asc",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.building , section.room_number , section.semester , section.year from section join course on section.course_id = course.course_id join department on course.dept_name = department.dept_name where  department.dept_name = \"Psychology\"   order by course.title asc",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select section.building , section.room_number , section.semester , section.year from section join course on section.course_id = course.course_id where  course.dept_name = \"Psychology\"   order by course.title asc",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.dept_name = \"Comp. Sci.\"",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor join department on instructor.dept_name = department.dept_name where  instructor.salary > 80000 and department.dept_name = \"Comp. Sci.\"",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor join department on instructor.dept_name = department.dept_name where  instructor.salary > 80000 and department.dept_name = \"Comp. Sci.\"",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , course.course_id from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id",
        "question": "Find the names of all instructors who have taught some course and the course_id.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , teaches.course_id from teaches join instructor on teaches.ID = instructor.ID",
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , course.course_id from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id",
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name , teaches.course_id from teaches join instructor on teaches.ID = instructor.ID join course on teaches.course_id = course.course_id",
        "question": "What are the names of all instructors who have taught a course, as well as the corresponding course id?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.name like \"%dar%\"",
        "question": "Find the names of all instructors whose name includes the substring \u201cdar\u201d.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.name like \"%dar%\"",
        "question": "What are the names of all instructors with names that include \"dar\"?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select distinct instructor.name from instructor   order by instructor.name asc",
        "question": "List in alphabetic order the names of all distinct instructors.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   order by instructor.name asc",
        "question": "List in alphabetic order the names of all distinct instructors.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select distinct instructor.name from instructor   order by instructor.name asc",
        "question": "List the distinct names of the instructors, ordered by name.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor   order by instructor.name asc",
        "question": "List the distinct names of the instructors, ordered by name.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select distinct instructor.salary from instructor where  instructor.salary < (select max(instructor.salary) from instructor  )",
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.salary from instructor where  instructor.salary < (select max(instructor.salary) from instructor  )",
        "question": "Find the salaries of all distinct instructors that are less than the largest salary.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select distinct instructor.salary from instructor where  instructor.salary < (select max(instructor.salary) from instructor  )",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by department.dept_name having  avg(instructor.salary) > 42000",
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by department.dept_name having  avg(instructor.salary) >= 42000",
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name having  avg(instructor.salary) > 42000",
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name having  avg(instructor.salary) >= 42000",
        "question": "Find the names and average salaries of all departments whose average salary is greater than 42000.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by department.dept_name having  avg(instructor.salary) > 42000",
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name having  avg(instructor.salary) > 42000",
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by department.dept_name having  avg(instructor.salary) >= 42000",
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select department.dept_name , avg(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name  group by instructor.dept_name having  avg(instructor.salary) >= 42000",
        "question": "What are the names and average salaries for departments with average salary higher than 42000?",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.salary > (select max(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Biology\"  )",
        "question": "Find the names of all instructors whose salary is greater than the salary of all instructors in the Biology department.",
        "correctness": 1
    },
    {
        "db_id": "college_2",
        "query": "select instructor.name from instructor where  instructor.salary > (select max(instructor.salary) from instructor join department on instructor.dept_name = department.dept_name where  department.dept_name = \"Biology\"  )",
        "question": "What are the names of all instructors with a higher salary than any of the instructors in the Biology department?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from building",
        "question": "How many buildings are there?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name , building.street_address , building.floors from building   order by building.floors asc",
        "question": "Show the name, street address, and number of floors for all buildings ordered by the number of floors.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building   order by building.height_feet desc limit 1",
        "question": "What is the name of the tallest building?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building   order by building.years_as_tallest desc limit 1",
        "question": "What is the name of the tallest building?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select avg(building.floors) , max(building.floors) , min(building.floors) from building",
        "question": "What are the average, maximum, and minimum number of floors for all buildings?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building where  building.height_feet >= 200 and building.floors >= 20",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building where  building.height_feet > 200 and building.floors > 20",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.institution , institution.location from Institution where  institution.founded > 1990 and institution.type = \"Private\"",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.institution , institution.location from Institution where  institution.type = \"Private\" and institution.founded > 1990",
        "question": "Show the names and locations of institutions that are founded after 1990 and have the type \"Private\".",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.type , count(*) , sum(institution.enrollment) from Institution  group by institution.type",
        "question": "Show institution types, along with the number of institutions and total enrollment for each type.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.type from Institution  group by institution.type  order by count(*) desc limit 1",
        "question": "Show the institution type with the largest number of institutions.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.type from Institution where  institution.founded > 1990 and institution.enrollment > 1000",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.type from Institution where  institution.founded > 1990 and institution.enrollment >= 1000",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building where  building.building_id not in (select Institution.building_id from Institution  )",
        "question": "Show the name of buildings that do not have any institution.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building   except select building.name from Institution join building on Institution.building_id = building.building_id",
        "question": "Show the name of buildings that do not have any institution.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name from building   except select building.name from Institution join building on Institution.building_id = building.building_id where  institution.founded = 2003",
        "question": "Show the names of buildings except for those having an institution founded in 2003.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name , count(*) from Institution join building on Institution.building_id = building.building_id  group by institution.building_id",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name , count(*) from Institution join building on Institution.building_id = building.building_id  group by building.building_id",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name , count(*) from Institution join building on Institution.building_id = building.building_id  group by building.name",
        "question": "For each building, show the name of the building and the number of institutions in it.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select building.name , building.height_feet from Institution join building on Institution.building_id = building.building_id where  institution.founded >= 1880  group by institution.building_id having  count(*) >= 2",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select distinct institution.type from Institution",
        "question": "Show all the distinct institution types.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.institution , count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id  group by institution.institution",
        "question": "Show institution names along with the number of proteins for each institution.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.institution , count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id  group by protein.institution_id",
        "question": "Show institution names along with the number of proteins for each institution.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select institution.institution , count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id  group by institution.institution_id",
        "question": "Show institution names along with the number of proteins for each institution.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id where  institution.founded > 1880 or institution.type = \"Private\"",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id where  institution.type = \"Private\" or institution.founded > 1880",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id where  institution.founded > 1880 or institution.type = \"Public\"",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select protein.protein_name , institution.institution from protein join Institution on protein.Institution_id = Institution.Institution_id",
        "question": "Show the protein name and the institution name.",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id join building on Institution.building_id = building.building_id where  building.floors >= 20",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from protein join Institution on protein.Institution_id = Institution.Institution_id join building on Institution.building_id = building.building_id where  building.floors > 20",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "correctness": 1
    },
    {
        "db_id": "protein_institute",
        "query": "select count(*) from Institution where  institution.institution_id not in (select protein.Institution_id from protein  )",
        "question": "How many institutions do not have an associated protein in our record?",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select count(*) from member",
        "question": "How many members are there?",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from member   order by member.name asc",
        "question": "List the names of members in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name , member.country from member",
        "question": "What are the names and countries of members?",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from member where  member.country = \"United States\" or member.country = \"Canada\"",
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from member where  member.country = \"Canada\" or member.country = \"United States\"",
        "question": "Show the names of members whose country is \"United States\" or \"Canada\".",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.country , count(*) from member  group by member.country",
        "question": "Show the different countries and the number of members from each.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.country from member  group by member.country  order by count(*) desc limit 1",
        "question": "Show the most common country across members.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.country from member  group by member.country having  count(*) > 2",
        "question": "Which countries have more than two members?",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select college.leader_name , college.college_location from college",
        "question": "Show the leader names and locations of colleges.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name , college.name from member join college on member.College_ID = college.College_ID",
        "question": "Show the names of members and names of colleges they go to.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name , college.college_location from member join college on member.College_ID = college.College_ID   order by member.name asc",
        "question": "Show the names of members and the locations of colleges they go to in ascending alphabetical order of member names.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select distinct college.leader_name from member join college on member.College_ID = college.College_ID where  member.country = \"Canada\"",
        "question": "Show the distinct leader names of colleges associated with members from country \"Canada\".",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name , round.decoration_theme from round join member on round.Member_ID = member.Member_ID",
        "question": "Show the names of members and the decoration themes they have.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from round join member on round.Member_ID = member.Member_ID where  round.rank_in_round > 3",
        "question": "Show the names of members that have a rank in round higher than 3.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from round join member on round.Member_ID = member.Member_ID   order by round.rank_in_round asc",
        "question": "Show the names of members in ascending order of their rank in rounds.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from member where  member.member_id not in (select round.Member_ID from round  )",
        "question": "List the names of members who did not participate in any round.",
        "correctness": 1
    },
    {
        "db_id": "decoration_competition",
        "query": "select member.name from member   except select member.name from round join member on round.Member_ID = member.Member_ID",
        "question": "List the names of members who did not participate in any round.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select actual_orders.actual_order_id from Actual_Orders where  actual_orders.order_status_code = \"Success\"",
        "question": "Find the ids of orders whose status is 'Success'.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select products.product_name , products.product_price from Regular_Order_Products join Products on Regular_Order_Products.product_id = Products.product_id  group by regular_order_products.product_id  order by count(*) desc limit 1",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select products.product_name , products.product_price from Regular_Order_Products join Products on Regular_Order_Products.product_id = Products.product_id  group by regular_order_products.product_id, regular_order_products.product_id  order by count(*) desc limit 1",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select products.product_name , products.product_price from Actual_Order_Products join Products on Actual_Order_Products.product_id = Products.product_id  group by actual_order_products.product_id  order by count(*) desc limit 1",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select count(*) from Customers",
        "question": "Find the number of customers in total.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select count( distinct customers.payment_method) from Customers",
        "question": "How many different payment methods are there?",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select trucks.truck_details from Trucks   order by trucks.truck_licence_number asc",
        "question": "Show the details of all trucks in the order of their license number.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select products.product_name from Products   order by products.product_price desc limit 1",
        "question": "Find the name of the most expensive product.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select customers.customer_name from Customers where  customers.customer_id not in (select Customer_Addresses.customer_id from Customer_Addresses join Addresses on Customer_Addresses.address_id = Addresses.address_id where  addresses.state_province_county = \"California\"  )",
        "question": "Find the names of customers who are not living in the state of California.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select customers.customer_name , customers.customer_email from Customers where  customers.payment_method = \"Visa\"",
        "question": "List the names and emails of customers who payed by Visa card.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select customers.customer_name , customers.customer_phone from Customer_Addresses join Addresses on Customer_Addresses.address_id = Addresses.address_id join Customers on Customer_Addresses.customer_id = Customers.customer_id where  addresses.state_province_county = \"California\"",
        "question": "Find the names and phone numbers of customers living in California state.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select addresses.state_province_county from Addresses   except select addresses.state_province_county from Employees join Addresses on Employees.employee_address_id = Addresses.address_id",
        "question": "Find the states which do not have any employee in their record.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select addresses.state_province_county from Addresses where  addresses.address_id not in (select Employees.employee_address_id from Employees  )",
        "question": "Find the states which do not have any employee in their record.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select addresses.state_province_county from Addresses where  addresses.state_province_county not in (select addresses.state_province_county from Addresses join Employees on Addresses.address_id = Employees.employee_address_id  )",
        "question": "Find the states which do not have any employee in their record.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select addresses.state_province_county from Addresses where  addresses.address_id not in (select Addresses.address_id from Addresses join Employees on Addresses.address_id = Employees.employee_address_id  )",
        "question": "Find the states which do not have any employee in their record.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select customers.customer_name , customers.customer_phone , customers.customer_email from Customers   order by customers.date_became_customer asc",
        "question": "List the names, phone numbers, and emails of all customers sorted by their dates of becoming customers.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select customers.customer_name from Customers   order by customers.date_became_customer asc limit 5",
        "question": "Find the name of the first 5 customers.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select customers.payment_method from Customers  group by customers.payment_method  order by count(*) desc limit 1",
        "question": "Find the payment method that is used most frequently.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select delivery_routes.route_name from Delivery_Routes   order by delivery_routes.route_name asc",
        "question": "List the names of all routes in alphabetic order.",
        "correctness": 1
    },
    {
        "db_id": "customer_deliveries",
        "query": "select addresses.state_province_county , count(*) from Customer_Addresses join Addresses on Customer_Addresses.address_id = Addresses.address_id join Customers on Customer_Addresses.customer_id = Customers.customer_id  group by addresses.state_province_county",
        "question": "List the state names and the number of customers living in each state.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE where  department.dept_name = \"Accounting\"",
        "question": "Find the number of professors in accounting department.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE where  department.dept_name = \"Accounting\"",
        "question": "How many professors are in the accounting dept?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM where  employee.emp_lname = \"Graztevski\"",
        "question": "How many classes are professor whose last name is Graztevski has?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM where  employee.emp_lname = \"Graztevski\"",
        "question": "How many classes does the professor whose last name is Graztevski teach?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code from DEPARTMENT where  department.dept_name = \"Accounting\"",
        "question": "What is the code of the school where the accounting department belongs to?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code from DEPARTMENT where  department.dept_name = \"Accounting\"",
        "question": "What is the school code of the accounting department?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select course.crs_credit , course.crs_description from COURSE where  course.crs_code = \"CIS-220\"",
        "question": "How many credits does course CIS-220 have, and what its description?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select course.crs_description , course.crs_credit from COURSE where  course.crs_code = \"CIS-220\"",
        "question": "What is the description for the CIS-220 and how many credits does it have?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_address from DEPARTMENT where  department.dept_name = \"History\"",
        "question": "what is the address of history department?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_address) from DEPARTMENT where  department.school_code = \"BUS\"",
        "question": "How many different locations does the school with code BUS has?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code , count( distinct department.dept_address) from DEPARTMENT  group by department.school_code",
        "question": "How many different locations does each school have?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_address) , department.school_code from DEPARTMENT  group by department.school_code",
        "question": "Count different addresses of each school.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select course.crs_description , course.crs_credit from COURSE where  course.crs_code = \"QM-261\"",
        "question": "Find the description and credit for the course QM-261?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select course.crs_description , course.crs_credit from COURSE where  course.crs_code = \"QM-261\"",
        "question": "What is the course description and number of credits for QM-261?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_name) , department.school_code from DEPARTMENT  group by department.school_code having  count( distinct department.dept_name) < 5",
        "question": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_name) , department.school_code from DEPARTMENT  group by department.school_code having  count( distinct department.dept_name) <= 5",
        "question": "Find the number of different departments in each school whose number of different departments is less than 5.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_name) , department.school_code from DEPARTMENT  group by department.school_code having  count( distinct department.dept_name) < 5",
        "question": "How many different departments are there in each school that has less than 5 apartments?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , course.crs_code from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE  group by course.crs_code",
        "question": "How many sections does each course has?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , course.crs_code from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE  group by course.crs_code",
        "question": "How many sections does each course have?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , class.class_room from CLASS  group by class.class_room having  count(*) >= 2",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select class.class_room , count(*) from CLASS  group by class.class_room having  count(*) >= 2",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , class.class_room from CLASS  group by class.class_room having  count(class.class_room) >= 2",
        "question": "Find the number of classes offered for all class rooms that held at least 2 classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select class.class_room , count(*) from CLASS  group by class.class_room having  count(*) >= 2",
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , class.class_room from CLASS  group by class.class_room having  count(*) >= 2",
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select class.class_room , count(*) from CLASS  group by class.class_room having  count(class.class_room) >= 2",
        "question": "For each classroom with at least 2 classes, how many classes are offered?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , department.school_code from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code",
        "question": "Find the number of classes in each school.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code , count(*) from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code",
        "question": "Find the number of classes in each school.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code , count(*) from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code",
        "question": "How many classes exist for each school?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , department.school_code from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code",
        "question": "How many classes exist for each school?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , department.school_code from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code",
        "question": "What is the number of professors for different school?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , department.school_code from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code",
        "question": "How many different professors are there for the different schools?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , employee.emp_jobcode from EMPLOYEE  group by employee.emp_jobcode  order by count(*) desc limit 1",
        "question": "Find the count and code of the job has most employees.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , employee.emp_jobcode from EMPLOYEE  group by employee.emp_jobcode  order by count(employee.emp_dob) desc limit 1",
        "question": "Find the count and code of the job has most employees.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , employee.emp_jobcode from EMPLOYEE  group by employee.emp_jobcode  order by count(*) desc limit 1",
        "question": "What is the count and code of the job with the most employee?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) , employee.emp_jobcode from EMPLOYEE  group by employee.emp_jobcode  order by count(employee.emp_dob) desc limit 1",
        "question": "What is the count and code of the job with the most employee?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_jobcode , count(*) from EMPLOYEE  group by employee.emp_jobcode  order by count(*) desc limit 1",
        "question": "What is the count and code of the job with the most employee?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code  order by count(*) asc limit 1",
        "question": "Which school has the smallest amount of professors?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.school_code from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.school_code  order by count(*) asc limit 1",
        "question": "Which school has the fewest professors?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select sum(student.stu_hrs) , student.dept_code from STUDENT  group by student.dept_code",
        "question": "Find the total number of hours have done for all students in each department.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , avg(student.stu_gpa) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code  order by avg(student.stu_gpa) desc limit 1",
        "question": "What is the name and the average gpa of department whose students have the highest average gpa?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , avg(student.stu_gpa) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_name  order by avg(student.stu_gpa) desc limit 1",
        "question": "What is the name and the average gpa of department whose students have the highest average gpa?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , avg(student.stu_gpa) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_name  order by avg(student.stu_gpa) desc limit 1",
        "question": "Which department has the highest average student GPA, and what is the average gpa?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , avg(student.stu_gpa) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_code  order by avg(student.stu_gpa) desc limit 1",
        "question": "Which department has the highest average student GPA, and what is the average gpa?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.school_code) from DEPARTMENT",
        "question": "How many schools are there in the department?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct class.class_code) from CLASS",
        "question": "How many different classes are there?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct class.class_code) from CLASS",
        "question": "How many unique classes are offered?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct course.crs_code) from COURSE",
        "question": "What are the number of different course codes?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_name) from DEPARTMENT",
        "question": "How many departments does the college has?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct department.dept_name) from DEPARTMENT",
        "question": "How many different departments are there?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  department.dept_name = \"Computer Info. Systems\"",
        "question": "How many courses are offered by the Computer Info. Systems department?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct class.class_section) from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"ACCT-211\"",
        "question": "How many sections does course ACCT-211 has?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct class.class_section) from CLASS where  class.crs_code = \"ACCT-211\"",
        "question": "How many sections does course ACCT-211 has?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct class.class_section) from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"ACCT-211\"",
        "question": "What is the number of different class sections offered in the course ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count( distinct class.class_section) from CLASS where  class.crs_code = \"ACCT-211\"",
        "question": "What is the number of different class sections offered in the course ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by course.dept_code  order by sum(course.crs_credit) desc limit 1",
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_name  order by sum(course.crs_credit) desc limit 1",
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by course.dept_code  order by course.crs_credit desc limit 1",
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_name  order by course.crs_credit desc limit 1",
        "question": "Find the name of the department that offers the largest number of credits of all classes.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by course.dept_code  order by sum(course.crs_credit) desc limit 1",
        "question": "Which department offers the most credits all together?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_name  order by sum(course.crs_credit) desc limit 1",
        "question": "Which department offers the most credits all together?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by course.dept_code  order by course.crs_credit desc limit 1",
        "question": "Which department offers the most credits all together?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from ENROLL join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "How many students enrolled in class ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "How many students enrolled in class ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from ENROLL join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "What are the total number of students enrolled in ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from ENROLL join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"ACCT-211\"",
        "question": "What are the total number of students enrolled in ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "What is the first name of each student enrolled in class ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "What are the first names of all students in course ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\" and enroll.enroll_grade = \"C\"",
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"ACCT-211\" and enroll.enroll_grade = \"C\"",
        "question": "What is the first name of students enrolled in class ACCT-211 and got grade C?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from EMPLOYEE",
        "question": "Find the total number of employees.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from EMPLOYEE",
        "question": "How many employees are there all together?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR where  professor.prof_high_degree = \"Ph.D.\"",
        "question": "How many professors do have a Ph.D. degree?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR where  professor.prof_high_degree = \"Ph.D.\"",
        "question": "What is the total number of professors with a Ph.D. ?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from CLASS join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_description = \"Accounting II\"",
        "question": "How many students are enrolled in some classes that are taught by an accounting professor?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from DEPARTMENT   order by department.dept_name asc",
        "question": "list names of all departments ordered by their names.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from DEPARTMENT   order by department.dept_name asc",
        "question": "What are the names of all departments in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from EMPLOYEE where  employee.emp_jobcode = \"PROF\"   order by employee.emp_dob asc",
        "question": "List the first name of all employees with job code PROF ordered by their date of birth.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from PROFESSOR join EMPLOYEE on PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM   order by employee.emp_dob asc",
        "question": "What are the first names of all employees that are professors ordered by date of birth?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , professor.prof_office from PROFESSOR join EMPLOYEE on PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM   order by employee.emp_fname asc",
        "question": "Find the first names and offices of all professors sorted by alphabetical order of their first name.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , employee.emp_lname from EMPLOYEE   order by employee.emp_dob asc limit 1",
        "question": "What is the first and last name of the oldest employee?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , employee.emp_lname from EMPLOYEE   order by employee.emp_dob asc limit 1",
        "question": "What are the first and last names of the employee with the earliest date of birth?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by professor.dept_code  order by count(*) asc limit 1",
        "question": "What is the name of department where has the smallest number of professors?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by professor.dept_code  order by count(*) asc limit 1",
        "question": "What is the name of the department with the fewest professors?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_code  order by count(*) asc limit 1",
        "question": "What is the name of the department with the fewest professors?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_lname , employee.emp_hiredate from PROFESSOR join EMPLOYEE on PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM where  professor.prof_office = \"DRE 102\"",
        "question": "Find the last name and hire date of the professor who is in office DRE 102.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_lname , employee.emp_hiredate from PROFESSOR join EMPLOYEE on PROFESSOR.EMP_NUM = EMPLOYEE.EMP_NUM where  professor.prof_office = \"DRE 102\"",
        "question": "What is the last name of the professor whose office is located in DRE 102, and when were they hired?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select class.crs_code from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  student.stu_lname = \"Smithson\"",
        "question": "What are the course codes for every class that the student with the last name Smithson took?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR where  professor.prof_high_degree = \"Ph.D.\" or professor.prof_high_degree = \"MA\"",
        "question": "How many professors who has a either Ph.D. or MA degree?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE where  department.dept_name = \"Accounting\" or department.dept_name = \"Biology\"",
        "question": "How many professors who are from either Accounting or Biology department?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select count(*) from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE where  department.dept_name = \"Accounting\" or department.dept_name = \"Biology\"",
        "question": "What is the number of professors who are in the Accounting or Biology departments?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"CIS-220\"   intersect select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"QM-261\"",
        "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM where  class.crs_code = \"CIS-220\"   intersect select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM where  class.crs_code = \"QM-261\"",
        "question": "Find the first name of the professor who is teaching two courses with code CIS-220 and QM-261.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"CIS-220\"   intersect select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE where  course.crs_code = \"QM-261\"",
        "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM where  class.crs_code = \"CIS-220\"   intersect select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM where  class.crs_code = \"QM-261\"",
        "question": "What is the first name of the professor who is teaching CIS-220 and QM-261?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select avg(student.stu_gpa) from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "What is the average gpa of the students enrolled in the course with code ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select avg(student.stu_gpa) from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE where  class.crs_code = \"ACCT-211\"",
        "question": "What is the average GPA of students taking ACCT-211?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_gpa , student.stu_phone from STUDENT   order by student.stu_gpa desc limit 5",
        "question": "What is the first name, gpa and phone number of the top 5 students with highest gpa?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_gpa , student.stu_phone from STUDENT   order by student.stu_gpa desc limit 5",
        "question": "What is the first name, GPA, and phone number of the students with the top 5 GPAs?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE   order by student.stu_gpa asc limit 1",
        "question": "What is the department name of the students with lowest gpa belongs to?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE   order by student.stu_gpa asc limit 1",
        "question": "What is the name of the department with the student that has the lowest GPA?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_gpa from STUDENT where  student.stu_gpa < (select avg(student.stu_gpa) from STUDENT  )",
        "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_gpa from STUDENT where  student.stu_gpa <= (select avg(student.stu_gpa) from STUDENT  )",
        "question": "Find the first name and gpa of the students whose gpa is lower than the average gpa of all students.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_gpa from STUDENT where  student.stu_gpa < (select avg(student.stu_gpa) from STUDENT  )",
        "question": "What is the first name and GPA of every student that has a GPA lower than average?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_gpa from STUDENT where  student.stu_gpa <= (select avg(student.stu_gpa) from STUDENT  )",
        "question": "What is the first name and GPA of every student that has a GPA lower than average?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code  order by count(*) desc limit 1",
        "question": "Find the name and address of the department that has the highest number of students.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code, student.dept_code  order by count(*) desc limit 1",
        "question": "Find the name and address of the department that has the highest number of students.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code  order by count(*) desc limit 1",
        "question": "What is the name and address of the department with the most students?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code, student.dept_code  order by count(*) desc limit 1",
        "question": "What is the name and address of the department with the most students?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address , count(*) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code  order by count(*) desc limit 3",
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address , count(*) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_address  order by count(*) desc limit 3",
        "question": "Find the name, address, number of students in the departments that have the top 3 highest number of students.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address , count(*) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by student.dept_code  order by count(*) desc limit 3",
        "question": "What is the name, address, and number of students in the departments that have the 3 most students?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name , department.dept_address , count(*) from STUDENT join DEPARTMENT on STUDENT.DEPT_CODE = DEPARTMENT.DEPT_CODE  group by department.dept_address  order by count(*) desc limit 3",
        "question": "What is the name, address, and number of students in the departments that have the 3 most students?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , professor.prof_office from PROFESSOR join DEPARTMENT on PROFESSOR.DEPT_CODE = DEPARTMENT.DEPT_CODE join EMPLOYEE on DEPARTMENT.EMP_NUM = EMPLOYEE.EMP_NUM where  department.dept_name = \"History\" and professor.prof_high_degree = \"Ph.D.\"",
        "question": "Find the first name and office of the professor who is in the history department and has a Ph.D. degree.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , course.crs_code from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE",
        "question": "Find the first names of all instructors who have taught some course and the course code.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , course.crs_code from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE",
        "question": "What are the first names of all teachers who have taught a course and the corresponding course codes?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , course.crs_description from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE",
        "question": "Find the first names of all instructors who have taught some course and the course description.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname , course.crs_description from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE",
        "question": "What are the first names of all teachers who have taught a course and the corresponding descriptions?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select student.stu_fname , student.stu_lname , course.crs_description from ENROLL join STUDENT on ENROLL.STU_NUM = STUDENT.STU_NUM join CLASS on ENROLL.CLASS_CODE = CLASS.CLASS_CODE join COURSE on CLASS.CRS_CODE = COURSE.CRS_CODE",
        "question": "What are the names of all students who took a class and the corresponding course descriptions?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM  group by class.prof_num having  count(*) > 1",
        "question": "Find the first names of professors who are teaching more than one class.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select employee.emp_fname from CLASS join EMPLOYEE on CLASS.PROF_NUM = EMPLOYEE.EMP_NUM  group by employee.emp_fname having  count(*) > 1",
        "question": "Find the first names of professors who are teaching more than one class.",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  course.crs_description like \"%Statistics%\"",
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  course.crs_description like \"%Statistical%\"",
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  course.crs_description like \"%statistics%\"",
        "question": "Find the name of department that offers the class whose description has the word \"Statistics\".",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  course.crs_description like \"%Statistics%\"",
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  course.crs_description like \"%Statistical%\"",
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "correctness": 1
    },
    {
        "db_id": "college_1",
        "query": "select department.dept_name from COURSE join DEPARTMENT on COURSE.DEPT_CODE = DEPARTMENT.DEPT_CODE where  course.crs_description like \"%statistics%\"",
        "question": "What is the name of the department that offers a course that has a description including the word \"Statistics\"?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select count(*) , maintenance_contracts.maintenance_contract_id from Assets join Maintenance_Contracts on Assets.maintenance_contract_id = Maintenance_Contracts.maintenance_contract_id  group by maintenance_contracts.maintenance_contract_id",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.maintenance_contract_id , count(*) from Assets  group by assets.maintenance_contract_id",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select count(*) , assets.maintenance_contract_id from Assets  group by assets.maintenance_contract_id",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.supplier_company_id , count(*) from Assets  group by assets.supplier_company_id",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select count(*) , assets.supplier_company_id from Assets  group by assets.supplier_company_id",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select third_party_companies.company_id , third_party_companies.company_name from Maintenance_Engineers join Third_Party_Companies on Maintenance_Engineers.company_id = Third_Party_Companies.company_id  group by third_party_companies.company_id having  count(*) >= 2  union select third_party_companies.company_id , third_party_companies.company_name from Maintenance_Contracts join Third_Party_Companies on Maintenance_Contracts.maintenance_contract_company_id = Third_Party_Companies.company_id  group by third_party_companies.company_id having  count(*) >= 2",
        "question": "Which third party companies have at least 2 maintenance engineers or have at least 2 maintenance contracts? List the company id and name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select staff.staff_name , staff.staff_id from Fault_Log join Staff on Fault_Log.recorded_by_staff_id = Staff.staff_id   except select staff.staff_name , staff.staff_id from Engineer_Visits join Staff on Engineer_Visits.contact_staff_id = Staff.staff_id",
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name , parts.part_id from Part_Faults join Parts on Part_Faults.part_id = Parts.part_id  group by part_faults.part_id having  count(*) > 2",
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name , parts.part_id from Part_Faults join Parts on Part_Faults.part_id = Parts.part_id  group by parts.part_id having  count(*) > 2",
        "question": "Which parts have more than 2 faults? Show the part name and id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select maintenance_engineers.first_name , maintenance_engineers.last_name , maintenance_engineers.other_details , skills.skill_description from Engineer_Skills join Skills on Engineer_Skills.skill_id = Skills.skill_id join Maintenance_Engineers on Engineer_Skills.engineer_id = Maintenance_Engineers.engineer_id",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select part_faults.fault_short_name , skills.skill_description from Skills_Required_To_Fix join Skills on Skills_Required_To_Fix.skill_id = Skills.skill_id join Part_Faults on Skills_Required_To_Fix.part_fault_id = Part_Faults.part_fault_id",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name , count(*) from Asset_Parts join Parts on Asset_Parts.part_id = Parts.part_id  group by asset_parts.part_id",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name , count(*) from Asset_Parts join Assets on Asset_Parts.asset_id = Assets.asset_id join Parts on Asset_Parts.part_id = Parts.part_id  group by asset_parts.part_id",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name , count(*) from Asset_Parts join Parts on Asset_Parts.part_id = Parts.part_id  group by parts.part_id",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select fault_log.fault_description , fault_log_parts.fault_status from Fault_Log_Parts join Fault_Log on Fault_Log_Parts.fault_log_entry_id = Fault_Log.fault_log_entry_id",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select count(*) , fault_log.fault_log_entry_id from Engineer_Visits join Fault_Log on Engineer_Visits.fault_log_entry_id = Fault_Log.fault_log_entry_id  group by fault_log.fault_log_entry_id  order by count(*) desc limit 1",
        "question": "How many engineer visits are required at most for a single fault log? List the number and the log entry id.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select distinct maintenance_engineers.last_name from Maintenance_Engineers",
        "question": "What are all the distinct last names of all the engineers?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select maintenance_engineers.first_name , maintenance_engineers.last_name from Maintenance_Engineers where  maintenance_engineers.engineer_id not in (select Engineer_Visits.engineer_id from Engineer_Visits  )",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select maintenance_engineers.first_name , maintenance_engineers.last_name from Maintenance_Engineers   except select maintenance_engineers.first_name , maintenance_engineers.last_name from Engineer_Visits join Maintenance_Engineers on Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.asset_id , assets.asset_details , assets.asset_make , assets.asset_model from Assets",
        "question": "List the asset id, details, make and model for every asset.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.asset_acquired_date from Assets   order by assets.asset_acquired_date asc limit 1",
        "question": "When was the first asset acquired?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select part_faults.part_id , parts.part_name from Skills_Required_To_Fix join Part_Faults on Skills_Required_To_Fix.part_fault_id = Part_Faults.part_fault_id join Parts on Part_Faults.part_id = Parts.part_id  group by part_faults.part_id  order by count(*) desc limit 1",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name from Part_Faults join Parts on Part_Faults.part_id = Parts.part_id  group by part_faults.part_id  order by count(*) asc limit 1",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name from Part_Faults join Parts on Part_Faults.part_id = Parts.part_id  group by parts.part_name  order by count(*) asc limit 1",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_name from Part_Faults join Parts on Part_Faults.part_id = Parts.part_id  group by parts.part_id  order by count(*) asc limit 1",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name from Engineer_Visits join Maintenance_Engineers on Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id  group by engineer_visits.engineer_id  order by count(*) asc limit 1",
        "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select maintenance_engineers.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name from Engineer_Visits join Maintenance_Engineers on Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id  group by maintenance_engineers.engineer_id  order by count(*) asc limit 1",
        "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select engineer_visits.engineer_id , maintenance_engineers.first_name , maintenance_engineers.last_name from Engineer_Visits join Maintenance_Engineers on Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id  group by engineer_visits.engineer_id  order by count(*) asc limit 1",
        "question": "Among those engineers who have visited, which engineer makes the least number of visits? List the engineer id, first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select staff.staff_name , maintenance_engineers.first_name , maintenance_engineers.last_name from Engineer_Visits join Staff on Engineer_Visits.contact_staff_id = Staff.staff_id join Maintenance_Engineers on Engineer_Visits.engineer_id = Maintenance_Engineers.engineer_id",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select fault_log.fault_log_entry_id , fault_log.fault_description , fault_log.fault_log_entry_datetime from Fault_Log_Parts join Fault_Log on Fault_Log_Parts.fault_log_entry_id = Fault_Log.fault_log_entry_id  group by fault_log.fault_log_entry_id  order by count(*) desc limit 1",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select skills_required_to_fix.skill_id , skills.skill_description from Skills_Required_To_Fix join Skills on Skills_Required_To_Fix.skill_id = Skills.skill_id  group by skills_required_to_fix.skill_id  order by count(*) desc limit 1",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select skills_required_to_fix.skill_id , skills.skill_description from Skills_Required_To_Fix join Skills on Skills_Required_To_Fix.skill_id = Skills.skill_id  group by skills.skill_id  order by count(*) desc limit 1",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select skills.skill_id , skills.skill_description from Skills_Required_To_Fix join Skills on Skills_Required_To_Fix.skill_id = Skills.skill_id  group by skills_required_to_fix.skill_id  order by count(*) desc limit 1",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select skills.skill_id , skills.skill_description from Skills_Required_To_Fix join Skills on Skills_Required_To_Fix.skill_id = Skills.skill_id  group by skills.skill_id  order by count(*) desc limit 1",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select skills_required_to_fix.skill_id , skills.skill_description from Skills_Required_To_Fix join Skills on Skills_Required_To_Fix.skill_id = Skills.skill_id join Part_Faults on Skills_Required_To_Fix.part_fault_id = Part_Faults.part_fault_id join Parts on Part_Faults.part_id = Parts.part_id  group by skills_required_to_fix.skill_id  order by count(*) desc limit 1",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select distinct assets.asset_model from Assets",
        "question": "What are all the distinct asset models?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.asset_make , assets.asset_model , assets.asset_details from Assets   order by assets.asset_disposed_date asc",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select parts.part_id , parts.chargeable_amount from Parts   order by parts.chargeable_amount asc limit 1",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select third_party_companies.company_name from Maintenance_Contracts join Third_Party_Companies on Maintenance_Contracts.maintenance_contract_company_id = Third_Party_Companies.company_id   order by maintenance_contracts.contract_start_date asc limit 1",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select staff.gender from Staff  group by staff.gender  order by count(*) desc limit 1",
        "question": "Which gender makes up the majority of the staff?",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select staff.staff_name , count(*) from Engineer_Visits join Staff on Engineer_Visits.contact_staff_id = Staff.staff_id  group by engineer_visits.contact_staff_id",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select staff.staff_name , count(*) from Engineer_Visits join Staff on Engineer_Visits.contact_staff_id = Staff.staff_id  group by staff.staff_name",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.asset_model from Assets   except select assets.asset_model from Fault_Log join Assets on Fault_Log.asset_id = Assets.asset_id",
        "question": "Which assets did not incur any fault log? List the asset model.",
        "correctness": 1
    },
    {
        "db_id": "assets_maintenance",
        "query": "select assets.asset_model from Assets where  assets.asset_id not in (select Fault_Log.asset_id from Fault_Log  )",
        "question": "Which assets did not incur any fault log? List the asset model.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count( distinct allergy_type.allergytype) from Allergy_Type",
        "question": "How many different allergy types exist?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count( distinct allergy_type.allergytype) from Allergy_Type",
        "question": "How many distinct allergies are there?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct allergy_type.allergytype from Allergy_Type",
        "question": "Show all allergy types.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct allergy_type.allergytype from Allergy_Type",
        "question": "What are the different allergy types?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergy , allergy_type.allergytype from Allergy_Type",
        "question": "Show all allergies and their types.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergy , allergy_type.allergytype from Allergy_Type",
        "question": "What are the allergies and their types?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype , allergy_type.allergy from Allergy_Type",
        "question": "What are the allergies and their types?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergy from Allergy_Type where  allergy_type.allergytype = \"food\"",
        "question": "Show all allergies with type food.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type where  allergy_type.allergy = \"Cat\"",
        "question": "What is the type of allergy Cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type where  allergy_type.allergy is \"Cat\"",
        "question": "What is the type of allergy Cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type where  allergy_type.allergy = \"Cat\"",
        "question": "What is allergy type of a cat allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Allergy_Type where  allergy_type.allergytype = \"animal\"",
        "question": "How many allergies have type animal?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Allergy_Type where  allergy_type.allergytype = \"animal\"",
        "question": "How many animal type allergies exist?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype , count(*) from Allergy_Type  group by allergy_type.allergytype",
        "question": "Show all allergy types and the number of allergies in each type.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype , count(*) from Allergy_Type  group by allergy_type.allergytype",
        "question": "What are the allergy types and how many allergies correspond to each one?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by allergy_type.allergytype  order by count(*) desc limit 1",
        "question": "Which allergy type has most number of allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type  group by allergy_type.allergytype  order by count(*) desc limit 1",
        "question": "Which allergy type has most number of allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type  group by allergy_type.allergytype  order by count(*) desc limit 1",
        "question": "Which allergy type is most common?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by allergy_type.allergytype  order by count(*) desc limit 1",
        "question": "Which allergy type is most common?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type  group by allergy_type.allergytype  order by count(*) asc limit 1",
        "question": "Which allergy type has least number of allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by allergy_type.allergytype  order by count(*) asc limit 1",
        "question": "Which allergy type has least number of allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Allergy_Type  group by allergy_type.allergytype  order by count(*) asc limit 1",
        "question": "Which allergy type is the least common?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by allergy_type.allergytype  order by count(*) asc limit 1",
        "question": "Which allergy type is the least common?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student",
        "question": "How many students are there?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student",
        "question": "What is the total number of students?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname from Student",
        "question": "Show first name and last name for all students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.lname from Student",
        "question": "Show first name and last name for all students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname from Student",
        "question": "What are the full names of all students",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname from Student   union select student.fname , student.lname from Student",
        "question": "What are the full names of all students",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.lname from Student",
        "question": "What are the full names of all students",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count( distinct student.advisor) from Student",
        "question": "How many different advisors are listed?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count( distinct student.advisor) from Student",
        "question": "How many advisors are there?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.major from Student",
        "question": "Show all majors.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.major from Student",
        "question": "What are the different majors?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname , student.age from Student where  student.sex = \"F\"",
        "question": "Show first name, last name, age for all female students. Their sex is F.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname , student.age from Student where  student.sex = \"F\"",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname , student.age from Student where  student.sex = \"F\"   intersect select student.fname , student.lname , student.age from Student where  student.sex = \"F\"",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.lname , student.age from Student where  student.sex = \"F\"",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student where  student.sex = \"M\"",
        "question": "Show student ids for all male students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.stuid from Student where  student.sex = \"M\"",
        "question": "Show student ids for all male students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student where  student.sex = \"M\"",
        "question": "What are the student ids for all male students?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.age = 18",
        "question": "How many students are age 18?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.age = 18",
        "question": "How many students are 18 years old?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.age like \"18%\"",
        "question": "How many students are 18 years old?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student where  student.age > 20",
        "question": "Show all student ids who are older than 20.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student where  student.age > 20",
        "question": "What are the student ids for students over 20 years old?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.city_code from Student where  student.lname = \"Kim\"",
        "question": "Which city does the student whose last name is \"Kim\" live in?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.city_code from Student where  student.lname = \"Kim\"",
        "question": "Give the city that the student whose family name is Kim lives in.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.city_code = \"HKG\" or student.city_code = \"CHI\"",
        "question": "How many students live in HKG or CHI?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.city_code = \"CHI\" or student.city_code = \"HKG\"",
        "question": "How many students live in HKG or CHI?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.city_code = \"HKG\" or student.city_code = \"CHI\"",
        "question": "Give the number of students living in either HKG or CHI.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Student where  student.city_code = \"CHI\" or student.city_code = \"HKG\"",
        "question": "Give the number of students living in either HKG or CHI.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select min(student.age) , avg(student.age) , max(student.age) from Student",
        "question": "Show the minimum, average, and maximum age of all students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname from Student   order by student.age asc limit 1",
        "question": "What is the last name of the youngest student?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname from Student where  student.age = (select min(student.age) from Student  )",
        "question": "What is the last name of the youngest student?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID   order by student.age asc limit 1",
        "question": "What is the last name of the youngest student?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname from Student   order by student.age asc limit 1",
        "question": "Provide the last name of the youngest student.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname from Student where  student.age = (select min(student.age) from Student  )",
        "question": "Provide the last name of the youngest student.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student   order by student.age desc limit 1",
        "question": "Show the student id of the oldest student.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.major , count(*) from Student  group by student.major",
        "question": "Show all majors and corresponding number of students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) , student.major from Student  group by student.major",
        "question": "How many students are there for each major?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.major , count(*) from Student  group by student.major",
        "question": "How many students are there for each major?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.major from Student  group by student.major  order by count(*) desc limit 1",
        "question": "Which major has most number of students?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.major from Student  group by student.major  order by count(*) desc limit 1",
        "question": "What is the largest major?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.age , count(*) from Student  group by student.age",
        "question": "Show all ages and corresponding number of students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.age , count(*) from Student  group by student.age",
        "question": "How old is each student and how many students are each age?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) , student.age from Student  group by student.age",
        "question": "How old is each student and how many students are each age?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.city_code , count(*) from Student  group by student.city_code",
        "question": "Show all cities and corresponding number of students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) , student.city_code from Student  group by student.city_code",
        "question": "How many students live in each city?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.city_code , count(*) from Student  group by student.city_code",
        "question": "How many students live in each city?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.advisor , count(*) from Student  group by student.advisor",
        "question": "Show all advisors and corresponding number of students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.advisor , count(*) from Student  group by student.advisor",
        "question": "How many students does each advisor have?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) , student.advisor from Student  group by student.advisor",
        "question": "How many students does each advisor have?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.advisor from Student  group by student.advisor  order by count(*) desc limit 1",
        "question": "Which advisor has most number of students?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.advisor from Student  group by student.advisor  order by count(*) desc limit 1",
        "question": "Give the advisor with the most students.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Cat\"",
        "question": "How many students have cat allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy where  has_allergy.allergy = \"Cat\"",
        "question": "How many students have cat allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Cat\"",
        "question": "How many students are affected by cat allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy where  has_allergy.allergy = \"Cat\"",
        "question": "How many students are affected by cat allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.stuid from Has_Allergy  group by has_allergy.stuid having  count(*) >= 2",
        "question": "Show all student IDs who have at least two allergies.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.stuid from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by has_allergy.stuid having  count(*) >= 2",
        "question": "Show all student IDs who have at least two allergies.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID  group by student.stuid having  count(*) > 1",
        "question": "What are the students ids of students who have more than one allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID  group by has_allergy.stuid having  count(*) > 1",
        "question": "What are the students ids of students who have more than one allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student   except select has_allergy.stuid from Has_Allergy",
        "question": "What are the student ids of students who don't have any allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.stuid from Student where  student.stuid not in (select Has_Allergy.StuID from Has_Allergy  )",
        "question": "What are the student ids of students who don't have any allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy where  allergy_type.allergytype = \"food\"",
        "question": "How many students have a food allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergytype = \"food\"",
        "question": "How many students have a food allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergytype = \"food\"",
        "question": "How many students are affected by food related allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy where  allergy_type.allergytype = \"food\"",
        "question": "How many students are affected by food related allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergytype = \"food\"  group by allergy_type.allergytype",
        "question": "How many students are affected by food related allergies?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID  group by has_allergy.allergy  order by count(*) desc limit 1",
        "question": "Which allergy has most number of students affected?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy from Has_Allergy  group by has_allergy.allergy  order by count(*) desc limit 1",
        "question": "Which allergy has most number of students affected?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy from Has_Allergy  group by has_allergy.allergy  order by count(*) desc limit 1",
        "question": "Which allergy is the most common?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by has_allergy.allergy  order by count(*) desc limit 1",
        "question": "Which allergy is the most common?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy , count(*) from Has_Allergy  group by has_allergy.allergy",
        "question": "Show all allergies with number of students affected.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy , count(*) from Has_Allergy  group by has_allergy.allergy",
        "question": "How many students have each different allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select count(*) , has_allergy.allergy from Has_Allergy  group by has_allergy.allergy",
        "question": "How many students have each different allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergy , count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by has_allergy.allergy",
        "question": "How many students have each different allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy , count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by has_allergy.allergy",
        "question": "How many students have each different allergy?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype , count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by allergy_type.allergytype",
        "question": "Show all allergy type with number of students affected.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select allergy_type.allergytype , count(*) from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy  group by allergy_type.allergytype",
        "question": "How many students are affected by each allergy type?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname , student.age from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\"   intersect select student.lname , student.age from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Cat\"",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname , student.age from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergy = \"Milk\"   intersect select student.lname , student.age from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergy = \"Cat\"",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname , student.age from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\"   intersect select student.lname , student.age from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Cat\"",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.lname , student.age from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergy = \"Milk\"   intersect select student.lname , student.age from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergy = \"Cat\"",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select has_allergy.allergy , allergy_type.allergytype from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  student.fname = \"Lisa\"   order by has_allergy.allergy asc",
        "question": "What are the allergies the girl named Lisa has? And what are the types of them? Order the result by allergy names.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.sex from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\"   except select student.fname , student.sex from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Cat\"",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select avg(student.age) from Student where  student.stuid in (select Has_Allergy.StuID from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy where  allergy_type.allergytype = \"food\"   intersect select Has_Allergy.StuID from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy where  allergy_type.allergytype = \"animal\"   )",
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select avg(student.age) from Student where  student.stuid in (select Has_Allergy.StuID from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy where  allergy_type.allergytype = \"food\"   intersect select Has_Allergy.StuID from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy where  allergy_type.allergytype = \"animal\"   )",
        "question": "How old are the students with allergies to food and animal types on average?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname from Student   except select student.fname , student.lname from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergytype = \"food\"",
        "question": "List the first and last name of the students who do not have any food type allergy.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.lname from Student   except select student.fname , student.lname from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergytype = \"food\"",
        "question": "What is the full name of each student who is not allergic to any type of food.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.city_code from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\" or has_allergy.allergy = \"Cat\"",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.city_code from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\" or allergy_type.allergy = \"Cat\"",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.city_code from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergy = \"Milk\" or allergy_type.allergy = \"Cat\"",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.city_code from Has_Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\" or has_allergy.allergy = \"Cat\"",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.city_code from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  has_allergy.allergy = \"Milk\" or allergy_type.allergy = \"Cat\"",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select distinct student.fname , student.city_code from Has_Allergy join Allergy_Type on Has_Allergy.Allergy = Allergy_Type.Allergy join Student on Has_Allergy.StuID = Student.StuID where  allergy_type.allergy = \"Milk\" or allergy_type.allergy = \"Cat\"",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "correctness": 1
    },
    {
        "db_id": "allergy_1",
        "query": "select student.fname , student.major from Student where  student.stuid not in (select Has_Allergy.StuID from Has_Allergy where  has_allergy.allergy = \"Soy\"  )",
        "question": "Find the first name and major of the students who are not allegry to soy.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select count(*) from book_club",
        "question": "How many book clubs are there?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select count(*) from book_club",
        "question": "Count the number of book clubs.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.book_title , book_club.author_or_editor from book_club where  book_club.year > 1989",
        "question": "show the titles, and authors or editors for all books made after the year 1989.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.book_title , book_club.author_or_editor from book_club where  book_club.year > 1989",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select distinct book_club.publisher from book_club",
        "question": "Show all distinct publishers for books.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select distinct book_club.publisher from book_club",
        "question": "What are all the different book publishers?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.book_title , book_club.year , book_club.publisher from book_club   order by book_club.year desc",
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.year , book_club.book_title , book_club.publisher from book_club   order by book_club.year desc",
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher , book_club.year , book_club.book_title from book_club   order by book_club.year desc",
        "question": "Show the years, book titles, and publishers for all books, in descending order by year.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.year , book_club.book_title , book_club.publisher from book_club   order by book_club.year desc",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.book_title , book_club.year , book_club.publisher from book_club   order by book_club.year desc",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher , book_club.year , book_club.book_title from book_club   order by book_club.year desc",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher , count(*) from book_club  group by book_club.publisher",
        "question": "Show all publishers and the number of books for each publisher.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher , count(*) from book_club  group by book_club.publisher",
        "question": "How many books are there for each publisher?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher from book_club  group by book_club.publisher  order by count(*) desc limit 1",
        "question": "What is the publisher with most number of books?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher from book_club  group by book_club.publisher  order by count(*) desc limit 1",
        "question": "Return the publisher that has published the most books.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.category , count(*) from book_club  group by book_club.category",
        "question": "Show all book categories and the number of books in each category.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.category , count(*) from book_club  group by book_club.category",
        "question": "How many books fall into each category?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select count(*) , book_club.category from book_club  group by book_club.category",
        "question": "How many books fall into each category?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.category from book_club where  book_club.year > 1989  group by book_club.category having  count(*) >= 2",
        "question": "What categories have two or more corresponding books that were made after 1989?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher from book_club where  book_club.year = 1989   intersect select book_club.publisher from book_club where  book_club.year = 1990",
        "question": "Show publishers with a book published in 1989 and a book in 1990.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher from book_club where  book_club.year = 1989   intersect select book_club.publisher from book_club where  book_club.year = 1990",
        "question": "What are the publishers who have published a book in both 1989 and 1990?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher from book_club   except select book_club.publisher from book_club where  book_club.year = 1989",
        "question": "Show all publishers which do not have a book in 1989.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select book_club.publisher from book_club   except select book_club.publisher from book_club where  book_club.year = 1989",
        "question": "Which publishers did not publish a book in 1989?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.title , movie.year , movie.director from movie   order by movie.budget_million asc",
        "question": "Show all movie titles, years, and directors, ordered by budget.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.title , movie.year , movie.director from movie   order by movie.budget_million asc",
        "question": "What are the titles, years, and directors of all movies, ordered by budget in millions?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select count( distinct movie.director) from movie",
        "question": "How many movie directors are there?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select count( distinct movie.director) from movie",
        "question": "Count the number of different directors.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.title , movie.director from movie where  movie.year <= 2000   order by movie.gross_worldwide desc limit 1",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.director from movie where  movie.year = 1999   intersect select movie.director from movie where  movie.year = 2000",
        "question": "Show all director names who have a movie in both year 1999 and 2000.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.director from movie where  movie.year = 1999   intersect select movie.director from movie where  movie.year = 2000",
        "question": "Which directors had a movie both in the year 1999 and 2000?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.director from movie where  movie.year = 1999 or movie.year = 2000",
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.director from movie where  movie.year = 1999 or movie.year = 2000 and movie.movie_id in (select movie.movie_id from movie where  movie.year = 1999 or movie.year = 2000  )",
        "question": "Show all director names who have a movie in the year 1999 or 2000.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.director from movie where  movie.year = 1999 or movie.year = 2000",
        "question": "Which directors had a movie in either 1999 or 2000?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select avg(movie.budget_million) , max(movie.budget_million) , min(movie.budget_million) from movie where  movie.year < 2000",
        "question": "What is the average, maximum, and minimum budget for all movies before 2000.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select avg(movie.budget_million) , max(movie.budget_million) , min(movie.budget_million) from movie where  movie.year < 2000",
        "question": "Return the average, maximum, and minimum budgets in millions for movies made before the year 2000.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select culture_company.company_name from culture_company join book_club on culture_company.book_club_id = book_club.book_club_id where  book_club.publisher = \"Alyson\"",
        "question": "List all company names with a book published by Alyson.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select culture_company.company_name from culture_company join book_club on culture_company.book_club_id = book_club.book_club_id where  book_club.publisher = \"Alyson\"",
        "question": "What are all the company names that have a book published by Alyson?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.title , book_club.book_title from culture_company join movie on culture_company.movie_id = movie.movie_id join book_club on culture_company.book_club_id = book_club.book_club_id where  culture_company.incorporated_in = \"China\"",
        "question": "Show the movie titles and book titles for all companies in China.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select movie.title , book_club.book_title from culture_company join movie on culture_company.movie_id = movie.movie_id join book_club on culture_company.book_club_id = book_club.book_club_id where  culture_company.incorporated_in = \"China\"",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select culture_company.company_name from culture_company join movie on culture_company.movie_id = movie.movie_id where  movie.year = 1999",
        "question": "Show all company names with a movie directed in year 1999.",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select culture_company.company_name from culture_company join movie on culture_company.movie_id = movie.movie_id where  movie.year = 1999",
        "question": "What are all company names that have a corresponding movie directed in the year 1999?",
        "correctness": 1
    },
    {
        "db_id": "culture_company",
        "query": "select culture_company.company_name from culture_company join movie on culture_company.movie_id = movie.movie_id where  movie.year like \"%1999%\"",
        "question": "What are all company names that have a corresponding movie directed in the year 1999?",
        "correctness": 1
    },
    {
        "db_id": "soccer_1",
        "query": "select country.name , league.name from League join Country on League.country_id = Country.id",
        "question": "List all country and league names.",
        "correctness": 1
    },
    {
        "db_id": "soccer_1",
        "query": "select count(*) from League join Country on League.country_id = Country.id where  country.name = \"England\"",
        "question": "How many leagues are there in England?",
        "correctness": 1
    },
    {
        "db_id": "soccer_1",
        "query": "select avg(player.weight) from Player",
        "question": "What is the average weight of all players?",
        "correctness": 1
    },
    {
        "db_id": "soccer_1",
        "query": "select count(*) , player_attributes.preferred_foot from Player_Attributes where  player_attributes.overall_rating > 80  group by player_attributes.preferred_foot",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count(*) from Video_Games",
        "question": "How many video games exist?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count(*) from Video_Games",
        "question": "How many video games do you have?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct video_games.gtype) from Video_Games",
        "question": "How many video game types exist?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct video_games.gtype) from Video_Games",
        "question": "What is the count of different game types?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games",
        "question": "Show all video game types.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select distinct video_games.gtype from Video_Games",
        "question": "Show all video game types.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select distinct video_games.gtype from Video_Games",
        "question": "What are the different types of video games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games",
        "question": "What are the different types of video games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname , video_games.gtype from Video_Games   order by video_games.gname asc",
        "question": "Show all video games and their types in the order of their names.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype , video_games.gname from Video_Games   order by video_games.gname asc",
        "question": "Show all video games and their types in the order of their names.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname , video_games.gtype from Video_Games   order by video_games.gname asc",
        "question": "What are the names of all the video games and their types in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname , video_games.gtype from Video_Games   order by video_games.gname,video_games.gtype asc",
        "question": "What are the names of all the video games and their types in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Video_Games where  video_games.gtype = \"Collectible card game\"",
        "question": "Show all video games with type Collectible card game.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games where  video_games.gname = \"Call of Destiny\"",
        "question": "What is the type of video game Call of Destiny.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games where  video_games.gname = \"Call of Destiny\"",
        "question": "What type of game is Call of Destiny?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count(*) from Video_Games where  video_games.gtype = \"Massively multiplayer online game\"",
        "question": "How many video games have type Massively multiplayer online game?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count(*) from Video_Games where  video_games.gtype = \"Massively multiplayer online game\"",
        "question": "Count the number of video games with Massively multiplayer online game type .",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype , count(*) from Video_Games  group by video_games.gtype",
        "question": "Show all video game types and the number of video games in each type.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype , count(*) from Video_Games  group by video_games.gtype",
        "question": "What are the types of video games and how many are in each type?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games  group by video_games.gtype  order by count(*) desc limit 1",
        "question": "Which game type has most number of games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID  group by video_games.gtype  order by count(*) desc limit 1",
        "question": "Which game type has most number of games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games  group by video_games.gtype  order by count(*) desc limit 1",
        "question": "What type has the most games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games  group by video_games.gtype  order by count(*) asc limit 1",
        "question": "Which game type has least number of games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID  group by video_games.gtype  order by count(*) asc limit 1",
        "question": "Which game type has least number of games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games  group by video_games.gtype  order by count(*) asc limit 1",
        "question": "What is the type with the fewest games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gtype from Video_Games  group by video_games.gtype  order by count(video_games.gameid) asc limit 1",
        "question": "What is the type with the fewest games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.city_code = \"CHI\"",
        "question": "Show ids for all students who live in CHI.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.city_code = \"CHI\"",
        "question": "What are the ids of all students who live in CHI?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.advisor = 1121",
        "question": "Show ids for all students who have advisor 1121.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.advisor = \"1121\"",
        "question": "Show ids for all students who have advisor 1121.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.advisor = \"1121\"",
        "question": "What are the ids of all students who have advisor number 1121?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.advisor = 1121",
        "question": "What are the ids of all students who have advisor number 1121?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname from Student where  student.major = 600",
        "question": "Show first name for all students with major 600.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname from Student where  student.major = 600",
        "question": "What are the first names for all students who are from the major numbered 600?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select avg(student.age) , min(student.age) , max(student.age) , student.major from Student  group by student.major",
        "question": "Show the average, minimum, and maximum age for different majors.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.major , avg(student.age) , min(student.age) , max(student.age) from Student  group by student.major",
        "question": "Show the average, minimum, and maximum age for different majors.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select avg(student.age) , min(student.age) , max(student.age) , student.major from Student  group by student.major",
        "question": "What are the average, minimum, and max ages for each of the different majors?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.major , avg(student.age) , min(student.age) , max(student.age) from Student  group by student.major",
        "question": "What are the average, minimum, and max ages for each of the different majors?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.advisor from Student  group by student.advisor having  count(*) >= 2",
        "question": "Show all advisors who have at least two students.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct sportsinfo.sportname) from SportsInfo",
        "question": "How many sports do we have?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct sportsinfo.sportname) from SportsInfo",
        "question": "How many different types of sports do we offer?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct sportsinfo.stuid) from SportsInfo",
        "question": "How many students play sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct sportsinfo.stuid) from SportsInfo",
        "question": "How many different students are involved in sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.sportname , count(*) from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by sportsinfo.sportname",
        "question": "Show all sport name and the number of students.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.sportname , count(*) from SportsInfo  group by sportsinfo.sportname",
        "question": "Show all sport name and the number of students.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.sportname , count(*) from SportsInfo  group by sportsinfo.sportname",
        "question": "How many students play each sport?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.sportname , count(*) from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by sportsinfo.sportname",
        "question": "How many students play each sport?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count(*) , sportsinfo.sportname from SportsInfo  group by sportsinfo.sportname",
        "question": "How many students play each sport?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.stuid , count(*) , sum(sportsinfo.gamesplayed) from SportsInfo  group by sportsinfo.stuid",
        "question": "Show all student IDs with the number of sports and total number of games played",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.stuid from SportsInfo  group by sportsinfo.stuid having  sum(sportsinfo.hoursperweek) > 10",
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.stuid from SportsInfo where  sportsinfo.hoursperweek > 10   intersect select sportsinfo.stuid from SportsInfo  group by sportsinfo.stuid having  sum(sportsinfo.hoursperweek) > 1",
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sportsinfo.stuid from SportsInfo where  sportsinfo.hoursperweek > 10 and sportsinfo.stuid > (select Student.StuID from Student  )  group by sportsinfo.stuid",
        "question": "Show all student IDs with more than total 10 hours per week on all sports played.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from SportsInfo join Student on SportsInfo.StuID = Student.StuID where  sportsinfo.hoursperweek > 10",
        "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from SportsInfo join Student on SportsInfo.StuID = Student.StuID where  sportsinfo.hoursperweek > 10  group by student.stuid",
        "question": "What are the student IDs for everybody who worked for more than 10 hours per week on all sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by student.stuid  order by count(*) desc limit 1",
        "question": "What is the first name and last name of the student who have most number of sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by student.fname, student.lname  order by count(*) desc limit 1",
        "question": "What is the first name and last name of the student who have most number of sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by sportsinfo.stuid  order by count(*) desc limit 1",
        "question": "What is the first name and last name of the student who have most number of sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by sportsinfo.stuid  order by count(*) desc limit 1",
        "question": "What is the first and last name of the student who played the most sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by student.stuid  order by count(*) desc limit 1",
        "question": "What is the first and last name of the student who played the most sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID  group by student.fname, student.lname  order by count(*) desc limit 1",
        "question": "What is the first and last name of the student who played the most sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student   except select sportsinfo.stuid from SportsInfo",
        "question": "Show student ids who don't have any sports.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.stuid not in (select SportsInfo.StuID from SportsInfo  )",
        "question": "Show student ids who don't have any sports.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student   except select sportsinfo.stuid from SportsInfo",
        "question": "What are the ids of all students who don't play sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.stuid not in (select SportsInfo.StuID from SportsInfo  )",
        "question": "What are the ids of all students who don't play sports?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct plays_games.stuid) from Plays_Games",
        "question": "How many students play video games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select count( distinct plays_games.stuid) from Plays_Games",
        "question": "How many different students play games?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student   except select student.stuid from Plays_Games join Student on Plays_Games.StuID = Student.StuID join Video_Games on Plays_Games.GameID = Video_Games.GameID",
        "question": "Show ids of students who don't play video game.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student   except select plays_games.stuid from Plays_Games",
        "question": "Show ids of students who don't play video game.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.stuid not in (select Plays_Games.StuID from Plays_Games  )",
        "question": "Show ids of students who don't play video game.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student   except select student.stuid from Plays_Games join Student on Plays_Games.StuID = Student.StuID join Video_Games on Plays_Games.GameID = Video_Games.GameID",
        "question": "What are the ids of all students who are not video game players?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student   except select plays_games.stuid from Plays_Games",
        "question": "What are the ids of all students who are not video game players?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.stuid from Student where  student.stuid not in (select Plays_Games.StuID from Plays_Games  )",
        "question": "What are the ids of all students who are not video game players?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select plays_games.gameid , sum(plays_games.hours_played) from Plays_Games  group by plays_games.gameid",
        "question": "What are ids and total number of hours played for each game?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select sum(plays_games.hours_played) , plays_games.gameid from Plays_Games  group by plays_games.gameid",
        "question": "What are ids and total number of hours played for each game?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID  group by video_games.gname  order by sum(plays_games.hours_played) desc limit 1",
        "question": "Show the game name that has most number of hours played.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID  group by video_games.gameid  order by sum(plays_games.hours_played) desc limit 1",
        "question": "Show the game name that has most number of hours played.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID  group by plays_games.gameid  order by sum(plays_games.hours_played) desc limit 1",
        "question": "Show the game name that has most number of hours played.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID where  plays_games.hours_played >= 1000",
        "question": "Show all game names played by at least 1000 hours.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID where  plays_games.hours_played >= 1000  group by plays_games.gameid having  count(*) >= 1",
        "question": "Show all game names played by at least 1000 hours.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID where  plays_games.hours_played >= 1000  group by video_games.gname having  count(*) >= 1",
        "question": "Show all game names played by at least 1000 hours.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Video_Games on Plays_Games.GameID = Video_Games.GameID where  plays_games.hours_played >= 1000",
        "question": "What are the names of all the games that have been played for at least 1000 hours?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Student on Plays_Games.StuID = Student.StuID join Video_Games on Plays_Games.GameID = Video_Games.GameID where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "Show all game names played by Linda Smith",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select video_games.gname from Plays_Games join Student on Plays_Games.StuID = Student.StuID join Video_Games on Plays_Games.GameID = Video_Games.GameID where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "What are the names of all games played by Linda Smith?",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.lname , student.fname from SportsInfo join Student on SportsInfo.StuID = Student.StuID where  sportsinfo.sportname = \"Football\" or sportsinfo.sportname = \"Lacrosse\"",
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID where  sportsinfo.sportname = \"Football\" or sportsinfo.sportname = \"Lacrosse\"",
        "question": "Find the last and first name of students who are playing Football or Lacrosse.",
        "correctness": 1
    },
    {
        "db_id": "game_1",
        "query": "select student.fname , student.lname from SportsInfo join Student on SportsInfo.StuID = Student.StuID where  sportsinfo.sportname = \"Football\" or sportsinfo.sportname = \"Lacrosse\"",
        "question": "What is the first and last name of all students who play Football or Lacrosse?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select count(*) from head where  head.age > 56",
        "question": "How many heads of the departments are older than 56 ?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.name , head.born_state , head.age from head   order by head.age asc",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct head.name , head.born_state , head.age from head   order by head.age asc",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select department.creation , department.name , department.budget_in_billions from department",
        "question": "List the creation year, name and budget of each department.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct department.creation , department.name , department.budget_in_billions from department",
        "question": "List the creation year, name and budget of each department.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select max(department.budget_in_billions) , min(department.budget_in_billions) from department",
        "question": "What are the maximum and minimum budget of the departments?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select avg(department.num_employees) from department where  department.ranking between 10 and 15",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.name from head where  head.born_state != \"California\"",
        "question": "What are the names of the heads who are born outside the California state?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.name from head where  head.born_state != \"California\" and head.name not in (select head.name from head where  head.born_state = \"California\"  )",
        "question": "What are the names of the heads who are born outside the California state?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.name from head where  head.born_state != \"California\" and head.born_state not in (select head.born_state from head where  head.born_state = \"California\"  )",
        "question": "What are the names of the heads who are born outside the California state?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.name from head where  head.born_state != \"California\" and head.head_id not in (select head.head_ID from head where  head.born_state = \"California\"  )",
        "question": "What are the names of the heads who are born outside the California state?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.name from head where  head.head_id not in (select head.head_ID from head where  head.born_state = \"California\"  )",
        "question": "What are the names of the heads who are born outside the California state?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct department.creation from management join head on management.head_ID = head.head_ID join department on management.department_ID = department.Department_ID where  head.born_state = \"Alabama\"",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.born_state from head  group by head.born_state having  count(*) >= 3",
        "question": "What are the names of the states where at least 3 heads were born?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct head.born_state from head  group by head.born_state having  count(*) >= 3",
        "question": "What are the names of the states where at least 3 heads were born?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select department.creation from department  group by department.creation  order by count(*) desc limit 1",
        "question": "In which year were most departments established?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct department.creation from department  group by department.creation  order by count(*) desc limit 1",
        "question": "In which year were most departments established?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select department.name , department.num_employees from management join department on management.department_ID = department.Department_ID where  management.temporary_acting = \"Yes\"",
        "question": "Show the name and number of employees for the departments managed by heads whose temporary acting value is 'Yes'?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select count( distinct management.temporary_acting) from management",
        "question": "How many acting statuses are there?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select count(*) from department where  department.department_id not in (select management.department_ID from management  )",
        "question": "How many departments are led by heads who are not mentioned?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct head.age from management join head on management.head_ID = head.head_ID where  management.temporary_acting = \"Yes\"",
        "question": "What are the distinct ages of the heads who are acting?",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.born_state from management join head on management.head_ID = head.head_ID join department on management.department_ID = department.Department_ID where  department.name = \"Treasury\"   intersect select head.born_state from management join head on management.head_ID = head.head_ID join department on management.department_ID = department.Department_ID where  department.name = \"Homeland Security\"",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct head.born_state from management join head on management.head_ID = head.head_ID join department on management.department_ID = department.Department_ID where  department.name = \"Treasury\"   intersect select distinct head.born_state from management join head on management.head_ID = head.head_ID join department on management.department_ID = department.Department_ID where  department.name = \"Homeland Security\"",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select department.department_id , department.name , count(*) from management join head on management.head_ID = head.head_ID join department on management.department_ID = department.Department_ID  group by department.department_id having  count(*) > 1",
        "question": "Which department has more than 1 head at a time? List the id, name and the number of heads.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.head_id , head.name from head where  head.name like \"%Ha%\"",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.head_id , head.name from head where  head.head_id in (select head.head_id from head where  head.name like \"%Ha%\"  )",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.head_id , head.name from head where  head.name like \"%HA%\"",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select head.head_id , head.name from head where  head.name like \"%ha%\"",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1
    },
    {
        "db_id": "department_management",
        "query": "select distinct head.head_id , head.name from head where  head.name like \"%Ha%\"",
        "question": "Which head's name has the substring 'Ha'? List the id and name.",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by courses.course_name  order by count(*) desc limit 1",
        "question": "which course has most number of registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by student_course_registrations.course_id  order by count(*) desc limit 1",
        "question": "which course has most number of registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by courses.course_id  order by count(*) desc limit 1",
        "question": "which course has most number of registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by courses.course_name  order by count(*) desc limit 1",
        "question": "What is the name of the course with the most registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by student_course_registrations.course_id  order by count(*) desc limit 1",
        "question": "What is the name of the course with the most registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by courses.course_id  order by count(*) desc limit 1",
        "question": "What is the name of the course with the most registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations  group by student_course_registrations.student_id  order by count(*) asc limit 1",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations  group by student_course_registrations.student_id  order by count(*) asc limit 1",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by student_course_registrations.student_id  order by count(*) asc limit 1",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations  group by student_course_registrations.student_id  order by count(*) asc limit 1",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.first_name , people.last_name from People",
        "question": "what are the first name and last name of all candidates?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.first_name , people.last_name from Candidates join People on Candidates.candidate_id = People.person_id",
        "question": "what are the first name and last name of all candidates?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct people.first_name , people.last_name from People",
        "question": "what are the first name and last name of all candidates?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.first_name , people.last_name from People",
        "question": "What are the first and last names of all the candidates?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.first_name , people.last_name from Candidates join People on Candidates.candidate_id = People.person_id",
        "question": "What are the first and last names of all the candidates?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct people.first_name , people.last_name from People",
        "question": "What are the first and last names of all the candidates?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_id from Students   except select student_course_attendance.student_id from Student_Course_Attendance",
        "question": "List the id of students who never attends courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_id from Students where  students.student_id not in (select Student_Course_Attendance.student_id from Student_Course_Attendance  )",
        "question": "List the id of students who never attends courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct students.student_id from Students   except select student_course_attendance.student_id from Student_Course_Attendance",
        "question": "List the id of students who never attends courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_id from Students   except select student_course_attendance.student_id from Student_Course_Attendance",
        "question": "What are the  ids of every student who has never attended a course?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_id from Students where  students.student_id not in (select Student_Course_Attendance.student_id from Student_Course_Attendance  )",
        "question": "What are the  ids of every student who has never attended a course?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct students.student_id from Students   except select student_course_attendance.student_id from Student_Course_Attendance",
        "question": "What are the  ids of every student who has never attended a course?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_attendance.student_id from Student_Course_Attendance",
        "question": "List the id of students who attended some courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name , student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id",
        "question": "What are the ids of all students for courses and what are the names of those courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id , courses.course_name from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id",
        "question": "What are the ids of all students for courses and what are the names of those courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id   order by student_course_registrations.registration_date desc limit 1",
        "question": "What is detail of the student who most recently registered course?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id   order by student_course_registrations.registration_date desc limit 1",
        "question": "What details do we have on the students who registered for courses most recently?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  courses.course_name = \"English\"",
        "question": "How many students attend course English?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  courses.course_name = \"English\"",
        "question": "How many students are attending English courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  student_course_attendance.student_id = 171",
        "question": "How many courses do the student whose id is 171 attend?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) from Student_Course_Attendance where  student_course_attendance.student_id = 171",
        "question": "How many courses do the student whose id is 171 attend?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  student_course_attendance.student_id = 171",
        "question": "How many courses does the student with id 171 actually attend?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) from Student_Course_Attendance where  student_course_attendance.student_id = 171",
        "question": "How many courses does the student with id 171 actually attend?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select candidates.candidate_id from Candidates join People on Candidates.candidate_id = People.person_id where  people.email_address = \"stanley.monahan@example.org\"",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct candidates.candidate_id from Candidates join People on Candidates.candidate_id = People.person_id where  people.email_address = \"stanley.monahan@example.org\"",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select candidates.candidate_id from Candidates join People on Candidates.candidate_id = People.person_id where  people.email_address = \"stanley.monahan@example.org\"",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id  group by student_course_registrations.student_id  order by count(*) desc limit 1",
        "question": "What is detail of the student who registered the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id  group by students.student_id  order by count(*) desc limit 1",
        "question": "What is detail of the student who registered the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id  group by student_course_registrations.student_id  order by count(*) desc limit 1",
        "question": "What is detail of the student who registered the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id join Students on Student_Course_Registrations.student_id = Students.student_id  group by student_course_registrations.student_id  order by count(*) desc limit 1",
        "question": "What is detail of the student who registered the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id  group by student_course_registrations.student_id  order by count(*) desc limit 1",
        "question": "What are the details of the student who registered for the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id  group by students.student_id  order by count(*) desc limit 1",
        "question": "What are the details of the student who registered for the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct students.student_details from Student_Course_Registrations join Students on Student_Course_Registrations.student_id = Students.student_id  group by student_course_registrations.student_id  order by count(*) desc limit 1",
        "question": "What are the details of the student who registered for the most number of courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id , count(*) from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by student_course_registrations.student_id",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id , count(*) from Student_Course_Registrations  group by student_course_registrations.student_id",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) , student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by student_course_registrations.student_id",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select count(*) , student_course_registrations.student_id from Student_Course_Registrations  group by student_course_registrations.student_id",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id , count(*) from Student_Course_Registrations  group by student_course_registrations.student_id",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id , count(*) from Student_Course_Registrations  group by student_course_registrations.student_id",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name , count(*) from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id  group by courses.course_name",
        "question": "How many registed students do each course have? List course name and the number of their registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name , count(*) from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id join Students on Student_Course_Registrations.student_id = Students.student_id  group by courses.course_name",
        "question": "How many registed students do each course have? List course name and the number of their registered students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select candidate_assessments.candidate_id from Candidate_Assessments where  candidate_assessments.asessment_outcome_code = \"Pass\"",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select candidates.candidate_id from Candidate_Assessments join Candidates on Candidate_Assessments.candidate_id = Candidates.candidate_id where  candidate_assessments.asessment_outcome_code = \"Pass\"",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select candidates.candidate_id from Candidate_Assessments join Candidates on Candidate_Assessments.candidate_id = Candidates.candidate_id where  candidate_assessments.asessment_outcome_code = \"Pass\"",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select candidate_assessments.candidate_id from Candidate_Assessments where  candidate_assessments.asessment_outcome_code = \"Pass\"",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct candidates.candidate_id from Candidate_Assessments join Candidates on Candidate_Assessments.candidate_id = Candidates.candidate_id where  candidate_assessments.asessment_outcome_code = \"Pass\"",
        "question": "What are the ids of the candidates that have an outcome code of Pass?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.cell_mobile_number from Candidate_Assessments join People on Candidate_Assessments.candidate_id = People.person_id where  candidate_assessments.asessment_outcome_code = \"Fail\"",
        "question": "Find the cell mobile number of the candidates whose assessment code is \"Fail\"?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.cell_mobile_number from Candidate_Assessments join People on Candidate_Assessments.candidate_id = People.person_id where  candidate_assessments.asessment_outcome_code = \"Fail\"",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id = 301",
        "question": "What are the id of students who registered course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id = 301",
        "question": "What are the id of students who registered course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id like \"%301%\"",
        "question": "What are the id of students who registered course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id = 301",
        "question": "What are the ids of the students who registered for course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id = 301",
        "question": "What are the ids of the students who registered for course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id = \"301\"",
        "question": "What are the ids of the students who registered for course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id like \"%301%\"",
        "question": "What are the ids of the students who registered for course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations where  student_course_registrations.course_id like \"301%\"",
        "question": "What are the ids of the students who registered for course 301?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct addresses.city from People_Addresses join Addresses on People_Addresses.address_id = Addresses.address_id",
        "question": "Find distinct cities of addresses of people?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct addresses.city from Students join People on Students.student_id = People.person_id join People_Addresses on People.person_id = People_Addresses.person_id join Addresses on People_Addresses.address_id = Addresses.address_id",
        "question": "Find distinct cities of address of students?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct addresses.city from Students join People on Students.student_id = People.person_id join People_Addresses on People.person_id = People_Addresses.person_id join Addresses on People_Addresses.address_id = Addresses.address_id",
        "question": "What are the different cities where students live?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Courses   order by courses.course_name asc",
        "question": "List the names of courses in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct courses.course_name from Courses   order by courses.course_name asc",
        "question": "List the names of courses in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select courses.course_name from Courses   order by courses.course_name asc",
        "question": "What are the names of the courses in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct courses.course_name from Courses   order by courses.course_name asc",
        "question": "What are the names of the courses in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.first_name from People   order by people.first_name asc",
        "question": "List the first names of people in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct people.first_name from People   order by people.first_name asc",
        "question": "List the first names of people in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select people.first_name from People   order by people.first_name asc",
        "question": "What are the first names of the people in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct people.first_name from People   order by people.first_name asc",
        "question": "What are the first names of the people in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations",
        "question": "What are the id of students who registered courses or attended courses?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations",
        "question": "What are the ids of the students who either registered or attended a course?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.course_id from Student_Course_Registrations where  student_course_registrations.student_id = 121",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_registrations.registration_date asc",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_registrations.registration_date asc",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_registrations.registration_date asc",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_registrations.student_id from Student_Course_Registrations join Courses on Student_Course_Registrations.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_registrations.registration_date asc",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_attendance.student_id from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_attendance.date_of_attendance asc",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select students.student_id from Student_Course_Attendance join Students on Student_Course_Attendance.student_id = Students.student_id join Courses on Student_Course_Attendance.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_attendance.date_of_attendance asc",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select student_course_attendance.student_id from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_attendance.date_of_attendance asc",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "correctness": 1
    },
    {
        "db_id": "student_assessment",
        "query": "select distinct student_course_attendance.student_id from Student_Course_Attendance join Courses on Student_Course_Attendance.course_id = Courses.course_id where  courses.course_name = \"statistics\"   order by student_course_attendance.date_of_attendance asc",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.email from user_profiles where  user_profiles.name = \"Mary\"",
        "question": "Find the emails of the user named \"Mary\".",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select distinct user_profiles.email from user_profiles where  user_profiles.name = \"Mary\"",
        "question": "Find the emails of the user named \"Mary\".",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.partitionid from user_profiles where  user_profiles.name = \"Iron Man\"",
        "question": "What is the partition id of the user named \"Iron Man\".",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select distinct user_profiles.partitionid from user_profiles where  user_profiles.name = \"Iron Man\"",
        "question": "What is the partition id of the user named \"Iron Man\".",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select count(*) from user_profiles",
        "question": "How many users are there?",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select count(*) from tweets",
        "question": "Find the number of tweets in record.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select count( distinct tweets.uid) from tweets",
        "question": "Find the number of users who posted some tweets.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.email from user_profiles where  user_profiles.name like \"%Swift%\"",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.email , user_profiles.name from user_profiles where  user_profiles.name like \"%Swift%\"",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select distinct user_profiles.name , user_profiles.email from user_profiles where  user_profiles.name like \"%Swift%\"",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.email from user_profiles where  user_profiles.name in (select user_profiles.name from user_profiles where  user_profiles.name like \"%Swift%\"  )",
        "question": "Find the name and email of the user whose name contains the word \u2018Swift\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from user_profiles where  user_profiles.email like \"%superstar%\" or user_profiles.email like \"%edu%\"",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select distinct user_profiles.name from user_profiles where  user_profiles.email like \"%superstar%\" or user_profiles.email like \"%edu%\"",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from user_profiles where  user_profiles.email like \"%Superstar%\" or user_profiles.email like \"%edu%\"",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from user_profiles where  user_profiles.email like \"%Superstar%\" or user_profiles.email like \"%Edu%\"",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.email from user_profiles where  user_profiles.followers > 1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.email from user_profiles  group by user_profiles.email having  sum(user_profiles.followers) > 1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.email from user_profiles  group by user_profiles.name having  sum(user_profiles.followers) > 1000",
        "question": "Find the name and email of the users who have more than 1000 followers.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from tweets join user_profiles on tweets.uid = user_profiles.uid  group by tweets.uid having  count(*) > 1",
        "question": "Find the names of users who have more than one tweet.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.uid having  count(*) > 1",
        "question": "Find the names of users who have more than one tweet.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.name having  count(*) > 1",
        "question": "Find the names of users who have more than one tweet.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select distinct user_profiles.name from tweets join user_profiles on tweets.uid = user_profiles.uid  group by tweets.uid having  count(*) > 1",
        "question": "Find the names of users who have more than one tweet.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from user_profiles   order by user_profiles.followers desc limit 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from user_profiles  group by user_profiles.name  order by sum(user_profiles.followers) desc limit 1",
        "question": "Find the name of the user who has the largest number of followers.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.email from user_profiles  group by user_profiles.followers  order by count(*) asc limit 1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.followers from user_profiles   order by user_profiles.followers desc",
        "question": "List the name and number of followers for each user, and sort the results by the number of followers in descending order.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name from user_profiles   order by user_profiles.followers desc limit 5",
        "question": "List the names of 5 users followed by the largest number of other users.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select tweets.text from tweets   order by tweets.createdate asc",
        "question": "List the text of all tweets in the order of date.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , count(*) from tweets join user_profiles on tweets.uid = user_profiles.uid  group by tweets.uid",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , count(*) from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.name",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , count(*) from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.uid",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.partitionid from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.partitionid having  count(*) < 2",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.partitionid from tweets join user_profiles on tweets.uid = user_profiles.uid  group by tweets.uid having  count(*) < 2",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , user_profiles.partitionid from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.uid having  count(*) < 2",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , count(*) from tweets join user_profiles on tweets.uid = user_profiles.uid  group by tweets.uid having  count(*) > 1",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , count(*) from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.uid having  count(*) > 1",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select user_profiles.name , count(*) from tweets join user_profiles on tweets.uid = user_profiles.uid  group by user_profiles.name having  count(*) > 1",
        "question": "Find the name of the user who tweeted more than once, and number of tweets tweeted by them.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select avg(user_profiles.followers) from user_profiles where  user_profiles.uid not in (select tweets.uid from tweets  )",
        "question": "Find the average number of followers for the users who do not have any tweet.",
        "correctness": 1
    },
    {
        "db_id": "twitter_1",
        "query": "select max(user_profiles.followers) , sum(user_profiles.followers) from user_profiles",
        "question": "Find the maximum and total number of followers of all users.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select invoices.billing_country , count(*) from invoices  group by invoices.billing_country  order by count(*) desc limit 5",
        "question": "A list of the top 5 countries by number of invoices. List country name and number of invoices.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select invoices.billing_country , count(*) from invoices  group by invoices.billing_country  order by count(*) desc limit 5",
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct invoices.billing_country , count(*) from invoices  group by invoices.billing_country  order by count(*) desc limit 5",
        "question": "What are the top 5 countries by number of invoices and how many do they have?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select invoices.billing_country , sum(invoices.total) from invoices  group by invoices.billing_country  order by sum(invoices.total) desc limit 8",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.first_name , customers.last_name from invoices join customers on invoices.customer_id = customers.id   order by invoices.invoice_date desc limit 5",
        "question": "Find out 5 customers who most recently purchased something. List customers' first and last name.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.first_name , customers.last_name from invoices join customers on invoices.customer_id = customers.id   order by invoices.invoice_date desc limit 5",
        "question": "What are the first and last names of the 5 customers who purchased something most recently?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.first_name , customers.last_name , count(*) from invoices join customers on invoices.customer_id = customers.id  group by customers.first_name, customers.last_name  order by count(*) desc limit 10",
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select genres.name , count(*) from tracks join genres on tracks.genre_id = genres.id  group by genres.id  order by count(*) desc limit 5",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select genres.name , count(*) from tracks join genres on tracks.genre_id = genres.id  group by genres.name  order by count(*) desc limit 5",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select genres.name , count(*) from tracks join genres on tracks.genre_id = genres.id  group by tracks.genre_id  order by count(*) desc limit 5",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select genres.name , count(*) from tracks join genres on tracks.genre_id = genres.id  group by genres.name  order by count(*) desc limit 5",
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select genres.name , count(*) from tracks join genres on tracks.genre_id = genres.id  group by genres.id  order by count(*) desc limit 5",
        "question": "How many tracks does each genre have and what are the names of the top 5?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums",
        "question": "List every album's title.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from albums",
        "question": "List every album's title.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums",
        "question": "What are the titles of all the albums?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from albums",
        "question": "What are the titles of all the albums?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums   order by albums.title asc",
        "question": "List every album ordered by album title in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from albums   order by albums.title asc",
        "question": "List every album ordered by album title in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums   order by albums.title asc",
        "question": "What are the titles of all the albums alphabetically ascending?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from albums   order by albums.title asc",
        "question": "What are the titles of all the albums alphabetically ascending?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.first_name , customers.last_name from invoices join customers on invoices.customer_id = customers.id   order by invoices.total asc limit 10",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select sum(invoices.total) from invoices where  invoices.billing_city = \"Chicago\" and invoices.billing_state = \"IL\"",
        "question": "List total amount of  invoice from Chicago, IL.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select sum(invoices.total) from invoices where  invoices.billing_city = \"Chicago\" or invoices.billing_state = \"IL\"",
        "question": "List total amount of  invoice from Chicago, IL.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select sum(invoices.total) from invoices where  invoices.billing_city = \"Chicago\" or invoices.billing_city = \"Illinois\"",
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select sum(invoices.total) from invoices where  invoices.billing_city = \"Chicago\"",
        "question": "What are the total amount of money in the invoices billed from Chicago, Illinois?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from invoices where  invoices.billing_city = \"Chicago\" and invoices.billing_state = \"IL\"",
        "question": "List the number of invoices from Chicago, IL.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from invoices where  invoices.billing_city = \"Chicago\" or invoices.billing_state = \"IL\"",
        "question": "List the number of invoices from Chicago, IL.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from invoices where  invoices.billing_city = \"Chicago\"",
        "question": "How many invoices were billed from Chicago, IL?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from invoices where  invoices.billing_city = \"Chicago\" or invoices.billing_city = \"IL\"",
        "question": "How many invoices were billed from Chicago, IL?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums join artists on albums.artist_id = artists.id where  artists.name = \"Aerosmith\"",
        "question": "List Aerosmith's albums.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from albums join artists on albums.artist_id = artists.id where  artists.name = \"Aerosmith\"",
        "question": "List Aerosmith's albums.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums join artists on albums.artist_id = artists.id where  artists.name = \"Aerosmith\"",
        "question": "What are the titles of all the Aerosmith albums?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from albums join artists on albums.artist_id = artists.id where  artists.name = \"Aerosmith\"",
        "question": "What are the titles of all the Aerosmith albums?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from albums join artists on albums.artist_id = artists.id where  artists.name = \"Billy Cobham\"",
        "question": "How many albums does Billy Cobham has?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.company from customers where  customers.first_name = \"Eduardo\" and customers.last_name = \"Martins\"",
        "question": "Eduardo Martins is a customer at which company?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct customers.company from customers where  customers.first_name = \"Eduardo\" and customers.last_name = \"Martins\"",
        "question": "Eduardo Martins is a customer at which company?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.company from customers where  customers.first_name = \"Eduardo\" and customers.last_name = \"Martins\"",
        "question": "What is the company where Eduardo Martins is a customer?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.email , customers.phone from customers where  customers.first_name = \"Astrid\" and customers.last_name = \"Gruber\"",
        "question": "What is Astrid Gruber's email and phone number?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.phone , customers.email from customers where  customers.first_name = \"Astrid\" and customers.last_name = \"Gruber\"",
        "question": "What is Astrid Gruber's email and phone number?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.email , customers.phone from customers where  customers.first_name = \"Astrid\" and customers.last_name = \"Gruber\"",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from customers where  customers.city = \"Prague\"",
        "question": "How many customers live in Prague city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from customers where  customers.city = \"Prague\"",
        "question": "How many customers live in the city of Prague?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from customers where  customers.state = \"CA\"",
        "question": "How many customers in state of CA?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from customers where  customers.state = \"CA\"",
        "question": "How many customers are from California?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.country from customers where  customers.first_name = \"Roberto\" and customers.last_name = \"Almeida\"",
        "question": "What country does Roberto Almeida live?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct customers.country from customers where  customers.first_name = \"Roberto\" and customers.last_name = \"Almeida\"",
        "question": "What country does Roberto Almeida live?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select customers.country from customers where  customers.first_name = \"Roberto\" and customers.last_name = \"Almeida\"",
        "question": "In which country does Roberto Almeida?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct customers.country from customers where  customers.first_name = \"Roberto\" and customers.last_name = \"Almeida\"",
        "question": "In which country does Roberto Almeida?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums join artists on albums.artist_id = artists.id where  artists.name like \"%Led%\"",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums where  albums.title in (select albums.title from albums join artists on albums.artist_id = artists.id where  artists.name like \"%Led%\"  )",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums where  albums.artist_id in (select artists.id from artists where  artists.name like \"%Led%\"  )",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums join artists on albums.artist_id = artists.id where  artists.name like \"%Led%\"",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from albums where  albums.title in (select albums.title from albums join artists on albums.artist_id = artists.id where  artists.name like \"%Led%\"  )",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from customers join employees on customers.support_rep_id = employees.id where  employees.first_name = \"Steve\" and employees.last_name = \"Johnson\"",
        "question": "How many customers does Steve Johnson support?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from customers join employees on customers.support_rep_id = employees.id where  employees.first_name = \"Steve\" and employees.last_name = \"Johnson\"",
        "question": "What is the count of customers that Steve Johnson supports?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.title , employees.phone , employees.hire_date from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.title , employees.phone , employees.hire_date from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"",
        "question": "What is the title, phone number and hire date for the employee named Nancy Edwards?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"",
        "question": "What is the address of employee Nancy Edwards?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.address from employees where  employees.address = (select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"  )",
        "question": "What is the address of employee Nancy Edwards?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"",
        "question": "What is Nancy Edwards's address?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\" and employees.address = (select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"  )",
        "question": "What is Nancy Edwards's address?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.address from employees where  employees.address = (select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"  )",
        "question": "What is Nancy Edwards's address?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.address from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\" and employees.address = (select employees.address from employees where  employees.first_name = \"Nancy\"  )",
        "question": "What is Nancy Edwards's address?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from customers join employees on customers.support_rep_id = employees.id  group by employees.id  order by count(*) desc limit 1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from customers join employees on customers.support_rep_id = employees.id  group by employees.first_name, employees.last_name  order by count(*) desc limit 1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct employees.first_name , employees.last_name from customers join employees on customers.support_rep_id = employees.id  group by employees.id  order by count(*) desc limit 1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct employees.first_name , employees.last_name from customers join employees on customers.support_rep_id = employees.id  group by customers.id  order by count(*) desc limit 1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from customers join employees on customers.support_rep_id = employees.id  group by employees.first_name, employees.last_name  order by count(*) desc limit 1",
        "question": "What is the full name of the employee who has the most customers?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from customers join employees on customers.support_rep_id = employees.id  group by employees.id  order by count(*) desc limit 1",
        "question": "What is the full name of the employee who has the most customers?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from employees where  employees.country = \"Canada\"",
        "question": "How many employees are living in Canada?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) from employees where  employees.country = \"Canada\"",
        "question": "How many employees live in Canada?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.phone from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"",
        "question": "What is employee Nancy Edwards's phone number?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.phone from employees where  employees.first_name = \"Nancy\" or employees.last_name = \"Edwards\"",
        "question": "What is employee Nancy Edwards's phone number?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.phone from employees where  employees.first_name = \"Nancy\" and employees.last_name = \"Edwards\"",
        "question": "What is the the phone number of Nancy Edwards?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.phone from employees where  employees.first_name = \"Nancy\" or employees.last_name = \"Edwards\"",
        "question": "What is the the phone number of Nancy Edwards?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from employees   order by employees.birth_date desc limit 1",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from employees   order by employees.hire_date asc limit 10",
        "question": "List top 10 employee work longest in the company. List employee's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.first_name , employees.last_name from employees   order by employees.hire_date asc limit 10",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) , employees.city from employees where  employees.title = \"IT Staff\"  group by employees.city",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.city , count(*) from employees where  employees.title = \"IT Staff\"  group by employees.city",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct employees.city , count(*) from employees where  employees.title = \"IT Staff\"  group by employees.city",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select employees.city , count(*) from employees where  employees.title = \"IT Staff\"  group by employees.city",
        "question": "How many employees who are IT staff are from each city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select count(*) , employees.city from employees where  employees.title = \"IT Staff\"  group by employees.city",
        "question": "How many employees who are IT staff are from each city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct employees.city , count(*) from employees where  employees.title = \"IT Staff\"  group by employees.city",
        "question": "How many employees who are IT staff are from each city?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select sum(invoices.total) from invoices join customers on invoices.customer_id = customers.id where  customers.first_name = \"Lucas\" and customers.last_name = \"Mancini\"",
        "question": "What is the total amount of money spent by Lucas Mancini?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct media_types.name from media_types",
        "question": "List all media types.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select media_types.name from media_types",
        "question": "List all media types.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select media_types.name from media_types",
        "question": "What are the names of all the media types?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct media_types.name from media_types",
        "question": "What are the names of all the media types?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select media_types.name from media_types  group by media_types.name",
        "question": "What are the names of all the media types?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct genres.name from genres",
        "question": "List all different genre types.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct genres.name from genres",
        "question": "What are the different names of the genres?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select genres.name from genres",
        "question": "What are the different names of the genres?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select playlists.name from playlists",
        "question": "List the name of all playlist.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select playlists.name from playlists",
        "question": "What are the names of all the playlists?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.composer from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "Who is the composer of track Fast As a Shark?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct tracks.composer from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "Who is the composer of track Fast As a Shark?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.composer from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct tracks.composer from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.milliseconds from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "How long does track Fast As a Shark has?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.milliseconds from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "How many milliseconds long is Fast As a Shark?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\"",
        "question": "What is the name of tracks whose genre is Rock?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\"",
        "question": "What is the name of all tracks in the Rock genre?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from tracks join albums on tracks.album_id = albums.id  group by albums.title having  count(*) > 10",
        "question": "List title of albums have the number of tracks greater than 10.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from tracks join albums on tracks.album_id = albums.id  group by tracks.album_id having  count(*) > 10",
        "question": "List title of albums have the number of tracks greater than 10.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from tracks join albums on tracks.album_id = albums.id  group by albums.title having  count(*) > 10",
        "question": "List title of albums have the number of tracks greater than 10.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from tracks join albums on tracks.album_id = albums.id  group by tracks.album_id having  count(*) > 10",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from tracks join albums on tracks.album_id = albums.id  group by albums.id having  count(*) > 10",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct albums.title from tracks join albums on tracks.album_id = albums.id  group by tracks.album_id having  count(*) > 10",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select albums.title from tracks join albums on tracks.album_id = albums.id  group by albums.title having  count(*) > 10",
        "question": "What are the names of the albums that have more than 10 tracks?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join media_types on tracks.media_type_id = media_types.id join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\" and media_types.name = \"MPEG audio file\"",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\" and tracks.media_type_id = 1",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join media_types on tracks.media_type_id = media_types.id join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\" or media_types.name = \"MPEG audio file\"",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\" or genres.name = \"Jazz\"",
        "question": "List the name of tracks belongs to genre Rock or genre Jazz.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from tracks join genres on tracks.genre_id = genres.id where  genres.name = \"Rock\" or genres.name = \"Jazz\"",
        "question": "What are the names of the tracks that are Rock or Jazz songs?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"",
        "question": "List the name of all tracks in the playlists of Movies.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"",
        "question": "List the name of all tracks in the playlists of Movies.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Moving Pictures\"",
        "question": "List the name of all tracks in the playlists of Movies.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select playlists.name from playlist_tracks join playlists on playlist_tracks.playlist_id = playlists.id  group by playlist_tracks.playlist_id having  count(*) > 100",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select playlists.name from playlist_tracks join playlists on playlist_tracks.playlist_id = playlists.id  group by playlists.id having  count(*) > 100",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select playlists.name from playlist_tracks join playlists on playlist_tracks.playlist_id = playlists.id  group by playlist_tracks.playlist_id having  count(*) > 100",
        "question": "What are the names of all playlists that have more than 100 tracks?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select playlists.name from playlist_tracks join playlists on playlist_tracks.playlist_id = playlists.id  group by playlists.id having  count(*) > 100",
        "question": "What are the names of all playlists that have more than 100 tracks?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from invoice_lines join tracks on invoice_lines.track_id = tracks.id join invoices on invoice_lines.invoice_id = invoices.id join customers on invoices.customer_id = customers.id where  customers.first_name = \"Daan\" and customers.last_name = \"Peeters\"",
        "question": "List all tracks bought by customer Daan Peeters.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select distinct tracks.name from invoice_lines join tracks on invoice_lines.track_id = tracks.id join invoices on invoice_lines.invoice_id = invoices.id join customers on invoices.customer_id = customers.id where  customers.first_name = \"Daan\" and customers.last_name = \"Peeters\"",
        "question": "List all tracks bought by customer Daan Peeters.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.unit_price from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "How much is the track Fast As a Shark?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.unit_price from tracks where  tracks.name = \"Fast As a Shark\"",
        "question": "What is the unit price of the tune \"Fast As a Shark\"?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   except select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Music\"",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   except select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musik\"",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   except select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Music\"",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   except select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musik\"",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Music\"",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musik\"",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musique\"",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musically inclined\"",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Music\"",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musik\"",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musique\"",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "correctness": 1
    },
    {
        "db_id": "store_1",
        "query": "select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Movies\"   intersect select tracks.name from playlist_tracks join tracks on playlist_tracks.track_id = tracks.id join playlists on playlist_tracks.playlist_id = playlists.id where  playlists.name = \"Musically inclined\"",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Accounts",
        "question": "How many accounts do we have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Accounts",
        "question": "Count the number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.account_id , accounts.customer_id , accounts.account_name from Accounts",
        "question": "Show ids, customer ids, names for all accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.account_id , accounts.customer_id , accounts.account_name from Accounts",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct accounts.account_id , accounts.customer_id , accounts.account_name from Accounts",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.other_account_details from Accounts where  accounts.account_name = \"338\"",
        "question": "Show other account details for account with name 338.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.other_account_details from Accounts where  accounts.account_name = 338",
        "question": "Show other account details for account with name 338.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.other_account_details from Accounts where  accounts.account_name = \"338\"",
        "question": "What are the other account details for the account with the name 338?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.other_account_details from Accounts where  accounts.account_name = 338",
        "question": "What are the other account details for the account with the name 338?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = 162",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = \"162\"",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = 162",
        "question": "What is the first name, last name, and phone of the customer with account name 162?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = 162",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = 162  group by accounts.customer_id having  count(*) = 1",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = \"162\"",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_phone , customers.customer_first_name , customers.customer_last_name from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = 162",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  accounts.account_name = 162",
        "question": "Give the full name and phone of the customer who has the account name 162.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  customers.customer_first_name = \"Art\" and customers.customer_last_name = \"Turcotte\"",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Accounts on Customers.customer_id = Accounts.customer_id where  customers.customer_first_name = \"Art\" and customers.customer_last_name = \"Turcotte\"",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.customer_id , count(*) from Accounts  group by accounts.customer_id",
        "question": "Show all customer ids and the number of accounts for each customer.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) , accounts.customer_id from Accounts  group by accounts.customer_id",
        "question": "How many accounts are there for each customer id?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.customer_id , count(*) from Accounts  group by accounts.customer_id",
        "question": "How many accounts are there for each customer id?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.customer_id , count(*) from Accounts  group by accounts.customer_id  order by count(*) desc limit 1",
        "question": "Show the customer id and number of accounts with most accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.customer_id , count(*) from Accounts  group by accounts.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer id of the customer with the most accounts, and how many accounts does this person have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , accounts.customer_id from Customers join Accounts on Customers.customer_id = Accounts.customer_id  group by accounts.customer_id  order by count(*) asc limit 1",
        "question": "What is the customer first, last name and id with least number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , accounts.customer_id from Customers join Accounts on Customers.customer_id = Accounts.customer_id  group by accounts.customer_id  order by count(*) asc limit 1",
        "question": "Give the full name and customer id of the customer with the fewest accounts.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "Show the number of all customers without an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "How many customers do not have an account?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "Show the first names and last names of customers without any account.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name from Customers   except select customers.customer_first_name , customers.customer_last_name from Customers join Accounts on Customers.customer_id = Accounts.customer_id",
        "question": "Show the first names and last names of customers without any account.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "What are the full names of customers who do not have any accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name from Customers   except select customers.customer_first_name , customers.customer_last_name from Customers join Accounts on Customers.customer_id = Accounts.customer_id",
        "question": "What are the full names of customers who do not have any accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name from Customers where  customers.customer_id not in (select Accounts.customer_id from Accounts  )",
        "question": "What are the full names of customers who do not have any accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name from Customers join Accounts on Customers.customer_id = Accounts.customer_id",
        "question": "Show distinct first and last names for all customers with an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name from Customers join Accounts on Customers.customer_id = Accounts.customer_id",
        "question": "What are the full names of customers who have accounts?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count( distinct accounts.customer_id) from Accounts",
        "question": "How many customers have an account?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count( distinct accounts.customer_id) from Accounts",
        "question": "Count the number of customers who hold an account.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers",
        "question": "How many customers do we have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers",
        "question": "Count the number of customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_id , customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_id , customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers",
        "question": "Show ids, first names, last names, and phones for all customers.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_id , customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers",
        "question": "What are the ids, full names, and phones of each customer?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_id , customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers",
        "question": "What are the ids, full names, and phones of each customer?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_id , customers.customer_phone , customers.customer_first_name , customers.customer_last_name from Customers",
        "question": "What are the ids, full names, and phones of each customer?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_phone , customers.customer_email from Customers where  customers.customer_first_name = \"Aniyah\" and customers.customer_last_name = \"Feest\"",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_email , customers.customer_phone from Customers where  customers.customer_first_name = \"Aniyah\" and customers.customer_last_name = \"Feest\"",
        "question": "What is the phone and email for customer with first name Aniyah and last name Feest?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_phone , customers.customer_email from Customers where  customers.customer_first_name = \"Aniyah\" and customers.customer_last_name = \"Feest\"",
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_email , customers.customer_phone from Customers where  customers.customer_first_name = \"Aniyah\" and customers.customer_last_name = \"Feest\"",
        "question": "Return the phone and email of the customer with the first name Aniyah and last name Feest.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers_Cards",
        "question": "Show the number of customer cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers_Cards",
        "question": "How many customer cards are there?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_id , customers_cards.customer_id , customers_cards.card_type_code , customers_cards.card_number from Customers_Cards",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_id , customers_cards.customer_id , customers_cards.card_type_code , customers_cards.card_number from Customers_Cards",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_id , customers_cards.customer_id , customers_cards.card_type_code , customers_cards.card_number from Customers_Cards",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_number , customers_cards.customer_id , customers_cards.card_type_code , customers_cards.card_id from Customers_Cards",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.date_valid_from , customers_cards.date_valid_to from Customers_Cards where  customers_cards.card_number = \"4560596484842\"",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.date_valid_to , customers_cards.date_valid_from from Customers_Cards where  customers_cards.card_number = \"4560596484842\"",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.date_valid_from , customers_cards.date_valid_to from Customers_Cards where  customers_cards.card_number = 4560596484842",
        "question": "Show the date valid from and the date valid to for the card with card number '4560596484842'.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.date_valid_from , customers_cards.date_valid_to from Customers_Cards where  customers_cards.card_number = 4560596484842",
        "question": "What are the valid from and valid to dates for the card with the number 4560596484842?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.date_valid_from , customers_cards.date_valid_to from Customers_Cards where  customers_cards.card_number = \"4560596484842\"",
        "question": "What are the valid from and valid to dates for the card with the number 4560596484842?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_number = 4560596484842",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_number = \"4560596484842\"",
        "question": "What is the first name, last name, and phone of the customer with card 4560596484842.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_number = 4560596484842",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_number = \"4560596484842\"",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers.customer_first_name , customers.customer_last_name , customers.customer_phone from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_number = 4560596484842",
        "question": "Return the full name and phone of the customer who has card number 4560596484842.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Art\" and customers.customer_last_name = \"Turcotte\"",
        "question": "How many cards does customer Art Turcotte have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Art\" and customers.customer_last_name = \"Turcotte\"",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Arc\" and customers.customer_last_name = \"Turcotte\"",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers_Cards where  customers_cards.card_type_code = \"Debit\"",
        "question": "How many debit cards do we have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers_Cards where  customers_cards.card_type_code = \"Debit\"",
        "question": "Count the number of customer cards of the type Debit.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Blanche\" and customers.customer_last_name = \"Huels\"",
        "question": "How many credit cards does customer Blanche Huels have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Blanche\" and customers.customer_last_name = \"Huels\" and customers_cards.card_type_code = \"Credit\"",
        "question": "How many credit cards does customer Blanche Huels have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Blanche\" and customers.customer_last_name = \"Huels\"",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers.customer_first_name = \"Blanche\" and customers.customer_last_name = \"Huels\" and customers_cards.card_type_code = \"Credit\"",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.customer_id , count(*) from Customers_Cards  group by customers_cards.customer_id",
        "question": "Show all customer ids and the number of cards owned by each customer.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.customer_id , count(*) from Customers_Cards  group by customers_cards.customer_id",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.customer_id , count(*) from Customers_Cards  group by customers_cards.customer_id",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) , customers_cards.customer_id from Customers_Cards  group by customers_cards.customer_id",
        "question": "What are the different customer ids, and how many cards does each one hold?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.customer_id , count(*) from Customers_Cards  group by customers_cards.customer_id  order by count(*) desc limit 1",
        "question": "What is the customer id with most number of cards, and how many does he have?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.customer_id , count(*) from Customers_Cards  group by customers_cards.customer_id  order by count(*) desc limit 1",
        "question": "Return the id of the customer who has the most cards, as well as the number of cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id  group by customers_cards.customer_id having  count(*) >= 2",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id  group by customers_cards.customer_id having  count(*) >= 2",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.customer_id , customers.customer_first_name , customers.customer_last_name from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id  group by Customers_Cards.customer_id having  count(*) >= 2",
        "question": "Show id, first and last names for all customers with at least two cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code , count(*) from Customers_Cards  group by customers_cards.card_type_code",
        "question": "Show all card type codes and the number of cards in each type.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code , count(*) from Customers_Cards  group by customers_cards.card_type_code",
        "question": "Show all card type codes and the number of cards in each type.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code , count(*) from Customers_Cards  group by customers_cards.card_type_code",
        "question": "What are the different card types, and how many cards are there of each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code , count(*) from Customers_Cards  group by customers_cards.card_type_code",
        "question": "What are the different card types, and how many cards are there of each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) , customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code",
        "question": "What are the different card types, and how many cards are there of each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code  order by count(*) desc limit 1",
        "question": "What is the card type code with most number of cards?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code  order by count(*) desc limit 1",
        "question": "Return the code of the card type that is most common.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code  order by count(*) desc limit 1",
        "question": "Return the code of the card type that is most common.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code having  count(*) >= 5",
        "question": "Show card type codes with at least 5 cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code having  count(*) >= 5",
        "question": "Show card type codes with at least 5 cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code having  count(*) > 5",
        "question": "Show card type codes with at least 5 cards.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code having  count(*) >= 5",
        "question": "What are the codes of card types that have 5 or more cards?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code having  count(*) >= 5",
        "question": "What are the codes of card types that have 5 or more cards?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code from Customers_Cards  group by customers_cards.card_type_code having  count(*) > 5",
        "question": "What are the codes of card types that have 5 or more cards?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code , count( distinct customers_cards.customer_id) from Customers_Cards  group by customers_cards.card_type_code",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code , count( distinct customers_cards.customer_id) from Customers_Cards  group by customers_cards.card_type_code",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_id , customers.customer_first_name from Customers   except select customers.customer_id , customers.customer_first_name from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_type_code = \"Credit\"",
        "question": "Show the customer ids and firstname without a credit card.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_id , customers.customer_first_name from Customers where  customers.customer_id not in (select Customers_Cards.customer_id from Customers_Cards where  customers_cards.card_type_code = \"Credit\"  )",
        "question": "Show the customer ids and firstname without a credit card.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers.customer_id , customers.customer_first_name from Customers   except select customers.customer_id , customers.customer_first_name from Customers join Customers_Cards on Customers.customer_id = Customers_Cards.customer_id where  customers_cards.card_type_code = \"Credit\"",
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code from Customers_Cards",
        "question": "Show all card type codes.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code from Customers_Cards",
        "question": "What are the different card type codes?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count( distinct customers_cards.card_type_code) from Customers_Cards",
        "question": "Show the number of card types.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count( distinct customers_cards.card_type_code) from Customers_Cards",
        "question": "How many different card types are there?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct financial_transactions.transaction_type from Financial_Transactions",
        "question": "Show all transaction types.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct financial_transactions.transaction_type from Financial_Transactions",
        "question": "What are the different types of transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count( distinct financial_transactions.transaction_type) from Financial_Transactions",
        "question": "Show the number of transaction types.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count( distinct financial_transactions.transaction_type) from Financial_Transactions",
        "question": "How many different types of transactions are there?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select avg(financial_transactions.transaction_amount) , sum(financial_transactions.transaction_amount) from Financial_Transactions",
        "question": "What is the average and total transaction amount?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select avg(financial_transactions.transaction_amount) , sum(financial_transactions.transaction_amount) from Financial_Transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select customers_cards.card_type_code , count(*) from Financial_Transactions join Customers_Cards on Financial_Transactions.card_id = Customers_Cards.card_id  group by customers_cards.card_type_code",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct customers_cards.card_type_code , count(*) from Financial_Transactions join Customers_Cards on Financial_Transactions.card_id = Customers_Cards.card_id  group by customers_cards.card_type_code",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.transaction_type , count(*) from Financial_Transactions  group by financial_transactions.transaction_type",
        "question": "Show the transaction type and the number of transactions.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.transaction_type , count(*) from Financial_Transactions  group by financial_transactions.transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct financial_transactions.transaction_type , count(*) from Financial_Transactions  group by financial_transactions.transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) , financial_transactions.transaction_type from Financial_Transactions  group by financial_transactions.transaction_type",
        "question": "What are the different transaction types, and how many transactions of each have taken place?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.transaction_type from Financial_Transactions  group by financial_transactions.transaction_type  order by sum(financial_transactions.transaction_amount) desc limit 1",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.transaction_type from Financial_Transactions  group by financial_transactions.transaction_type  order by count(*) desc limit 1",
        "question": "What is the transaction type that has processed the greatest total amount in transactions?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.transaction_type from Financial_Transactions  group by financial_transactions.transaction_type  order by sum(financial_transactions.transaction_amount) desc limit 1",
        "question": "Return the type of transaction with the highest total amount.",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by financial_transactions.account_id",
        "question": "Show the account id and the number of transactions for each account",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.account_id , count(*) from Financial_Transactions  group by financial_transactions.account_id",
        "question": "Show the account id and the number of transactions for each account",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select accounts.account_id , count(*) from Financial_Transactions join Accounts on Financial_Transactions.account_id = Accounts.account_id  group by accounts.account_id",
        "question": "Show the account id and the number of transactions for each account",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select financial_transactions.account_id , count(*) from Financial_Transactions  group by financial_transactions.account_id",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select distinct financial_transactions.account_id , count(*) from Financial_Transactions  group by financial_transactions.account_id",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "correctness": 1
    },
    {
        "db_id": "customers_card_transactions",
        "query": "select count(*) , financial_transactions.account_id from Financial_Transactions  group by financial_transactions.account_id",
        "question": "What are the different account ids that have made financial transactions, as well as how many transactions correspond to each?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select count(*) from track",
        "question": "How many tracks do we have?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select count(*) from track",
        "question": "Count the number of tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from track",
        "question": "Show the name and location for all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name , track.location from track",
        "question": "Show the name and location for all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from track",
        "question": "What are the names and locations of all tracks?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name , track.location from track",
        "question": "What are the names and locations of all tracks?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating from track where  track.year_opened > 2000   order by track.seating asc",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating from track where  track.year_opened >= 2000   order by track.seating asc",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating from track where  track.year_opened > 2000   order by track.name,track.seating asc",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating from track where  track.year_opened > 2000   order by track.name asc",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating from track where  track.year_opened > 2000   order by track.seating asc",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating from track where  track.year_opened >= 2000   order by track.seating asc",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name , track.seating from track where  track.year_opened > 2000   order by track.seating asc",
        "question": "What are the names and seatings for all tracks opened after 2000, ordered by seating?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.seating from track   order by track.year_opened desc limit 1",
        "question": "What is the name, location and seating for the most recently opened track?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.seating , track.location from track   order by track.year_opened desc limit 1",
        "question": "What is the name, location and seating for the most recently opened track?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.seating from track   order by track.year_opened desc limit 1",
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name , track.location , track.seating from track   order by track.year_opened desc limit 1",
        "question": "Return the name, location, and seating of the track that was opened in the most recent year.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select min(track.seating) , max(track.seating) , avg(track.seating) from track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select max(track.seating) , min(track.seating) , avg(track.seating) from track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select min(track.seating) , avg(track.seating) , max(track.seating) from track",
        "question": "What is the minimum, maximum, and average seating for all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select min(track.seating) , max(track.seating) , avg(track.seating) from track",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select min(track.seating) , avg(track.seating) , max(track.seating) from track",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select max(track.seating) , min(track.seating) , avg(track.seating) from track",
        "question": "Return the minimum, maximum, and average seating across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.year_opened from track where  track.seating > (select avg(track.seating) from track  )",
        "question": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.year_opened from track where  track.seating >= (select avg(track.seating) from track  )",
        "question": "Show the name, location, open year for all tracks with a seating higher than the average.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.year_opened from track where  track.seating > (select avg(track.seating) from track  )",
        "question": "What are the names, locations, and years of opening for tracks with seating higher than average?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.year_opened from track where  track.seating >= (select avg(track.seating) from track  )",
        "question": "What are the names, locations, and years of opening for tracks with seating higher than average?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location , track.year_opened from track  group by track.Track_ID having  avg(track.seating) > (select avg(track.seating) from track  )",
        "question": "What are the names, locations, and years of opening for tracks with seating higher than average?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.location from track",
        "question": "What are distinct locations where tracks are located?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.location from track",
        "question": "What are distinct locations where tracks are located?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.location from track",
        "question": "Give the different locations of tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.location from track",
        "question": "Give the different locations of tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.location from track  group by track.location",
        "question": "Give the different locations of tracks.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select count(*) from race",
        "question": "How many races are there?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select count(*) from race",
        "question": "Count the number of races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.class from race",
        "question": "What are the distinct classes that races can have?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.class from race",
        "question": "Return the different classes of races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.name , race.class , race.date from race",
        "question": "Show name, class, and date for all races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.name , race.class , race.date from race",
        "question": "Show name, class, and date for all races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.name , race.date , race.class from race",
        "question": "Show name, class, and date for all races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.name , race.class , race.date from race",
        "question": "What are the names, classes, and dates for all races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.name , race.class , race.date from race",
        "question": "What are the names, classes, and dates for all races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.name , race.date , race.class from race",
        "question": "What are the names, classes, and dates for all races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.date , race.name , race.class from race",
        "question": "What are the names, classes, and dates for all races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.class , count(*) from race  group by race.class",
        "question": "Show the race class and number of races in each class.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.class , count(*) from race  group by race.class",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.class , count(*) from race  group by race.class",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select count(*) , race.class from race  group by race.class",
        "question": "What are the different classes of races, and how many races correspond to each?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.class from race  group by race.class  order by count(*) desc limit 1",
        "question": "What is the race class with most number of races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.class from race  group by race.class  order by count(*) desc limit 1",
        "question": "Give the class of races that is most common.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.class from race  group by race.class  order by count(*) desc limit 1",
        "question": "Give the class of races that is most common.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.class from race  group by race.class having  count(*) >= 2",
        "question": "List the race class with at least two races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.class from race  group by race.class having  count(*) >= 2",
        "question": "List the race class with at least two races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.class from race  group by race.class having  count(*) >= 2",
        "question": "What are the classes of races that have two or more corresponding races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.class from race  group by race.class having  count(*) >= 2",
        "question": "What are the classes of races that have two or more corresponding races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track   except select track.name from race join track on race.Track_ID = track.Track_ID where  race.class = \"GT\"",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track where  track.track_id not in (select race.Track_ID from race where  race.class = \"GT\"  )",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name from track   except select distinct track.name from race join track on race.Track_ID = track.Track_ID where  race.class = \"GT\"",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name from track where  track.track_id not in (select race.Track_ID from race where  race.class = \"GT\"  )",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track where  track.track_id not in (select track.Track_ID from track join race on track.Track_ID = race.Track_ID where  race.class = \"GT\"  )",
        "question": "What are the names for tracks without a race in class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track where  track.track_id not in (select race.Track_ID from race where  race.class = \"GT\"  )",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track   except select track.name from race join track on race.Track_ID = track.Track_ID where  race.class = \"GT\"",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name from track where  track.track_id not in (select race.Track_ID from race where  race.class = \"GT\"  )",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name from track   except select distinct track.name from race join track on race.Track_ID = track.Track_ID where  race.class = \"GT\"",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track where  track.track_id not in (select race.Track_ID from race  )",
        "question": "Show all track names that have had no races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name from track where  track.track_id not in (select race.Track_ID from race  )",
        "question": "Show all track names that have had no races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from track where  track.track_id not in (select race.Track_ID from race  )",
        "question": "Return the names of tracks that have no had any races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name from track where  track.track_id not in (select race.Track_ID from race  )",
        "question": "Return the names of tracks that have no had any races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.year_opened from track where  track.seating between 4000 and 5000",
        "question": "What are the years of opening for tracks with seating between 4000 and 5000?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.year_opened from track where  track.seating between 4000 and 5500",
        "question": "What are the years of opening for tracks with seating between 4000 and 5000?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.year_opened from track where  track.seating between 4000 and 5000",
        "question": "What are the years of opening for tracks with seating between 4000 and 5000?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , count(*) from race join track on race.Track_ID = track.Track_ID  group by race.track_id",
        "question": "Show the name of track and the number of races in each track.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , count(*) from race join track on race.Track_ID = track.Track_ID  group by race.track_id",
        "question": "What are the names of different tracks, and how many races has each had?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select count(*) , track.name from race join track on race.Track_ID = track.Track_ID  group by race.track_id",
        "question": "What are the names of different tracks, and how many races has each had?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name , count(*) from race join track on race.Track_ID = track.Track_ID  group by race.track_id",
        "question": "What are the names of different tracks, and how many races has each had?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from race join track on race.Track_ID = track.Track_ID  group by race.track_id  order by count(*) desc limit 1",
        "question": "Show the name of track with most number of races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from race join track on race.Track_ID = track.Track_ID  group by track.track_id  order by count(*) desc limit 1",
        "question": "Show the name of track with most number of races.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from race join track on race.Track_ID = track.Track_ID  group by race.track_id  order by count(*) desc limit 1",
        "question": "What is the name of the track that has had the greatest number of races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name from race join track on race.Track_ID = track.Track_ID  group by track.track_id  order by count(*) desc limit 1",
        "question": "What is the name of the track that has had the greatest number of races?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.name , race.date , track.name from race join track on race.Track_ID = track.Track_ID",
        "question": "Show the name and date for each race and its track name.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select race.name , race.date , track.name from race join track on race.Track_ID = track.Track_ID",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct race.name , race.date , track.name from race join track on race.Track_ID = track.Track_ID",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by race.track_id having  count(*) = 1",
        "question": "Show the name and location of track with 1 race.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by track.track_id having  count(*) = 1",
        "question": "Show the name and location of track with 1 race.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by track.name having  count(*) = 1",
        "question": "Show the name and location of track with 1 race.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by track.location having  count(*) = 1",
        "question": "Show the name and location of track with 1 race.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by race.track_id having  count(*) = 1",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by race.track_id having  count(*) = 1",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by track.track_id having  count(*) = 1",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.name , track.location from race join track on race.Track_ID = track.Track_ID  group by track.name having  count(*) = 1",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.location from track where  track.seating > 90000   intersect select track.location from track where  track.seating < 70000",
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.location from track where  track.seating > 90000   intersect select distinct track.location from track where  track.seating < 70000",
        "question": "Find the locations where have both tracks with more than 90000 seats and tracks with less than 70000 seats.",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select track.location from track where  track.seating > 90000   intersect select track.location from track where  track.seating < 70000",
        "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
        "correctness": 1
    },
    {
        "db_id": "race_track",
        "query": "select distinct track.location from track where  track.seating > 90000   intersect select distinct track.location from track where  track.seating < 70000",
        "question": "What are the locations that have both tracks with more than 90000 seats, and tracks with fewer than 70000 seats?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Album",
        "question": "How many albums are there?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Album",
        "question": "Find the number of albums.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct genre.name from Genre",
        "question": "What are the names of different music genres?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Genre",
        "question": "What are the names of different music genres?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select * from Customer where  customer.state = \"NY\"",
        "question": "Find all the customer information in state NY.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct * from Customer where  customer.state = \"NY\"",
        "question": "Find all the customer information in state NY.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select * from Customer where  customer.state = \"NY\"",
        "question": "What is all the customer information for customers in NY state?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct * from Customer where  customer.state = \"NY\"",
        "question": "What is all the customer information for customers in NY state?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.firstname , employee.lastname from Employee where  employee.city = \"Calgary\"",
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct employee.firstname , employee.lastname from Employee where  employee.city = \"Calgary\"",
        "question": "What are the first names and last names of the employees who live in Calgary city.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.firstname , employee.lastname from Employee where  employee.city = \"Calgary\"",
        "question": "Find the full names of employees living in the city of Calgary.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct employee.firstname , employee.lastname from Employee where  employee.city = \"Calgary\"",
        "question": "Find the full names of employees living in the city of Calgary.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct invoice.billingcountry from Invoice",
        "question": "What are the distinct billing countries of the invoices?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct invoice.billingcountry from Invoice",
        "question": "Find the different billing countries for all invoices.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist where  artist.name like \"%a%\"",
        "question": "Find the names of all artists that have \"a\" in their names.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Artist where  artist.name like \"%a%\"",
        "question": "Find the names of all artists that have \"a\" in their names.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist where  artist.name in (select artist.name from Artist where  artist.name like \"%a%\"  )",
        "question": "Find the names of all artists that have \"a\" in their names.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist where  artist.name like \"%a%\"",
        "question": "What are the names of artist who have the letter 'a' in their names?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Artist where  artist.name like \"%a%\"",
        "question": "What are the names of artist who have the letter 'a' in their names?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist where  artist.name like \"%A%\"",
        "question": "What are the names of artist who have the letter 'a' in their names?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title from Album join Artist on Album.ArtistId = Artist.ArtistId where  artist.name = \"AC/DC\"",
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title from Album join Artist on Album.ArtistId = Artist.ArtistId where  artist.name = \"AC/DC\"",
        "question": "Find the title of all the albums of the artist \"AC/DC\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title from Album join Artist on Album.ArtistId = Artist.ArtistId where  artist.name = \"AC/DC\"",
        "question": "What are the titles of albums by the artist \"AC/DC\"?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title from Album join Artist on Album.ArtistId = Artist.ArtistId where  artist.name = \"AC/DC\"",
        "question": "What are the titles of albums by the artist \"AC/DC\"?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Album join Artist on Album.ArtistId = Artist.ArtistId where  artist.name = \"Metallica\"",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Album join Artist on Album.ArtistId = Artist.ArtistId where  artist.name = \"Metallica\"",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId where  album.title = \"Balls to the Wall\"",
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId where  album.title = \"Balls to the Wall\"",
        "question": "Which artist does the album \"Balls to the Wall\" belong to?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId where  album.title = \"Balls to the Wall\"",
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId where  album.title = \"Balls to the Wall\"",
        "question": "Find the name of the artist who made the album \"Balls to the Wall\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId  group by album.artistid  order by count(*) desc limit 1",
        "question": "Which artist has the most albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId  group by artist.artistid  order by count(*) desc limit 1",
        "question": "Which artist has the most albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId  group by album.artistid  order by count(*) desc limit 1",
        "question": "What is the name of the artist with the greatest number of albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId  group by artist.artistid  order by count(*) desc limit 1",
        "question": "What is the name of the artist with the greatest number of albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select track.name from Track where  track.name like \"%you%\"",
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select track.name from Track where  track.name like \"%You%\"",
        "question": "Find the names of all the tracks that contain the word \"you\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select track.name from Track where  track.name like \"%you%\"",
        "question": "What are the names of tracks that contain the the word you in them?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select track.name from Track where  track.name in (select track.name from Track where  track.name like \"%you%\"  )",
        "question": "What are the names of tracks that contain the the word you in them?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.unitprice) from Track",
        "question": "What is the average unit price of all the tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.unitprice) from Track",
        "question": "Find the average unit price for a track.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track   order by track.milliseconds desc limit 1",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track   order by track.milliseconds asc limit 1",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track   order by track.milliseconds desc limit 2",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track",
        "question": "Find the maximum and minimum durations of tracks in milliseconds.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title , album.albumid , count(*) from Track join Album on Track.AlbumId = Album.AlbumId  group by track.albumid",
        "question": "Show the album names, ids and the number of tracks for each album.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title , track.albumid , count(*) from Track join Album on Track.AlbumId = Album.AlbumId  group by track.albumid",
        "question": "Show the album names, ids and the number of tracks for each album.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title , album.albumid , count(*) from Track join Album on Track.AlbumId = Album.AlbumId  group by album.albumid",
        "question": "Show the album names, ids and the number of tracks for each album.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title , album.albumid , count(*) from Track join Album on Track.AlbumId = Album.AlbumId  group by track.albumid",
        "question": "What are the names and ids of the different albums, and how many tracks are on each?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title , album.albumid , count(*) from Track join Album on Track.AlbumId = Album.AlbumId  group by album.albumid",
        "question": "What are the names and ids of the different albums, and how many tracks are on each?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title , album.albumid , count(*) from Track join Album on Track.AlbumId = Album.AlbumId  group by track.albumid",
        "question": "What are the names and ids of the different albums, and how many tracks are on each?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Track join Genre on Track.GenreId = Genre.GenreId  group by track.genreid  order by count(*) desc limit 1",
        "question": "What is the name of the most common genre in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Track join Genre on Track.GenreId = Genre.GenreId  group by genre.genreid  order by count(*) desc limit 1",
        "question": "What is the name of the most common genre in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Genre where  genre.genreid in (select Track.GenreId from Track  group by Track.GenreId  order by count(*) desc limit 1 )",
        "question": "What is the name of the most common genre in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct genre.name from Track join Genre on Track.GenreId = Genre.GenreId  group by track.genreid  order by count(*) desc limit 1",
        "question": "What is the name of the most common genre in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Track join Genre on Track.GenreId = Genre.GenreId  group by track.genreid  order by count(*) desc limit 1",
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Track join Genre on Track.GenreId = Genre.GenreId  group by genre.genreid  order by count(*) desc limit 1",
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select genre.name from Genre where  genre.genreid in (select Track.GenreId from Track  group by Track.GenreId  order by count(*) desc limit 1 )",
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct genre.name from Track join Genre on Track.GenreId = Genre.GenreId  group by track.genreid  order by count(*) desc limit 1",
        "question": "Find the name of the genre that is most frequent across all tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId  group by track.mediatypeid  order by count(*) asc limit 1",
        "question": "What is the least common media type in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId  group by mediatype.name  order by count(*) asc limit 1",
        "question": "What is the least common media type in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId  group by mediatype.mediatypeid  order by count(*) asc limit 1",
        "question": "What is the least common media type in all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId  group by track.mediatypeid  order by count(*) asc limit 1",
        "question": "What is the name of the media type that is least common across all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from MediaType where  mediatype.mediatypeid in (select Track.MediaTypeId from Track  group by Track.MediaTypeId  order by count(*) asc limit 1 )",
        "question": "What is the name of the media type that is least common across all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId  group by mediatype.name  order by count(*) asc limit 1",
        "question": "What is the name of the media type that is least common across all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select mediatype.name from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId  group by mediatype.mediatypeid  order by count(*) asc limit 1",
        "question": "What is the name of the media type that is least common across all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title , album.albumid from Track join Album on Track.AlbumId = Album.AlbumId where  track.unitprice > 1",
        "question": "What are the titles and ids for albums containing tracks with unit price greater than 1?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Rock\"",
        "question": "How many tracks belong to rock genre?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Rock\"",
        "question": "Count the number of tracks that are part of the rock genre.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.unitprice) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Jazz\"",
        "question": "What is the average unit price of tracks that belong to Jazz genre?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.unitprice) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Jazz\"",
        "question": "Find the average unit price of jazz tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.firstname , customer.lastname from Customer where  customer.email = \"luisg@embraer.com.br\"",
        "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.firstname , customer.lastname from Customer where  customer.email = \"luisg@embraer.com.br\"",
        "question": "What is the first name and last name of the customer that has email \"luisg@embraer.com.br\"?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.firstname , customer.lastname from Customer where  customer.email = \"luisg@embraer.com.br\"",
        "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.firstname , customer.lastname from Customer where  customer.email = \"luisg@embraer.com.br\"",
        "question": "Find the full name of the customer with the email \"luisg@embraer.com.br\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Customer where  customer.email like \"%gmail.com%\"",
        "question": "How many customers have email that contains \"gmail.com\"?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Customer where  customer.email like \"%gmail.com%\"",
        "question": "Count the number of customers that have an email containing \"gmail.com\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Customer where  customer.email like \"%gmail.com\"",
        "question": "Count the number of customers that have an email containing \"gmail.com\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Customer where  customer.email like \"%@gmail.com%\"",
        "question": "Count the number of customers that have an email containing \"gmail.com\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.firstname , employee.lastname from Customer join Employee on Customer.SupportRepId = Employee.EmployeeId where  customer.firstname = \"Leonie\"",
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct employee.firstname , employee.lastname from Customer join Employee on Customer.SupportRepId = Employee.EmployeeId where  customer.firstname = \"Leonie\"",
        "question": "What is the first name and last name employee helps the customer with first name Leonie?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct employee.firstname , employee.lastname from Customer join Employee on Customer.SupportRepId = Employee.EmployeeId where  customer.firstname = \"Leonie\"",
        "question": "Find the full names of employees who help customers with the first name Leonie.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.firstname , employee.lastname from Customer join Employee on Customer.SupportRepId = Employee.EmployeeId where  customer.firstname = \"Leonie\"",
        "question": "Find the full names of employees who help customers with the first name Leonie.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count( distinct employee.city) from Employee",
        "question": "How many distinct cities does the employees live in?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count( distinct employee.city) from Employee",
        "question": "Find the number of different cities that employees live in.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select invoice.invoicedate from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.firstname = \"Astrid\" and customer.lastname = \"Gruber\"",
        "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct invoice.invoicedate from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.firstname = \"Astrid\" and customer.lastname = \"Gruber\"",
        "question": "Find all invoice dates corresponding to customers with first name Astrid and last name Gruber.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select invoice.invoicedate from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.firstname = \"Astrid\" and customer.lastname = \"Gruber\"",
        "question": "What are the invoice dates for customers with the first name Astrid and the last name Gruber?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.lastname from Customer   except select distinct customer.lastname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  invoice.total > 20",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.lastname from Customer   except select customer.lastname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  invoice.total > 20",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.lastname from Customer   except select distinct customer.lastname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  invoice.total >= 20",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.lastname from Customer   except select customer.lastname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  invoice.total > 20",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.lastname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  invoice.total < 20   except select customer.lastname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  invoice.total >= 20",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.lastname from Customer where  customer.customerid not in (select Invoice.CustomerId from Invoice where  invoice.total > 20  )",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.firstname from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.country = \"Brazil\"",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.address from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.country = \"Germany\" and invoice.billingcountry = \"Germany\"",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.address from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.country = \"Germany\"  group by customer.address having  count(*) >= 1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.address from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.country = \"Germany\"  group by customer.customerid having  count(*) >= 1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select customer.address from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.country = \"Germany\"  group by invoice.customerid having  count(*) >= 1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct customer.address from Invoice join Customer on Invoice.CustomerId = Customer.CustomerId where  customer.country = \"Germany\" and invoice.billingcountry = \"Germany\"",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.phone from Employee",
        "question": "List the phone numbers of all employees.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.phone from Employee",
        "question": "What are the phone numbers for each employee?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId where  mediatype.name = \"AAC audio file\"",
        "question": "How many tracks are in the AAC audio file media type?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Track join MediaType on Track.MediaTypeId = MediaType.MediaTypeId where  mediatype.name = \"AAC audio file\"",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.milliseconds) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Latin\" or genre.name = \"Pop\"",
        "question": "What is the average duration in milliseconds of tracks that belong to Latin or Pop genre?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title from Album   order by album.title asc",
        "question": "Please list all album titles in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title from Album   order by album.title asc",
        "question": "Please list all album titles in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title from Album   order by album.title asc",
        "question": "What are all the album titles, in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title from Album   order by album.title asc",
        "question": "What are all the album titles, in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name , album.artistid from Album join Artist on Album.ArtistId = Artist.ArtistId  group by album.artistid having  count(*) >= 3  order by artist.name asc",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name , album.artistid from Album join Artist on Album.ArtistId = Artist.ArtistId  group by Album.ArtistId having  count(*) >= 3  order by artist.name asc",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name , artist.artistid from Album join Artist on Album.ArtistId = Artist.ArtistId  group by album.artistid having  count(*) >= 3  order by artist.name asc",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name , album.artistid from Album join Artist on Album.ArtistId = Artist.ArtistId  group by album.artistid having  count(*) >= 3  order by artist.name asc",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name , artist.artistid from Album join Artist on Album.ArtistId = Artist.ArtistId  group by album.artistid having  count(*) >= 3  order by artist.name asc",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name , album.artistid from Album join Artist on Album.ArtistId = Artist.ArtistId  group by Album.ArtistId having  count(*) >= 3  order by artist.name asc",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist where  artist.artistid not in (select Album.ArtistId from Album  )",
        "question": "Find the names of artists that do not have any albums.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist   except select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId",
        "question": "Find the names of artists that do not have any albums.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Artist   except select distinct artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId",
        "question": "Find the names of artists that do not have any albums.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Artist where  artist.artistid not in (select Album.ArtistId from Album  )",
        "question": "Find the names of artists that do not have any albums.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist where  artist.artistid not in (select Album.ArtistId from Album  )",
        "question": "What are the names of artists who have not released any albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select artist.name from Artist   except select artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId",
        "question": "What are the names of artists who have not released any albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Artist   except select distinct artist.name from Album join Artist on Album.ArtistId = Artist.ArtistId",
        "question": "What are the names of artists who have not released any albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct artist.name from Artist where  artist.artistid not in (select Album.ArtistId from Album  )",
        "question": "What are the names of artists who have not released any albums?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.unitprice) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Rock\"",
        "question": "What is the average unit price of rock tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select avg(track.unitprice) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Rock\"",
        "question": "Find the average unit price of tracks from the Rock genre.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Pop\"",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select max(track.milliseconds) , min(track.milliseconds) from Track join Genre on Track.GenreId = Genre.GenreId where  genre.name = \"Pop\"",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.birthdate from Employee where  employee.city = \"Edmonton\"",
        "question": "What are the birth dates of employees living in Edmonton?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct employee.birthdate from Employee where  employee.city = \"Edmonton\"",
        "question": "What are the birth dates of employees living in Edmonton?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select employee.birthdate from Employee where  employee.city = \"Edmonton\"",
        "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct employee.birthdate from Employee where  employee.city = \"Edmonton\"",
        "question": "Find the birth dates corresponding to employees who live in the city of Edmonton.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct track.unitprice from Track",
        "question": "What are the distinct unit prices of all tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct track.unitprice from Track",
        "question": "Find the distinct unit prices for tracks.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Artist where  artist.artistid not in (select Album.ArtistId from Album  )",
        "question": "How many artists do not have any album?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select count(*) from Artist where  artist.artistid not in (select Album.ArtistId from Album  )",
        "question": "Cound the number of artists who have not released an album.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Reggae\"   intersect select album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Rock\"",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Reggae\"   intersect select distinct album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Rock\"",
        "question": "What are the album titles for albums containing both 'Reggae' and 'Rock' genre tracks?",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Reggae\"   intersect select album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Rock\"",
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
        "correctness": 1
    },
    {
        "db_id": "chinook_1",
        "query": "select distinct album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Reggae\"   intersect select distinct album.title from Track join Genre on Track.GenreId = Genre.GenreId join Album on Track.AlbumId = Album.AlbumId where  genre.name = \"Rock\"",
        "question": "Find the titles of albums that contain tracks of both the Reggae and Rock genres.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name from chip_model where  chip_model.launch_year between 2002 and 2004",
        "question": "the names of models that launched between 2002 and 2004.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct chip_model.model_name from chip_model where  chip_model.launch_year between 2002 and 2004",
        "question": "the names of models that launched between 2002 and 2004.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name from chip_model where  chip_model.launch_year between \"2002\" and \"2004\"",
        "question": "the names of models that launched between 2002 and 2004.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name from chip_model where  chip_model.launch_year between 2 and 2004",
        "question": "the names of models that launched between 2002 and 2004.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name , chip_model.ram_mib from chip_model   order by chip_model.ram_mib asc limit 1",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name , chip_model.ram_mib from chip_model  group by chip_model.model_name  order by chip_model.ram_mib asc limit 1",
        "question": "Which model has the least amount of RAM? List the model name and the amount of RAM.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.chip_model , phone.screen_mode from phone where  phone.hardware_model_name = \"LG-P760\"",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.chip_model , phone.screen_mode from phone where  phone.hardware_model_name = \"LG-P760\"",
        "question": "What are the chip model and screen mode of the phone with hardware model name \"LG-P760\"?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select count(*) from phone where  phone.company_name = \"Nokia Corporation\"",
        "question": "How many phone hardware models are produced by the company named \"Nokia Corporation\"?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select max(chip_model.ram_mib) , min(chip_model.ram_mib) from phone join chip_model on phone.chip_model = chip_model.Model_name where  phone.company_name = \"Nokia Corporation\"",
        "question": "What is maximum and minimum RAM size of phone produced by company named \"Nokia Corporation\"?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select avg(chip_model.rom_mib) from phone join chip_model on phone.chip_model = chip_model.Model_name where  phone.company_name = \"Nokia Corporation\"",
        "question": "What is the average ROM size of phones produced by the company named \"Nokia Corporation\"?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name , phone.company_name from phone join chip_model on phone.chip_model = chip_model.Model_name where  chip_model.launch_year = 2002 or chip_model.ram_mib > 32",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name , phone.company_name from phone join chip_model on phone.chip_model = chip_model.Model_name where  chip_model.launch_year = 2002 or chip_model.ram_mib > 32",
        "question": "List the hardware model name and company name for all the phones that were launched in year 2002 or have RAM size greater than 32.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name , phone.company_name from phone where  phone.accreditation_type like \"%Full%\"",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name , phone.company_name from phone where  phone.accreditation_type = \"Full\"",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name , phone.company_name from phone where  phone.accreditation_type like \"%Full%\"",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name , phone.company_name from phone where  phone.accreditation_type = \"Full\"",
        "question": "Find all phones that have word 'Full' in their accreditation types. List the Hardware Model name and Company name.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select screen_mode.char_cells , screen_mode.pixels , screen_mode.hardware_colours from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.hardware_model_name = \"LG-P760\"",
        "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct screen_mode.char_cells , screen_mode.pixels , screen_mode.hardware_colours from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.hardware_model_name = \"LG-P760\"",
        "question": "Find the Char cells, Pixels and Hardware colours for the screen of the phone whose hardware model name is \"LG-P760\".",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name , phone.company_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Graphics\"",
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name , phone.company_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Graphics\"",
        "question": "List the hardware model name and company name for the phone whose screen mode type is \"Graphics.\"",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.company_name , count(*) from phone  group by phone.company_name  order by count(*) asc limit 1",
        "question": "Find the name of the company that has the least number of phone models. List the company name and the number of phone model produced by that company.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.company_name from phone  group by phone.company_name having  count(*) > 1",
        "question": "List the name of the company that produced more than one phone model.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.company_name from phone  group by phone.company_name having  count( distinct phone.hardware_model_name) > 1",
        "question": "List the name of the company that produced more than one phone model.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.company_name from phone  group by phone.company_name having  count(*) > 1",
        "question": "List the name of the company that produced more than one phone model.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select max(screen_mode.used_kb) , min(screen_mode.used_kb) , avg(screen_mode.used_kb) from screen_mode",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select max(screen_mode.used_kb) , avg(screen_mode.used_kb) , min(screen_mode.used_kb) from screen_mode",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select avg(screen_mode.used_kb) , max(screen_mode.used_kb) , min(screen_mode.used_kb) from screen_mode",
        "question": "List the maximum, minimum and average number of used kb in screen mode.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone join chip_model on phone.chip_model = chip_model.Model_name where  chip_model.launch_year = 2002   order by chip_model.ram_mib desc limit 1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone join chip_model on phone.chip_model = chip_model.Model_name where  chip_model.launch_year = 2002 and chip_model.ram_mib >= 1   order by chip_model.launch_year desc limit 1",
        "question": "List the name of the phone model launched in year 2002 and with the highest RAM size.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.wifi , screen_mode.type from phone join chip_model on phone.chip_model = chip_model.Model_name join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.hardware_model_name = \"LG-P760\"",
        "question": "What are the wifi and screen mode type of the hardware model named \"LG-P760\"?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone join chip_model on phone.chip_model = chip_model.Model_name join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Text\" or chip_model.ram_mib > 32",
        "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name from phone join chip_model on phone.chip_model = chip_model.Model_name join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Text\" or chip_model.ram_mib > 32",
        "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone join chip_model on phone.chip_model = chip_model.Model_name join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Title\" or chip_model.ram_mib > 32",
        "question": "List the hardware model name for the phones that have screen mode type \"Text\" or RAM size greater than 32.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone where  phone.company_name = \"Nokia Corporation\"   union select phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Graphics\"",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name from phone where  phone.company_name = \"Nokia Corporation\"   union select distinct phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Graphics\"",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone where  phone.hardware_model_name = \"Nokia Corporation\"   union select phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Graphics\"",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone where  phone.company_name = \"Nokia\"   union select phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Graphics\"",
        "question": "List the hardware model name for the phones that were produced by \"Nokia Corporation\" or whose screen mode type is \"Graphics.\"",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.company_name = \"Nokia Corporation\" and screen_mode.type != \"Text\"",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone where  phone.company_name = \"Nokia Corporation\" and phone.screen_mode not in (select screen_mode.Graphics_mode from screen_mode where  screen_mode.type = \"Text\"  )",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.company_name = \"Nokia Corporation\" and screen_mode.type != \"Title\"",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name from phone where  phone.company_name = \"Nokia Corporation\"   except select phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.type = \"Text\"",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.company_name = \"Nokia Corporation\" and screen_mode.type != \"Text\"",
        "question": "List the hardware model name for the phons that were produced by \"Nokia Corporation\" but whose screen mode type is not Text.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.hardware_model_name , phone.company_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.used_kb between 10 and 15",
        "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.hardware_model_name , phone.company_name from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  screen_mode.used_kb between 10 and 15",
        "question": "List the phone hardware model and company name for the phones whose screen usage in kb is between 10 and 15.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.accreditation_type , count(*) from phone  group by phone.accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.accreditation_type , count(*) from phone  group by phone.accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select count(*) , phone.accreditation_type from phone  group by phone.accreditation_type",
        "question": "Find the number of phones for each accreditation type.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.accreditation_type , count(*) from phone  group by phone.accreditation_type",
        "question": "How many phones belongs to each accreditation type?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select count(*) , phone.accreditation_type from phone  group by phone.accreditation_type",
        "question": "How many phones belongs to each accreditation type?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.accreditation_type , count(*) from phone  group by phone.accreditation_type",
        "question": "How many phones belongs to each accreditation type?",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select phone.accreditation_level from phone  group by phone.accreditation_level having  count(*) > 3",
        "question": "Find the accreditation level that more than 3 phones use.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct phone.accreditation_level from phone  group by phone.accreditation_level having  count(*) > 3",
        "question": "Find the accreditation level that more than 3 phones use.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select * from chip_model",
        "question": "Find the details for all chip models.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select count(*) from chip_model where  chip_model.model_name not in (select chip_model.Model_name from chip_model where  chip_model.wifi = \"No\"  )",
        "question": "Count the number of chip model that do not have wifi.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name from chip_model   order by chip_model.launch_year asc",
        "question": "List all the model names sorted by their launch year.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct chip_model.model_name from chip_model   order by chip_model.launch_year asc",
        "question": "List all the model names sorted by their launch year.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select avg(chip_model.ram_mib) from chip_model where  chip_model.model_name not in (select phone.chip_model from phone  )",
        "question": "Find the average ram mib size of the chip models that are never used by any phone.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name from chip_model   except select phone.chip_model from phone where  phone.accreditation_type = \"Full\"",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct chip_model.model_name from chip_model   except select phone.chip_model from phone where  phone.accreditation_type = \"Full\"",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select chip_model.model_name from chip_model where  chip_model.model_name not in (select phone.chip_model from phone where  phone.accreditation_type = \"Full\"  )",
        "question": "Find the names of the chip models that are not used by any phone with full accreditation type.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select screen_mode.pixels from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.accreditation_type = \"Full\"   intersect select screen_mode.pixels from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.accreditation_type = \"Provisional\"",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "correctness": 1
    },
    {
        "db_id": "phone_1",
        "query": "select distinct screen_mode.pixels from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.accreditation_type = \"Full\"   intersect select distinct screen_mode.pixels from phone join screen_mode on phone.screen_mode = screen_mode.Graphics_mode where  phone.accreditation_type = \"Provisional\"",
        "question": "Find the pixels of the screen modes that are used by both phones with full accreditation types and phones with Provisional accreditation types.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select count(*) from game where  game.season > 2007",
        "question": "How many games are held after season 2007?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select count(*) from game where  game.season > \"2007\"",
        "question": "How many games are held after season 2007?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.date from game   order by game.home_team desc",
        "question": "List the dates of games by the home team name in descending order.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.season , game.home_team , game.away_team from game",
        "question": "List the season, home team, away team of all the games.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.season , game.away_team , game.home_team from game",
        "question": "List the season, home team, away team of all the games.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select injury_accident.player , injury_accident.number_of_matches , injury_accident.source from injury_accident   except select injury_accident.player , injury_accident.number_of_matches , injury_accident.source from injury_accident where  injury_accident.injury = \"Knee problem\"",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select injury_accident.player , injury_accident.number_of_matches , injury_accident.source from injury_accident where  injury_accident.id not in (select injury_accident.id from injury_accident where  injury_accident.injury = \"Knee problem\"  )",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select injury_accident.player , injury_accident.number_of_matches , injury_accident.source from injury_accident where  injury_accident.injury != \"Knee problem\" and injury_accident.id not in (select injury_accident.id from injury_accident where  injury_accident.injury = \"Knee problem\"  )",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select injury_accident.player , injury_accident.number_of_matches , injury_accident.source from injury_accident where  injury_accident.injury != \"Knee problem\"",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.season from injury_accident join game on injury_accident.game_id = game.id where  injury_accident.player = \"Walter Samuel\"",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.id , game.score , game.date from injury_accident join game on injury_accident.game_id = game.id  group by injury_accident.game_id having  count(*) >= 2",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.id , game.date , game.score from injury_accident join game on injury_accident.game_id = game.id  group by injury_accident.game_id having  count(*) >= 2",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.id , stadium.name from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id  group by stadium.id  order by count(*) desc limit 1",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.name , stadium.id from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id  group by stadium.id  order by count(*) desc limit 1",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.id , stadium.name from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id  group by stadium.id  order by count(*) desc limit 1",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.name , stadium.id from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id  group by stadium.id  order by count(*) desc limit 1",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.season , stadium.name from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id where  injury_accident.injury = \"Foot injury\" or injury_accident.injury = \"Knee problem\"",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select distinct game.season , stadium.name from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id where  injury_accident.injury = \"Foot injury\" or injury_accident.injury = \"Knee problem\"",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select count( distinct injury_accident.source) from injury_accident",
        "question": "How many different kinds of information sources are there for injury accidents?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select count(*) from game where  game.id not in (select injury_accident.game_id from injury_accident  )",
        "question": "How many games are free of injury accidents?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select count( distinct injury_accident.injury) from injury_accident join game on injury_accident.game_id = game.id where  game.season > 2010",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.name from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id where  injury_accident.player = \"Walter Samuel\"   intersect select stadium.name from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id where  injury_accident.player = \"Thiago Motta\"",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.name , stadium.average_attendance , stadium.total_attendance from stadium   except select stadium.name , stadium.average_attendance , stadium.total_attendance from injury_accident join game on injury_accident.game_id = game.id join stadium on game.stadium_id = stadium.id",
        "question": "Show the name, average attendance, total attendance for stadiums where no accidents happened.",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.name from stadium where  stadium.name like \"%Bank%\"",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select stadium.name from stadium where  stadium.name in (select stadium.name from stadium where  stadium.name like \"%Bank%\"  )",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select distinct stadium.name from stadium where  stadium.name like \"%Bank%\"",
        "question": "Which stadium name contains the substring \"Bank\"?",
        "correctness": 1
    },
    {
        "db_id": "game_injury",
        "query": "select game.date , injury_accident.player from injury_accident join game on injury_accident.game_id = game.id   order by game.season desc",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers   order by customers.customer_details asc",
        "question": "List the names of all the customers in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers   order by customers.customer_details asc",
        "question": "Sort the customer names in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Customers   order by customers.customer_details asc",
        "question": "Sort the customer names in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  customers.customer_details = \"Dayana Robel\"",
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  customers.customer_details = \"Dayana Robel\"",
        "question": "Find all the policy type codes associated with the customer \"Dayana Robel\"",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  customers.customer_details = \"Dayana Robel\"",
        "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  customers.customer_details = \"Dayana Robel\"",
        "question": "What are the type codes of the policies used by the customer \"Dayana Robel\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code from Policies  group by policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code from Policies  group by policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which type of policy is most frequently used? Give me the policy type code.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code from Policies  group by policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Find the type code of the most frequently used policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by policies.policy_type_code having  count(*) > 2",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by policies.policy_type_code having  count(*) > 2",
        "question": "Find all the policy types that are used by more than 2 customers.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by policies.policy_type_code having  count(*) > 2",
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by policies.policy_type_code having  count(*) > 2",
        "question": "Which types of policy are chosen by more than 2 customers? Give me the policy type codes.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Claim_Headers join Policies on Claim_Headers.Policy_ID = Policies.Policy_ID join Customers on Policies.Customer_ID = Customers.Customer_ID   order by claim_headers.amount_claimed desc limit 1",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Claim_Headers join Policies on Claim_Headers.Policy_ID = Policies.Policy_ID join Customers on Policies.Customer_ID = Customers.Customer_ID   order by claim_headers.amount_claimed desc limit 1",
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Claim_Headers join Policies on Claim_Headers.Policy_ID = Policies.Policy_ID join Customers on Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_details  order by count(*) asc limit 1",
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Claim_Headers join Policies on Claim_Headers.Policy_ID = Policies.Policy_ID join Customers on Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_details  order by count(claim_headers.amount_claimed) asc limit 1",
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers where  customers.customer_id not in (select Policies.Customer_ID from Policies  )",
        "question": "Find the names of customers who have no policies associated.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers   except select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID",
        "question": "Find the names of customers who have no policies associated.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers where  customers.customer_id not in (select Policies.Customer_ID from Policies  )",
        "question": "What are the names of customers who do not have any policies?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers   except select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID",
        "question": "What are the names of customers who do not have any policies?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count(*) from Claims_Processing_Stages",
        "question": "How many claim processing stages are there in total?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_name from Claims_Processing_Stages  group by claims_processing_stages.claim_stage_id  order by count(*) desc limit 1",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_name from Claims_Processing_Stages join Claims_Processing on Claims_Processing_Stages.Claim_Stage_ID = Claims_Processing.Claim_Stage_ID  group by claims_processing_stages.claim_stage_id  order by count(*) desc limit 1",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_name from Claims_Processing_Stages join Claims_Processing on Claims_Processing_Stages.Claim_Stage_ID = Claims_Processing.Claim_Stage_ID  group by claims_processing.claim_stage_id  order by count(*) desc limit 1",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_name from Claims_Processing_Stages join Claims_Processing on Claims_Processing_Stages.Claim_Stage_ID = Claims_Processing.Claim_Stage_ID  group by claims_processing_stages.claim_status_name  order by count(*) desc limit 1",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_name from Claims_Processing_Stages  group by claims_processing_stages.claim_status_name  order by count(*) desc limit 1",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_name from Claims_Processing_Stages join Claims_Processing on Claims_Processing_Stages.Claim_Stage_ID = Claims_Processing.Claim_Stage_ID  group by claims_processing.claim_stage_id  order by count(*) desc limit 1",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers where  customers.customer_details like \"%Diana%\"",
        "question": "Find the names of customers whose name contains \"Diana\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Customers where  customers.customer_details like \"%Diana%\"",
        "question": "Find the names of customers whose name contains \"Diana\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Customers where  customers.customer_details like \"%Diana%\"",
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Customers where  customers.customer_details like \"%Diana%\"",
        "question": "Which customers have the substring \"Diana\" in their names? Return the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  policies.policy_type_code = \"Deputy\"",
        "question": "Find the names of the customers who have an deputy policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  policies.policy_type_code = \"Deputy\"",
        "question": "Find the names of the customers who have an deputy policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  policies.policy_type_code = \"Deputy\"",
        "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  policies.policy_type_code = \"Deputy\"",
        "question": "Which customers have an insurance policy with the type code \"Deputy\"? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  policies.policy_type_code = \"Deputy\" or policies.policy_type_code = \"Uniform\"",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID where  policies.policy_type_code = \"Deputy\" or policies.policy_type_code = \"Uniform\"",
        "question": "Which customers have an insurance policy with the type code \"Deputy\" or \"Uniform\"? Return the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code , count(*) from Policies  group by policies.policy_type_code",
        "question": "Find the number of records of each policy type and its type code.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count(*) , policies.policy_type_code from Policies  group by policies.policy_type_code",
        "question": "Find the number of records of each policy type and its type code.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code , count(*) from Policies  group by policies.policy_type_code",
        "question": "Find the number of records of each policy type and its type code.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select policies.policy_type_code , count(*) from Policies  group by policies.policy_type_code",
        "question": "For each policy type, return its type code and its count in the record.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct policies.policy_type_code , count(*) from Policies  group by policies.policy_type_code",
        "question": "For each policy type, return its type code and its count in the record.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_details  order by count(*) desc limit 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_details  order by count(*) desc limit 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by policies.customer_id  order by count(*) desc limit 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select distinct customers.customer_details from Policies join Customers on Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id  order by count(*) desc limit 1",
        "question": "Which customer have the most policies? Give me the customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_description from Claims_Processing_Stages where  claims_processing_stages.claim_status_name = \"Open\"",
        "question": "What is the description of the claim status \"Open\"?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select claims_processing_stages.claim_status_description from Claims_Processing_Stages where  claims_processing_stages.claim_status_name = \"Open\"",
        "question": "Find the description of the claim status \"Open\".",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count( distinct claims_processing.claim_outcome_code) from Claims_Processing",
        "question": "How many distinct claim outcome codes are there?",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count( distinct claims_processing.claim_outcome_code) from Claims_Processing",
        "question": "Count the number of distinct claim outcome codes.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count( distinct claims_processing.claim_outcome_code) from Claims_Processing   order by count( distinct claims_processing.claim_outcome_code) desc limit 1",
        "question": "Count the number of distinct claim outcome codes.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count( distinct claims_processing.claim_outcome_code) from Claims_Processing   order by count( distinct claims_processing.claim_outcome_code) asc limit 1",
        "question": "Count the number of distinct claim outcome codes.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count( distinct claims_processing.claim_outcome_code) from Claims_Processing   order by count( distinct claims_processing.claim_outcome_code) desc limit 2",
        "question": "Count the number of distinct claim outcome codes.",
        "correctness": 1
    },
    {
        "db_id": "insurance_and_eClaims",
        "query": "select count( distinct claims_processing.claim_outcome_code) from Claims_Processing   order by count( distinct claims_processing.claim_outcome_code) desc limit 3",
        "question": "Count the number of distinct claim outcome codes.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from artist",
        "question": "How many artists do we have?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from artist",
        "question": "Count the number of artists.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.age , artist.country from artist   order by artist.year_join asc",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name , artist.age , artist.country from artist   order by artist.year_join asc",
        "question": "Show all artist name, age, and country ordered by the yeared they joined.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.age , artist.country from artist   order by artist.year_join asc",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name , artist.age , artist.country from artist   order by artist.year_join asc",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country , artist.age from artist   order by artist.year_join asc",
        "question": "What are the names, ages, and countries of artists, sorted by the year they joined?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.country from artist",
        "question": "What are all distinct country for artists?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.country from artist",
        "question": "Return the different countries for artists.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.country != \"United States\"",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.country != \"United States\" and artist.year_join not in (select artist.year_join from artist where  artist.country = \"United States\"  )",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.country != \"United States\" and artist.year_join not in (select artist.year_join from artist where  artist.country = \"USA\"  )",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.country != \"United States\" and artist.artist_id not in (select artist.Artist_ID from artist where  artist.country = \"United States\"  )",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.country != \"United States\" and artist.artist_id not in (select artist.Artist_ID from artist where  artist.country = \"USA\"  )",
        "question": "Show all artist names and the year joined who are not from United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.country != \"United States\"",
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.year_join from artist where  artist.artist_id not in (select artist.Artist_ID from artist where  artist.country = \"United States\"  )",
        "question": "What are the names and year of joining for artists that do not have the country \"United States\"?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from artist where  artist.age > 46 and artist.year_join > 1990",
        "question": "How many artists are above age 46 and joined after 1990?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from artist where  artist.age > 46 and artist.year_join > 1990 and artist.age > 46 and artist.year_join > 1990 and artist.age > 46",
        "question": "How many artists are above age 46 and joined after 1990?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from artist where  artist.age > 46 and artist.year_join > 1990",
        "question": "Count the number of artists who are older than 46 and joined after 1990.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select avg(artist.age) , min(artist.age) from artist where  artist.country = \"United States\"",
        "question": "What is the average and minimum age of all artists from United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select avg(artist.age) , min(artist.age) from artist where  artist.country = \"United States\"",
        "question": "Return the average and minimum ages across artists from the United States.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist   order by artist.year_join desc limit 1",
        "question": "What is the name of the artist who joined latest?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name from artist   order by artist.year_join desc limit 1",
        "question": "What is the name of the artist who joined latest?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist   order by artist.year_join desc limit 1",
        "question": "Return the name of the artist who has the latest join year.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition where  exhibition.year >= 2005",
        "question": "How many exhibition are there in year 2005 or after?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition where  exhibition.year >= 2005 or exhibition.year >= 2005",
        "question": "How many exhibition are there in year 2005 or after?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition where  exhibition.year >= 2005",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition where  exhibition.year >= 2005 or exhibition.year >= 2005",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition.year from exhibition where  exhibition.ticket_price < 15",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition.year from exhibition where  exhibition.ticket_price <= 15",
        "question": "Show theme and year for all exhibitions with ticket prices lower than 15.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition.year from exhibition where  exhibition.ticket_price < 15",
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition.year from exhibition where  exhibition.ticket_price <= 15",
        "question": "What are the theme and year for all exhibitions that have a ticket price under 15?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , count(*) from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by exhibition.artist_id",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , count(*) from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , count(*) from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by exhibition.artist_id",
        "question": "How many exhibitions has each artist had?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) , artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by exhibition.artist_id",
        "question": "How many exhibitions has each artist had?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , count(*) from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.artist_id",
        "question": "How many exhibitions has each artist had?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by exhibition.artist_id  order by count(*) desc limit 1",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.artist_id  order by count(*) desc limit 1",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name  order by count(*) desc limit 1",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by exhibition.artist_id  order by count(*) desc limit 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.artist_id  order by count(*) desc limit 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name  order by count(*) desc limit 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , artist.country from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name, artist.country  order by count(*) desc limit 1",
        "question": "Return the name and country corresponding to the artist who has had the most exhibitions.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist where  artist.artist_id not in (select exhibition.Artist_ID from exhibition  )",
        "question": "Show names for artists without any exhibition.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist   except select artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID",
        "question": "Show names for artists without any exhibition.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist where  artist.artist_id not in (select exhibition.Artist_ID from exhibition  )",
        "question": "What are the names of artists that have not had any exhibitions?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist   except select artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID",
        "question": "What are the names of artists that have not had any exhibitions?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.ticket_price > (select avg(exhibition.ticket_price) from exhibition  )",
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.ticket_price >= (select avg(exhibition.ticket_price) from exhibition  )",
        "question": "What is the theme and artist name for the exhibition with a ticket price higher than the average?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , exhibition.theme from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.ticket_price > (select avg(exhibition.ticket_price) from exhibition  )",
        "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name , exhibition.theme from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.ticket_price >= (select avg(exhibition.ticket_price) from exhibition  )",
        "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name , exhibition.theme from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.ticket_price > (select avg(exhibition.ticket_price) from exhibition  )",
        "question": "Return the names of artists and the themes of their exhibitions that had a ticket price higher than average.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select avg(exhibition.ticket_price) , min(exhibition.ticket_price) , max(exhibition.ticket_price) from exhibition where  exhibition.year < 2009",
        "question": "Show the average, minimum, and maximum ticket prices for exhibitions for all years before 2009.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select avg(exhibition.ticket_price) , min(exhibition.ticket_price) , max(exhibition.ticket_price) from exhibition where  exhibition.year < 2009",
        "question": "What are the average, minimum, and maximum ticket prices for exhibitions that happened prior to 2009?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition.year from exhibition   order by exhibition.ticket_price desc",
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct exhibition.theme , exhibition.year from exhibition   order by exhibition.ticket_price desc",
        "question": "Show theme and year for all exhibitions in an descending order of ticket price.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition.year from exhibition   order by exhibition.ticket_price desc",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct exhibition.theme , exhibition.year from exhibition   order by exhibition.ticket_price desc",
        "question": "What are the themes and years for exhibitions, sorted by ticket price descending?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition_record.date , exhibition_record.attendance from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition.year = 2004",
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct exhibition.theme , exhibition_record.date , exhibition_record.attendance from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition.year = 2004",
        "question": "What is the theme, date, and attendance for the exhibition in year 2004?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition_record.date , exhibition_record.attendance from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition.year = 2004",
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme , exhibition_record.date , exhibition_record.attendance from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition.year like 2004",
        "question": "Return the themes, dates, and attendance for exhibitions that happened in 2004.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist   except select artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.year = 2004",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name from artist   except select distinct artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.year = 2004",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist where  artist.artist_id not in (select exhibition.Artist_ID from exhibition where  exhibition.year = 2004  )",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name from artist where  artist.artist_id not in (select exhibition.Artist_ID from exhibition where  exhibition.year = 2004  )",
        "question": "Show all artist names who didn't have an exhibition in 2004.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist   except select artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.year = 2004",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from artist where  artist.artist_id not in (select exhibition.Artist_ID from exhibition where  exhibition.year = 2004  )",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name from artist   except select distinct artist.name from exhibition join artist on exhibition.Artist_ID = artist.Artist_ID where  exhibition.year = 2004",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name from artist where  artist.artist_id not in (select exhibition.Artist_ID from exhibition where  exhibition.year = 2004  )",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance < 100   intersect select exhibition.theme from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance > 500",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select exhibition.theme from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance < 100   intersect select exhibition.theme from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance > 500",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance > 100 or exhibition.ticket_price < 10",
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance > 100 or exhibition.ticket_price <= 10",
        "question": "How many exhibitions have a attendance more than 100 or have a ticket price below 10?",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance > 100 or exhibition.ticket_price < 10",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select count(*) from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID where  exhibition_record.attendance > 100 or exhibition.ticket_price <= 10",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name having  avg(exhibition_record.attendance) > 200",
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select distinct artist.name from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name having  avg(exhibition_record.attendance) > 200",
        "question": "Show all artist names with an average exhibition attendance over 200.",
        "correctness": 1
    },
    {
        "db_id": "theme_gallery",
        "query": "select artist.name from exhibition_record join exhibition on exhibition_record.Exhibition_ID = exhibition.Exhibition_ID join artist on exhibition.Artist_ID = artist.Artist_ID  group by artist.name having  avg(exhibition_record.attendance) > 200",
        "question": "What are the names of artist whose exhibitions draw over 200 attendees on average?",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.i_id from item where  item.title = \"orange\"",
        "question": "Find the id of the item whose title is \"orange\".",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct item.i_id from item where  item.title = \"orange\"",
        "question": "Find the id of the item whose title is \"orange\".",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select * from item",
        "question": "List all information in the item table.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count(*) from review",
        "question": "Find the number of reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count(*) from useracct",
        "question": "How many users are there?",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select avg(review.rating) , max(review.rating) from review",
        "question": "Find the average and maximum rating of all reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select max(review.rating) , avg(review.rating) from review",
        "question": "Find the average and maximum rating of all reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count( distinct review.u_id) from review",
        "question": "How many different users wrote some reviews?",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count( distinct review.i_id) from review",
        "question": "How many different items were reviewed by some users?",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count(*) from item where  item.i_id not in (select review.i_id from review  )",
        "question": "Find the number of items that did not receive any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from useracct where  useracct.u_id not in (select review.u_id from review  )",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from useracct   except select useracct.name from review join useracct on review.u_id = useracct.u_id",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct useracct.name from useracct where  useracct.u_id not in (select review.u_id from review  )",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id where  review.rating = 10",
        "question": "Find the names of goods that receive a rating of 10.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id where  review.rating = 10  group by item.title having  count(*) >= 1",
        "question": "Find the names of goods that receive a rating of 10.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct item.title from review join item on review.i_id = item.i_id where  review.rating = 10",
        "question": "Find the names of goods that receive a rating of 10.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id where  review.rating > (select avg(review.rating) from review  )",
        "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct item.title from review join item on review.i_id = item.i_id where  review.rating > (select avg(review.rating) from review  )",
        "question": "Find the titles of items whose rating is higher than the average review rating of all items.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id where  review.rating < 5",
        "question": "Find the titles of items that received any rating below 5.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id where  review.rating > 8   intersect select item.title from review join item on review.i_id = item.i_id where  review.rating < 5",
        "question": "Find the titles of items that received both a rating higher than 8 and a rating below 5.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id  group by item.title having  avg(review.rank) > 3  intersect select item.title from review join item on review.i_id = item.i_id  group by item.title having  avg(review.rating) > 5",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id  group by item.title having  avg(review.rating) > 5  intersect select item.title from review join item on review.i_id = item.i_id  group by item.title having  avg(review.rank) > 3",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id  group by review.rank having  avg(review.rank) > 3  intersect select item.title from review join item on review.i_id = item.i_id  group by review.rank having  avg(review.rating) > 5",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id where  review.rank > 3   intersect select item.title from review join item on review.i_id = item.i_id  group by item.title having  avg(review.rating) > 5",
        "question": "Find the names of items whose rank is higher than 3 and whose average rating is above 5.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id  group by item.title  order by avg(review.rating) asc limit 1",
        "question": "Find the name of the item with the lowest average rating.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id  group by item.i_id  order by avg(review.rating) asc limit 1",
        "question": "Find the name of the item with the lowest average rating.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from review join item on review.i_id = item.i_id  group by review.i_id  order by avg(review.rating) asc limit 1",
        "question": "Find the name of the item with the lowest average rating.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from item   order by item.title asc",
        "question": "List the titles of all items in alphabetic order .",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct item.title from item   order by item.title asc",
        "question": "List the titles of all items in alphabetic order .",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from review join useracct on review.u_id = useracct.u_id  group by useracct.name  order by count(*) desc limit 1",
        "question": "Find the name of the user who gives the most reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from review join useracct on review.u_id = useracct.u_id  group by review.u_id  order by count(*) desc limit 1",
        "question": "Find the name of the user who gives the most reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from review join useracct on review.u_id = useracct.u_id  group by useracct.u_id  order by count(*) desc limit 1",
        "question": "Find the name of the user who gives the most reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct useracct.name from review join useracct on review.u_id = useracct.u_id  group by useracct.name  order by count(*) desc limit 1",
        "question": "Find the name of the user who gives the most reviews.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title , item.i_id from review join item on review.i_id = item.i_id  group by item.i_id  order by avg(review.rating) desc limit 1",
        "question": "Find the name and id of the item with the highest average rating.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title , item.i_id from review join item on review.i_id = item.i_id  group by review.i_id  order by avg(review.rating) desc limit 1",
        "question": "Find the name and id of the item with the highest average rating.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name , avg(review.rating) from review join useracct on review.u_id = useracct.u_id  group by useracct.name",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name , avg(review.rating) from review join useracct on review.u_id = useracct.u_id  group by review.u_id",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct useracct.name , avg(review.rating) from review join useracct on review.u_id = useracct.u_id  group by useracct.name",
        "question": "For each user, return the name and the average rating of reviews given by them.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name , count(*) from review join useracct on review.u_id = useracct.u_id  group by review.u_id",
        "question": "For each user, find their name and the number of reviews written by them.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name , count(*) from review join useracct on review.u_id = useracct.u_id  group by useracct.name",
        "question": "For each user, find their name and the number of reviews written by them.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from review join useracct on review.u_id = useracct.u_id   order by review.rating desc limit 1",
        "question": "Find the name of the user who gave the highest rating.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name , avg(trust.trust) from trust join useracct on trust.target_u_id = useracct.u_id  group by trust.target_u_id",
        "question": "Find each target user's name and average trust score.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct useracct.name , avg(trust.trust) from trust join useracct on trust.target_u_id = useracct.u_id  group by trust.target_u_id",
        "question": "Find each target user's name and average trust score.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name , avg(trust.trust) from trust join useracct on trust.target_u_id = useracct.u_id  group by useracct.name",
        "question": "Find each target user's name and average trust score.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from trust join useracct on trust.target_u_id = useracct.u_id   order by trust.trust asc limit 1",
        "question": "Find the name of the target user with the lowest trust score.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from item where  item.i_id not in (select review.i_id from review  )",
        "question": "Find the names of the items that did not receive any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select item.title from item   except select item.title from review join item on review.i_id = item.i_id",
        "question": "Find the names of the items that did not receive any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct item.title from item where  item.i_id not in (select review.i_id from review  )",
        "question": "Find the names of the items that did not receive any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from useracct where  useracct.u_id not in (select review.u_id from review  )",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select useracct.name from useracct   except select useracct.name from review join useracct on review.u_id = useracct.u_id",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select distinct useracct.name from useracct where  useracct.u_id not in (select review.u_id from review  )",
        "question": "Find the names of users who did not leave any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count(*) from useracct where  useracct.u_id not in (select review.u_id from review  )",
        "question": "Find the number of users who did not write any review.",
        "correctness": 1
    },
    {
        "db_id": "epinions_1",
        "query": "select count(*) from item where  item.i_id not in (select review.i_id from review  )",
        "question": "Find the number of items without any review.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select count(*) from gymnast",
        "question": "How many gymnasts are there?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select count(*) from gymnast",
        "question": "Count the number of gymnasts.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast   order by gymnast.total_points desc",
        "question": "List the total points of gymnasts in descending order.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast  group by gymnast.total_points  order by sum(gymnast.total_points) desc",
        "question": "List the total points of gymnasts in descending order.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast   order by gymnast.total_points desc",
        "question": "What are the total points for all gymnasts, ordered by total points descending?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast   order by gymnast.floor_exercise_points desc",
        "question": "List the total points of gymnasts in descending order of floor exercise points.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast   order by gymnast.floor_exercise_points desc",
        "question": "What are the total points of gymnasts, ordered by their floor exercise points descending?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select avg(gymnast.horizontal_bar_points) from gymnast",
        "question": "What is the average horizontal bar points for all gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select avg(gymnast.horizontal_bar_points) from gymnast",
        "question": "Return the average horizontal bar points across all gymnasts.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from people   order by people.name asc",
        "question": "What are the names of people in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from people   order by people.name asc",
        "question": "What are the names of people in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from people   order by people.name asc",
        "question": "Return the names of people, ordered alphabetically.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from people   order by people.name asc",
        "question": "Return the names of people, ordered alphabetically.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "What are the names of gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "What are the names of gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "Return the names of the gymnasts.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "Return the names of the gymnasts.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.age from people   order by people.height desc limit 1",
        "question": "What is the age of the tallest person?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.age from people   order by people.height desc limit 1",
        "question": "Return the age of the person with the greatest height.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from people   order by people.age desc limit 5",
        "question": "List the names of the top 5 oldest people.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from people   order by people.age desc limit 5",
        "question": "List the names of the top 5 oldest people.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from people   order by people.age desc limit 5",
        "question": "What are the names of the five oldest people?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from people   order by people.age desc limit 5",
        "question": "What are the names of the five oldest people?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by people.age asc limit 1",
        "question": "What is the total point count of the youngest gymnast?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select gymnast.total_points from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by people.age asc limit 1",
        "question": "Return the total points of the gymnast with the lowest age.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select avg(people.age) from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "What is the average age of all gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select avg(people.age) from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "Return the average age across all gymnasts.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown , count(*) from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown",
        "question": "What are the hometowns of gymnasts and the corresponding number of gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown , count(*) from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown",
        "question": "How many gymnasts are from each hometown?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown , count(*) from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown",
        "question": "How many gymnasts are from each hometown?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown  order by count(*) desc limit 1",
        "question": "What is the most common hometown of gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown  order by count(*) desc limit 1",
        "question": "Return the hometown that is most common among gymnasts.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown having  count(*) >= 2",
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown having  count(*) >= 2",
        "question": "What are the hometowns that are shared by at least two gymnasts?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown having  count(*) >= 2",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID  group by people.hometown having  count(*) >= 2",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from people  group by people.hometown having  count(*) >= 2",
        "question": "Give the hometowns from which two or more gymnasts are from.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by people.height asc",
        "question": "List the names of gymnasts in ascending order by their heights.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by people.height asc",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.name from people where  people.people_id in (select gymnast.Gymnast_ID from gymnast  )   order by people.height asc",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.name from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by people.height asc",
        "question": "What are the names of gymnasts, ordered by their heights ascending?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from people   except select distinct people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from people   except select distinct people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID where  gymnast.gymnast_id is \"gymnast_id\"",
        "question": "List the distinct hometowns that are not associated with any gymnast.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from people   except select people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "From which hometowns did no gymnasts come from?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from people   except select distinct people.hometown from gymnast join people on gymnast.Gymnast_ID = people.People_ID",
        "question": "From which hometowns did no gymnasts come from?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from people where  people.age > 23   intersect select people.hometown from people where  people.age < 20",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from people where  people.age > 23   intersect select distinct people.hometown from people where  people.age < 20",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from people where  people.age > 23   intersect select people.hometown from people where  people.age <= 20",
        "question": "Show the hometowns shared by people older than 23 and younger than 20.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from people where  people.age > 23   intersect select people.hometown from people where  people.age < 20",
        "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select distinct people.hometown from people where  people.age > 23   intersect select distinct people.hometown from people where  people.age < 20",
        "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.hometown from people where  people.age > 23   intersect select people.hometown from people where  people.age <= 20",
        "question": "From which hometowns did both people older than 23 and younger than 20 come from?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select count( distinct people.hometown) from people",
        "question": "How many distinct hometowns did these people have?",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select count( distinct people.hometown) from people",
        "question": "Count the number of different hometowns of these people.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.age from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by gymnast.total_points desc",
        "question": "Show the ages of gymnasts in descending order of total points.",
        "correctness": 1
    },
    {
        "db_id": "gymnast",
        "query": "select people.age from gymnast join people on gymnast.Gymnast_ID = people.People_ID   order by gymnast.total_points desc",
        "question": "What are the ages of the gymnasts, ordered descending by their total points?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select count(*) from wrestler",
        "question": "How many wrestlers are there?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select count(*) from wrestler",
        "question": "Count the number of wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler   order by wrestler.days_held desc",
        "question": "List the names of wrestlers in descending order of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name from wrestler   order by wrestler.days_held desc",
        "question": "List the names of wrestlers in descending order of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler   order by wrestler.days_held desc",
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name from wrestler   order by wrestler.days_held desc",
        "question": "What are the names of the wrestlers, ordered descending by days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler   order by wrestler.days_held asc limit 1",
        "question": "What is the name of the wrestler with the fewest days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.days_held in (select wrestler.days_held from wrestler   order by wrestler.days_held asc limit 1 )",
        "question": "What is the name of the wrestler with the fewest days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler  group by wrestler.days_held  order by count(*) asc limit 1",
        "question": "What is the name of the wrestler with the fewest days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler   order by wrestler.days_held asc limit 1",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.days_held in (select wrestler.days_held from wrestler   order by wrestler.days_held asc limit 1 )",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.wrestler_id in (select wrestler.Wrestler_ID from wrestler   order by wrestler.days_held asc limit 1 )",
        "question": "Return the name of the wrestler who had the lowest number of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo ,Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo , Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo.Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo-Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo - Japan\"",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo\"",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo\"   except select distinct wrestler.reign from wrestler where  wrestler.reign = \"Japan\"",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo\" and wrestler.location != \"Japan\"",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler where  wrestler.location != \"Tokyo , Japan\"",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , wrestler.location from wrestler",
        "question": "What are the names and location of the wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name , wrestler.location from wrestler",
        "question": "What are the names and location of the wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , wrestler.location from wrestler",
        "question": "Give the names and locations of all wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name , wrestler.location from wrestler",
        "question": "Give the names and locations of all wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.elimination_move from Elimination where  elimination.team = \"Team Orton\"",
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.elimination_move from Elimination where  elimination.team = \"Team Orton\"",
        "question": "What are the elimination moves of wrestlers whose team is \"Team Orton\"?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , elimination.elimination_move from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "What are the names of wrestlers and the elimination moves?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name , elimination.elimination_move from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "What are the names of wrestlers and the elimination moves?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , elimination.elimination_move from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "Give the names of wrestlers and their elimination moves.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , elimination.elimination_move from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID  group by elimination.elimination_move",
        "question": "Give the names of wrestlers and their elimination moves.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name , elimination.elimination_move from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "Give the names of wrestlers and their elimination moves.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , elimination.team from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID   order by wrestler.days_held desc",
        "question": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name , elimination.team from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID   order by wrestler.days_held desc",
        "question": "List the names of wrestlers and the teams in elimination in descending order of days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name , elimination.team from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID   order by wrestler.days_held desc",
        "question": "What are the names of wrestlers and their teams in elimination, ordered descending by days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID   order by wrestler.days_held desc limit 1",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID   order by wrestler.days_held desc limit 1",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID  group by wrestler.days_held  order by count(*) desc limit 1",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID where  wrestler.days_held > 50",
        "question": "Show times of elimination of wrestlers with days held more than 50.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID where  wrestler.days_held > 50",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team , count(*) from Elimination  group by elimination.team",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.team , count(*) from Elimination  group by elimination.team",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select count(*) , elimination.team from Elimination  group by elimination.team",
        "question": "Show different teams in eliminations and the number of eliminations from each team.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team , count(*) from Elimination  group by elimination.team",
        "question": "How many eliminations did each team have?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select count(*) , elimination.team from Elimination  group by elimination.team",
        "question": "How many eliminations did each team have?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.team , count(*) from Elimination  group by elimination.team",
        "question": "How many eliminations did each team have?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team from Elimination  group by elimination.team having  count(*) > 3",
        "question": "Show teams that have suffered more than three eliminations.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.team from Elimination  group by elimination.team having  count(*) > 3",
        "question": "Show teams that have suffered more than three eliminations.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team from Elimination  group by elimination.team having  count(*) >= 3",
        "question": "Show teams that have suffered more than three eliminations.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team from Elimination  group by elimination.team having  count(*) > 3",
        "question": "Which teams had more than 3 eliminations?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.team from Elimination  group by elimination.team having  count(*) > 3",
        "question": "Which teams had more than 3 eliminations?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.reign , wrestler.days_held from wrestler",
        "question": "Show the reign and days held of wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign , wrestler.days_held from wrestler",
        "question": "Show the reign and days held of wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.reign , wrestler.days_held from wrestler",
        "question": "What are the reigns and days held of all wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign , wrestler.days_held from wrestler",
        "question": "What are the reigns and days held of all wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.days_held < 100",
        "question": "What are the names of wrestlers days held less than 100?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.days_held <= 100",
        "question": "What are the names of wrestlers days held less than 100?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.days_held < 100",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.days_held <= 100",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.reign from wrestler  group by wrestler.reign  order by count(*) desc limit 1",
        "question": "Please show the most common reigns of wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler  group by wrestler.reign  order by count(*) desc limit 1",
        "question": "Please show the most common reigns of wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.reign from wrestler  group by wrestler.reign  order by count(*) desc limit 1",
        "question": "Which reign is the most common among wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.reign from wrestler  group by wrestler.reign  order by count(*) desc limit 1",
        "question": "Which reign is the most common among wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.location from wrestler  group by wrestler.location having  count(*) > 2",
        "question": "List the locations that are shared by more than two wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.location from wrestler  group by wrestler.location having  count(*) > 2",
        "question": "List the locations that are shared by more than two wrestlers.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.location from wrestler  group by wrestler.location having  count(*) > 2",
        "question": "Which locations are shared by more than two wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.location from wrestler  group by wrestler.location having  count(*) > 2",
        "question": "Which locations are shared by more than two wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.wrestler_id not in (select Elimination.Wrestler_ID from Elimination  )",
        "question": "List the names of wrestlers that have not been eliminated.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler   except select wrestler.name from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "List the names of wrestlers that have not been eliminated.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name from wrestler where  wrestler.wrestler_id not in (select Elimination.Wrestler_ID from Elimination  )",
        "question": "List the names of wrestlers that have not been eliminated.",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler where  wrestler.wrestler_id not in (select Elimination.Wrestler_ID from Elimination  )",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select wrestler.name from wrestler   except select wrestler.name from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name from wrestler where  wrestler.wrestler_id not in (select Elimination.Wrestler_ID from Elimination  )",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct wrestler.name from wrestler   except select distinct wrestler.name from Elimination join wrestler on Elimination.Wrestler_ID = wrestler.Wrestler_ID",
        "question": "What are the names of wrestlers who have never been eliminated?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team from Elimination where  elimination.eliminated_by = \"Orton\"   intersect select elimination.team from Elimination where  elimination.eliminated_by = \"Benjamin\"",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.team from Elimination where  elimination.eliminated_by = \"Orton\"   intersect select distinct elimination.team from Elimination where  elimination.eliminated_by = \"Benjamin\"",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.team from Elimination where  elimination.eliminated_by = \"Orton\"   intersect select elimination.team from Elimination where  elimination.eliminated_by = \"Benjamin\"",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select distinct elimination.team from Elimination where  elimination.eliminated_by = \"Orton\"   intersect select distinct elimination.team from Elimination where  elimination.eliminated_by = \"Benjamin\"",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select count( distinct elimination.team) from Elimination",
        "question": "What is the number of distinct teams that suffer elimination?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select count( distinct elimination.team) from Elimination",
        "question": "How many different teams have had eliminated wrestlers?",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination where  elimination.eliminated_by = \"Punk\" or elimination.eliminated_by = \"Orton\"",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "correctness": 1
    },
    {
        "db_id": "wrestler",
        "query": "select elimination.time from Elimination where  elimination.eliminated_by = \"Punk\" or elimination.eliminated_by = \"Orton\"",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema   except select cinema.location from cinema where  cinema.capacity > 800",
        "question": "Show all the locations where no cinema has capacity over 800.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema   except select distinct cinema.location from cinema where  cinema.capacity > 800",
        "question": "Show all the locations where no cinema has capacity over 800.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.openning_year = 2010   intersect select cinema.location from cinema where  cinema.openning_year = 2011",
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema where  cinema.openning_year = 2010   intersect select distinct cinema.location from cinema where  cinema.openning_year = 2011",
        "question": "Show all the locations where some cinemas were opened in both year 2010 and year 2011.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from cinema",
        "question": "How many cinema do we have?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from cinema",
        "question": "Count the number of cinemas.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , cinema.openning_year , cinema.capacity from cinema",
        "question": "Show name, opening year, and capacity for each cinema.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.name , cinema.openning_year , cinema.capacity from cinema",
        "question": "Show name, opening year, and capacity for each cinema.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , cinema.location from cinema where  cinema.capacity > (select avg(cinema.capacity) from cinema  )",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , cinema.location from cinema  group by cinema.name having  avg(cinema.capacity) > (select avg(cinema.capacity) from cinema  )",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , cinema.location from cinema where  cinema.capacity >= (select avg(cinema.capacity) from cinema  )",
        "question": "Show the cinema name and location for cinemas with capacity above average.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema",
        "question": "What are all the locations with a cinema?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema",
        "question": "Find the distinct locations that has a cinema.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema  group by cinema.location",
        "question": "Find the distinct locations that has a cinema.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , cinema.openning_year from cinema   order by cinema.openning_year desc",
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.name , cinema.openning_year from cinema   order by cinema.openning_year desc",
        "question": "Show all the cinema names and opening years in descending order of opening year.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , cinema.location from cinema   order by cinema.capacity desc limit 1",
        "question": "What are the name and location of the cinema with the largest capacity?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select avg(cinema.capacity) , min(cinema.capacity) , max(cinema.capacity) from cinema where  cinema.openning_year >= 2011",
        "question": "Show the average, minimum, and maximum capacity for all the cinemas opened in year 2011 or later.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location , count(*) from cinema  group by cinema.location",
        "question": "Show each location and the number of cinemas there.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location , count(*) from cinema  group by cinema.location",
        "question": "Show each location and the number of cinemas there.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.openning_year >= 2010  group by cinema.location  order by count(*) desc limit 1",
        "question": "What is the location with the most cinemas opened in year 2010 or later?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) >= 2",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) >= 2",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count( distinct cinema.capacity) >= 2",
        "question": "Show all the locations with at least two cinemas with capacity above 300.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) >= 2",
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) >= 2",
        "question": "Which locations have 2 or more cinemas with capacity over 300?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.title , film.directed_by from film",
        "question": "Show the title and director for all films.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.title , film.directed_by from film",
        "question": "Show the title and director for all films.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.title , film.directed_by from film",
        "question": "What are the title and director of each film?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.directed_by from film",
        "question": "Show all directors.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.directed_by from film  group by film.directed_by",
        "question": "Show all directors.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.directed_by from film  group by film.directed_by",
        "question": "Show all directors.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.directed_by from film",
        "question": "Who are all the directors?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.directed_by from film  group by film.directed_by",
        "question": "Who are all the directors?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.directed_by from film  group by film.directed_by",
        "question": "Who are all the directors?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.directed_by from film   order by film.directed_by asc limit 3",
        "question": "Who are all the directors?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.directed_by , count(*) from film  group by film.directed_by",
        "question": "List all directors along with the number of films directed by each director.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct film.directed_by , count(*) from film  group by film.directed_by",
        "question": "List all directors along with the number of films directed by each director.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , sum(schedule.show_times_per_day) from schedule join cinema on schedule.Cinema_ID = cinema.Cinema_ID  group by cinema.name",
        "question": "What is total number of show times per dat for each cinema?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , sum(schedule.show_times_per_day) from schedule join cinema on schedule.Cinema_ID = cinema.Cinema_ID  group by schedule.cinema_id",
        "question": "What is total number of show times per dat for each cinema?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select sum(schedule.show_times_per_day) , cinema.name from schedule join cinema on schedule.Cinema_ID = cinema.Cinema_ID  group by cinema.name",
        "question": "What is total number of show times per dat for each cinema?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.title , max(schedule.price) from schedule join film on schedule.Film_ID = film.Film_ID  group by film.title",
        "question": "What are the title and maximum price of each film?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.title , max(schedule.price) from schedule join film on schedule.Film_ID = film.Film_ID  group by film.film_id",
        "question": "What are the title and maximum price of each film?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.title , max(schedule.price) from schedule join film on schedule.Film_ID = film.Film_ID  group by film.title",
        "question": "Give me the title and highest price for each film.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.name , film.title , schedule.date , schedule.price from schedule join cinema on schedule.Cinema_ID = cinema.Cinema_ID join film on schedule.Film_ID = film.Film_ID",
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.name , film.title , schedule.date , schedule.price from schedule join cinema on schedule.Cinema_ID = cinema.Cinema_ID join film on schedule.Film_ID = film.Film_ID",
        "question": "Show cinema name, film title, date, and price for each record in schedule.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.title , film.directed_by from film where  film.film_id not in (select schedule.Film_ID from schedule  )",
        "question": "What are the title and director of the films without any schedule?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.directed_by from schedule join film on schedule.Film_ID = film.Film_ID  group by film.directed_by  order by count(*) desc limit 1",
        "question": "Show director with the largest number of show times in total.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.directed_by from schedule join film on schedule.Film_ID = film.Film_ID  group by film.directed_by  order by sum(schedule.show_times_per_day) desc limit 1",
        "question": "Show director with the largest number of show times in total.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select film.directed_by from schedule join film on schedule.Film_ID = film.Film_ID  group by film.directed_by  order by count(schedule.show_times_per_day) desc limit 1",
        "question": "Show director with the largest number of show times in total.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) > 1",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) > 1",
        "question": "Find the locations that have more than one movie theater with capacity above 300.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) > 1",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select distinct cinema.location from cinema where  cinema.capacity > 300  group by cinema.location having  count(*) > 1",
        "question": "In which locations are there more than one movie theater with capacity above 300?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from film where  film.title like \"%Dummy%\"",
        "question": "How many films have the word 'Dummy' in their titles?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from film where  film.title in (select film.title from film where  film.title like \"%Dummy%\"  )",
        "question": "How many films have the word 'Dummy' in their titles?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from film where  film.title like \"%dummy%\"",
        "question": "How many films have the word 'Dummy' in their titles?",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from film where  film.title like \"%Dummy%\"",
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from film where  film.title in (select film.title from film where  film.title like \"%Dummy%\"  )",
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "correctness": 1
    },
    {
        "db_id": "cinema",
        "query": "select count(*) from film where  film.title like \"%dummy%\"",
        "question": "Count the number of films whose title contains the word 'Dummy'.",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select bookings.customer_id , customers.first_name , count(*) from Bookings join Customers on Bookings.customer_id = Customers.customer_id  group by bookings.customer_id",
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select customers.customer_id , customers.first_name , count(*) from Bookings join Customers on Bookings.customer_id = Customers.customer_id  group by bookings.customer_id",
        "question": "How many bookings did each customer make? List the customer id, first name, and the count.",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select bookings.booking_id , bookings.amount_of_refund from Payments join Bookings on Payments.booking_id = Bookings.booking_id  group by payments.booking_id  order by count(*) desc limit 1",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select bookings.booking_id , bookings.amount_of_refund from Payments join Bookings on Payments.booking_id = Bookings.booking_id  group by bookings.booking_id  order by count(*) desc limit 1",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_booked.product_id from Products_Booked  group by products_booked.product_id having  count(*) = 3",
        "question": "What is the id of the product that is booked for 3 times?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.product_description from Products_Booked join Products_for_Hire on Products_Booked.product_id = Products_for_Hire.product_id where  products_booked.booked_amount = (select products_booked.booked_amount from Products_Booked  )",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select bookings.booking_start_date , bookings.booking_end_date from Products_Booked join Products_for_Hire on Products_Booked.product_id = Products_for_Hire.product_id join Bookings on Products_Booked.booking_id = Bookings.booking_id where  products_for_hire.product_name = \"Book collection A\"",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select bookings.booking_start_date , bookings.booking_end_date from Products_Booked join Products_for_Hire on Products_Booked.product_id = Products_for_Hire.product_id join Bookings on Products_Booked.booking_id = Bookings.booking_id where  products_for_hire.product_name = \"Book collection A\"  group by products_booked.booking_id having  count(*) >= 1",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select bookings.booking_start_date , bookings.booking_end_date from Products_Booked join Products_for_Hire on Products_Booked.product_id = Products_for_Hire.product_id join Bookings on Products_Booked.booking_id = Bookings.booking_id where  products_for_hire.product_name = \"Book collection A\"  group by bookings.booking_id having  count(*) >= 1",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.product_name from View_Product_Availability join Products_for_Hire on View_Product_Availability.product_id = Products_for_Hire.product_id where  view_product_availability.available_yn = 1",
        "question": "What are the names of products whose availability equals to 1?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select distinct products_for_hire.product_name from View_Product_Availability join Products_for_Hire on View_Product_Availability.product_id = Products_for_Hire.product_id where  view_product_availability.available_yn = 1",
        "question": "What are the names of products whose availability equals to 1?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.product_name from View_Product_Availability join Products_for_Hire on View_Product_Availability.product_id = Products_for_Hire.product_id where  view_product_availability.available_yn = \"1\"",
        "question": "What are the names of products whose availability equals to 1?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select count( distinct products_for_hire.product_type_code) from Products_for_Hire",
        "question": "How many different product types are there?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select customers.first_name , customers.last_name , customers.gender_mf from Customers where  customers.good_or_bad_customer = \"good\"   order by customers.last_name asc",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select avg(payments.amount_due) from Payments",
        "question": "What is the average amount due for all the payments?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select max(products_booked.booked_count) , min(products_booked.booked_count) , avg(products_booked.booked_count) from Products_Booked",
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select max(products_booked.booked_count) , avg(products_booked.booked_count) , min(products_booked.booked_count) from Products_Booked",
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select avg(products_booked.booked_count) , max(products_booked.booked_count) , min(products_booked.booked_count) from Products_Booked",
        "question": "What are the maximum, minimum, and average booked count for the products booked?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select distinct payments.payment_type_code from Payments",
        "question": "What are all the distinct payment types?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.daily_hire_cost from Products_for_Hire where  products_for_hire.product_name like \"%Book%\"",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.daily_hire_cost from Products_for_Hire where  products_for_hire.daily_hire_cost in (select products_for_hire.daily_hire_cost from Products_for_Hire where  products_for_hire.product_name like \"%Book%\"  )",
        "question": "What are the daily hire costs for the products with substring 'Book' in its name?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select discount_coupons.coupon_amount from Customers join Discount_Coupons on Customers.coupon_id = Discount_Coupons.coupon_id where  customers.good_or_bad_customer = \"good\"   intersect select discount_coupons.coupon_amount from Customers join Discount_Coupons on Customers.coupon_id = Discount_Coupons.coupon_id where  customers.good_or_bad_customer = \"bad\"",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select payments.payment_date from Payments where  payments.amount_paid > 300 or payments.payment_type_code = \"Check\"",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select payments.payment_date from Payments  group by payments.payment_date having  sum(payments.amount_paid) > 300  union select payments.payment_date from Payments where  payments.payment_type_code = \"Check\"",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select payments.payment_date from Payments where  payments.payment_type_code = \"Check\" or payments.amount_paid > 300",
        "question": "What are the payment date of the payment with amount paid higher than 300 or with payment type is 'Check'",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.product_name , products_for_hire.product_description from Products_for_Hire where  products_for_hire.product_type_code = \"Cutlery\" and products_for_hire.daily_hire_cost < 20",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.product_name , products_for_hire.product_description from Products_for_Hire where  products_for_hire.product_type_code = \"Cutlery\" and products_for_hire.daily_hire_cost < (select products_for_hire.daily_hire_cost from Products_for_Hire  )",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "correctness": 1
    },
    {
        "db_id": "products_for_hire",
        "query": "select products_for_hire.product_name , products_for_hire.product_description from Products_for_Hire where  products_for_hire.product_type_code = \"Cutlery\" and products_for_hire.daily_hire_cost < (select products_for_hire.daily_hire_cost from Products_for_Hire where  products_for_hire.product_type_code = \"Cutlery\"  )",
        "question": "What are the names and descriptions of the products that are of 'Cutlery' type and have daily hire cost lower than 20?",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select count(*) from pilot",
        "question": "How many pilots are there?",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name from pilot   order by pilot.rank asc",
        "question": "List the names of pilots in ascending order of rank.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.pilot_name from pilot   order by pilot.rank asc",
        "question": "List the names of pilots in ascending order of rank.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.position , pilot.team from pilot",
        "question": "What are the positions and teams of pilots?",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.position , pilot.team from pilot",
        "question": "What are the positions and teams of pilots?",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.position from pilot where  pilot.age > 30",
        "question": "List the distinct positions of pilots older than 30.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name from pilot where  pilot.team = \"Bradley\" or pilot.team = \"Fordham\"",
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.pilot_name from pilot where  pilot.team = \"Bradley\" or pilot.team = \"Fordham\"",
        "question": "Show the names of pilots from team \"Bradley\" or \"Fordham\".",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.join_year from pilot   order by pilot.rank asc limit 1",
        "question": "What is the joined year of the pilot of the highest rank?",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.nationality , count(*) from pilot  group by pilot.nationality",
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.nationality , count(*) from pilot  group by pilot.nationality",
        "question": "What are the different nationalities of pilots? Show each nationality and the number of pilots of each nationality.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.nationality from pilot  group by pilot.nationality  order by count(*) desc limit 1",
        "question": "Show the most common nationality of pilots.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.nationality from pilot  group by pilot.nationality  order by count(*) desc limit 1",
        "question": "Show the most common nationality of pilots.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.position from pilot where  pilot.join_year > 2005   intersect select pilot.position from pilot where  pilot.join_year < 2000",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.position from pilot where  pilot.join_year >= 2005   intersect select pilot.position from pilot where  pilot.join_year < 2000",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.position from pilot where  pilot.join_year > 2005   intersect select pilot.position from pilot where  pilot.join_year <= 2000",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name , aircraft.model from pilot_record join aircraft on pilot_record.Aircraft_ID = aircraft.Aircraft_ID join pilot on pilot_record.Pilot_ID = pilot.Pilot_ID",
        "question": "Show the names of pilots and models of aircrafts they have flied with.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name , aircraft.fleet_series from pilot_record join aircraft on pilot_record.Aircraft_ID = aircraft.Aircraft_ID join pilot on pilot_record.Pilot_ID = pilot.Pilot_ID   order by pilot.rank asc",
        "question": "Show the names of pilots and fleet series of the aircrafts they have flied with in ascending order of the rank of the pilot.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select aircraft.fleet_series from pilot_record join aircraft on pilot_record.Aircraft_ID = aircraft.Aircraft_ID join pilot on pilot_record.Pilot_ID = pilot.Pilot_ID where  pilot.age < 34",
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select aircraft.fleet_series from pilot_record join aircraft on pilot_record.Aircraft_ID = aircraft.Aircraft_ID join pilot on pilot_record.Pilot_ID = pilot.Pilot_ID where  pilot.age <= 34",
        "question": "Show the fleet series of the aircrafts flied by pilots younger than 34",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name , count(*) from pilot_record join pilot on pilot_record.Pilot_ID = pilot.Pilot_ID  group by pilot.pilot_name",
        "question": "Show the names of pilots and the number of records they have.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name from pilot where  pilot.pilot_id not in (select pilot_record.Pilot_ID from pilot_record  )",
        "question": "List the names of pilots that do not have any record.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select pilot.pilot_name from pilot   except select pilot.pilot_name from pilot_record join pilot on pilot_record.Pilot_ID = pilot.Pilot_ID",
        "question": "List the names of pilots that do not have any record.",
        "correctness": 1
    },
    {
        "db_id": "pilot_record",
        "query": "select distinct pilot.pilot_name from pilot where  pilot.pilot_id not in (select pilot_record.Pilot_ID from pilot_record  )",
        "question": "List the names of pilots that do not have any record.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct documents.document_status_code from Documents",
        "question": "What document status codes do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select ref_document_status.document_status_description from Ref_Document_Status where  ref_document_status.document_status_code = \"working\"",
        "question": "What is the description of document status code 'working'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct ref_document_status.document_status_description from Ref_Document_Status where  ref_document_status.document_status_code = \"working\"",
        "question": "What is the description of document status code 'working'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct documents.document_type_code from Documents",
        "question": "What document type codes do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_code = \"Paper\"",
        "question": "What is the description of document type 'Paper'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_code = \"Paper\"",
        "question": "What is the description of document type 'Paper'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select ref_shipping_agents.shipping_agent_name from Ref_Shipping_Agents",
        "question": "What are the shipping agent names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct ref_shipping_agents.shipping_agent_name from Ref_Shipping_Agents",
        "question": "What are the shipping agent names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select ref_shipping_agents.shipping_agent_code from Ref_Shipping_Agents where  ref_shipping_agents.shipping_agent_name = \"UPS\"",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct ref_shipping_agents.shipping_agent_code from Ref_Shipping_Agents where  ref_shipping_agents.shipping_agent_name = \"UPS\"",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct roles.role_code from Roles",
        "question": "What are all role codes?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select roles.role_code from Roles",
        "question": "What are all role codes?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select roles.role_description from Roles where  roles.role_code = \"ED\"",
        "question": "What is the description of role code ED?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct roles.role_description from Roles where  roles.role_code = \"ED\"",
        "question": "What is the description of role code ED?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select count(*) from Employees",
        "question": "How many employees do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_id , documents.receipt_date from Documents",
        "question": "List all document ids and receipt dates of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct documents.document_id , documents.receipt_date from Documents",
        "question": "List all document ids and receipt dates of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select roles.role_description , employees.role_code , count(*) from Employees join Roles on Employees.role_code = Roles.role_code  group by employees.role_code",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select employees.role_code , roles.role_description , count(*) from Employees join Roles on Employees.role_code = Roles.role_code  group by employees.role_code",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select ref_document_status.document_status_description from Documents join Ref_Document_Status on Documents.document_status_code = Ref_Document_Status.document_status_code where  documents.document_id = 1",
        "question": "What is the document status description of the document with id 1?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select count(*) from Documents where  documents.document_status_code = \"done\"",
        "question": "How many documents have the status code done?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_type_code from Documents where  documents.document_id = 2",
        "question": "List the document type code for the document with the id 2.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_type_code from Documents where  documents.document_id = 2  group by documents.document_type_code having  count(*) = 1",
        "question": "List the document type code for the document with the id 2.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_type_code from Documents where  documents.document_id = 2  group by documents.document_type_code having  count(*) >= 1",
        "question": "List the document type code for the document with the id 2.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_type_code from Documents where  documents.document_id = 2   order by documents.document_type_code asc limit 1",
        "question": "List the document type code for the document with the id 2.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_id from Documents where  documents.document_status_code = \"done\" and documents.document_type_code = \"Paper\"",
        "question": "List the document ids for any documents with the status code done and the type code paper.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select ref_shipping_agents.shipping_agent_name from Documents join Ref_Shipping_Agents on Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code where  documents.document_id = 2",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct ref_shipping_agents.shipping_agent_name from Documents join Ref_Shipping_Agents on Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code where  documents.document_id = 2",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select count(*) from Documents join Ref_Shipping_Agents on Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code where  ref_shipping_agents.shipping_agent_name = \"USPS\"",
        "question": "How many documents were shipped by USPS?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select count(*) from Documents where  documents.shipping_agent_code = (select documents.shipping_agent_code from Documents join Ref_Shipping_Agents on Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code where  ref_shipping_agents.shipping_agent_name = \"USPS\"  )",
        "question": "How many documents were shipped by USPS?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.receipt_date from Documents where  documents.document_id = 3",
        "question": "What is the receipt date of the document with id 3?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select addresses.address_details from Documents_Mailed join Addresses on Documents_Mailed.mailed_to_address_id = Addresses.address_id where  documents_mailed.document_id = 4",
        "question": "What address was the document with id 4 mailed to?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents_mailed.mailing_date from Documents_Mailed where  documents_mailed.document_id = 7",
        "question": "What is the mail date of the document with id 7?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents_mailed.mailing_date from Documents_Mailed join Documents on Documents_Mailed.document_id = Documents.document_id where  documents.document_id = 7",
        "question": "What is the mail date of the document with id 7?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_id from Documents where  documents.document_status_code = \"done\" and documents.document_type_code = \"Paper\" and documents.shipping_agent_code not in (select Ref_Shipping_Agents.shipping_agent_code from Ref_Shipping_Agents where  ref_shipping_agents.shipping_agent_name = \"USPS\"  )",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_id from Documents where  documents.document_status_code = \"done\" and documents.shipping_agent_code not in (select Ref_Shipping_Agents.shipping_agent_code from Ref_Shipping_Agents where  ref_shipping_agents.shipping_agent_name = \"USPS\"  )",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_id from Documents join Ref_Shipping_Agents on Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code where  documents.document_status_code = \"done\" and documents.document_type_code = \"Paper\" and ref_shipping_agents.shipping_agent_name = \"USPS\"",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select document_drafts.draft_details from Document_Drafts where  document_drafts.document_id = 7",
        "question": "What is draft detail of the document with id 7?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct document_drafts.draft_details from Document_Drafts where  document_drafts.document_id = 7",
        "question": "What is draft detail of the document with id 7?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select document_drafts.draft_details from Document_Drafts join Documents on Document_Drafts.document_id = Documents.document_id where  documents.document_id = 7",
        "question": "What is draft detail of the document with id 7?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select count(*) from Draft_Copies where  draft_copies.document_id = 2",
        "question": "How many draft copies does the document with id 2 have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select draft_copies.document_id , count(*) from Draft_Copies  group by draft_copies.document_id having  count(*) > 1",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select documents.document_id , count(*) from Draft_Copies join Documents on Draft_Copies.document_id = Documents.document_id  group by draft_copies.document_id having  count(*) > 1",
        "question": "Which documents have more than 1 draft copies? List document id and number of draft copies.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select employees.employee_name from Circulation_History join Employees on Circulation_History.employee_id = Employees.employee_id where  circulation_history.document_id = 1",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct employees.employee_name from Circulation_History join Employees on Circulation_History.employee_id = Employees.employee_id where  circulation_history.document_id = 1",
        "question": "List all employees in the circulation history of the document with id 1. List the employee's name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select employees.employee_name from Employees where  employees.employee_id not in (select Circulation_History.employee_id from Circulation_History  )",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select employees.employee_name from Employees   except select employees.employee_name from Circulation_History join Employees on Circulation_History.employee_id = Employees.employee_id",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select distinct employees.employee_name from Employees where  employees.employee_id not in (select Circulation_History.employee_id from Circulation_History  )",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select circulation_history.document_id , count( distinct circulation_history.employee_id) from Circulation_History  group by circulation_history.document_id",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "correctness": 1
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "query": "select circulation_history.document_id , count(circulation_history.employee_id) from Circulation_History  group by circulation_history.document_id",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select count(*) from technician",
        "question": "How many technicians are there?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select count(*) from technician",
        "question": "What is the number of technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician   order by technician.age asc",
        "question": "List the names of technicians in ascending order of age.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician   order by technician.age asc",
        "question": "What are the names of the technicians by ascending order of age?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team , technician.starting_year from technician",
        "question": "What are the team and starting year of technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team , technician.starting_year from technician",
        "question": "What are the team and starting year of technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.starting_year , technician.team from technician",
        "question": "What are the team and starting year of technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team , technician.starting_year from technician",
        "question": "What is the team and starting year for each technician?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team , technician.starting_year from technician  group by technician.team, technician.starting_year",
        "question": "What is the team and starting year for each technician?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team , technician.starting_year from technician",
        "question": "What is the team and starting year for each technician?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.team != \"NYY\"",
        "question": "List the name of technicians whose team is not \"NYY\".",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.team != \"NYY\"",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.technician_id not in (select technician.technician_id from technician where  technician.team = \"NYY\"  )",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.team not in (select technician.team from technician where  technician.team = \"NYY\"  )",
        "question": "What is the name of the technician whose team is not 'NYY'?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.age = 36 or technician.age = 37",
        "question": "Show the name of technicians aged either 36 or 37",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.name from technician where  technician.age = 36 or technician.age = 37",
        "question": "Show the name of technicians aged either 36 or 37",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.age = 37 or technician.age = 36",
        "question": "Show the name of technicians aged either 36 or 37",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.age = 36 or technician.age = 37",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.name from technician where  technician.age = 36 or technician.age = 37",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.age = 37 or technician.age = 36",
        "question": "What are the names of the technicians aged either 36 or 37?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.starting_year from technician   order by technician.age desc limit 1",
        "question": "What is the starting year of the oldest technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.starting_year from technician   order by technician.age desc limit 1",
        "question": "What is the starting year for the oldest technician?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team , count(*) from technician  group by technician.team",
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team , count(*) from technician  group by technician.team",
        "question": "Show different teams of technicians and the number of technicians in each team.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team , count(*) from technician  group by technician.team",
        "question": "For each team, how many technicians are there?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select count(*) , technician.team from technician  group by technician.team",
        "question": "For each team, how many technicians are there?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team , count(*) from technician  group by technician.team",
        "question": "For each team, how many technicians are there?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team from technician  group by technician.team  order by count(*) desc limit 1",
        "question": "Please show the team that has the most number of technicians.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team from technician  group by technician.team  order by count(*) desc limit 1",
        "question": "What are the teams with the most technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team from technician  group by technician.team  order by count(*) desc limit 1",
        "question": "What are the teams with the most technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team from technician  group by technician.team having  count(*) >= 2",
        "question": "Show the team that have at least two technicians.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team from technician  group by technician.team having  count(*) >= 2",
        "question": "Show the team that have at least two technicians.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.team from technician  group by technician.team having  count(*) >= 2",
        "question": "What is the team with at least 2 technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.team from technician  group by technician.team having  count(*) >= 2",
        "question": "What is the team with at least 2 technicians?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , machine.machine_series from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id",
        "question": "Show names of technicians and series of machines they are assigned to repair.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , machine.machine_series from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id",
        "question": "What are the names of technicians and the machine series that they repair?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id   order by machine.quality_rank asc",
        "question": "Show names of technicians in ascending order of quality rank of the machine they are assigned.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id   order by machine.quality_rank asc",
        "question": "What are the names of the technicians by ascending order of quality rank for the machine they are assigned?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id where  machine.value_points > 70",
        "question": "Show names of technicians who are assigned to repair machines with value point more than 70.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id where  machine.value_points > 70",
        "question": "What are the names of the technicians that are assigned to repair machines with more point values than 70?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join technician on repair_assignment.technician_id = technician.technician_id  group by repair_assignment.technician_id",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join technician on repair_assignment.technician_id = technician.technician_id  group by technician.name",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join technician on repair_assignment.technician_id = technician.technician_id  group by technician.technician_id",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id  group by repair_assignment.technician_id",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join technician on repair_assignment.technician_id = technician.technician_id  group by repair_assignment.technician_id",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join technician on repair_assignment.technician_id = technician.technician_id  group by technician.name",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name , count(*) from repair_assignment join machine on repair_assignment.Machine_ID = machine.Machine_ID join technician on repair_assignment.technician_id = technician.technician_id  group by repair_assignment.technician_id",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.technician_id not in (select repair_assignment.technician_id from repair_assignment  )",
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.name from technician where  technician.technician_id not in (select repair_assignment.technician_id from repair_assignment  )",
        "question": "List the names of technicians who have not been assigned to repair machines.",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.name from technician where  technician.technician_id not in (select repair_assignment.technician_id from repair_assignment  )",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.name from technician where  technician.technician_id not in (select repair_assignment.technician_id from repair_assignment  )",
        "question": "What are the names of the technicians that have not been assigned to repair machines?",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select technician.starting_year from technician where  technician.team = \"CLE\"   intersect select technician.starting_year from technician where  technician.team = \"CWS\"",
        "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "correctness": 1
    },
    {
        "db_id": "machine_repair",
        "query": "select distinct technician.starting_year from technician where  technician.team = \"CLE\"   intersect select distinct technician.starting_year from technician where  technician.team = \"CWS\"",
        "question": "Show the starting years shared by technicians from team \"CLE\" and \"CWS\".",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select count(*) from perpetrator",
        "question": "How many perpetrators are there?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.date from perpetrator   order by perpetrator.killed desc",
        "question": "List the date of perpetrators in descending order of the number of people killed.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.injured from perpetrator   order by perpetrator.injured asc",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select avg(perpetrator.injured) from perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.location from perpetrator   order by perpetrator.killed desc limit 1",
        "question": "What is the location of the perpetrator with the largest kills.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.location from perpetrator  group by perpetrator.location  order by sum(perpetrator.killed) desc limit 1",
        "question": "What is the location of the perpetrator with the largest kills.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from people   order by people.height asc",
        "question": "What are the names of people in ascending order of height?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from people   order by people.height asc",
        "question": "What are the names of people in ascending order of height?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from perpetrator join people on perpetrator.People_ID = people.People_ID",
        "question": "What are the names of perpetrators?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from perpetrator join people on perpetrator.People_ID = people.People_ID",
        "question": "What are the names of perpetrators?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from perpetrator join people on perpetrator.People_ID = people.People_ID where  perpetrator.country != \"China\"",
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from perpetrator join people on perpetrator.People_ID = people.People_ID where  perpetrator.country != \"China\"",
        "question": "What are the names of perpetrators whose country is not \"China\"?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from perpetrator join people on perpetrator.People_ID = people.People_ID   order by people.weight desc limit 1",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from perpetrator join people on perpetrator.People_ID = people.People_ID where  perpetrator.country = \"China\" or perpetrator.country = \"Japan\"",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from perpetrator join people on perpetrator.People_ID = people.People_ID where  perpetrator.country = \"China\" or perpetrator.country = \"Japan\"",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.height from perpetrator join people on perpetrator.People_ID = people.People_ID   order by perpetrator.injured desc",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.height from perpetrator join people on perpetrator.People_ID = people.People_ID  group by perpetrator.injured  order by count(*) desc",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.country , count(*) from perpetrator  group by perpetrator.country",
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct perpetrator.country , count(*) from perpetrator  group by perpetrator.country",
        "question": "What are the countries of perpetrators? Show each country and the corresponding number of perpetrators there.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from perpetrator join people on perpetrator.People_ID = people.People_ID   order by perpetrator.year desc",
        "question": "List the names of perpetrators in descending order of the year.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from perpetrator join people on perpetrator.People_ID = people.People_ID   order by perpetrator.year desc",
        "question": "List the names of perpetrators in descending order of the year.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from people where  people.people_id not in (select perpetrator.People_ID from perpetrator  )",
        "question": "List the names of people that are not perpetrators.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select people.name from people   except select people.name from perpetrator join people on perpetrator.People_ID = people.People_ID",
        "question": "List the names of people that are not perpetrators.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from people where  people.people_id not in (select perpetrator.People_ID from perpetrator  )",
        "question": "List the names of people that are not perpetrators.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select distinct people.name from people   except select distinct people.name from perpetrator join people on perpetrator.People_ID = people.People_ID",
        "question": "List the names of people that are not perpetrators.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.country from perpetrator where  perpetrator.injured > 50   intersect select perpetrator.country from perpetrator where  perpetrator.injured < 20",
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.country from perpetrator where  perpetrator.injured > 50   intersect select perpetrator.country from perpetrator where  perpetrator.injured <= 20",
        "question": "Show the countries that have both perpetrators with injures more than 50 and perpetrators with injures smaller than 20.",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select count( distinct perpetrator.location) from perpetrator",
        "question": "How many distinct locations of perpetrators are there?",
        "correctness": 1
    },
    {
        "db_id": "perpetrator",
        "query": "select perpetrator.date from perpetrator join people on perpetrator.People_ID = people.People_ID   order by people.height desc limit 1",
        "question": "Show the date of the tallest perpetrator.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "Report the name of all campuses in Los Angeles county.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "Report the name of all campuses in Los Angeles county.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "What campuses are located in the county of Los Angeles?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "What campuses are located in the county of Los Angeles?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.location = \"Chico\"",
        "question": "What are the names of all campuses located at Chico?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.location = \"Chico\"",
        "question": "What are the names of all campuses located at Chico?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.location = \"Chico\"",
        "question": "What campuses are located in Chico?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.location = \"Chico\"",
        "question": "What campuses are located in Chico?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year = 1958",
        "question": "Find all the campuses opened in 1958.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.year = 1958",
        "question": "Find all the campuses opened in 1958.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year like 1958",
        "question": "Find all the campuses opened in 1958.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year = 1958",
        "question": "What are the campuses that opened in 1958?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year like 1958",
        "question": "What are the campuses that opened in 1958?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.year = 1958",
        "question": "What are the campuses that opened in 1958?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year = 1958  group by campuses.campus",
        "question": "What are the campuses that opened in 1958?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year < 1800",
        "question": "Find the name of the campuses opened before 1800.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.year < 1800",
        "question": "Find the name of the campuses opened before 1800.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year < 1800",
        "question": "What campuses opened before 1800?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.year < 1800",
        "question": "What campuses opened before 1800?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year between 1935 and 1939",
        "question": "Which campus was opened between 1935 and 1939?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.year between 1935 and 1939",
        "question": "Which campus was opened between 1935 and 1939?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.year between 1935 and 1939",
        "question": "What campuses opened between 1935 and 1939?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.year between 1935 and 1939",
        "question": "What campuses opened between 1935 and 1939?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.location = \"Northridge\" or campuses.location = \"San Francisco\"   union select campuses.campus from Campuses where  campuses.location = \"Los Angeles\" and campuses.county = \"San Francisco\"",
        "question": "What campuses are located in Northridge, Los Angeles or in San Francisco, San Francisco?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Jose State University\" and csu_fees.year = 1996",
        "question": "What is the campus fee of \"San Jose State University\" in year 1996?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Jose State University\" and csu_fees.year = 1996",
        "question": "What is the campus fee for San Jose State University in 1996?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and csu_fees.year = 1996",
        "question": "What is the campus fee of \"San Francisco State University\" in year 1996?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and csu_fees.year = 1996",
        "question": "What is the campus fee for San Francisco State University in 1996?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from csu_fees where  csu_fees.campusfee > (select avg(csu_fees.campusfee) from csu_fees  )",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  csu_fees.campusfee > (select avg(csu_fees.CampusFee) from csu_fees  )",
        "question": "How many universities have a campus fee higher than average?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from csu_fees where  csu_fees.campusfee > (select avg(csu_fees.campusfee) from csu_fees  )",
        "question": "How many universities have a campus fee higher than average?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from csu_fees where  csu_fees.campusfee > (select avg(csu_fees.campusfee) from csu_fees  )",
        "question": "Find the count of universities whose campus fee is greater than the average campus fee.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  csu_fees.campusfee > (select avg(csu_fees.CampusFee) from csu_fees  )",
        "question": "How many universities have a campus fee greater than the average?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from csu_fees where  csu_fees.campusfee > (select avg(csu_fees.campusfee) from csu_fees  )",
        "question": "How many universities have a campus fee greater than the average?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\" and campuses.year > 1950",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\" and campuses.year > 1950  group by campuses.campus",
        "question": "Which university is in Los Angeles county and opened after 1950?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\" and campuses.year > 1950",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\" and campuses.year > 1950  group by campuses.campus",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\" and campuses.year > 1950  group by campuses.location",
        "question": "What campuses are located in Los Angeles county and opened after 1950?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select degrees.campus from degrees  group by degrees.campus  order by sum(degrees.degrees) desc limit 1",
        "question": "Which campus has the most degrees conferred in all times?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select degrees.campus from degrees  group by degrees.campus  order by sum(degrees.degrees) desc limit 1",
        "question": "What campus has the most degrees  conferrred over its entire existence?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees where  csu_fees.year = 1996",
        "question": "Find the average fee on a CSU campus in 1996",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees where  csu_fees.year = 1996",
        "question": "What is the average fee for a CSU campus in the year of 1996?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees where  csu_fees.year = 2005",
        "question": "What is the average fee on a CSU campus in 2005?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.year = 2005",
        "question": "What is the average fee on a CSU campus in 2005?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"C\"",
        "question": "What is the average fee on a CSU campus in 2005?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.year = 2005",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select avg(csu_fees.campusfee) from csu_fees where  csu_fees.year = 2005",
        "question": "What is the average fee for a CSU campus in the year of 2005?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from enrollments join Campuses on enrollments.Campus = Campuses.Id where  enrollments.totalenrollment_ay > 400 and enrollments.fte_ay > 200 and enrollments.year = 1956",
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from enrollments join Campuses on enrollments.Campus = Campuses.Id  group by campuses.campus having  sum(enrollments.totalenrollment_ay) > 400  intersect select campuses.campus from enrollments join Campuses on enrollments.Campus = Campuses.Id where  enrollments.year = 1956  group by campuses.campus having  sum(enrollments.fte_ay) > 200",
        "question": "What campus had more than 400 total enrollment but more than 200 full time enrollment in year 1956?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "How many campuses are there in Los Angeles county?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "How many campuses exist are in the county of LA?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "List the campuses in Los Angeles county.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "List the campuses in Los Angeles county.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "What campuses are in Los Angeles county?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct campuses.campus from Campuses where  campuses.county = \"Los Angeles\"",
        "question": "What campuses are in Los Angeles county?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select degrees.degrees from degrees join Campuses on degrees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and degrees.year = 2001",
        "question": "What are the degrees conferred in \"San Francisco State University\" in 2001.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select degrees.degrees from degrees join Campuses on degrees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and degrees.year = 2001",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select distinct degrees.degrees from degrees join Campuses on degrees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and degrees.year = 2001",
        "question": "What degrees were conferred in San Francisco State University in the year 2001?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and csu_fees.year = 2000",
        "question": "What is the campus fee of \"San Francisco State University\" in year 2000?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Francisco State University\" and csu_fees.year = 2000",
        "question": "In the year 2000, what is the campus fee for San Francisco State University?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Jose State University\" and csu_fees.year = 2000",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Jos\u00e9 State University\" and csu_fees.year = 2000",
        "question": "Find the campus fee of \"San Jose State University\" in year 2000.",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select csu_fees.campusfee from csu_fees join Campuses on csu_fees.Campus = Campuses.Id where  campuses.campus = \"San Jose State University\" and csu_fees.year = 2000",
        "question": "What is the campus fee in the year 2000 for San Jose State University?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from Campuses",
        "question": "How many CSU campuses are there?",
        "correctness": 1
    },
    {
        "db_id": "csu_1",
        "query": "select count(*) from Campuses",
        "question": "What is the total number of campuses?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select count(*) from county_public_safety",
        "question": "How many counties are there?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select count(*) from county_public_safety",
        "question": "Count the number of countries.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety   order by county_public_safety.population desc",
        "question": "List the names of counties in descending order of population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety  group by county_public_safety.name  order by county_public_safety.population desc",
        "question": "List the names of counties in descending order of population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.name from county_public_safety   order by county_public_safety.population desc",
        "question": "List the names of counties in descending order of population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety   order by county_public_safety.population desc",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.name from county_public_safety   order by county_public_safety.population desc",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety  group by county_public_safety.name  order by county_public_safety.population desc",
        "question": "What are the names of the counties of public safety, ordered by population descending?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.location != \"East\"",
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.county_id not in (select county_public_safety.County_ID from county_public_safety where  county_public_safety.location = \"East\"  )",
        "question": "List the distinct police forces of counties whose location is not on east side.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.location != \"East\"",
        "question": "What are the different police forces of counties that are not located in the East?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.county_id not in (select county_public_safety.County_ID from county_public_safety where  county_public_safety.location = \"East\"  )",
        "question": "What are the different police forces of counties that are not located in the East?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select min(county_public_safety.crime_rate) , max(county_public_safety.crime_rate) from county_public_safety",
        "question": "What are the minimum and maximum crime rate of counties?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select max(county_public_safety.crime_rate) , min(county_public_safety.crime_rate) from county_public_safety",
        "question": "What are the minimum and maximum crime rate of counties?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select min(county_public_safety.crime_rate) , max(county_public_safety.crime_rate) from county_public_safety",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select max(county_public_safety.crime_rate) , min(county_public_safety.crime_rate) from county_public_safety",
        "question": "Return the minimum and maximum crime rates across all counties.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from county_public_safety   order by county_public_safety.police_officers asc",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from county_public_safety  group by county_public_safety.police_officers  order by count(*) asc",
        "question": "Show the crime rates of counties in ascending order of number of police officers.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city   order by city.name asc",
        "question": "What are the names of cities in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct city.name from city   order by city.name asc",
        "question": "What are the names of cities in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city   order by city.name asc",
        "question": "Return the names of cities, ordered alphabetically.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct city.name from city   order by city.name asc",
        "question": "Return the names of cities, ordered alphabetically.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.hispanic from city where  city.black > 10",
        "question": "What are the percentage of hispanics in cities with the black percentage higher than 10?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.hispanic from city where  city.black > 10",
        "question": "Return the hispanic percentage for cities in which the black percentage is greater than 10.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety   order by county_public_safety.population desc limit 1",
        "question": "List the name of the county with the largest population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety   order by county_public_safety.population desc limit 1",
        "question": "What is the name of the county with the greatest population?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety  group by county_public_safety.county_id  order by sum(county_public_safety.population) desc limit 1",
        "question": "What is the name of the county with the greatest population?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city   order by city.white desc limit 5",
        "question": "List the names of the city with the top 5 white percentages.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city where  city.white >= 5   order by city.white desc limit 5",
        "question": "List the names of the city with the top 5 white percentages.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city where  city.white > 5   order by city.white desc limit 5",
        "question": "List the names of the city with the top 5 white percentages.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select count(*) from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  county_public_safety.population > 20000",
        "question": "Show the number of cities in counties that have a population more than 20000.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select count(*) from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  county_public_safety.population > 20000",
        "question": "How many cities are in counties that have populations of over 20000?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  city.white > 90",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  city.white > 90  group by county_public_safety.county_id",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  city.white > 90 and county_public_safety.county_id = 1",
        "question": "Show the crime rate of counties with a city having white percentage more than 90.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  city.white > 90",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  city.white > 90 and county_public_safety.county_id = 1",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.crime_rate from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  city.white > 90 and city.county_id = 1",
        "question": "What are the crime rates of counties that contain cities that have white percentages of over 90?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.police_force , count(*) from county_public_safety  group by county_public_safety.police_force",
        "question": "Please show the police forces and the number of counties with each police force.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force , count(*) from county_public_safety  group by county_public_safety.police_force",
        "question": "Please show the police forces and the number of counties with each police force.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.police_force , count(*) from county_public_safety  group by county_public_safety.police_force",
        "question": "How many counties correspond to each police force?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force , count(*) from county_public_safety  group by county_public_safety.police_force",
        "question": "How many counties correspond to each police force?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.location from county_public_safety  group by county_public_safety.location  order by count(*) desc limit 1",
        "question": "What is the location shared by most counties?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.location from county_public_safety  group by county_public_safety.location  order by count(*) desc limit 1",
        "question": "Which location has the most corresponding counties?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.location from city join county_public_safety on city.County_ID = county_public_safety.County_ID  group by county_public_safety.location  order by count(*) desc limit 1",
        "question": "Which location has the most corresponding counties?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.location from county_public_safety  group by county_public_safety.location  order by count( distinct county_public_safety.county_id) desc limit 1",
        "question": "Which location has the most corresponding counties?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety where  county_public_safety.county_id not in (select city.County_ID from city  )",
        "question": "List the names of counties that do not have any cities.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.name from county_public_safety where  county_public_safety.county_id not in (select city.County_ID from city  )",
        "question": "What are the names of counties that do not contain any cities?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"East\"   intersect select county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"West\"",
        "question": "Show the police force shared by counties with location on the east and west.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"East\"   intersect select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"West\"",
        "question": "Show the police force shared by counties with location on the east and west.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"East\"   intersect select county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"West\"",
        "question": "Which police forces operate in both counties that are located in the East and in the West?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"East\"   intersect select distinct county_public_safety.police_force from county_public_safety where  county_public_safety.location = \"West\"",
        "question": "Which police forces operate in both counties that are located in the East and in the West?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  county_public_safety.crime_rate < 100",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  county_public_safety.crime_rate <= 100",
        "question": "Show the names of cities in counties that have a crime rate less than 100.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  county_public_safety.crime_rate < 100",
        "question": "What are the names of cities that are in counties that have a crime rate below 100?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select city.name from city join county_public_safety on city.County_ID = county_public_safety.County_ID where  county_public_safety.crime_rate <= 100",
        "question": "What are the names of cities that are in counties that have a crime rate below 100?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.case_burden from county_public_safety   order by county_public_safety.population desc",
        "question": "Show the case burden of counties in descending order of population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.case_burden from county_public_safety  group by county_public_safety.population  order by count(*) desc",
        "question": "Show the case burden of counties in descending order of population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.case_burden from county_public_safety  group by county_public_safety.population  order by county_public_safety.population desc",
        "question": "Show the case burden of counties in descending order of population.",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.case_burden from county_public_safety   order by county_public_safety.population desc",
        "question": "What are the case burdens of counties, ordered descending by population?",
        "correctness": 1
    },
    {
        "db_id": "county_public_safety",
        "query": "select county_public_safety.case_burden from county_public_safety  group by county_public_safety.case_burden  order by county_public_safety.population desc",
        "question": "What are the case burdens of counties, ordered descending by population?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 160 and rooms.beds = 2",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 160 and rooms.beds = 2",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 160 and rooms.beds >= 2",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice <= 160 and rooms.beds = 2",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 162 and rooms.beds = 2",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 160 and rooms.beds = 2",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 160 and rooms.beds >= 2",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice < 160 and rooms.beds = 2",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.decor = \"modern\" and rooms.baseprice <= 160 and rooms.beds = 2",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.roomid from Rooms where  rooms.baseprice > 160 and rooms.maxoccupancy > 2",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.roomid from Rooms where  rooms.baseprice > 160 and rooms.maxoccupancy > 2",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.roomid from Rooms where  rooms.baseprice > 160 and rooms.maxoccupancy > 2",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.roomid from Rooms  group by rooms.roomid having  sum(rooms.baseprice) > 160  intersect select rooms.roomname , rooms.roomid from Rooms  group by rooms.roomid having  max(rooms.maxoccupancy) > 2",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.roomid from Rooms where  rooms.baseprice > 160 and rooms.maxoccupancy > 2",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by reservations.room  order by count(*) desc limit 1",
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by rooms.roomname  order by count(*) desc limit 1",
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by Reservations.Room  order by count(*) desc limit 1",
        "question": "Find the most popular room in the hotel. The most popular room is the room that had seen the largest number of reservations.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by reservations.room  order by count(*) desc limit 1",
        "question": "Which room has the largest number of reservations?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Reservations where  reservations.firstname = \"ROY\" and reservations.lastname = \"SWEAZY\"",
        "question": "How many times does ROY SWEAZY has reserved a room.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Reservations where  reservations.firstname = \"ROY\" and reservations.lastname = \"SWEAZY\"",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.decor from Rooms where  rooms.bedtype = \"King\"   order by rooms.baseprice asc",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.decor from Rooms where  rooms.bedtype = \"King\"   order by rooms.baseprice asc",
        "question": "List the names and decor of rooms that have a king bed. Sort the list by their price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.decor from Rooms where  rooms.bedtype = \"King\"   order by rooms.baseprice asc",
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.decor from Rooms where  rooms.bedtype = \"King\"   order by rooms.baseprice asc",
        "question": "What are the names and decor of rooms with a king bed? Sort them by their price",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.baseprice from Rooms   order by rooms.baseprice asc limit 1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.baseprice from Rooms   order by rooms.baseprice asc limit 1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.baseprice from Rooms   order by rooms.baseprice asc limit 1",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor from Rooms where  rooms.roomname = \"Recluse and defiance\"",
        "question": "What is the decor of room Recluse and defiance?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.decor from Rooms where  rooms.roomname = \"Recluse and defiance\"",
        "question": "What is the decor of room Recluse and defiance?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor from Rooms where  rooms.roomname = \"Recluse and defiance\"",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.decor from Rooms where  rooms.roomname = \"Recluse and defiance\"",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , avg(rooms.baseprice) from Rooms  group by rooms.bedtype",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select avg(rooms.baseprice) , rooms.bedtype from Rooms  group by rooms.bedtype",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.bedtype , avg(rooms.baseprice) from Rooms  group by rooms.bedtype",
        "question": "What is the average base price of different bed type? List bed type and average base price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , avg(rooms.baseprice) from Rooms  group by rooms.bedtype",
        "question": "For each bed type, find the average base price of different bed type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select avg(rooms.baseprice) , rooms.bedtype from Rooms  group by rooms.bedtype",
        "question": "For each bed type, find the average base price of different bed type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by rooms.decor  order by count(*) asc limit 1",
        "question": "What kind of decor has the least number of reservations?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.decor from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by rooms.decor  order by count(*) asc limit 1",
        "question": "What kind of decor has the least number of reservations?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor from Rooms  group by rooms.decor  order by count(*) asc limit 1",
        "question": "What is the least popular kind of decor?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Rooms",
        "question": "How many rooms are there?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Rooms",
        "question": "What is the total number of rooms available in this inn?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Rooms where  rooms.bedtype = \"King\"",
        "question": "Find the number of rooms with a king bed.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Rooms where  rooms.bedtype = \"King\"",
        "question": "How many rooms have a king bed?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , count(*) from Rooms  group by rooms.bedtype",
        "question": "Find the number of rooms for each bed type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) , rooms.bedtype from Rooms  group by rooms.bedtype",
        "question": "Find the number of rooms for each bed type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.bedtype , count(*) from Rooms  group by rooms.bedtype",
        "question": "Find the number of rooms for each bed type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , count(*) from Rooms  group by rooms.bedtype",
        "question": "What are the number of rooms for each bed type?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) , rooms.bedtype from Rooms  group by rooms.bedtype",
        "question": "What are the number of rooms for each bed type?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.bedtype , count(*) from Rooms  group by rooms.bedtype",
        "question": "What are the number of rooms for each bed type?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms   order by rooms.maxoccupancy desc limit 1",
        "question": "Find the name of the room with the maximum occupancy.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms   order by rooms.maxoccupancy desc limit 1",
        "question": "Find the name of the room with the maximum occupancy.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms   order by rooms.maxoccupancy desc limit 1",
        "question": "What is the name of the room that can accommodate the most people?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomid , rooms.roomname from Rooms   order by rooms.baseprice desc limit 1",
        "question": "Find the id and name of the most expensive base price room.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.roomid from Rooms   order by rooms.baseprice desc limit 1",
        "question": "Find the id and name of the most expensive base price room.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , rooms.roomname from Rooms where  rooms.decor = \"traditional\"",
        "question": "List the type of bed and name of all traditional rooms.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.bedtype , rooms.roomname from Rooms where  rooms.decor = \"traditional\"",
        "question": "List the type of bed and name of all traditional rooms.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , rooms.roomname from Rooms where  rooms.decor = \"traditional\"",
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.bedtype , rooms.roomname from Rooms where  rooms.decor = \"traditional\"",
        "question": "What are the bed type and name of all the rooms with traditional decor?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor , count(*) from Rooms where  rooms.bedtype = \"King\"  group by rooms.decor",
        "question": "Find the number of rooms with king bed for each decor type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) , rooms.decor from Rooms where  rooms.bedtype = \"King\"  group by rooms.decor",
        "question": "Find the number of rooms with king bed for each decor type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.decor , count(*) from Rooms where  rooms.bedtype = \"King\"  group by rooms.decor",
        "question": "Find the number of rooms with king bed for each decor type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) , rooms.decor from Rooms where  rooms.bedtype = \"King\"  group by rooms.decor",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor , count(*) from Rooms where  rooms.bedtype = \"King\"  group by rooms.decor",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.decor , count(*) from Rooms where  rooms.bedtype = \"King\"  group by rooms.decor",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select avg(rooms.baseprice) , min(rooms.baseprice) , rooms.decor from Rooms  group by rooms.decor",
        "question": "Find the average and minimum price of the rooms in different decor.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor , avg(rooms.baseprice) , min(rooms.baseprice) from Rooms  group by rooms.decor",
        "question": "Find the average and minimum price of the rooms in different decor.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms   order by rooms.baseprice asc",
        "question": "List the name of all rooms sorted by their prices.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms   order by rooms.baseprice asc",
        "question": "List the name of all rooms sorted by their prices.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms   order by rooms.baseprice asc",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms   order by rooms.baseprice asc",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) , rooms.decor from Rooms where  rooms.baseprice > 120  group by rooms.decor",
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor , count(*) from Rooms where  rooms.baseprice > 120  group by rooms.decor",
        "question": "Find the number of rooms with price higher than 120 for different decor.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) , rooms.decor from Rooms where  rooms.baseprice > 120  group by rooms.decor",
        "question": "How many rooms cost more than 120, for each different decor?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.decor , count(*) from Rooms where  rooms.baseprice > 120  group by rooms.decor",
        "question": "How many rooms cost more than 120, for each different decor?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.decor , count(*) from Rooms where  rooms.baseprice > 120  group by rooms.decor",
        "question": "How many rooms cost more than 120, for each different decor?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , avg(rooms.baseprice) from Rooms  group by rooms.bedtype",
        "question": "For each bed type, find the average room price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select avg(rooms.baseprice) , rooms.bedtype from Rooms  group by rooms.bedtype",
        "question": "For each bed type, find the average room price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select avg(rooms.baseprice) , rooms.bedtype from Rooms  group by rooms.bedtype",
        "question": "What is the average base price of rooms, for each bed type?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.bedtype , avg(rooms.baseprice) from Rooms  group by rooms.bedtype",
        "question": "What is the average base price of rooms, for each bed type?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.bedtype = \"King\" or rooms.bedtype = \"Queen\"",
        "question": "List the name of rooms with king or queen bed.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.bedtype = \"King\" or rooms.bedtype = \"Queen\"",
        "question": "List the name of rooms with king or queen bed.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.bedtype = \"King\" or rooms.bedtype = \"Queen\"",
        "question": "What are the names of rooms that have either king or queen bed?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.bedtype = \"King\" or rooms.bedtype = \"Queen\"",
        "question": "What are the names of rooms that have either king or queen bed?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count( distinct rooms.bedtype) from Rooms",
        "question": "How many different types of beds are there?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count( distinct rooms.bedtype) from Rooms",
        "question": "Find the number of distinct bed types available in this inn.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.roomid from Rooms   order by rooms.baseprice desc limit 3",
        "question": "Find the name and id of the top 3 expensive rooms.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.roomid from Rooms   order by rooms.baseprice desc limit 3",
        "question": "Find the name and id of the top 3 expensive rooms.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname , rooms.roomid from Rooms   order by rooms.baseprice desc limit 3",
        "question": "What are the name and id of the three highest priced rooms?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname , rooms.roomid from Rooms   order by rooms.baseprice desc limit 3",
        "question": "What are the name and id of the three highest priced rooms?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.baseprice > (select avg(rooms.baseprice) from Rooms  )",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.baseprice > (select avg(rooms.baseprice) from Rooms  )",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.baseprice >= (select avg(rooms.baseprice) from Rooms  )",
        "question": "Find the name of rooms whose price is higher than the average price.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.baseprice > (select avg(rooms.baseprice) from Rooms  )",
        "question": "What are the name of rooms that cost more than the average.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.baseprice > (select avg(rooms.baseprice) from Rooms  )",
        "question": "What are the name of rooms that cost more than the average.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.baseprice >= (select avg(rooms.baseprice) from Rooms  )",
        "question": "What are the name of rooms that cost more than the average.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Rooms where  rooms.roomid not in (select Reservations.Room from Reservations  )",
        "question": "Find the number of rooms that do not have any reservation.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Reservations where  reservations.room not in (select reservations.room from Reservations  )",
        "question": "Find the number of rooms that do not have any reservation.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Rooms where  rooms.roomid not in (select Reservations.Room from Reservations  )",
        "question": "How many rooms have not had any reservation yet?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Reservations where  reservations.room not in (select reservations.room from Reservations  )",
        "question": "How many rooms have not had any reservation yet?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select count(*) from Reservations where  reservations.code not in (select Reservations.Code from Reservations  )",
        "question": "How many rooms have not had any reservation yet?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by reservations.room having  count(*) > 60",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by reservations.room having  count(*) > 60",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by rooms.roomname having  count(*) > 60",
        "question": "Find the names of rooms that have been reserved for more than 60 times.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId  group by reservations.room having  count(*) > 60",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.baseprice between 120 and 150",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.baseprice between 120 and 150",
        "question": "Find the name of rooms whose base price is between 120 and 150.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Rooms where  rooms.baseprice between 120 and 150",
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select distinct rooms.roomname from Rooms where  rooms.baseprice between 120 and 150",
        "question": "Which rooms cost between 120 and 150? Give me the room names.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId where  reservations.firstname like \"%ROY%\"",
        "question": "Find the name of rooms booked by some customers whose first name contains ROY.",
        "correctness": 1
    },
    {
        "db_id": "inn_1",
        "query": "select rooms.roomname from Reservations join Rooms on Reservations.Room = Rooms.RoomId where  reservations.firstname like \"%ROY%\"",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select customer_master_index.cmi_details from CMI_Cross_References join Customer_Master_Index on CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id where  cmi_cross_references.source_system_code = \"Tax\"",
        "question": "what are the details of the cmi masters that have the cross reference code 'Tax'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.source_system_code from Council_Tax join CMI_Cross_References on Council_Tax.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  group by council_tax.cmi_cross_ref_id having  count(*) >= 1",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.source_system_code from Council_Tax join CMI_Cross_References on Council_Tax.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.source_system_code from Council_Tax join CMI_Cross_References on Council_Tax.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  group by cmi_cross_references.cmi_cross_ref_id having  count(*) >= 1",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select business_rates.cmi_cross_ref_id , cmi_cross_references.master_customer_id , count(*) from Business_Rates join CMI_Cross_References on Business_Rates.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  group by cmi_cross_references.master_customer_id",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select business_rates.cmi_cross_ref_id , cmi_cross_references.master_customer_id , count(*) from Business_Rates join CMI_Cross_References on Business_Rates.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  group by business_rates.cmi_cross_ref_id",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select cmi_cross_references.cmi_cross_ref_id , cmi_cross_references.master_customer_id , count(*) from Business_Rates join CMI_Cross_References on Business_Rates.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  group by cmi_cross_references.cmi_cross_ref_id",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select business_rates.cmi_cross_ref_id , cmi_cross_references.master_customer_id , count(*) from Business_Rates join CMI_Cross_References on Business_Rates.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id  group by cmi_cross_references.cmi_cross_ref_id",
        "question": "How many business rates are related to each cmi cross reference? List cross reference id, master customer id and the n",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select cmi_cross_references.source_system_code , benefits_overpayments.council_tax_id from Benefits_Overpayments join CMI_Cross_References on Benefits_Overpayments.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id   order by benefits_overpayments.council_tax_id asc",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select rent_arrears.council_tax_id from Rent_Arrears join CMI_Cross_References on Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id join Customer_Master_Index on CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id where  customer_master_index.cmi_details != \"Schmidt , Kertzmann and Lubowitz\"",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select rent_arrears.council_tax_id from Rent_Arrears join CMI_Cross_References on Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id join Customer_Master_Index on CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id where  customer_master_index.cmi_details not like \"Schmidt , Kertzmann and Lubowitz\"",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select rent_arrears.council_tax_id from Rent_Arrears join CMI_Cross_References on Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id where  cmi_cross_references.master_customer_id not in (select Customer_Master_Index.master_customer_id from Customer_Master_Index where  customer_master_index.cmi_details = \"Schmidt , Kertzmann and Lubowitz\"  )",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select rent_arrears.council_tax_id from Rent_Arrears join CMI_Cross_References on Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id join Customer_Master_Index on CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id where  customer_master_index.cmi_details != \"Schmidt , Kertzman and Lubowitz\"",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select rent_arrears.council_tax_id from Rent_Arrears join CMI_Cross_References on Rent_Arrears.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id join Customer_Master_Index on CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id where  customer_master_index.cmi_details != \"Schmidt , Kertzmann and Lubowitz?\"",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select electoral_register.electoral_register_id from Electoral_Register join CMI_Cross_References on Electoral_Register.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id where  cmi_cross_references.source_system_code = \"Electoral\" or cmi_cross_references.source_system_code = \"Tax\"",
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select distinct electoral_register.electoral_register_id from Electoral_Register join CMI_Cross_References on Electoral_Register.cmi_cross_ref_id = CMI_Cross_References.cmi_cross_ref_id where  cmi_cross_references.source_system_code = \"Electoral\" or cmi_cross_references.source_system_code = \"Tax\"",
        "question": "What are the register ids of electoral registries that have the cross reference source system code 'Electoral' or 'Tax'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select count( distinct cmi_cross_references.source_system_code) from CMI_Cross_References",
        "question": "How many different source system code for the cmi cross references are there?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select parking_fines.council_tax_id , parking_fines.cmi_cross_ref_id from Parking_Fines",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select count(*) from Rent_Arrears",
        "question": "How many council taxes are collected for renting arrears ?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select distinct cmi_cross_references.source_system_code from CMI_Cross_References join Customer_Master_Index on CMI_Cross_References.master_customer_id = Customer_Master_Index.master_customer_id where  customer_master_index.cmi_details = \"Gottlieb , Becker and Wyman\"",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select cmi_cross_references.cmi_cross_ref_id from CMI_Cross_References   except select cmi_cross_references.cmi_cross_ref_id from CMI_Cross_References where  cmi_cross_references.source_system_code = \"Parking\"",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select distinct cmi_cross_references.source_system_code from CMI_Cross_References where  cmi_cross_references.source_system_code like \"%en%\"",
        "question": "Which distinct source system code includes the substring 'en'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_mdm",
        "query": "select distinct cmi_cross_references.source_system_code from CMI_Cross_References where  cmi_cross_references.source_system_code like \"%EN%\"",
        "question": "Which distinct source system code includes the substring 'en'?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select count(*) from party",
        "question": "How many parties are there?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select count(*) from party",
        "question": "Count the number of parties.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme from party   order by party.number_of_hosts asc",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.party_theme from party   order by party.number_of_hosts asc",
        "question": "List the themes of parties in ascending order of number of hosts.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme from party   order by party.number_of_hosts asc",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.party_theme from party   order by party.number_of_hosts asc",
        "question": "What are the themes of parties ordered by the number of hosts in ascending manner?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme , party.location from party",
        "question": "What are the themes and locations of parties?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.party_theme , party.location from party",
        "question": "What are the themes and locations of parties?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme , party.location from party",
        "question": "Give me the theme and location of each party.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.party_theme , party.location from party",
        "question": "Give me the theme and location of each party.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme , party.location from party  group by party.party_id",
        "question": "Give me the theme and location of each party.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.first_year , party.last_year from party where  party.party_theme = \"Spring\" or party.party_theme = \"Teqnology\"",
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.first_year , party.last_year from party where  party.party_theme = \"Spring\" or party.party_theme = \"Teqnology\"",
        "question": "Show the first year and last year of parties with theme \"Spring\" or \"Teqnology\".",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.first_year , party.last_year from party where  party.party_theme = \"Spring\" or party.party_theme = \"Teqnology\"",
        "question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.first_year , party.last_year from party where  party.party_theme = \"Spring\" or party.party_theme = \"Teqnology\"",
        "question": "What are the first year and last year of the parties whose theme is \"Spring\" or \"Teqnology\"?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select avg(party.number_of_hosts) from party",
        "question": "What is the average number of hosts for parties?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select avg(party.number_of_hosts) from party",
        "question": "Compute the average number of hosts for parties.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location from party   order by party.number_of_hosts desc limit 1",
        "question": "What is the location of the party with the most hosts?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location from party   order by party.number_of_hosts desc limit 1",
        "question": "Which party had the most hosts? Give me the party location.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location from party  group by party.party_id  order by sum(party.number_of_hosts) desc limit 1",
        "question": "Which party had the most hosts? Give me the party location.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality , count(*) from host  group by host.nationality",
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.nationality , count(*) from host  group by host.nationality",
        "question": "Show different nationalities along with the number of hosts of each nationality.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality , count(*) from host  group by host.nationality",
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select count(*) , host.nationality from host  group by host.nationality",
        "question": "How many hosts does each nationality have? List the nationality and the count.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality from host  group by host.nationality  order by count(*) desc limit 1",
        "question": "Show the most common nationality of hosts.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.nationality from host  group by host.nationality  order by count(*) desc limit 1",
        "question": "Show the most common nationality of hosts.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality from host  group by host.nationality  order by count(*) desc limit 1",
        "question": "Which nationality has the most hosts?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.nationality from host  group by host.nationality  order by count(*) desc limit 1",
        "question": "Which nationality has the most hosts?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality from host where  host.age > 45   intersect select host.nationality from host where  host.age < 35",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.nationality from host where  host.age > 45   intersect select distinct host.nationality from host where  host.age < 35",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality from host where  host.age > 45   intersect select host.nationality from host where  host.age <= 35",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality from host where  host.age > 45   intersect select host.nationality from host where  host.age < 35",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.nationality from host where  host.age > 45   intersect select distinct host.nationality from host where  host.age < 35",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.nationality from host where  host.age > 45   intersect select host.nationality from host where  host.age <= 35",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID",
        "question": "Show the themes of parties and the names of the party hosts.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.party_theme , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID",
        "question": "Show the themes of parties and the names of the party hosts.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.party_theme , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID",
        "question": "For each party, return its theme and the name of its host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.party_theme , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID",
        "question": "For each party, return its theme and the name of its host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID   order by host.age asc",
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.location , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID   order by host.age asc",
        "question": "Show the locations of parties and the names of the party hosts in ascending order of the age of the host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID   order by host.age asc",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.location , host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID   order by host.age asc",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  host.age > 50",
        "question": "Show the locations of parties with hosts older than 50.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.location from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  host.age > 50",
        "question": "Show the locations of parties with hosts older than 50.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select party.location from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  host.age > 50",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct party.location from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  host.age > 50",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  party.number_of_hosts > 20",
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  party.number_of_hosts > 20",
        "question": "Show the host names for parties with number of hosts greater than 20.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  party.number_of_hosts > 20",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.name from party_host join party on party_host.Party_ID = party.Party_ID join host on party_host.Host_ID = host.Host_ID where  party.number_of_hosts > 20",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name , host.nationality from host   order by host.age desc limit 1",
        "question": "Show the name and the nationality of the oldest host.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name , host.nationality from host   order by host.age desc limit 1",
        "question": "What are the name and the nationality of the host of the highest age?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.name , host.nationality from host   order by host.age desc limit 1",
        "question": "What are the name and the nationality of the host of the highest age?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name from host where  host.host_id not in (select party_host.Host_ID from party_host  )",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name from host   except select host.name from party_host join host on party_host.Host_ID = host.Host_ID",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.name from host where  host.host_id not in (select party_host.Host_ID from party_host  )",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.name from host   except select distinct host.name from party_host join host on party_host.Host_ID = host.Host_ID",
        "question": "List the names of hosts who did not serve as a host of any party in our record.",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name from host where  host.host_id not in (select party_host.Host_ID from party_host  )",
        "question": "What are the names of hosts who did not host any party in our record?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select host.name from host   except select host.name from party_host join host on party_host.Host_ID = host.Host_ID",
        "question": "What are the names of hosts who did not host any party in our record?",
        "correctness": 1
    },
    {
        "db_id": "party_host",
        "query": "select distinct host.name from host where  host.host_id not in (select party_host.Host_ID from party_host  )",
        "question": "What are the names of hosts who did not host any party in our record?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct restaurant.resname from Restaurant",
        "question": "Show me all the restaurants.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select restaurant.resname from Restaurant",
        "question": "Show me all the restaurants.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select restaurant.address from Restaurant where  restaurant.resname = \"Subway\"",
        "question": "What is the address of the restaurant Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select restaurant.rating from Restaurant where  restaurant.resname = \"Subway\"",
        "question": "What is the rating of the restaurant Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct restaurant_type.restypename from Restaurant_Type",
        "question": "List all restaurant types.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select restaurant_type.restypename from Restaurant_Type",
        "question": "List all restaurant types.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select restaurant_type.restypedescription from Restaurant_Type where  restaurant_type.restypename = \"Sandwich\"",
        "question": "What is the description of the restaurant type Sandwich?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct restaurant_type.restypedescription from Restaurant_Type where  restaurant_type.restypename = \"Sandwich\"",
        "question": "What is the description of the restaurant type Sandwich?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select restaurant.resname , restaurant.rating from Restaurant   order by restaurant.rating desc limit 1",
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct restaurant.resname , restaurant.rating from Restaurant   order by restaurant.rating desc limit 1",
        "question": "Which restaurants have highest rating? List the restaurant name and its rating.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.age from Student where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "What is the age of student Linda Smith?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.age from Student where  student.lname = \"Smith\" and student.fname = \"Linda\"",
        "question": "What is the age of student Linda Smith?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.sex from Student where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "What is the gender of the student Linda Smith?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct student.sex from Student where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "What is the gender of the student Linda Smith?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.fname , student.lname from Student where  student.major = 600",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.fname , student.lname from Student where  student.major = \"600\"",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.lname , student.fname from Student where  student.major = 600",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.lname , student.fname from Student where  student.major = \"600\"",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct student.fname , student.lname from Student where  student.major = 600",
        "question": "List all students' first names and last names who majored in 600.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.city_code from Student where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "Which city does student Linda Smith live in?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct student.city_code from Student where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "Which city does student Linda Smith live in?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.city_code from Student where  student.lname = \"Smith\" and student.fname = \"Linda\"",
        "question": "Which city does student Linda Smith live in?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select count(*) from Student where  student.advisor = 1121",
        "question": "Advisor 1121 has how many students?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.advisor , count(*) from Student  group by student.advisor  order by count(*) desc limit 1",
        "question": "Which Advisor has most of students? List advisor and the number of students.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.major , count(*) from Student  group by student.major  order by count(*) asc limit 1",
        "question": "Which major has least number of students? List the major and the number of students.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.major , count(*) from Student  group by student.major having  count(*) between 2 and 30",
        "question": "Which major has between 2 and 30 number of students? List major and the number of students.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.fname , student.lname from Student where  student.age > 18 and student.major = \"600\"",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.fname , student.lname from Student where  student.age > 18 and student.major = 600",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct student.fname , student.lname from Student where  student.age > 18 and student.major = \"600\"",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.lname , student.fname from Student where  student.age > 18 and student.major = \"600\"",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct student.fname , student.lname from Student where  student.age > 18 and student.major = 600",
        "question": "Which student's age is older than 18 and is majoring in 600? List each student's first and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select count(*) from Restaurant_Type where  restaurant_type.restypename = \"Sandwich\"",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select count(*) from Type_Of_Restaurant join Restaurant_Type on Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID where  restaurant_type.restypename = \"Sandwich\"",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select sum(visits_restaurant.spent) from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select sum(visits_restaurant.spent) from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID where  student.lname = \"Smith\" and student.fname = \"Linda\"",
        "question": "How long does student Linda Smith spend on the restaurant in total?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select count(*) from Visits_Restaurant join Restaurant on Visits_Restaurant.ResID = Restaurant.ResID join Student on Visits_Restaurant.StuID = Student.StuID where  student.fname = \"Linda\" and student.lname = \"Smith\" and restaurant.resname = \"Subway\"",
        "question": "How many times has the student Linda Smith visited Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select count(*) from Visits_Restaurant join Restaurant on Visits_Restaurant.ResID = Restaurant.ResID join Student on Visits_Restaurant.StuID = Student.StuID where  student.lname = \"Smith\" and restaurant.resname = \"Subway\"",
        "question": "How many times has the student Linda Smith visited Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select count(*) from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "How many times has the student Linda Smith visited Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select visits_restaurant.time from Visits_Restaurant join Restaurant on Visits_Restaurant.ResID = Restaurant.ResID join Student on Visits_Restaurant.StuID = Student.StuID where  student.fname = \"Linda\" and student.lname = \"Smith\" and restaurant.resname = \"Subway\"",
        "question": "When did Linda Smith visit Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select visits_restaurant.time from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID where  student.fname = \"Linda\" and student.lname = \"Smith\"",
        "question": "When did Linda Smith visit Subway?",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.fname , student.lname from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID  group by visits_restaurant.stuid  order by count(*) desc limit 1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select student.lname , student.fname from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID  group by visits_restaurant.stuid  order by count(*) desc limit 1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "restaurant_1",
        "query": "select distinct student.fname , student.lname from Visits_Restaurant join Student on Visits_Restaurant.StuID = Student.StuID  group by visits_restaurant.stuid  order by count(*) desc limit 1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count(*) from Assessment_Notes",
        "question": "How many assessment notes are there in total?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select assessment_notes.date_of_notes from Assessment_Notes",
        "question": "What are the dates of the assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct assessment_notes.date_of_notes from Assessment_Notes",
        "question": "What are the dates of the assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count(*) from Addresses where  addresses.zip_postcode = 197",
        "question": "How many addresses have zip code 197?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count(*) from Addresses where  addresses.zip_postcode = 197  group by Addresses.address_id having  count(*) >= 0",
        "question": "How many addresses have zip code 197?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count(*) from Addresses where  addresses.zip_postcode = 197  group by Addresses.address_id having  count(*) >= 1",
        "question": "How many addresses have zip code 197?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count(*) from Addresses where  addresses.zip_postcode = 197  group by Addresses.address_id having  count(*) = 1",
        "question": "How many addresses have zip code 197?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count( distinct behavior_incident.incident_type_code) from Behavior_Incident",
        "question": "How many distinct incident type codes are there?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct detention.detention_type_code from Detention",
        "question": "Return all distinct detention type codes.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct detention.detention_type_code from Detention  group by detention.detention_type_code",
        "question": "Return all distinct detention type codes.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select behavior_incident.date_incident_start , behavior_incident.date_incident_end from Behavior_Incident where  behavior_incident.incident_type_code = \"NOISE\"",
        "question": "What are the start and end dates for incidents with incident type code \"NOISE\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select detention.detention_summary from Detention",
        "question": "Return all detention summaries.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.cell_mobile_number , students.email_address from Students",
        "question": "Return the cell phone number and email address for all students.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct students.cell_mobile_number , students.email_address from Students",
        "question": "Return the cell phone number and email address for all students.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.email_address , students.cell_mobile_number from Students",
        "question": "Return the cell phone number and email address for all students.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.email_address from Students where  students.first_name = \"Emma\" and students.last_name = \"Rohan\"",
        "question": "What is the email of the student with first name \"Emma\" and last name \"Rohan\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count( distinct students_in_detention.student_id) from Students_in_Detention",
        "question": "How many distinct students have been in detention?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.gender from Teachers where  teachers.last_name = \"Medhurst\"",
        "question": "What is the gender of the teacher with last name \"Medhurst\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select ref_incident_type.incident_type_description from Ref_Incident_Type where  ref_incident_type.incident_type_code = \"VIOLENCE\"",
        "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct ref_incident_type.incident_type_description from Ref_Incident_Type where  ref_incident_type.incident_type_code = \"VIOLENCE\"",
        "question": "What is the incident type description for the incident type with code \"VIOLENCE\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select max(student_addresses.monthly_rental) , min(student_addresses.monthly_rental) from Student_Addresses",
        "question": "Find the maximum and minimum monthly rental for all student addresses.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.first_name from Teachers where  teachers.email_address like \"%man%\"",
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.first_name from Teachers where  teachers.email_address like \"%Man%\"",
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct teachers.first_name from Teachers where  teachers.email_address like \"%man%\"",
        "question": "Find the first names of teachers whose email address contains the word \"man\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select * from Assessment_Notes   order by assessment_notes.date_of_notes asc",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct * from Assessment_Notes   order by assessment_notes.date_of_notes asc",
        "question": "List all information about the assessment notes sorted by date in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select addresses.city from Addresses   order by addresses.city asc",
        "question": "List all cities of addresses in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct addresses.city from Addresses   order by addresses.city asc",
        "question": "List all cities of addresses in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.first_name , teachers.last_name from Teachers   order by teachers.last_name asc",
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct teachers.first_name , teachers.last_name from Teachers   order by teachers.last_name asc",
        "question": "Find the first names and last names of teachers in alphabetical order of last name.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select * from Student_Addresses   order by student_addresses.monthly_rental desc",
        "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct * from Student_Addresses   order by student_addresses.monthly_rental desc",
        "question": "Find all information about student addresses, and sort by monthly rental in descending order.",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select assessment_notes.student_id , students.first_name from Assessment_Notes join Students on Assessment_Notes.student_id = Students.student_id  group by assessment_notes.student_id  order by count(*) desc limit 1",
        "question": "Find the id and first name of the student that has the most number of assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.student_id , students.first_name from Assessment_Notes join Students on Assessment_Notes.student_id = Students.student_id  group by assessment_notes.student_id  order by count(*) desc limit 1",
        "question": "Find the id and first name of the student that has the most number of assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.teacher_id , teachers.first_name from Assessment_Notes join Teachers on Assessment_Notes.teacher_id = Teachers.teacher_id  group by assessment_notes.teacher_id  order by count(*) desc limit 3",
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select assessment_notes.teacher_id , teachers.first_name from Assessment_Notes join Teachers on Assessment_Notes.teacher_id = Teachers.teacher_id  group by assessment_notes.teacher_id  order by count(*) desc limit 3",
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.teacher_id , teachers.first_name from Assessment_Notes join Teachers on Assessment_Notes.teacher_id = Teachers.teacher_id  group by teachers.teacher_id  order by count(*) desc limit 3",
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct teachers.teacher_id , teachers.first_name from Assessment_Notes join Teachers on Assessment_Notes.teacher_id = Teachers.teacher_id  group by assessment_notes.teacher_id  order by count(*) desc limit 3",
        "question": "Find the ids and first names of the 3 teachers that have the most number of assessment notes?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.student_id , students.last_name from Behavior_Incident join Students on Behavior_Incident.student_id = Students.student_id  group by behavior_incident.student_id  order by count(*) desc limit 1",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select behavior_incident.student_id , students.last_name from Behavior_Incident join Students on Behavior_Incident.student_id = Students.student_id  group by behavior_incident.student_id  order by count(*) desc limit 1",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.student_id , students.last_name from Behavior_Incident join Students on Behavior_Incident.student_id = Students.student_id  group by students.student_id  order by count(*) desc limit 1",
        "question": "Find the id and last name of the student that has the most behavior incidents?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.teacher_id , teachers.last_name from Detention join Teachers on Detention.teacher_id = Teachers.teacher_id where  detention.detention_type_code = \"AFTER\"  group by teachers.teacher_id  order by count(*) desc limit 1",
        "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.teacher_id , teachers.last_name from Detention join Teachers on Detention.teacher_id = Teachers.teacher_id where  detention.detention_type_code = \"AFTER\"  group by detention.teacher_id  order by count(*) desc limit 1",
        "question": "Find the id and last name of the teacher that has the most detentions with detention type code \"AFTER\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select student_addresses.student_id , students.first_name from Student_Addresses join Students on Student_Addresses.student_id = Students.student_id  group by student_addresses.student_id  order by avg(student_addresses.monthly_rental) desc limit 1",
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.student_id , students.first_name from Student_Addresses join Students on Student_Addresses.student_id = Students.student_id  group by student_addresses.student_id  order by avg(student_addresses.monthly_rental) desc limit 1",
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.student_id , students.first_name from Student_Addresses join Students on Student_Addresses.student_id = Students.student_id  group by students.student_id  order by avg(student_addresses.monthly_rental) desc limit 1",
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select student_addresses.student_id , students.first_name from Student_Addresses join Students on Student_Addresses.student_id = Students.student_id  group by Student_Addresses.student_id  order by avg(student_addresses.monthly_rental) desc limit 1",
        "question": "What are the id and first name of the student whose addresses have the highest average monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select ref_incident_type.incident_type_code , ref_incident_type.incident_type_description from Behavior_Incident join Ref_Incident_Type on Behavior_Incident.incident_type_code = Ref_Incident_Type.incident_type_code  group by ref_incident_type.incident_type_code  order by count(*) desc limit 1",
        "question": "What are the code and description of the most frequent behavior incident type?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select ref_incident_type.incident_type_code , ref_incident_type.incident_type_description from Behavior_Incident join Ref_Incident_Type on Behavior_Incident.incident_type_code = Ref_Incident_Type.incident_type_code  group by behavior_incident.incident_type_code  order by count(*) desc limit 1",
        "question": "What are the code and description of the most frequent behavior incident type?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select behavior_incident.incident_type_code , ref_incident_type.incident_type_description from Behavior_Incident join Ref_Incident_Type on Behavior_Incident.incident_type_code = Ref_Incident_Type.incident_type_code  group by behavior_incident.incident_type_code  order by count(*) desc limit 1",
        "question": "What are the code and description of the most frequent behavior incident type?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select ref_detention_type.detention_type_code , ref_detention_type.detention_type_description from Ref_Detention_Type  group by ref_detention_type.detention_type_code  order by count(*) asc limit 1",
        "question": "What are the code and description of the least frequent detention type ?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select ref_detention_type.detention_type_code , ref_detention_type.detention_type_description from Ref_Detention_Type  group by Ref_Detention_Type.detention_type_code  order by count(*) asc limit 1",
        "question": "What are the code and description of the least frequent detention type ?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select assessment_notes.date_of_notes from Assessment_Notes join Students on Assessment_Notes.student_id = Students.student_id where  students.first_name = \"Fanny\"",
        "question": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct assessment_notes.date_of_notes from Assessment_Notes join Students on Assessment_Notes.student_id = Students.student_id where  students.first_name = \"Fanny\"",
        "question": "Find the dates of assessment notes for students with first name \"Fanny\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select assessment_notes.text_of_notes from Assessment_Notes join Teachers on Assessment_Notes.teacher_id = Teachers.teacher_id where  teachers.last_name = \"Schuster\"",
        "question": "Find the texts of assessment notes for teachers with last name \"Schuster\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select behavior_incident.date_incident_start , behavior_incident.date_incident_end from Behavior_Incident join Students on Behavior_Incident.student_id = Students.student_id where  students.last_name = \"Fahey\"",
        "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct behavior_incident.date_incident_start , behavior_incident.date_incident_end from Behavior_Incident join Students on Behavior_Incident.student_id = Students.student_id where  students.last_name = \"Fahey\"",
        "question": "Find the start and end dates of behavior incidents of students with last name \"Fahey\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select detention.datetime_detention_start , detention.datetime_detention_end from Detention join Teachers on Detention.teacher_id = Teachers.teacher_id where  teachers.last_name = \"Schultz\"",
        "question": "Find the start and end dates of detentions of teachers with last name \"Schultz\".",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select addresses.address_id , addresses.zip_postcode from Student_Addresses join Addresses on Student_Addresses.address_id = Addresses.address_id   order by student_addresses.monthly_rental desc limit 1",
        "question": "What are the id and zip code of the address with the highest monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.cell_mobile_number from Student_Addresses join Students on Student_Addresses.student_id = Students.student_id   order by student_addresses.monthly_rental asc limit 1",
        "question": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.cell_mobile_number from Students where  students.student_id in (select Student_Addresses.student_id from Student_Addresses   order by student_addresses.monthly_rental asc limit 1 )",
        "question": "What is the cell phone number of the student whose address has the lowest monthly rental?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select student_addresses.monthly_rental from Student_Addresses join Addresses on Student_Addresses.address_id = Addresses.address_id where  addresses.state_province_county = \"Texas\"",
        "question": "What are the monthly rentals of student addresses in Texas state?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select students.first_name , students.last_name from Students join Addresses on Students.address_id = Addresses.address_id where  addresses.state_province_county = \"Wisconsin\"",
        "question": "What are the first names and last names of students with address in Wisconsin state?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select distinct students.first_name , students.last_name from Students join Addresses on Students.address_id = Addresses.address_id where  addresses.state_province_county = \"Wisconsin\"",
        "question": "What are the first names and last names of students with address in Wisconsin state?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select addresses.line_1 , avg(student_addresses.monthly_rental) from Student_Addresses join Addresses on Student_Addresses.address_id = Addresses.address_id  group by addresses.line_1",
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select avg(student_addresses.monthly_rental) , addresses.line_1 from Student_Addresses join Addresses on Student_Addresses.address_id = Addresses.address_id  group by addresses.line_1",
        "question": "What are the line 1 and average monthly rentals of all student addresses?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select addresses.zip_postcode from Teachers join Addresses on Teachers.address_id = Addresses.address_id where  teachers.first_name = \"Lyla\"",
        "question": "What is the zip code of the address where the teacher with first name \"Lyla\" lives?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.email_address from Teachers join Addresses on Teachers.address_id = Addresses.address_id where  addresses.zip_postcode = \"918\"",
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.email_address from Teachers join Addresses on Teachers.address_id = Addresses.address_id where  addresses.zip_postcode = 918",
        "question": "What are the email addresses of teachers whose address has zip code \"918\"?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select count(*) from Students where  students.student_id not in (select Behavior_Incident.student_id from Behavior_Incident  )",
        "question": "How many students are not involved in any behavior incident?",
        "correctness": 1
    },
    {
        "db_id": "behavior_monitoring",
        "query": "select teachers.last_name from Teachers   except select teachers.last_name from Detention join Teachers on Detention.teacher_id = Teachers.teacher_id",
        "question": "Find the last names of teachers who are not involved in any detention.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select station.local_authority , station.services from station",
        "question": "list the local authorities and services provided by all stations.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.train_number , train.name from train   order by train.time asc",
        "question": "show all train numbers and names ordered by their time from early to late.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.time , train.train_number from train where  train.destination = \"Chennai\"   order by train.time asc",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count(*) from train where  train.name like \"%Express%\"",
        "question": "How many trains have 'Express' in their names?",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count(*) from train where  train.name in (select train.name from train where  train.name like \"%Express%\"  )",
        "question": "How many trains have 'Express' in their names?",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.train_number , train.time from train where  train.origin = \"Chennai\" and train.destination = \"Guruvayur\"",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.origin , count(*) from train  group by train.origin",
        "question": "Find the number of trains starting from each origin.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count(*) , train.origin from train  group by train.origin",
        "question": "Find the number of trains starting from each origin.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.name from train where  train.id in (select route.train_id from route join station on route.station_id = station.id  group by route.train_id  order by count(*) desc limit 1 )",
        "question": "Find the name of the train whose route runs through greatest number of stations.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.name from route join station on route.station_id = station.id join train on route.train_id = train.id  group by train.id  order by count(*) desc limit 1",
        "question": "Find the name of the train whose route runs through greatest number of stations.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count(*) , station.network_name , station.services from route join station on route.station_id = station.id join train on route.train_id = train.id  group by station.network_name",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count(*) , station.network_name , station.services from route join station on route.station_id = station.id  group by station.network_name",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count(*) , station.network_name , station.services from route join station on route.station_id = station.id join train on route.train_id = train.id  group by route.station_id",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select station.network_name , station.services , count(*) from route join station on route.station_id = station.id join train on route.train_id = train.id  group by route.station_id",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select weekly_weather.day_of_week , avg(weekly_weather.high_temperature) from weekly_weather  group by weekly_weather.day_of_week",
        "question": "What is the average high temperature for each day of week?",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select distinct weekly_weather.day_of_week , avg(weekly_weather.high_temperature) from weekly_weather  group by weekly_weather.day_of_week",
        "question": "What is the average high temperature for each day of week?",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select avg(weekly_weather.high_temperature) , weekly_weather.day_of_week from weekly_weather  group by weekly_weather.day_of_week",
        "question": "What is the average high temperature for each day of week?",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select max(weekly_weather.low_temperature) , avg(weekly_weather.precipitation) from weekly_weather join station on weekly_weather.station_id = station.id where  station.network_name = \"Amersham\"",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select max(weekly_weather.low_temperature) , avg(weekly_weather.precipitation) from weekly_weather where  weekly_weather.station_id in (select weekly_weather.station_id from weekly_weather join station on weekly_weather.station_id = station.id where  station.network_name = \"Amersham\"  )",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.name , train.time from route join station on route.station_id = station.id join train on route.train_id = train.id where  station.local_authority = \"Chiltern\"",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select count( distinct station.services) from station",
        "question": "How many different services are provided by all stations?",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select station.id , station.local_authority from weekly_weather join station on weekly_weather.station_id = station.id  group by weekly_weather.station_id  order by avg(weekly_weather.high_temperature) desc limit 1",
        "question": "Find the id and local authority of the station with has the highest average high temperature.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select station.id , station.local_authority from weekly_weather join station on weekly_weather.station_id = station.id  group by station.id  order by avg(weekly_weather.high_temperature) desc limit 1",
        "question": "Find the id and local authority of the station with has the highest average high temperature.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select station.id , station.local_authority from weekly_weather join station on weekly_weather.station_id = station.id  group by weekly_weather.station_id having  max(weekly_weather.precipitation) > 50",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select station.id , station.local_authority from weekly_weather join station on weekly_weather.station_id = station.id where  weekly_weather.precipitation > 50  group by weekly_weather.station_id",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select min(weekly_weather.low_temperature) , max(weekly_weather.wind_speed_mph) from weekly_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select max(weekly_weather.wind_speed_mph) , min(weekly_weather.low_temperature) from weekly_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select max(weekly_weather.wind_speed_mph) , min(weekly_weather.low_temperature) from weekly_weather   order by weekly_weather.low_temperature desc limit 1",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select train.origin from train  group by train.origin having  count(*) > 1",
        "question": "Find the origins from which more than 1 train starts.",
        "correctness": 1
    },
    {
        "db_id": "station_weather",
        "query": "select distinct train.origin from train  group by train.origin having  count(*) > 1",
        "question": "Find the origins from which more than 1 train starts.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count(*) from club",
        "question": "How many clubs are there?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count(*) from club_rank",
        "question": "What is the total number of clubs?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count(*) from club",
        "question": "What is the total number of clubs?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.region from club   order by club.region asc",
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.region from club   order by club.region asc",
        "question": "List the distinct region of clubs in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.region from club   order by club.region asc",
        "question": "What are the different regions of clubs in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.region from club   order by club.region asc",
        "question": "What are the different regions of clubs in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(club_rank.gold) from club_rank",
        "question": "What is the average number of gold medals for clubs?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(club_rank.gold) from club_rank where  club_rank.gold = \"Gold\"",
        "question": "What is the average number of gold medals for clubs?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(club_rank.gold) from club_rank",
        "question": "What is the average number of gold medals for a club?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type , competition.country from competition",
        "question": "What are the types and countries of competitions?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type , competition.country from competition",
        "question": "What are the types of every competition and in which countries are they located?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.year from competition where  competition.competition_type != \"Tournament\"",
        "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.year from competition where  competition.competition_type != \"Turnout\"",
        "question": "What are the distinct years in which the competitions type is not \"Tournament\"?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.year from competition where  competition.competition_type != \"Tournament\"",
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.year from competition where  competition.competition_type != \"Turnout\"",
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.year from competition where  competition.competition_type != \"Turnaround\"",
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.year from competition where  competition.competition_type != \"Turnier\"",
        "question": "What are the different years for all competitions that are not of type equal to tournament?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select max(club_rank.silver) , min(club_rank.silver) from club_rank",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select max(club_rank.silver) , min(club_rank.silver) from club_rank where  club_rank.silver = \"Silver\"",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select max(club_rank.silver) , min(club_rank.silver) from club_rank",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select max(club_rank.silver) , min(club_rank.silver) from club_rank where  club_rank.silver = \"Silver\"",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from club   order by club.start_year asc",
        "question": "List all club names in ascending order of start year.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from club   order by club.start_year asc",
        "question": "List all club names in ascending order of start year.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from club   order by club.start_year asc",
        "question": "What are the names of all the clubs starting with the oldest?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from club   order by club.start_year asc",
        "question": "What are the names of all the clubs starting with the oldest?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from club   order by club.name desc",
        "question": "List all club names in descending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from club   order by club.name desc",
        "question": "List all club names in descending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from club   order by club.name desc",
        "question": "What are the names of all the clubs ordered in descending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from club   order by club.name desc",
        "question": "What are the names of all the clubs ordered in descending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from player join club on player.Club_ID = club.Club_ID where  player.position = \"Right Wing\"",
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from player join club on player.Club_ID = club.Club_ID where  player.position = \"Right Wing\"",
        "question": "Show the names of clubs that have players with position \"Right Wing\".",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from player join club on player.Club_ID = club.Club_ID where  player.position = \"Right Wing\"",
        "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from player join club on player.Club_ID = club.Club_ID where  player.position = \"Right Wing\"",
        "question": "What are the names of the clubs that have players in the position of \"Right Wing\"?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(player.points) from player join club on player.Club_ID = club.Club_ID where  club.name = \"AIB\"",
        "question": "What is the average points of players from club with name \"AIB\".",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(player.points) from player where  player.club_id in (select club.Club_ID from club where  club.name = \"AIB\"  )",
        "question": "What is the average points of players from club with name \"AIB\".",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(player.points) from player join club on player.Club_ID = club.Club_ID where  club.name = \"AIB\"",
        "question": "What is the average number of points for players from the \"AIB\" club?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(player.points) from player where  player.club_id in (select club.Club_ID from club where  club.name = \"AIB\"  )",
        "question": "What is the average number of points for players from the \"AIB\" club?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position , avg(player.points) from player  group by player.position",
        "question": "List the position of players and the average number of points of players of each position.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(player.points) , player.position from player  group by player.position",
        "question": "List the position of players and the average number of points of players of each position.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct player.position , avg(player.points) from player  group by player.position",
        "question": "List the position of players and the average number of points of players of each position.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position , avg(player.points) from player  group by player.position",
        "question": "For each position, what is the average number of points for players in that position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select avg(player.points) , player.position from player  group by player.position",
        "question": "For each position, what is the average number of points for players in that position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct player.position , avg(player.points) from player  group by player.position",
        "question": "For each position, what is the average number of points for players in that position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type , count(*) from competition  group by competition.competition_type",
        "question": "List the types of competition and the number of competitions of each type.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.competition_type , count(*) from competition  group by competition.competition_type",
        "question": "List the types of competition and the number of competitions of each type.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type , count(*) from competition  group by competition.competition_type",
        "question": "What are the types of competition and number of competitions for that type?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.competition_type , count(*) from competition  group by competition.competition_type",
        "question": "What are the types of competition and number of competitions for that type?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type from competition  group by competition.competition_type  order by count(*) desc limit 1",
        "question": "List the most common type of competition.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.competition_type from competition  group by competition.competition_type  order by count(*) desc limit 1",
        "question": "List the most common type of competition.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type from competition  group by competition.competition_type  order by count(*) desc limit 1",
        "question": "What is the most common competition type?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.competition_type from competition  group by competition.competition_type  order by count(*) desc limit 1",
        "question": "What is the most common competition type?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type from competition  group by competition.competition_type having  count(*) < 5",
        "question": "List the types of competition that have at most five competitions of that type.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.competition_type from competition  group by competition.competition_type having  count(*) <= 5",
        "question": "List the types of competition that have at most five competitions of that type.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from club where  club.club_id not in (select player.Club_ID from player  )",
        "question": "List the names of clubs that do not have any players.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from club where  club.club_id not in (select player.Club_ID from player  )",
        "question": "List the names of clubs that do not have any players.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select club.name from club where  club.club_id not in (select player.Club_ID from player  )",
        "question": "What are the names of all clubs that do not have any players?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct club.name from club where  club.club_id not in (select player.Club_ID from player  )",
        "question": "What are the names of all clubs that do not have any players?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position from player where  player.points > 20   intersect select player.position from player where  player.points < 10",
        "question": "What are the positions with both players having more than 20 points and less than 10 points.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct player.position from player where  player.points > 20   intersect select distinct player.position from player where  player.points < 10",
        "question": "What are the positions with both players having more than 20 points and less than 10 points.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position from player where  player.points > 20   intersect select player.position from player where  player.points <= 10",
        "question": "What are the positions with both players having more than 20 points and less than 10 points.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position from player where  player.points > 20   intersect select player.position from player where  player.points < 10",
        "question": "What are the positions of both players that have more than 20 20 points and less than 10 points?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select sum(player.points) from player",
        "question": "Show total points of all players.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select sum(player.points) from player",
        "question": "What is the total number of points for all players?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count( distinct player.position) from player",
        "question": "how many different positions are there?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count( distinct player.position) from player",
        "question": "How many different position for players are listed?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.name from player where  player.points > (select avg(player.points) from player  )",
        "question": "what are the name of players who get more than the average points.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct player.name from player where  player.points > (select avg(player.points) from player  )",
        "question": "what are the name of players who get more than the average points.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.name from player where  player.points >= (select avg(player.points) from player  )",
        "question": "what are the name of players who get more than the average points.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.name from player where  player.points > (select avg(player.points) from player  )",
        "question": "What are the names of all players that got more than the average number of points?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct player.name from player where  player.points > (select avg(player.points) from player  )",
        "question": "What are the names of all players that got more than the average number of points?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.name from player where  player.points >= (select avg(player.points) from player  )",
        "question": "What are the names of all players that got more than the average number of points?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count(*) , player.position from player where  player.points < 30  group by player.position",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position , count(*) from player where  player.points < 30  group by player.position",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count(*) , player.position from player where  player.points <= 30  group by player.position",
        "question": "find the number of players whose points are lower than 30 in each position.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position , count(*) from player where  player.points < 30  group by player.position",
        "question": "What is the number of players who have points less than 30 for each position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select count(*) , player.position from player where  player.points < 30  group by player.position",
        "question": "What is the number of players who have points less than 30 for each position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct player.position , count(*) from player where  player.points < 30  group by player.position",
        "question": "What is the number of players who have points less than 30 for each position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select player.position , count(*) from player where  player.points <= 30  group by player.position",
        "question": "What is the number of players who have points less than 30 for each position?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.country from competition where  competition.competition_type = \"Tournament\"  group by competition.country  order by count(*) desc limit 1",
        "question": "which country did participated in the most number of Tournament competitions?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.country from competition where  competition.competition_type = \"Tournament\"  group by competition.country  order by count(*) desc limit 1",
        "question": "what is the name of the country that participated in the most tournament competitions?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.country from competition where  competition.competition_type = \"Friendly\"   intersect select competition.country from competition where  competition.competition_type = \"Tournament\"",
        "question": "which countries did participated in both Friendly and Tournament type competitions.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.country from competition where  competition.competition_type = \"Friendly\"   intersect select competition.country from competition where  competition.competition_type = \"Tournament\"",
        "question": "What are the countries that participated in both friendly and tournament type competitions?",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.country from competition   except select competition.country from competition where  competition.competition_type = \"Friendly\"",
        "question": "Find the countries that have never participated in any competition with Friendly type.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select distinct competition.country from competition   except select distinct competition.country from competition where  competition.competition_type = \"Friendly\"",
        "question": "Find the countries that have never participated in any competition with Friendly type.",
        "correctness": 1
    },
    {
        "db_id": "sports_competition",
        "query": "select competition.country from competition   except select competition.country from competition where  competition.competition_type = \"Friendly\"",
        "question": "What are the countries that have never participated in any friendly-type competitions?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select college.name_full , college.college_id from player_college join college on player_college.college_id = college.college_id  group by college.college_id  order by count(*) desc limit 1",
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select college.name_full , college.college_id from player_college join college on player_college.college_id = college.college_id  group by player_college.college_id  order by count(*) desc limit 1",
        "question": "what is the full name and id of the college with the largest number of baseball players?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select college.name_full , college.college_id from player_college join college on player_college.college_id = college.college_id  group by player_college.college_id  order by count(*) desc limit 1",
        "question": "Find the full name and id of the college that has the most baseball players.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select college.name_full , player_college.college_id from player_college join college on player_college.college_id = college.college_id  group by player_college.college_id  order by count(*) desc limit 1",
        "question": "Find the full name and id of the college that has the most baseball players.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select college.name_full , college.college_id from player_college join college on player_college.college_id = college.college_id where  player_college.player_id >= 100  group by player_college.college_id  order by count(*) desc limit 1",
        "question": "Find the full name and id of the college that has the most baseball players.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select college.name_full , college.college_id from player_college join college on player_college.college_id = college.college_id  group by college.college_id  order by count(*) desc limit 1",
        "question": "Find the full name and id of the college that has the most baseball players.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last from all_star join player on all_star.player_id = player.player_id where  all_star.year = 1998",
        "question": "What are first and last names of players participating in all star game in 1998?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last from all_star join player on all_star.player_id = player.player_id where  all_star.year = 1998",
        "question": "List the first and last name for players who participated in all star game in 1998.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , all_star.player_id , count(*) from all_star join player on all_star.player_id = player.player_id  group by all_star.player_id  order by count(*) desc limit 1",
        "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player.player_id , count(*) from all_star join player on all_star.player_id = player.player_id  group by all_star.player_id  order by count(*) desc limit 1",
        "question": "What are the first name, last name and id of the player with the most all star game experiences? Also list the count.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , all_star.player_id , count(*) from all_star join player on all_star.player_id = player.player_id  group by all_star.player_id  order by count(*) desc limit 1",
        "question": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player.player_id , count(*) from all_star join player on all_star.player_id = player.player_id  group by all_star.player_id  order by count(*) desc limit 1",
        "question": "Which player has the most all star game experiences? Give me the first name, last name and id of the player, as well as the number of times the player participated in all star game.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) , hall_of_fame.yearid from hall_of_fame  group by hall_of_fame.yearid",
        "question": "How many players enter hall of fame each year?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select hall_of_fame.yearid , count(*) from hall_of_fame  group by hall_of_fame.yearid",
        "question": "How many players enter hall of fame each year?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select home_game.year , avg(home_game.attendance) from home_game  group by home_game.year",
        "question": "What is the average number of attendance at home games for each year?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select avg(home_game.attendance) , home_game.year from home_game  group by home_game.year",
        "question": "What is the average number of attendance at home games for each year?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct home_game.year , avg(home_game.attendance) from home_game  group by home_game.year",
        "question": "What is the average number of attendance at home games for each year?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select home_game.year , avg(home_game.attendance) from home_game  group by home_game.year",
        "question": "For each year, return the year and the average number of attendance at home games.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select avg(home_game.attendance) , home_game.year from home_game  group by home_game.year",
        "question": "For each year, return the year and the average number of attendance at home games.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct home_game.year , avg(home_game.attendance) from home_game  group by home_game.year",
        "question": "For each year, return the year and the average number of attendance at home games.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from park where  park.state = \"NY\"",
        "question": "How many parks are there in the state of NY?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from park where  park.state = \"NY\"",
        "question": "Show me the number of parks the state of NY has.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player_award.player_id from player_award join player on player_award.player_id = player.player_id  group by player_award.player_id  order by count(*) desc limit 3",
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct player.name_first , player.name_last , player_award.player_id from player_award join player on player_award.player_id = player.player_id  group by player_award.player_id  order by count(*) desc limit 3",
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player.player_id from player_award join player on player_award.player_id = player.player_id  group by player_award.player_id  order by count(*) desc limit 3",
        "question": "Which 3 players won the most player awards? List their full name and id.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player.player_id from player_award join player on player_award.player_id = player.player_id  group by player_award.player_id  order by count(*) desc limit 3",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct player.name_first , player.name_last , player.player_id from player_award join player on player_award.player_id = player.player_id  group by player_award.player_id  order by count(*) desc limit 3",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player_award.player_id from player_award join player on player_award.player_id = player.player_id  group by player_award.player_id  order by count(*) desc limit 3",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last , player.player_id from player_award join player on player_award.player_id = player.player_id  group by player.player_id  order by count(*) desc limit 3",
        "question": "Find the first name, last name and id for the top three players won the most player awards.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.birth_country from player  group by player.birth_country  order by count(*) asc limit 3",
        "question": "List three countries which are the origins of the least players.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct player.birth_country from player  group by player.birth_country  order by count(*) asc limit 3",
        "question": "List three countries which are the origins of the least players.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.birth_country from player  group by player.birth_country  order by count(*) asc limit 3",
        "question": "What are the three countries that the least players are from?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct player.birth_country from player  group by player.birth_country  order by count(*) asc limit 3",
        "question": "What are the three countries that the least players are from?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from player where  player.birth_country = \"USA\" and player.bats = \"R\"",
        "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from player where  player.birth_country = \"USA\" and player.bats = (select player.bats from player where  player.birth_country = \"USA\" and player.bats = \"R\"  )",
        "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from player where  player.birth_country = \"USA\" and player.bats = (select player.bats from player where  player.birth_country = \"USA\" and player.bats = \"R\" and player.birth_country = \"USA\"  )",
        "question": "How many players born in USA are right-handed batters? That is, have the batter value 'R'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from player where  player.birth_country = \"USA\" and player.bats = \"R\"",
        "question": "Count the number of players who were born in USA and have bats information 'R'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from player where  player.birth_country = \"USA\" and player.bats = (select player.bats from player where  player.birth_country = \"USA\" and player.bats = \"R\"  )",
        "question": "Count the number of players who were born in USA and have bats information 'R'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select avg(player.height) from player_college join college on player_college.college_id = college.college_id join player on player_college.player_id = player.player_id where  college.name_full = \"Yale University\"",
        "question": "What is the average height of the players from the college named 'Yale University'?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select avg(player.height) from player_college join player on player_college.player_id = player.player_id where  player_college.college_id = \"yale\"",
        "question": "What is the average height of the players from the college named 'Yale University'?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select avg(player.height) from player_college join player on player_college.player_id = player.player_id where  player_college.college_id = \"yale\"",
        "question": "Find the average height of the players who belong to the college called 'Yale University'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select avg(player.height) from player_college join college on player_college.college_id = college.college_id join player on player_college.player_id = player.player_id where  college.name_full = \"Yale University\"",
        "question": "Find the average height of the players who belong to the college called 'Yale University'.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last from player where  player.weight > 220 or player.height < 75",
        "question": "List players' first name and last name who have weight greater than 220 or height shorter than 75.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select player.name_first , player.name_last from player where  player.weight > 220 or player.height < 75",
        "question": "What are the first name and last name of the players who have weight above 220 or height below 75?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from postseason where  postseason.year = 1885  group by postseason.year having  count(postseason.ties) = 1",
        "question": "How many games in 1885 postseason resulted in ties (that is, the value of \"ties\" is '1')?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select salary.salary from salary where  salary.year = 2001   order by salary.salary desc limit 3",
        "question": "List the 3 highest salaries of the players in 2001?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select salary.salary from salary where  salary.year = 2001  group by salary.player_id  order by max(salary.salary) desc limit 3",
        "question": "List the 3 highest salaries of the players in 2001?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select salary.salary from salary where  salary.year = 2001   order by salary.salary desc limit 3",
        "question": "How much salary did the top 3 well-paid players get in 2001?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select hall_of_fame.yearid from hall_of_fame  group by hall_of_fame.yearid  order by count(*) asc limit 1",
        "question": "In which year did the least people enter hall of fame?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select hall_of_fame.yearid from hall_of_fame  group by hall_of_fame.yearid  order by count(*) asc limit 1",
        "question": "Find the year in which the least people enter hall of fame.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from park where  park.city = \"Atlanta\"",
        "question": "How many parks are there in Atlanta city?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from park where  park.city = \"Atlanta\"",
        "question": "How many parks does Atlanta city have?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from home_game join park on home_game.park_id = park.park_id where  park.park_name = \"Columbia Park\" and home_game.year = 1907",
        "question": "How many games were played in park \"Columbia Park\" in 1907?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from home_game join park on home_game.park_id = park.park_id where  park.city = \"Atlanta\" and home_game.year = 2000",
        "question": "How many games were played in city Atlanta in 2000?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from home_game join park on home_game.park_id = park.park_id where  park.city = \"Atlanta\" and home_game.year = 2000",
        "question": "Find the number of games taken place in city Atlanta in 2000.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select park.state from park  group by park.state having  count(*) > 2",
        "question": "List the names of states that have more than 2 parks.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct park.state from park  group by park.state having  count(*) > 2",
        "question": "List the names of states that have more than 2 parks.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select park.state from park  group by park.state having  count(*) > 2",
        "question": "Which states have more than 2 parks?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct park.state from park  group by park.state having  count(*) > 2",
        "question": "Which states have more than 2 parks?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from team_franchise where  team_franchise.active = \"Y\"",
        "question": "How many team franchises are active, with active value 'Y'?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select count(*) from team_franchise where  team_franchise.active = \"Y\"",
        "question": "Find the number of team franchises that are active (have 'Y' as \"active\" information).",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select park.city from park  group by park.city having  count(*) between 2 and 4",
        "question": "Which cities have 2 to 4 parks?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct park.city from park  group by park.city having  count(*) between 2 and 4",
        "question": "Which cities have 2 to 4 parks?",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select park.city from park  group by park.city having  count(*) between 2 and 4",
        "question": "Find all the cities that have 2 to 4 parks.",
        "correctness": 1
    },
    {
        "db_id": "baseball_1",
        "query": "select distinct park.city from park  group by park.city having  count(*) between 2 and 4",
        "question": "Find all the cities that have 2 to 4 parks.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID where  customer_policies.policy_id not in (select Claims.Policy_ID from Claims  )  group by customer_policies.customer_id having  count(*) >= 2",
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID where  customer_policies.policy_id not in (select Claims.Policy_ID from Claims  )  group by customers.customer_id having  count(*) >= 2",
        "question": "Which customer had at least 2 policies but did not file any claims? List the customer details and id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID where  customer_policies.policy_id not in (select Claims.Policy_ID from Claims  )  group by customer_policies.customer_id having  count(*) >= 2",
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID where  customer_policies.policy_id not in (select Claims.Policy_ID from Claims  )  group by customers.customer_id having  count(*) >= 2",
        "question": "Give me the the customer details and id for the customers who had two or more policies but did not file any claims.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code , payments.date_payment_made , payments.amount_payment from Payments   order by payments.date_payment_made asc",
        "question": "List the method, date and amount of all the payments, in ascending order of date.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code , payments.date_payment_made , payments.amount_payment from Payments   order by payments.date_payment_made asc",
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.date_payment_made , payments.payment_method_code , payments.amount_payment from Payments   order by payments.date_payment_made asc",
        "question": "What are the method, date and amount of each payment? Sort the list in ascending order of date.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.amount_claimed , claims.amount_settled from Claims   order by claims.amount_settled asc limit 1",
        "question": "Among all the claims, what is the amount claimed in the claim with the least amount settled? List both the settlement amount and claim amount.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.date_claim_made , claims.date_claim_settled from Claims where  claims.amount_claimed > (select avg(claims.amount_claimed) from Claims  )",
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct claims.date_claim_made , claims.date_claim_settled from Claims where  claims.amount_claimed > (select avg(claims.amount_claimed) from Claims  )",
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.date_claim_made , claims.date_claim_settled from Claims where  claims.amount_claimed >= (select avg(claims.amount_claimed) from Claims  )",
        "question": "Among all the claims, which claims have a claimed amount larger than the average? List the date the claim was made and the date it was settled.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.date_claim_made , claims.date_claim_settled from Claims where  claims.amount_claimed > (select avg(claims.amount_claimed) from Claims  )",
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.date_claim_made , claims.date_claim_settled from Claims where  claims.amount_claimed >= (select avg(claims.amount_claimed) from Claims  )",
        "question": "Give me the claim date, settlement date for all the claims whose claimed amount is larger than the average.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by settlements.claim_id",
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.claim_id",
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select settlements.claim_id , count(*) from Settlements  group by settlements.claim_id",
        "question": "How many settlements does each claim correspond to? List the claim id and the number of settlements.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.claim_id",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by settlements.claim_id",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select settlements.claim_id , count(*) from Settlements  group by settlements.claim_id",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select count(*) , claims.claim_id from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.claim_id",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select count(*) , settlements.claim_id from Settlements  group by settlements.claim_id",
        "question": "Find the number of settlements each claim corresponds to. Show the number together with the claim id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , claims.date_claim_made , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by settlements.claim_id  order by count(*) desc limit 1",
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , claims.date_claim_made , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.claim_id  order by count(*) desc limit 1",
        "question": "Which claim incurred the most number of settlements? List the claim id, the date the claim was made, and the number.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , claims.date_claim_made , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by settlements.claim_id  order by count(*) desc limit 1",
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.claim_id , claims.date_claim_made , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by claims.claim_id  order by count(*) desc limit 1",
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select settlements.claim_id , claims.date_claim_made , count(*) from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by settlements.claim_id  order by count(*) desc limit 1",
        "question": "Find the claim id and claim date of the claim that incurred the most settlement count. Also tell me the count.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select count(*) , settlements.claim_id from Settlements join Claims on Settlements.Claim_ID = Claims.Claim_ID  group by settlements.claim_id  order by claims.date_claim_settled desc limit 1",
        "question": "How many settlements were made on the claim with the most recent claim settlement date? List the number and the claim id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.date_claim_made from Claims   order by claims.date_claim_made asc limit 1",
        "question": "Of all the claims, what was the earliest date when any claim was made?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select claims.date_claim_made from Claims   order by claims.date_claim_made asc limit 1",
        "question": "Tell me the the date when the first claim was made.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct claims.date_claim_made from Claims   order by claims.date_claim_made asc limit 1",
        "question": "Tell me the the date when the first claim was made.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select sum(settlements.amount_settled) from Settlements",
        "question": "What is the total amount of settlement made for all the settlements?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select sum(settlements.amount_settled) from Settlements",
        "question": "Compute the total amount of settlement across all the settlements.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id having  count(*) > 1",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customer_policies.customer_id having  count(*) > 1",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id having  count(*) > 1",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customer_policies.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customer_policies.customer_id having  count(*) > 1",
        "question": "Who are the customers that had more than 1 policy? List the customer details and id.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customer_policies.customer_id having  count(*) > 1",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id having  count(*) > 1",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details , customer_policies.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customer_policies.customer_id having  count(*) > 1",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details , customers.customer_id from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customers.customer_id having  count(*) > 1",
        "question": "Find the the customer details and id for the customers who had more than one policy.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code from Payments  group by payments.payment_method_code  order by count(*) desc limit 1",
        "question": "What is the most popular payment method?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct payments.payment_method_code from Payments  group by payments.payment_method_code  order by count(*) desc limit 1",
        "question": "What is the most popular payment method?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code from Payments  group by payments.payment_method_code  order by count(*) desc limit 1",
        "question": "Which payment method is used the most often?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code from Payments  group by payments.payment_method_code  order by count(*) asc limit 1",
        "question": "With which kind of payment method were the least number of payments processed?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code from Payments  group by payments.payment_method_code  order by count(*) asc limit 1",
        "question": "What is the payment method that were used the least often?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_method_code from Payments  group by payments.payment_method_code  order by count(*) - payments.payment_method_code asc limit 1",
        "question": "What is the payment method that were used the least often?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select sum(payments.amount_payment) from Payments",
        "question": "What is the total amount of payment?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select sum(payments.amount_payment) from Payments",
        "question": "Compute the total amount of payment processed.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers",
        "question": "What are all the distinct details of the customers?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers  group by customers.customer_details",
        "question": "What are all the distinct details of the customers?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers  group by customers.customer_id",
        "question": "What are all the distinct details of the customers?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers",
        "question": "Return the distinct customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers  group by customers.customer_id",
        "question": "Return the distinct customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers  group by customers.customer_details",
        "question": "Return the distinct customer details.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customer_policies.policy_type_code from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customer_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which kind of policy type was chosen by the most customers?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customer_policies.policy_type_code from Customer_Policies  group by customer_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which kind of policy type was chosen by the most customers?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customer_policies.policy_type_code from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID  group by customer_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Which kind of policy type was chosen by the most customers?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customer_policies.policy_type_code from Customer_Policies  group by customer_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Find the policy type the most customers choose.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customer_policies.policy_type_code from Customer_Policies  group by customer_policies.policy_type_code  order by count(*) desc limit 1",
        "question": "Find the policy type the most customers choose.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select count(*) from Settlements",
        "question": "How many settlements are there in total?",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select count(*) from Settlements",
        "question": "Count the total number of settlements made.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_id , payments.date_payment_made , payments.amount_payment from Payments where  payments.payment_method_code = \"Visa\"",
        "question": "Which Payments were processed with Visa? List the payment Id, the date and the amount.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select payments.payment_id , payments.date_payment_made , payments.amount_payment from Payments where  payments.payment_method_code = \"Visa\"",
        "question": "Give me the payment Id, the date and the amount for all the payments processed with Visa.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details from Customers   except select customers.customer_details from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID",
        "question": "List the details of the customers who do not have any policies.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details from Customers where  customers.customer_id not in (select Customer_Policies.Customer_ID from Customer_Policies  )",
        "question": "List the details of the customers who do not have any policies.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers where  customers.customer_id not in (select Customer_Policies.Customer_ID from Customer_Policies  )",
        "question": "List the details of the customers who do not have any policies.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers   except select distinct customers.customer_details from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID",
        "question": "List the details of the customers who do not have any policies.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details from Customers   except select customers.customer_details from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID",
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select customers.customer_details from Customers where  customers.customer_id not in (select Customer_Policies.Customer_ID from Customer_Policies  )",
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers   except select distinct customers.customer_details from Customer_Policies join Customers on Customer_Policies.Customer_ID = Customers.Customer_ID",
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select distinct customers.customer_details from Customers where  customers.customer_id not in (select Customer_Policies.Customer_ID from Customer_Policies  )",
        "question": "Which customers do not have any policies? Find the details of these customers.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select sum(claims.amount_claimed) from Claims",
        "question": "Find the total claimed amount of all the claims.",
        "correctness": 1
    },
    {
        "db_id": "insurance_policies",
        "query": "select sum(claims.amount_claimed) from Claims",
        "question": "What is total amount claimed summed across all the claims?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select count(*) from ship",
        "question": "How many ships are there?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select count(*) from ship",
        "question": "What is the number of ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship   order by ship.tonnage asc",
        "question": "List the name of ships in ascending order of tonnage.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship   order by ship.tonnage asc",
        "question": "List the name of ships in ascending order of tonnage.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship   order by ship.tonnage asc",
        "question": "what are the names of the ships ordered by ascending tonnage?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship   order by ship.tonnage asc",
        "question": "what are the names of the ships ordered by ascending tonnage?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type , ship.nationality from ship",
        "question": "What are the type and nationality of ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type , ship.nationality from ship",
        "question": "What are the types and nationalities of every ship?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.nationality , ship.type from ship",
        "question": "What are the types and nationalities of every ship?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.nationality != \"United States\"",
        "question": "List the name of ships whose nationality is not \"United States\".",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship where  ship.nationality != \"United States\"",
        "question": "List the name of ships whose nationality is not \"United States\".",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.nationality != \"United States\"",
        "question": "What are the names of the ships that are not from the United States?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship where  ship.nationality != \"United States\"",
        "question": "What are the names of the ships that are not from the United States?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.ship_id not in (select ship.Ship_ID from ship where  ship.nationality = \"United States\"  )",
        "question": "What are the names of the ships that are not from the United States?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.name not in (select ship.name from ship where  ship.nationality = \"United States\"  )",
        "question": "What are the names of the ships that are not from the United States?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.nationality = \"United States\" or ship.nationality = \"United Kingdom\"",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.nationality = \"United Kingdom\" or ship.nationality = \"United States\"",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship where  ship.nationality = \"United States\" or ship.nationality = \"United Kingdom\"",
        "question": "Show the name of ships whose nationality is either United States or United Kingdom.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship   order by ship.tonnage desc limit 1",
        "question": "What is the name of the ship with the largest tonnage?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship   order by ship.tonnage desc limit 1",
        "question": "What is the name of the ship with the largest tonnage?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship   order by ship.tonnage desc limit 1",
        "question": "What is the ship with the largest amount of tonnage called?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type , count(*) from ship  group by ship.type",
        "question": "Show different types of ships and the number of ships of each type.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type , count(*) from ship  group by ship.type",
        "question": "Show different types of ships and the number of ships of each type.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select count(*) , ship.type from ship  group by ship.type",
        "question": "Show different types of ships and the number of ships of each type.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type , count(*) from ship  group by ship.type",
        "question": "For each type, how many ships are there?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select count(*) , ship.type from ship  group by ship.type",
        "question": "For each type, how many ships are there?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type , count(*) from ship  group by ship.type",
        "question": "For each type, how many ships are there?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type from ship  group by ship.type  order by count(*) desc limit 1",
        "question": "Please show the most common type of ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type from ship  group by ship.type  order by count(*) desc limit 1",
        "question": "Please show the most common type of ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type from ship  group by ship.type  order by count(*) desc limit 1",
        "question": "What is the most common type of ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type from ship  group by ship.type  order by count(*) desc limit 1",
        "question": "What is the most common type of ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.nationality from ship  group by ship.nationality having  count(*) > 2",
        "question": "List the nations that have more than two ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.nationality from ship  group by ship.nationality having  count(*) > 2",
        "question": "List the nations that have more than two ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.nationality from ship  group by ship.nationality having  count(*) >= 2",
        "question": "List the nations that have more than two ships.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.nationality from ship  group by ship.nationality having  count(*) > 2",
        "question": "What are the nations that have more than two ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.nationality from ship  group by ship.nationality having  count(*) > 2",
        "question": "What are the nations that have more than two ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.nationality from ship  group by ship.nationality having  count(*) >= 2",
        "question": "What are the nations that have more than two ships?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type , avg(ship.tonnage) from ship  group by ship.type",
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type , avg(ship.tonnage) from ship  group by ship.type",
        "question": "Show different types of ships and the average tonnage of ships of each type.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type , avg(ship.tonnage) from ship  group by ship.type",
        "question": "For each type, what is the average tonnage?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select avg(ship.tonnage) , ship.type from ship  group by ship.type",
        "question": "For each type, what is the average tonnage?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select mission.code , mission.fate , ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select mission.fate , mission.code , ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct mission.code , mission.fate , ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select mission.code , mission.fate , ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct mission.code , mission.fate , ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select mission.fate , mission.code , ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID where  mission.launched_year > 1928",
        "question": "Show names of ships involved in a mission launched after 1928.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID where  mission.launched_year > 1928",
        "question": "Show names of ships involved in a mission launched after 1928.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID where  mission.launched_year > 1920",
        "question": "Show names of ships involved in a mission launched after 1928.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID where  mission.launched_year > 1928",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID where  mission.launched_year > 1928",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID where  mission.launched_year > 1920",
        "question": "What are the names of ships that were involved in a mission launched after 1928?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct mission.fate from mission join ship on mission.Ship_ID = ship.Ship_ID where  ship.nationality = \"United States\"",
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select mission.fate from mission join ship on mission.Ship_ID = ship.Ship_ID where  ship.nationality = \"United States\"",
        "question": "Show the distinct fate of missions that involve ships with nationality \"United States\"",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct mission.fate from mission join ship on mission.Ship_ID = ship.Ship_ID where  ship.nationality = \"United States\"",
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select mission.fate from mission join ship on mission.Ship_ID = ship.Ship_ID where  ship.nationality = \"United States\"",
        "question": "What are the different fates of the mission that involved ships from the United States?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.ship_id not in (select mission.Ship_ID from mission  )",
        "question": "List the name of ships that are not involved in any mission",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship   except select ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "List the name of ships that are not involved in any mission",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship where  ship.ship_id not in (select mission.Ship_ID from mission  )",
        "question": "List the name of ships that are not involved in any mission",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship where  ship.ship_id not in (select mission.Ship_ID from mission  )",
        "question": "What are the names of the ships that are not involved in any missions?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.name from ship   except select ship.name from mission join ship on mission.Ship_ID = ship.Ship_ID",
        "question": "What are the names of the ships that are not involved in any missions?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.name from ship where  ship.ship_id not in (select mission.Ship_ID from mission  )",
        "question": "What are the names of the ships that are not involved in any missions?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type from ship where  ship.tonnage > 6000   intersect select ship.type from ship where  ship.tonnage < 4000",
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type from ship where  ship.tonnage > 6000   intersect select distinct ship.type from ship where  ship.tonnage < 4000",
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type from ship where  ship.tonnage > 6000   intersect select ship.type from ship where  ship.tonnage <= 4000",
        "question": "Show the types of ships that have both ships with tonnage larger than 6000 and ships with tonnage smaller than 4000.",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type from ship where  ship.tonnage > 6000   intersect select ship.type from ship where  ship.tonnage < 4000",
        "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select distinct ship.type from ship where  ship.tonnage > 6000   intersect select distinct ship.type from ship where  ship.tonnage < 4000",
        "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
        "correctness": 1
    },
    {
        "db_id": "ship_mission",
        "query": "select ship.type from ship where  ship.tonnage > 6000   intersect select ship.type from ship where  ship.tonnage <= 4000",
        "question": "What are the types of the ships that have both shiips with tonnage more than 6000 and those with tonnage less than 4000?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select count(*) from company where  company.headquarters = \"USA\"",
        "question": "How many companies are headquartered in the US?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.name from company   order by company.sales_in_billion asc",
        "question": "List the names of companies by ascending number of sales.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct company.name from company   order by company.sales_in_billion asc",
        "question": "List the names of companies by ascending number of sales.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.name from company  group by company.name  order by company.sales_in_billion asc",
        "question": "List the names of companies by ascending number of sales.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters , company.industry from company",
        "question": "What are the headquarters and industries of all companies?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.name from company where  company.industry = \"Banking\" or company.industry = \"Retailing\"",
        "question": "Show the names of companies in the banking or retailing industry?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct company.name from company where  company.industry = \"Banking\" or company.industry = \"Retailing\"",
        "question": "Show the names of companies in the banking or retailing industry?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select max(company.market_value_in_billion) , min(company.market_value_in_billion) from company",
        "question": "What is the maximum and minimum market value of companies?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters from company   order by company.sales_in_billion desc limit 1",
        "question": "What is the headquarter of the company with the largest sales?",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters , count(*) from company  group by company.headquarters",
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct company.headquarters , count(*) from company  group by company.headquarters",
        "question": "Show the different headquarters and number of companies at each headquarter.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters from company  group by company.headquarters  order by count(*) desc limit 1",
        "question": "Show the most common headquarter for companies.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct company.headquarters from company  group by company.headquarters  order by count(*) desc limit 1",
        "question": "Show the most common headquarter for companies.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters from company  group by company.headquarters having  count(*) >= 2",
        "question": "Show the headquarters that have at least two companies.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct company.headquarters from company  group by company.headquarters having  count(*) >= 2",
        "question": "Show the headquarters that have at least two companies.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters from company  group by company.headquarters, company.headquarters having  count(*) >= 2",
        "question": "Show the headquarters that have at least two companies.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.headquarters from company where  company.industry = \"Banking\"   intersect select company.headquarters from company where  company.industry = \"Oil and gas\"",
        "question": "Show the headquarters that have both companies in banking industry and companies in oil and gas industry.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select people.name from employment join people on employment.People_ID = people.People_ID join company on employment.Company_ID = company.Company_ID where  company.sales_in_billion > 200",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct people.name from employment join people on employment.People_ID = people.People_ID join company on employment.Company_ID = company.Company_ID where  company.sales_in_billion > 200",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.name , count(*) from employment join company on employment.Company_ID = company.Company_ID  group by employment.company_id",
        "question": "Show the names of companies and the number of employees they have",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select people.name from people where  people.people_id not in (select employment.People_ID from employment  )",
        "question": "List the names of people that are not employed by any company",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select people.name from people   except select people.name from employment join people on employment.People_ID = people.People_ID",
        "question": "List the names of people that are not employed by any company",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select distinct people.name from people where  people.people_id not in (select employment.People_ID from employment  )",
        "question": "List the names of people that are not employed by any company",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.name from company where  company.sales_in_billion > 200   order by company.sales_in_billion,company.profits_in_billion desc",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "correctness": 1
    },
    {
        "db_id": "company_employee",
        "query": "select company.name from company  group by company.name having  sum(company.sales_in_billion) > 200  order by company.sales_in_billion,company.profits_in_billion desc",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select count(*) from film",
        "question": "How many film are there?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select count(*) from film",
        "question": "Count the number of films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.director from film",
        "question": "List the distinct director of all films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.director from film",
        "question": "List the distinct director of all films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.director from film",
        "question": "What are the different film Directors?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.director from film",
        "question": "What are the different film Directors?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select avg(film.gross_in_dollar) from film",
        "question": "What is the average ticket sales gross in dollars of films?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select avg(film.gross_in_dollar) from film",
        "question": "Return the average gross sales in dollars across all films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.low_estimate , film_market_estimation.high_estimate from film_market_estimation",
        "question": "What are the low and high estimates of film markets?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.low_estimate , film_market_estimation.high_estimate from film_market_estimation",
        "question": "Return the low and high estimates for all film markets.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.type from film_market_estimation where  film_market_estimation.year = 1995",
        "question": "What are the types of film market estimations in year 1995?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film_market_estimation.type from film_market_estimation where  film_market_estimation.year = 1995",
        "question": "What are the types of film market estimations in year 1995?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.type from film_market_estimation where  film_market_estimation.year = 1995",
        "question": "Return the types of film market estimations in 1995.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film_market_estimation.type from film_market_estimation where  film_market_estimation.year = 1995",
        "question": "Return the types of film market estimations in 1995.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.type from film_market_estimation where  film_market_estimation.year like 1995",
        "question": "Return the types of film market estimations in 1995.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select max(market.number_cities) , min(market.number_cities) from market",
        "question": "What are the maximum and minimum number of cities in all markets.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select max(market.number_cities) , min(market.number_cities) from market",
        "question": "Return the maximum and minimum number of cities across all markets.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select count(*) from market where  market.number_cities < 300",
        "question": "How many markets have number of cities smaller than 300?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select count(*) from market where  market.number_cities <= 300",
        "question": "How many markets have number of cities smaller than 300?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select count(*) from market where  market.number_cities < 300",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select count(*) from market where  market.number_cities <= 300",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market   order by market.country asc",
        "question": "List all countries of markets in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct market.country from market   order by market.country asc",
        "question": "List all countries of markets in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market   order by market.country asc",
        "question": "What are the countries for each market, ordered alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct market.country from market   order by market.country asc",
        "question": "What are the countries for each market, ordered alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market  group by market.country  order by market.country asc",
        "question": "What are the countries for each market, ordered alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market   order by market.number_cities desc",
        "question": "List all countries of markets in descending order of number of cities.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct market.country from market   order by market.number_cities desc",
        "question": "List all countries of markets in descending order of number of cities.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market  group by market.country  order by market.number_cities desc",
        "question": "List all countries of markets in descending order of number of cities.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market   order by market.number_cities desc",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market  group by market.country  order by market.number_cities desc",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country from market  group by market.country  order by sum(market.number_cities) desc",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct market.country from market   order by market.number_cities desc",
        "question": "What are the countries for each market ordered by decreasing number of cities?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film_market_estimation.type from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID",
        "question": "Please show the titles of films and the types of market estimations.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film_market_estimation.type from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID",
        "question": "What are the titles of films and corresponding types of market estimations?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.director from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID where  film_market_estimation.year = 1995",
        "question": "Show the distinct director of films with market estimation in the year of 1995.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.director from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID where  film_market_estimation.year = 1995",
        "question": "Show the distinct director of films with market estimation in the year of 1995.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.director from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID where  film_market_estimation.year = 1995",
        "question": "Who are the different directors of films which had market estimation in 1995?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.director from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID where  film_market_estimation.year = 1995",
        "question": "Who are the different directors of films which had market estimation in 1995?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.director from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID where  film_market_estimation.year like 1995",
        "question": "Who are the different directors of films which had market estimation in 1995?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select avg(market.number_cities) from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  film_market_estimation.low_estimate > 10000",
        "question": "What is the average number of cities of markets with low film market estimate bigger than 10000?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select avg(market.number_cities) from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  film_market_estimation.low_estimate > 10000",
        "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select avg(market.number_cities) from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  film_market_estimation.low_estimate > 10000  group by film_market_estimation.low_estimate",
        "question": "Give the average number of cities within markets that had a low market estimation larger than 10000?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country , film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID",
        "question": "Please list the countries and years of film market estimations.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct market.country , film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID",
        "question": "Please list the countries and years of film market estimations.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country , film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select market.country , film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID  group by film_market_estimation.year",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  market.country = \"Japan\"   order by film_market_estimation.year desc",
        "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  market.country = \"Japan\"   order by film_market_estimation.year desc",
        "question": "Please list the years of film market estimations when the market is in country \"Japan\" in descending order.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  market.country = \"Japan\"   order by film_market_estimation.year desc",
        "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film_market_estimation.year from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  market.country = \"Japan\"   order by film_market_estimation.year desc",
        "question": "What are the years of film market estimation for the market of Japan, ordered by year descending?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio , count(*) from film  group by film.studio",
        "question": "List the studios of each film and the number of films produced by that studio.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio , count(*) from film  group by film.studio",
        "question": "How films are produced by each studio?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio  order by count(*) desc limit 1",
        "question": "List the name of film studio that have the most number of films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio  order by count(*) desc limit 1",
        "question": "What is the name of teh studio that created the most films?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio having  count(*) >= 2",
        "question": "List the names of studios that have at least two films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film  group by film.studio having  count(*) >= 2",
        "question": "List the names of studios that have at least two films.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio having  count(*) >= 2",
        "question": "What are the names of studios that have made two or more films?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film  group by film.studio having  count(*) >= 2",
        "question": "What are the names of studios that have made two or more films?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title from film where  film.film_id not in (select film_market_estimation.Film_ID from film_market_estimation  )",
        "question": "List the title of films that do not have any market estimation.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title from film   except select film.title from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID",
        "question": "List the title of films that do not have any market estimation.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title from film where  film.film_id not in (select film_market_estimation.Film_ID from film_market_estimation  )",
        "question": "What are the titles of films that do not have a film market estimation?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title from film   except select film.title from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID",
        "question": "What are the titles of films that do not have a film market estimation?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.title from film where  film.film_id not in (select film_market_estimation.Film_ID from film_market_estimation  )",
        "question": "What are the titles of films that do not have a film market estimation?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film where  film.director = \"Nicholas Meyer\"   intersect select film.studio from film where  film.director = \"Walter Hill\"",
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film where  film.director = \"Nicholas Meyer\"   intersect select distinct film.studio from film where  film.director = \"Walter Hill\"",
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film where  film.director = \"Nicholas Meyer\"   intersect select film.studio from film where  film.director = \"Walter Hill\"",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film where  film.director = \"Nicholas Meyer\"   intersect select distinct film.studio from film where  film.director = \"Walter Hill\"",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.studio from film where  film.studio like \"%Universal%\"",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.studio from film where  film.title in (select film.title from film where  film.studio like \"%Universal%\"  )",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.title , film.studio from film where  film.studio like \"%Universal%\"",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.studio from film where  film.studio in (select film.studio from film where  film.studio like \"%Universal%\"  )",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.studio from film where  film.studio like \"%Universal%\"",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film   except select film.studio from film where  film.director = \"Walter Hill\"",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film   except select distinct film.studio from film where  film.director = \"Walter Hill\"",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film   except select film.studio from film where  film.director = \"Walter Hill\"",
        "question": "Which studios have never worked with the director Walter Hill?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film   except select distinct film.studio from film where  film.director = \"Walter Hill\"",
        "question": "Which studios have never worked with the director Walter Hill?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio having  avg(film.gross_in_dollar) > 4500000",
        "question": "List the studios which average gross is above 4500000.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film  group by film.studio having  avg(film.gross_in_dollar) > 4500000",
        "question": "List the studios which average gross is above 4500000.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio having  avg(film.gross_in_dollar) > 4500000",
        "question": "Which studios have an average gross of over 4500000?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select distinct film.studio from film  group by film.studio having  avg(film.gross_in_dollar) > 4500000",
        "question": "Which studios have an average gross of over 4500000?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.studio from film  group by film.studio having  avg(film.gross_in_dollar) > 450000",
        "question": "Which studios have an average gross of over 4500000?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID   order by film_market_estimation.high_estimate desc limit 1",
        "question": "What is the title of the film that has the highest high market estimation.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title from film_market_estimation join film on film_market_estimation.Film_ID = film.Film_ID   order by film_market_estimation.high_estimate desc limit 1",
        "question": "Return the title of the film with the highest high estimate?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.director from film   except select film.title , film.director from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID join film on film_market_estimation.Film_ID = film.Film_ID where  market.country = \"China\"",
        "question": "What are the titles and directors of the films were never presented in China?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.director from film where  film.film_id not in (select film_market_estimation.Film_ID from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  market.country = \"China\"  )",
        "question": "What are the titles and directors of the films were never presented in China?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.director from film where  film.film_id not in (select film.Film_ID from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID join film on film_market_estimation.Film_ID = film.Film_ID where  market.country = \"China\"  )",
        "question": "What are the titles and directors of the films were never presented in China?",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.director from film   except select film.title , film.director from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID join film on film_market_estimation.Film_ID = film.Film_ID where  market.country = \"China\"",
        "question": "Return the titles and directors of films that were never in the market of China.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.director from film where  film.film_id not in (select film_market_estimation.Film_ID from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID where  market.country = \"China\"  )",
        "question": "Return the titles and directors of films that were never in the market of China.",
        "correctness": 1
    },
    {
        "db_id": "film_rank",
        "query": "select film.title , film.director from film where  film.film_id not in (select film.Film_ID from film_market_estimation join market on film_market_estimation.Market_ID = market.Market_ID join film on film_market_estimation.Film_ID = film.Film_ID where  market.country = \"China\"  )",
        "question": "Return the titles and directors of films that were never in the market of China.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name , documents.access_count from Documents   order by documents.document_name asc",
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_name , documents.access_count from Documents   order by documents.document_name asc",
        "question": "Find the name and access counts of all documents, in alphabetic order of the document name.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name , documents.access_count from Documents   order by documents.document_name asc",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name , documents.access_count from Documents   order by documents.access_count desc limit 1",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name , documents.access_count from Documents   order by documents.access_count desc limit 1",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) > 4",
        "question": "Find the types of documents with more than 4 documents.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_type_code from Documents  group by documents.document_type_code having  count(*) > 4",
        "question": "Find the types of documents with more than 4 documents.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) >= 5",
        "question": "What are the codes of types of documents of which there are for or more?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select avg(documents.access_count) from Documents",
        "question": "What is the average access count of documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select avg(documents.access_count) from Documents",
        "question": "Find the average access count across all documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name = \"David CV\"",
        "question": "What is the type of the document named \"David CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_type_code from Documents where  documents.document_name = \"David CV\"",
        "question": "What is the type of the document named \"David CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name = \"David CV\" and documents.document_type_code = \"CV\"",
        "question": "What is the type of the document named \"David CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name = \"David CV\"",
        "question": "Return the type code of the document named \"David CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name = \"David CV\" and documents.document_type_code = \"CV\"",
        "question": "Return the type code of the document named \"David CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_type_code from Documents where  documents.document_name = \"David CV\"",
        "question": "Return the type code of the document named \"David CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name = \"David CV\" or documents.document_name = \"David CV\"",
        "question": "Return the type code of the document named \"David CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  sum(documents.access_count) > 10000",
        "question": "What document types do have more than 10000 total access number.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_type_code from Documents  group by documents.document_type_code having  sum(documents.access_count) > 10000",
        "question": "What document types do have more than 10000 total access number.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) < 10000",
        "question": "Return the codes of the document types that do not have a total access count of over 10000.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(documents.access_count) < 10000",
        "question": "Return the codes of the document types that do not have a total access count of over 10000.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct document_sections.section_title from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code where  documents.document_name = \"David CV\"",
        "question": "What are all the section titles of the document named \"David CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select document_sections.section_title from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code where  documents.document_name = \"David CV\"",
        "question": "What are all the section titles of the document named \"David CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select document_sections.section_title from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code where  documents.document_name = \"David CV\"",
        "question": "Give the section titles of the document with the name \"David CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct document_sections.section_title from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code where  documents.document_name = \"David CV\"",
        "question": "Give the section titles of the document with the name \"David CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_code not in (select Document_Sections.document_code from Document_Sections  )",
        "question": "Find all the name of documents without any sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents   except select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code",
        "question": "Find all the name of documents without any sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_name from Documents where  documents.document_code not in (select Document_Sections.document_code from Document_Sections  )",
        "question": "Find all the name of documents without any sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_name from Documents   except select distinct documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code",
        "question": "Find all the name of documents without any sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_code not in (select Document_Sections.document_code from Document_Sections  )",
        "question": "What are the names of documents that do not have any sections?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents   except select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code",
        "question": "What are the names of documents that do not have any sections?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select users.user_name , users.password from Users  group by users.role_code  order by count(*) desc limit 1",
        "question": "List all the username and passwords of users with the most popular role.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select users.user_name , users.password from Users  group by users.role_code  order by count(*) desc limit 1",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select users.user_name , users.password from Users join Roles on Users.role_code = Roles.role_code  group by users.role_code  order by count(*) desc limit 1",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select users.user_name , users.password from Users join Roles on Users.role_code = Roles.role_code  group by roles.role_code  order by count(*) desc limit 1",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select avg(documents.access_count) from Document_Functional_Areas join Functional_Areas on Document_Functional_Areas.functional_area_code = Functional_Areas.functional_area_code join Documents on Document_Functional_Areas.document_code = Documents.document_code where  functional_areas.functional_area_description = \"Acknowledgement\"",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select avg(documents.access_count) from Document_Functional_Areas join Functional_Areas on Document_Functional_Areas.functional_area_code = Functional_Areas.functional_area_code join Documents on Document_Functional_Areas.document_code = Documents.document_code where  functional_areas.functional_area_description = \"Acknowledgement\"",
        "question": "What are the average access counts of documents that have the functional area description \"Acknowledgement\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code  group by documents.document_name  order by count(*) desc limit 1",
        "question": "What is the name of the document with the most number of sections?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code  group by documents.document_code  order by count(*) desc limit 1",
        "question": "What is the name of the document with the most number of sections?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code  group by document_sections.document_code  order by count(*) desc limit 1",
        "question": "What is the name of the document with the most number of sections?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code  group by documents.document_name  order by count(*) desc limit 1",
        "question": "Return the name of the document that has the most sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code  group by document_sections.document_code  order by count(*) desc limit 1",
        "question": "Return the name of the document that has the most sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Document_Sections join Documents on Document_Sections.document_code = Documents.document_code  group by documents.document_code  order by count(*) desc limit 1",
        "question": "Return the name of the document that has the most sections.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_type_code like \"%CV%\"",
        "question": "List all the document names which contains \"CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_name from Documents where  documents.document_type_code like \"%CV%\"",
        "question": "List all the document names which contains \"CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_name from Documents where  documents.document_type_code = \"CV\"",
        "question": "List all the document names which contains \"CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_type_code = \"CV\"",
        "question": "List all the document names which contains \"CV\".",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_type_code like \"%CV%\"",
        "question": "What are the names of documents that contain the substring \"CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_type_code = \"CV\"",
        "question": "What are the names of documents that contain the substring \"CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_name from Documents where  documents.document_type_code like \"%CV%\"",
        "question": "What are the names of documents that contain the substring \"CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_name from Documents where  documents.document_name like \"%CV%\"",
        "question": "What are the names of documents that contain the substring \"CV\"?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select roles.role_description from Users join Roles on Users.role_code = Roles.role_code  group by users.role_code  order by count(*) desc limit 1",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select roles.role_description from Users join Roles on Users.role_code = Roles.role_code  group by roles.role_code  order by count(*) desc limit 1",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select roles.role_description from Users join Roles on Users.role_code = Roles.role_code   order by users.user_login desc limit 1",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select roles.role_description from Users join Roles on Users.role_code = Roles.role_code  group by roles.role_code  order by count(*) desc limit 1",
        "question": "What is the description of the most popular role among users that have logged in?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select roles.role_description from Users join Roles on Users.role_code = Roles.role_code  group by users.role_code  order by count(*) desc limit 1",
        "question": "What is the description of the most popular role among users that have logged in?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select roles.role_description from Users join Roles on Users.role_code = Roles.role_code   order by users.user_login desc limit 1",
        "question": "What is the description of the most popular role among users that have logged in?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select avg(documents.access_count) from Documents  group by documents.document_structure_code  order by count(*) asc limit 1",
        "question": "What is the average access count of documents that have the least common structure?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select images.image_name , images.image_url from Images   order by images.image_name asc",
        "question": "List all the image name and URLs in the order of their names.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select images.image_name , images.image_url from Images   order by images.image_name,images.image_url asc",
        "question": "List all the image name and URLs in the order of their names.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct images.image_name , images.image_url from Images   order by images.image_name asc",
        "question": "List all the image name and URLs in the order of their names.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select images.image_name , images.image_url from Images   order by images.image_name asc",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct images.image_name , images.image_url from Images   order by images.image_name asc",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select images.image_name , images.image_url from Images   order by images.image_name,images.image_url asc",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select users.role_code , count(*) from Users  group by users.role_code",
        "question": "Find the number of users in each role.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select count(*) , users.role_code from Users  group by users.role_code",
        "question": "Find the number of users in each role.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct users.role_code , count(*) from Users  group by users.role_code",
        "question": "Find the number of users in each role.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select users.role_code , count(*) from Users  group by users.role_code",
        "question": "What are the different role codes for users, and how many users have each?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct users.role_code , count(*) from Users  group by users.role_code",
        "question": "What are the different role codes for users, and how many users have each?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select count(*) , users.role_code from Users  group by users.role_code",
        "question": "What are the different role codes for users, and how many users have each?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) > 2",
        "question": "What document types have more than 2 corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_type_code from Documents  group by documents.document_type_code having  count(*) > 2",
        "question": "What document types have more than 2 corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name > 2  group by documents.document_type_code having  count(*) > 2",
        "question": "What document types have more than 2 corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_name > 2  group by documents.document_type_code having  count(*) > 1",
        "question": "What document types have more than 2 corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents where  documents.document_code > 2  group by documents.document_type_code",
        "question": "What document types have more than 2 corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) > 2",
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "correctness": 1
    },
    {
        "db_id": "document_management",
        "query": "select distinct documents.document_type_code from Documents  group by documents.document_type_code having  count(*) > 2",
        "question": "Give the codes of document types that have more than 2 corresponding documents.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select count(*) from Companies",
        "question": "How many companies are there?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select count(*) from Companies",
        "question": "Count the number of companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies   order by companies.market_value_billion desc",
        "question": "List the names of companies in descending order of market value.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.name from Companies   order by companies.market_value_billion desc",
        "question": "List the names of companies in descending order of market value.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies   order by companies.market_value_billion desc",
        "question": "Sort the company names in descending order of the company's market value.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.name from Companies   order by companies.market_value_billion desc",
        "question": "Sort the company names in descending order of the company's market value.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters != \"USA\"",
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters not in (select companies.headquarters from Companies where  companies.headquarters = \"USA\"  )",
        "question": "What are the names of companies whose headquarters are not \"USA\"?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters != \"USA\"",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters != \"USA\" and companies.id not in (select Companies.id from Companies where  companies.headquarters = \"USA\"  )",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters != \"USA\" and companies.name not in (select companies.name from Companies where  companies.headquarters = \"USA\"  )",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters not in (select companies.headquarters from Companies where  companies.headquarters = \"USA\"  )",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name from Companies where  companies.headquarters != \"USA\" and companies.headquarters not in (select companies.headquarters from Companies where  companies.headquarters = \"USA\"  )",
        "question": "Find the names of the companies whose headquarters are not located in \"USA\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name , companies.assets_billion from Companies   order by companies.name asc",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.name , companies.assets_billion from Companies   order by companies.name asc",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name , companies.assets_billion from Companies   order by companies.name asc",
        "question": "List the name and assets of each company in ascending order of company name.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select avg(companies.profits_billion) from Companies",
        "question": "What are the average profits of companies?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select avg(companies.profits_billion) from Companies",
        "question": "Compute the average profits companies make.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select max(companies.sales_billion) , min(companies.sales_billion) from Companies where  companies.industry != \"Banking\"",
        "question": "What are the maximum and minimum sales of the companies whose industries are not \"Banking\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select max(companies.sales_billion) , min(companies.sales_billion) from Companies where  companies.industry != \"Banking\"",
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select max(companies.sales_billion) , min(companies.sales_billion) from Companies where  companies.id not in (select Companies.id from Companies where  companies.industry = \"Banking\"  )",
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select min(companies.sales_billion) , max(companies.sales_billion) from Companies where  companies.industry != \"Banking\"",
        "question": "Find the maximum and minimum sales of the companies that are not in the \"Banking\" industry.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select count( distinct companies.industry) from Companies",
        "question": "How many different industries are the companies in?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select count( distinct companies.industry) from Companies",
        "question": "Count the number of distinct company industries.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings   order by buildings.height desc",
        "question": "List the names of buildings in descending order of building height.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct buildings.name from buildings   order by buildings.height desc",
        "question": "List the names of buildings in descending order of building height.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings   order by buildings.height desc",
        "question": "What are the names of buildings sorted in descending order of building height?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct buildings.name from buildings   order by buildings.height desc",
        "question": "What are the names of buildings sorted in descending order of building height?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.stories from buildings   order by buildings.height desc limit 1",
        "question": "Find the stories of the building with the largest height.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.stories from buildings   order by buildings.height desc limit 1",
        "question": "What is the stories of highest building?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name , companies.name from Office_locations join Companies on Office_locations.company_id = Companies.id join buildings on Office_locations.building_id = buildings.id",
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.name , buildings.name from Office_locations join Companies on Office_locations.company_id = Companies.id join buildings on Office_locations.building_id = buildings.id",
        "question": "For each company, return the company name and the name of the building its office is located in.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by office_locations.building_id having  count(*) > 1",
        "question": "Show the names of the buildings that have more than one company offices.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by buildings.id having  count(*) > 1",
        "question": "Show the names of the buildings that have more than one company offices.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by office_locations.building_id having  count(*) > 1",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by buildings.name having  count(*) > 1",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by office_locations.building_id  order by count(*) desc limit 1",
        "question": "Show the name of the building that has the most company offices.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by office_locations.building_id  order by count(*) desc limit 1",
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id  group by buildings.id  order by count(*) desc limit 1",
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings where  buildings.status = \"on-hold\"   order by buildings.stories asc",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct buildings.name from buildings where  buildings.status = \"on-hold\"   order by buildings.stories asc",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings where  buildings.status = \"on-hold\"   order by buildings.stories asc",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct buildings.name from buildings where  buildings.status = \"on-hold\"   order by buildings.stories asc",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry , count(*) from Companies  group by companies.industry",
        "question": "Please show each industry and the corresponding number of companies in that industry.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry , count(*) from Companies  group by companies.industry",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry from Companies  group by companies.industry  order by count(*) desc",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.industry from Companies  group by companies.industry  order by count(*) desc",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry from Companies  group by companies.industry  order by count(*) desc",
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.industry from Companies  group by companies.industry  order by count(*) desc",
        "question": "Sort all the industries in descending order of the count of companies in each industry",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry from Companies  group by companies.industry  order by count(*) desc limit 1",
        "question": "List the industry shared by the most companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.industry from Companies  group by companies.industry  order by count(*) desc limit 1",
        "question": "List the industry shared by the most companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry from Companies  group by companies.industry  order by count(*) desc limit 1",
        "question": "Which industry has the most companies?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings where  buildings.id not in (select Office_locations.building_id from Office_locations  )",
        "question": "List the names of buildings that have no company office.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings   except select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id",
        "question": "List the names of buildings that have no company office.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings   except select buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id",
        "question": "Which buildings do not have any company office? Give me the building names.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select buildings.name from buildings where  buildings.id not in (select Office_locations.building_id from Office_locations  )",
        "question": "Which buildings do not have any company office? Give me the building names.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct buildings.name from buildings   except select distinct buildings.name from Office_locations join buildings on Office_locations.building_id = buildings.id",
        "question": "Which buildings do not have any company office? Give me the building names.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct buildings.name from buildings where  buildings.id not in (select Office_locations.building_id from Office_locations  )",
        "question": "Which buildings do not have any company office? Give me the building names.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry from Companies where  companies.headquarters = \"USA\"   intersect select companies.industry from Companies where  companies.headquarters = \"China\"",
        "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.industry from Companies where  companies.headquarters = \"USA\"   intersect select distinct companies.industry from Companies where  companies.headquarters = \"China\"",
        "question": "Show the industries shared by companies whose headquarters are \"USA\" and companies whose headquarters are \"China\".",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.industry from Companies where  companies.headquarters = \"USA\"   intersect select companies.industry from Companies where  companies.headquarters = \"China\"",
        "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.industry from Companies where  companies.headquarters = \"USA\"   intersect select distinct companies.industry from Companies where  companies.headquarters = \"China\"",
        "question": "Which industries have both companies with headquarter in \"USA\" and companies with headquarter in \"China\"?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select count(*) from Companies where  companies.industry = \"Banking\" or companies.industry = \"Conglomerate\"",
        "question": "Find the number of companies whose industry is \"Banking\" or \"Conglomerate\",",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select count(*) from Companies where  companies.industry = \"Banking\" or companies.industry = \"Conglomerate\"",
        "question": "How many companies are in either \"Banking\" industry or \"Conglomerate\" industry?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.headquarters from Companies  group by companies.headquarters having  count(*) > 2",
        "question": "Show the headquarters shared by more than two companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.headquarters from Companies  group by companies.headquarters having  count(*) > 2",
        "question": "Show the headquarters shared by more than two companies.",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select companies.headquarters from Companies  group by companies.headquarters having  count(*) > 2",
        "question": "Which headquarter locations are used by more than 2 companies?",
        "correctness": 1
    },
    {
        "db_id": "company_office",
        "query": "select distinct companies.headquarters from Companies  group by companies.headquarters having  count(*) > 2",
        "question": "Which headquarter locations are used by more than 2 companies?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select count(*) from artwork",
        "question": "How many artworks are there?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.name from artwork   order by artwork.name asc",
        "question": "List the name of artworks in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.name from artwork   order by artwork.name asc",
        "question": "List the name of artworks in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.name from artwork where  artwork.type != \"Program Talent Show\"",
        "question": "List the name of artworks whose type is not \"Program Talent Show\".",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.name from artwork where  artwork.type != \"Program Talent Show\"",
        "question": "List the name of artworks whose type is not \"Program Talent Show\".",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_name , festival_detail.location from festival_detail",
        "question": "What are the names and locations of festivals?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct festival_detail.festival_name , festival_detail.location from festival_detail",
        "question": "What are the names and locations of festivals?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.chair_name from festival_detail   order by festival_detail.year asc",
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct festival_detail.chair_name from festival_detail   order by festival_detail.year asc",
        "question": "What are the names of the chairs of festivals, sorted in ascending order of the year held?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.location from festival_detail   order by festival_detail.num_of_audience desc limit 1",
        "question": "What is the location of the festival with the largest number of audience?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_name from festival_detail where  festival_detail.year = 2007",
        "question": "What are the names of festivals held in year 2007?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct festival_detail.festival_name from festival_detail where  festival_detail.year = 2007",
        "question": "What are the names of festivals held in year 2007?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_name from festival_detail where  festival_detail.year = \"2007\"",
        "question": "What are the names of festivals held in year 2007?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select avg(festival_detail.num_of_audience) from festival_detail",
        "question": "What is the average number of audience for festivals?",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_name from festival_detail   order by festival_detail.year desc limit 3",
        "question": "Show the names of the three most recent festivals.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct festival_detail.festival_name from festival_detail   order by festival_detail.year desc limit 3",
        "question": "Show the names of the three most recent festivals.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.name , festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID",
        "question": "For each nomination, show the name of the artwork and name of the festival where it is nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.type from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  festival_detail.year = 2007 and nomination.result = \"Nominated\"",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.type from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  festival_detail.year = 2007",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.type from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  festival_detail.year = 2007 and nomination.result != \"Nominated\"",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.type from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  festival_detail.year = 2007 and artwork.type != \"Nominated\"",
        "question": "Show distinct types of artworks that are nominated in festivals in 2007.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID   order by festival_detail.year asc",
        "question": "Show the names of artworks in ascending order of the year they are nominated in.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID   order by festival_detail.year asc",
        "question": "Show the names of artworks in ascending order of the year they are nominated in.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  artwork.type = \"Program Talent Show\"",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  artwork.type = \"Program Talent Show\" and nomination.result = \"Nominated\"",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID where  artwork.type = \"Program Talent Show\"",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_id , festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID  group by nomination.festival_id having  count(*) >= 2",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select nomination.festival_id , festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID  group by nomination.festival_id having  count(*) >= 2",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_id , festival_detail.festival_name from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID  group by festival_detail.festival_name having  count(*) >= 2",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select nomination.festival_id , festival_detail.festival_name , count(*) from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID  group by nomination.festival_id",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select nomination.festival_id , festival_detail.festival_name , count(*) from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID join artwork on nomination.Artwork_ID = artwork.Artwork_ID  group by nomination.festival_id",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.festival_id , festival_detail.festival_name , count(*) from nomination join festival_detail on nomination.Festival_ID = festival_detail.Festival_ID  group by nomination.festival_id",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.type , count(*) from artwork  group by artwork.type",
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.type , count(*) from artwork  group by artwork.type",
        "question": "Please show different types of artworks with the corresponding number of artworks of each type.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.type from artwork  group by artwork.type  order by count(*) desc limit 1",
        "question": "List the most common type of artworks.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.type from artwork  group by artwork.type  order by count(*) desc limit 1",
        "question": "List the most common type of artworks.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.year from festival_detail  group by festival_detail.year having  count(*) > 1",
        "question": "List the year in which there are more than one festivals.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct festival_detail.year from festival_detail  group by festival_detail.year having  count(*) > 1",
        "question": "List the year in which there are more than one festivals.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.name from artwork where  artwork.artwork_id not in (select nomination.Artwork_ID from nomination  )",
        "question": "List the name of artworks that are not nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select artwork.name from artwork   except select artwork.name from nomination join artwork on nomination.Artwork_ID = artwork.Artwork_ID",
        "question": "List the name of artworks that are not nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select distinct artwork.name from artwork where  artwork.artwork_id not in (select nomination.Artwork_ID from nomination  )",
        "question": "List the name of artworks that are not nominated.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.num_of_audience from festival_detail where  festival_detail.year = 2008 or festival_detail.year = 2010",
        "question": "Show the number of audience in year 2008 or 2010.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.num_of_audience from festival_detail where  festival_detail.year = \"2008\" or festival_detail.year = 2010",
        "question": "Show the number of audience in year 2008 or 2010.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select festival_detail.num_of_audience from festival_detail where  festival_detail.year = \"2008\" or festival_detail.year = \"2010\"",
        "question": "Show the number of audience in year 2008 or 2010.",
        "correctness": 1
    },
    {
        "db_id": "entertainment_awards",
        "query": "select sum(festival_detail.num_of_audience) from festival_detail",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select count(*) from Premises",
        "question": "How many premises are there?",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct premises.premises_type from Premises",
        "question": "What are all the distinct premise types?",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select premises.premises_type , premises.premise_details from Premises   order by premises.premises_type asc",
        "question": "Find the types and details for all premises and order by the premise type.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct premises.premises_type , premises.premise_details from Premises   order by premises.premises_type asc",
        "question": "Find the types and details for all premises and order by the premise type.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select premises.premises_type , count(*) from Premises  group by premises.premises_type",
        "question": "Show each premise type and the number of premises in that type.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct premises.premises_type , count(*) from Premises  group by premises.premises_type",
        "question": "Show each premise type and the number of premises in that type.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct mailshot_campaigns.product_category , count(*) from Mailshot_Campaigns  group by mailshot_campaigns.product_category",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select mailshot_campaigns.product_category , count(*) from Mailshot_Campaigns  group by mailshot_campaigns.product_category",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name , customers.customer_phone from Customers   except select customers.customer_name , customers.customer_phone from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id",
        "question": "Show the name and phone of the customer without any mailshot.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name , customers.customer_phone from Customers where  customers.customer_id not in (select Mailshot_Customers.customer_id from Mailshot_Customers  )",
        "question": "Show the name and phone of the customer without any mailshot.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_phone , customers.customer_name from Customers   except select customers.customer_phone , customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id",
        "question": "Show the name and phone of the customer without any mailshot.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name , customers.customer_phone from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"No Response\"",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select mailshot_customers.outcome_code , count(*) from Mailshot_Customers  group by mailshot_customers.outcome_code",
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select mailshot_customers.outcome_code , count(*) from Mailshot_Customers join Mailshot_Campaigns on Mailshot_Customers.mailshot_id = Mailshot_Campaigns.mailshot_id  group by mailshot_customers.outcome_code",
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct mailshot_customers.outcome_code , count(*) from Mailshot_Customers  group by mailshot_customers.outcome_code",
        "question": "Show the outcome code of mailshots along with the number of mailshots in each outcome code.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"Order\"  group by customers.customer_name having  count(*) >= 2",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"Order\"  group by customers.customer_name having  count(*) >= 2",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"Order\"  group by mailshot_customers.customer_id having  count(*) >= 2",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id  group by mailshot_customers.customer_id  order by count(*) desc limit 1",
        "question": "Show the names of customers who have the most mailshots.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id  group by mailshot_customers.customer_id  order by count(*) desc limit 1",
        "question": "Show the names of customers who have the most mailshots.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id  group by customers.customer_name  order by count(*) desc limit 1",
        "question": "Show the names of customers who have the most mailshots.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name , customers.payment_method from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"Order\"   intersect select customers.customer_name , customers.payment_method from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"No Response\"",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customers.customer_name , customers.payment_method from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"Order\"   intersect select distinct customers.customer_name , customers.payment_method from Mailshot_Customers join Customers on Mailshot_Customers.customer_id = Customers.customer_id where  mailshot_customers.outcome_code = \"No Response\"",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select premises.premises_type , customer_addresses.address_type_code from Customer_Addresses join Premises on Customer_Addresses.premise_id = Premises.premise_id",
        "question": "Show the premise type and address type code for all customer addresses.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customer_addresses.address_type_code from Customer_Addresses",
        "question": "What are the distinct address type codes for all customer addresses?",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customer_addresses.address_type_code from Customer_Addresses  group by customer_addresses.address_type_code",
        "question": "What are the distinct address type codes for all customer addresses?",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customer_addresses.address_type_code from Customer_Addresses  group by customer_addresses.customer_id",
        "question": "What are the distinct address type codes for all customer addresses?",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customer_orders.order_shipping_charges , customer_orders.customer_id from Customer_Orders where  customer_orders.order_status_code = \"Cancelled\" or customer_orders.order_status_code = \"Paid\"",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.shipping_method_code = \"FedEx\" and customer_orders.order_status_code = \"Paid\"",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "correctness": 1
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "query": "select distinct customers.customer_name from Customer_Orders join Customers on Customer_Orders.customer_id = Customers.customer_id where  customer_orders.shipping_method_code = \"FedEx\" and customer_orders.order_status_code = \"Paid\"",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count(*) from Course",
        "question": "How many courses are there in total?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count(*) from Course",
        "question": "Count the number of courses.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count(*) from Course where  course.credits > 2",
        "question": "How many courses have more than 2 credits?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count(*) from Course where  course.credits > 2",
        "question": "Count the number of courses with more than 2 credits.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course where  course.credits = 1",
        "question": "List all names of courses with 1 credit?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct course.cname from Course where  course.credits = 1",
        "question": "List all names of courses with 1 credit?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course  group by course.cname having  sum(course.credits) = 1",
        "question": "List all names of courses with 1 credit?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course where  course.credits = 1",
        "question": "What are the names of courses with 1 credit?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course  group by course.cname having  sum(course.credits) = 1",
        "question": "What are the names of courses with 1 credit?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct course.cname from Course where  course.credits = 1",
        "question": "What are the names of courses with 1 credit?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course where  course.days = \"MTW\"",
        "question": "Which courses are taught on days MTW?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course where  course.days = \"MTW\"",
        "question": "What are the course names for courses taught on MTW?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count(*) from Department where  department.division = \"AS\"",
        "question": "What is the number of departments in Division \"AS\"?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count(*) from Department where  department.division = \"AS\"",
        "question": "How many departments are in the division AS?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dphone from Department where  department.room = 268",
        "question": "What are the phones of departments in Room 268?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dphone from Department where  department.room = 268",
        "question": "What are the phones of departments in Room 268?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dphone from Department where  department.room = 268",
        "question": "Give the phones for departments in room 268.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dphone from Department where  department.room = 268",
        "question": "Give the phones for departments in room 268.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select count( distinct student.stuid) from Enrolled_in join Student on Enrolled_in.StuID = Student.StuID where  enrolled_in.grade = \"B\"",
        "question": "Find the number of students that have at least one grade \"B\".",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select max(gradeconversion.gradepoint) , min(gradeconversion.gradepoint) from Gradeconversion",
        "question": "Find the max and min grade point for all letter grade.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select min(gradeconversion.gradepoint) , max(gradeconversion.gradepoint) from Gradeconversion",
        "question": "Find the max and min grade point for all letter grade.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select max(gradeconversion.gradepoint) , min(gradeconversion.gradepoint) from Gradeconversion",
        "question": "What are the maximum and minumum grade points?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct student.fname from Student where  student.fname like \"%a%\"",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct student.fname from Student where  student.fname like \"%a%\"",
        "question": "What are the first names for students who have an \"a\" in their first name?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.fname , faculty.lname from Faculty where  faculty.sex = \"M\" and faculty.building = \"NEB\"",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.lname , faculty.fname from Faculty where  faculty.sex = \"M\" and faculty.building = \"NEB\"",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.fname , faculty.lname from Faculty where  faculty.sex = \"M\" and faculty.building = \"NEB\"",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.lname , faculty.fname from Faculty where  faculty.sex = \"M\" and faculty.building = \"NEB\"",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.fname , faculty.lname from Faculty where  faculty.sex = \"M\" and faculty.building = \"NEB\"",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.fname , faculty.lname from Faculty where  faculty.sex = \"M\" and faculty.building = \"NEB\"",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.room from Faculty where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.room from Faculty where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.room from Faculty where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.room from Faculty where  faculty.rank = \"Professor\" and faculty.building = \"NEB\"",
        "question": "What are the rooms for members of the faculty who are professors and who live in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.building = \"Mergenthaler\"",
        "question": "Find the department name that is in Building \"Mergenthaler\".",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dname from Department where  department.building = \"Mergenthaler\"",
        "question": "Find the department name that is in Building \"Mergenthaler\".",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.building = \"Mergenthaler\"",
        "question": "What is the name of the department in the Building Mergenthaler?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dname from Department where  department.building = \"Mergenthaler\"",
        "question": "What is the name of the department in the Building Mergenthaler?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select * from Course   order by course.credits asc",
        "question": "List all information about courses sorted by credits in the ascending order.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct * from Course   order by course.credits asc",
        "question": "List all information about courses sorted by credits in the ascending order.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select * from Course   order by course.credits asc",
        "question": "What is all the information about courses, ordered by credits ascending?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct * from Course   order by course.credits asc",
        "question": "What is all the information about courses, ordered by credits ascending?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course   order by course.credits asc",
        "question": "List the course name of courses sorted by credits.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course   order by course.credits asc",
        "question": "What are the course names, ordered by credits?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.fname from Student   order by student.age desc",
        "question": "Find the first name of students in the descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.fname from Student   order by student.age desc",
        "question": "What are the first names of students, ordered by age from greatest to least?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.lname from Student where  student.sex = \"F\"   order by student.age desc",
        "question": "Find the last name of female (sex is F) students in the descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.lname from Student where  student.sex = \"F\"   order by student.age desc",
        "question": "What are the last names of female students, ordered by age descending?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.lname from Faculty where  faculty.building = \"Barton\"   order by faculty.lname asc",
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.lname from Faculty where  faculty.building = \"Barton\"   order by faculty.lname asc",
        "question": "Find the last names of faculties in building Barton in alphabetic order.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.lname from Faculty where  faculty.building = \"Barton\"   order by faculty.lname asc",
        "question": "What are the last names of faculty in building Barton, sorted by last name?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.lname from Faculty where  faculty.building = \"Barton\"   order by faculty.lname asc",
        "question": "What are the last names of faculty in building Barton, sorted by last name?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.fname from Faculty where  faculty.rank = \"Professor\"   order by faculty.fname asc",
        "question": "Find the first names of faculties of rank Professor in alphabetic order.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.fname from Faculty where  faculty.rank = \"Professor\"   order by faculty.fname asc",
        "question": "What are the first names for all faculty professors, ordered by first name?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO join Student on Minor_in.StuID = Student.StuID  group by minor_in.dno  order by count(*) desc limit 1",
        "question": "Find the name of the department that has the biggest number of students minored in?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO join Student on Minor_in.StuID = Student.StuID  group by minor_in.dno  order by count(*) desc limit 1",
        "question": "What is the name of the department with the most students minoring in it?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department   except select department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO",
        "question": "Find the name of the department that has no students minored in?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.dno not in (select Minor_in.DNO from Minor_in  )",
        "question": "Find the name of the department that has no students minored in?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department   except select department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO join Student on Minor_in.StuID = Student.StuID",
        "question": "Find the name of the department that has no students minored in?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dname from Department   except select distinct department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO",
        "question": "Find the name of the department that has no students minored in?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department   except select department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO",
        "question": "What is the name of the department htat has no students minoring in it?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.dno not in (select Minor_in.DNO from Minor_in  )",
        "question": "What is the name of the department htat has no students minoring in it?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department   except select department.dname from Minor_in join Department on Minor_in.DNO = Department.DNO join Student on Minor_in.StuID = Student.StuID",
        "question": "What is the name of the department htat has no students minoring in it?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Member_of join Department on Member_of.DNO = Department.DNO  group by member_of.dno  order by count(*) asc limit 1",
        "question": "Find the name of the department that has the fewest members.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Member_of join Department on Member_of.DNO = Department.DNO  group by department.dname  order by count(*) asc limit 1",
        "question": "Find the name of the department that has the fewest members.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Member_of join Department on Member_of.DNO = Department.DNO  group by member_of.dno  order by count(*) asc limit 1",
        "question": "What is the name of the department with the fewest members?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.dno in (select Member_of.DNO from Member_of  group by Member_of.DNO  order by count(*) asc limit 1 )",
        "question": "What is the name of the department with the fewest members?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Member_of join Department on Member_of.DNO = Department.DNO  group by Member_of.DNO  order by count(*) asc limit 1",
        "question": "What is the name of the department with the fewest members?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.rank from Faculty  group by faculty.rank  order by count(*) asc limit 1",
        "question": "Find the rank of the faculty that the fewest faculties belong to.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.rank from Faculty  group by faculty.rank  order by count(*) - faculty.rank asc limit 1",
        "question": "Find the rank of the faculty that the fewest faculties belong to.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.rank from Faculty  group by faculty.rank  order by count(*) asc limit 1",
        "question": "What is the least common faculty rank?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.fname , faculty.lname from Course join Faculty on Course.Instructor = Faculty.FacID  group by course.instructor  order by count(*) desc limit 3",
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.building from Course join Faculty on Course.Instructor = Faculty.FacID  group by faculty.rank, course.instructor  order by count(*) desc limit 1",
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.building from Course join Faculty on Course.Instructor = Faculty.FacID  group by faculty.rank, faculty.sex, course.instructor  order by count(*) desc limit 1",
        "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Enrolled_in join Course on Enrolled_in.CID = Course.CID  group by enrolled_in.cid having  count(*) >= 5",
        "question": "What are the name of courses that have at least five enrollments?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Enrolled_in join Course on Enrolled_in.CID = Course.CID  group by enrolled_in.cid having  count(*) >= 5",
        "question": "Give the names of the courses with at least five enrollments.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname , department.room from Course join Department on Course.DNO = Department.DNO where  course.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "question": "Find the department name and room of the course INTRODUCTION TO COMPUTER SCIENCE.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname , department.room from Course join Department on Course.DNO = Department.DNO where  course.cname = \"INTRODUCTION TO COMPUTER SCIENCE\"",
        "question": "What are the department name and room for the course INTRODUCTION TO COMPUTER SCIENCE?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.fname , student.lname , gradeconversion.gradepoint from Enrolled_in join Gradeconversion on Enrolled_in.Grade = Gradeconversion.lettergrade join Student on Enrolled_in.StuID = Student.StuID",
        "question": "What are the full names and gradepoints for all enrollments?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.fname , student.lname from Minor_in join Student on Minor_in.StuID = Student.StuID where  minor_in.dno = 140",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct student.fname , student.lname from Minor_in join Student on Minor_in.StuID = Student.StuID where  minor_in.dno = 140",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.lname , student.fname from Minor_in join Student on Minor_in.StuID = Student.StuID where  minor_in.dno = 140",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.lname from Member_of join Department on Member_of.DNO = Department.DNO join Faculty on Member_of.FacID = Faculty.FacID where  department.dname = \"Computer Science\"",
        "question": "Find the last names of faculties who are members of computer science department.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.lname from Member_of join Department on Member_of.DNO = Department.DNO join Faculty on Member_of.FacID = Faculty.FacID where  department.dname = \"Computer Science\"",
        "question": "Find the last names of faculties who are members of computer science department.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select faculty.lname from Member_of join Department on Member_of.DNO = Department.DNO join Faculty on Member_of.FacID = Faculty.FacID where  department.dname = \"Computer Science\"",
        "question": "What are the last names of faculty who are part of the computer science department?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct faculty.lname from Member_of join Department on Member_of.DNO = Department.DNO join Faculty on Member_of.FacID = Faculty.FacID where  department.dname = \"Computer Science\"",
        "question": "What are the last names of faculty who are part of the computer science department?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select avg(gradeconversion.gradepoint) from Enrolled_in join Gradeconversion on Enrolled_in.Grade = Gradeconversion.lettergrade join Student on Enrolled_in.StuID = Student.StuID where  student.lname = \"Smith\"",
        "question": "Find the average grade point of student whose last name is Smith.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select avg(gradeconversion.gradepoint) from Enrolled_in join Gradeconversion on Enrolled_in.Grade = Gradeconversion.lettergrade join Student on Enrolled_in.StuID = Student.StuID where  student.lname = \"Smith\"",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select max(gradeconversion.gradepoint) , min(gradeconversion.gradepoint) from Enrolled_in join Gradeconversion on Enrolled_in.Grade = Gradeconversion.lettergrade join Student on Enrolled_in.StuID = Student.StuID where  student.city_code = \"NYC\"",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select max(gradeconversion.gradepoint) , min(gradeconversion.gradepoint) from Enrolled_in join Gradeconversion on Enrolled_in.Grade = Gradeconversion.lettergrade join Student on Enrolled_in.StuID = Student.StuID where  student.city_code = \"NYC\"",
        "question": "Give the maximum and minimum gradepoints for students living in NYC?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course where  course.credits = 3   union select course.cname from Course where  course.credits = 1 and course.hours = 4",
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select course.cname from Course where  course.credits = 3   union select course.cname from Course where  course.credits = 1 and course.hours = 4",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.division = \"AS\"   union select department.dname from Department where  department.division = \"EN\" and department.building = \"NEB\"",
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dname from Department where  department.division = \"AS\"   union select distinct department.dname from Department where  department.division = \"EN\" and department.building = \"NEB\"",
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select department.dname from Department where  department.division = \"AS\"   union select department.dname from Department where  department.division = \"EN\" and department.building = \"NEB\"",
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct department.dname from Department where  department.division = \"AS\"   union select distinct department.dname from Department where  department.division = \"EN\" and department.building = \"NEB\"",
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.fname from Student where  student.stuid not in (select Enrolled_in.StuID from Enrolled_in  )",
        "question": "Find the first name of students not enrolled in any course.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct student.fname from Student where  student.stuid not in (select Enrolled_in.StuID from Enrolled_in  )",
        "question": "Find the first name of students not enrolled in any course.",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select student.fname from Student where  student.stuid not in (select Enrolled_in.StuID from Enrolled_in  )",
        "question": "What are the first names of all students that are not enrolled in courses?",
        "correctness": 1
    },
    {
        "db_id": "college_3",
        "query": "select distinct student.fname from Student where  student.stuid not in (select Enrolled_in.StuID from Enrolled_in  )",
        "question": "What are the first names of all students that are not enrolled in courses?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select count(*) from aircraft",
        "question": "How many aircrafts are there?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select count(*) from aircraft",
        "question": "What is the number of aircraft?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.description from aircraft",
        "question": "List the description of all aircrafts.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.description from aircraft",
        "question": "What are the descriptions for the aircrafts?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select avg(airport.international_passengers) from airport",
        "question": "What is the average number of international passengers of all airports?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select avg(airport.international_passengers) from airport",
        "question": "What is the average number of international passengers for an airport?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select airport.international_passengers , airport.domestic_passengers from airport where  airport.airport_name = \"London Heathrow\"",
        "question": "What are the number of international and domestic passengers of the airport named London \"Heathrow\"?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select airport.international_passengers , airport.domestic_passengers from airport where  airport.airport_name = \"London Heathrow\"",
        "question": "How many international and domestic passengers are there in the airport London Heathrow?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select sum(airport.domestic_passengers) from airport where  airport.airport_name like \"%London%\"",
        "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select sum(airport.domestic_passengers) from airport where  airport.total_passengers in (select airport.total_passengers from airport where  airport.airport_name like \"%London%\"  )",
        "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select sum(airport.domestic_passengers) from airport where  airport.domestic_passengers in (select airport.domestic_passengers from airport where  airport.airport_name like \"%London%\"  )",
        "question": "What are the total number of Domestic Passengers of airports that contain the word \"London\".",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select max(airport.transit_passengers) , min(airport.transit_passengers) from airport",
        "question": "What are the maximum and minimum number of transit passengers of all aiports.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select max(airport.transit_passengers) , min(airport.transit_passengers) from airport",
        "question": "What is the maximum and mininum number of transit passengers for all airports?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age >= 25",
        "question": "What are the name of pilots aged 25 or older?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age >= 25  group by pilot.name having  max(pilot.age) >= 1",
        "question": "What are the name of pilots aged 25 or older?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age >= 25  group by pilot.name having  max(pilot.age) >= 2",
        "question": "What are the name of pilots aged 25 or older?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age >= 25 or pilot.name = \"*\"",
        "question": "What are the name of pilots aged 25 or older?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age >= 25",
        "question": "what is the name of every pilot who is at least 25 years old?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct pilot.name from pilot where  pilot.age >= 25",
        "question": "what is the name of every pilot who is at least 25 years old?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot   order by pilot.name asc",
        "question": "List all pilot names in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct pilot.name from pilot   order by pilot.name asc",
        "question": "List all pilot names in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot   order by pilot.name asc",
        "question": "What are the names of the pilots in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct pilot.name from pilot   order by pilot.name asc",
        "question": "What are the names of the pilots in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age <= 30   order by pilot.name desc",
        "question": "List names of all pilot aged 30 or younger in descending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.age <= 30   order by pilot.name desc",
        "question": "What are the names of all pilots 30 years old or young in descending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Gatwick\"",
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Gatwick\"",
        "question": "Please show the names of aircrafts associated with airport with name \"London Gatwick\".",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Gatwick\"",
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Gatwick\"",
        "question": "What are the names of all the aircrafts associated with London Gatwick airport?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , aircraft.description from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.total_passengers > 10000000",
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , aircraft.description from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID  group by airport.airport_name having  sum(airport.total_passengers) > 10000000",
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.description , aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.total_passengers > 10000000",
        "question": "Please show the names and descriptions of aircrafts associated with airports that have a total number of passengers bigger than 10000000.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , aircraft.description from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.total_passengers > 10000000",
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.description , aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.total_passengers > 10000000",
        "question": "What are the names and descriptions of aircrafts associated with an airport that has more total passengers than 10000000?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select avg(airport.total_passengers) from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  aircraft.aircraft = \"Robinson R-22\"",
        "question": "What is the average total number of passengers of airports that are associated with aircraft \"Robinson R-22\"?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select avg(airport.total_passengers) from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  aircraft.aircraft = \"Robinson R-22\"",
        "question": "What is the average total number of passengers for all airports that the aircraft \"Robinson R-22\" visits?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by match.winning_aircraft  order by count(*) desc limit 1",
        "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by aircraft.aircraft  order by count(*) desc limit 1",
        "question": "List the name of the aircraft that has been named winning aircraft the most number of times.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by match.winning_aircraft  order by count(*) desc limit 1",
        "question": "What is the name of the aircraft that has won an award the most?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , count(*) from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by match.winning_aircraft",
        "question": "List the names of aircrafts and the number of times it won matches.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , count(*) from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by aircraft.aircraft",
        "question": "List the names of aircrafts and the number of times it won matches.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , count(*) from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by match.winning_aircraft",
        "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , count(*) from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by aircraft.aircraft",
        "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft , count(*) from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by aircraft.aircraft_id",
        "question": "For each aircraft that has won an award, what is its name and how many time has it won?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot   order by pilot.age desc",
        "question": "List names of all pilot in descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct pilot.name from pilot   order by pilot.age desc",
        "question": "List names of all pilot in descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot   order by pilot.age desc",
        "question": "What are the names of all pilots listed by descending age?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct pilot.name from pilot   order by pilot.age desc",
        "question": "What are the names of all pilots listed by descending age?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by match.winning_aircraft having  count(*) >= 2",
        "question": "List the names of aircrafts and that won matches at least twice.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by aircraft.aircraft having  count(*) >= 2",
        "question": "List the names of aircrafts and that won matches at least twice.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by match.winning_aircraft having  count(*) >= 2",
        "question": "What are the names of all aircrafts that have won a match at least twice?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from match join aircraft on match.Winning_Aircraft = aircraft.Aircraft_ID  group by aircraft.aircraft_id having  count(*) >= 2",
        "question": "What are the names of all aircrafts that have won a match at least twice?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from aircraft where  aircraft.aircraft_id not in (select match.Winning_Aircraft from match  )",
        "question": "List the names of aircrafts and that did not win any match.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from aircraft where  aircraft.aircraft_id not in (select match.Winning_Aircraft from match  )",
        "question": "What are the names of all aicrafts that have never won any match?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Heathrow\"   intersect select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Gatwick\"",
        "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Gatwick\"   intersect select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Heathrow\"",
        "question": "Show the names of aircrafts that are associated with both an airport named \"London Heathrow\" and an airport named \"London Gatwick\"",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Heathrow\"   intersect select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"Gatwick\"",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Heathrow\"   intersect select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"Gatwick Airport\"",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Heathrow\"   intersect select aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"Gatwick airport\"",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select distinct aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"London Heathrow\"   intersect select distinct aircraft.aircraft from airport_aircraft join aircraft on airport_aircraft.Aircraft_ID = aircraft.Aircraft_ID join airport on airport_aircraft.Airport_ID = airport.Airport_ID where  airport.airport_name = \"Gatwick\"",
        "question": "What are the names of all aircrafts that are associated with both London Heathrow and Gatwick airports?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age < 30  group by pilot.name  order by count(*) desc limit 1",
        "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age < 30  group by pilot.age  order by count(*) desc limit 1",
        "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age < 30  group by match.winning_pilot  order by count(*) desc limit 1",
        "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age <= 30  group by pilot.name  order by count(*) desc limit 1",
        "question": "find the name and age of the pilot who has won the most number of times among the pilots who are younger than 30.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age < 30  group by match.winning_pilot  order by count(*) desc limit 1",
        "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age < 30  group by pilot.pilot_id  order by count(*) desc limit 1",
        "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name , pilot.age from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  pilot.age < 30  group by pilot.name  order by count(*) desc limit 1",
        "question": "What is the name and age of the pilot younger than 30 who has won the most number of times?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.pilot_id not in (select match.Winning_Pilot from match where  match.country = \"Australia\"  )",
        "question": "find the name of pilots who did not win the matches held in the country of Australia.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot   except select pilot.name from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  match.country = \"Australia\"",
        "question": "find the name of pilots who did not win the matches held in the country of Australia.",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot   except select pilot.name from match join pilot on match.Winning_Pilot = pilot.Pilot_Id where  match.country = \"Australia\"",
        "question": "What are the names of the pilots that have not won any matches in Australia?",
        "correctness": 1
    },
    {
        "db_id": "aircraft",
        "query": "select pilot.name from pilot where  pilot.pilot_id not in (select match.Winning_Pilot from match where  match.country = \"Australia\"  )",
        "question": "What are the names of the pilots that have not won any matches in Australia?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select properties.property_id , count(*) from Residents join Properties on Residents.property_id = Properties.property_id  group by residents.property_id",
        "question": "How many residents does each property have? List property id and resident count.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select residents.property_id , count(*) from Residents  group by residents.property_id",
        "question": "How many residents does each property have? List property id and resident count.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select distinct services.service_type_code from Services join Organizations on Services.organization_id = Organizations.organization_id where  organizations.organization_details = \"Denesik and Sons Party\"",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select residents.resident_id , residents.other_details , count(*) from Residents_Services join Residents on Residents_Services.resident_id = Residents.resident_id  group by residents_services.resident_id  order by count(*) desc",
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select residents_services.resident_id , residents.other_details , count(*) from Residents_Services join Residents on Residents_Services.resident_id = Residents.resident_id  group by residents_services.resident_id  order by count(*) desc",
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select residents.resident_id , residents.other_details , count(*) from Residents_Services join Residents on Residents_Services.resident_id = Residents.resident_id  group by residents.resident_id  order by count(*) desc",
        "question": "How many services has each resident requested? List the resident id, details, and the count in descending order of the count.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select things.thing_id , things.type_of_thing_code , organizations.organization_details from Things join Organizations on Things.organization_id = Organizations.organization_id",
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select things.thing_id , things.type_of_thing_code , organizations.organization_details from Things join Organizations on Things.organization_id = Organizations.organization_id  group by things.thing_id",
        "question": "List the id and type of each thing, and the details of the organization that owns it.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customers.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id  group by customer_events.customer_id having  count(*) >= 3",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customers.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id  group by customers.customer_id having  count(*) >= 3",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customer_events.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id  group by customer_events.customer_id having  count(*) >= 3",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customers.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id  group by customer_events.customer_id having  count(*) > 3",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customers.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id  group by customers.customer_id having  count(*) > 3",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customer_events.date_moved_in , customers.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id",
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customer_events.date_moved_in , customer_events.customer_id , customers.customer_details from Customer_Events join Customers on Customer_Events.customer_id = Customers.customer_id",
        "question": "What is each customer's move in date, and the corresponding customer id and details?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select distinct things.thing_id , things.type_of_thing_code from Timed_Status_of_Things join Things on Timed_Status_of_Things.thing_id = Things.thing_id where  timed_status_of_things.status_of_thing_code = \"Close\" or timed_status_of_things.date_and_date < \"2017-06-19 02:59:21\"",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select distinct things.thing_id , things.type_of_thing_code from Timed_Status_of_Things join Things on Timed_Status_of_Things.thing_id = Things.thing_id where  timed_status_of_things.status_of_thing_code = \"Close\" or timed_status_of_things.date_and_date <= \"2017-06-19 02:59:21\"",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select count( distinct timed_locations_of_things.location_code) from Timed_Locations_of_Things join Things on Timed_Locations_of_Things.thing_id = Things.thing_id where  things.service_details = \"Unsatisfied\"",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select count( distinct timed_status_of_things.status_of_thing_code) from Timed_Status_of_Things",
        "question": "How many different status codes of things are there?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select residents.other_details from Residents where  residents.other_details like \"%Miss%\"",
        "question": "What are the resident details containing the substring 'Miss'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select residents.other_details from Residents where  residents.other_details like \"%MISS%\"",
        "question": "What are the resident details containing the substring 'Miss'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select distinct residents.other_details from Residents where  residents.other_details like \"%Miss%\"",
        "question": "What are the resident details containing the substring 'Miss'?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select customer_events.customer_event_id , customer_events.date_moved_in , customer_events.property_id from Customer_Events",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select count(*) from Customers where  customers.customer_id not in (select Customer_Events.customer_id from Customer_Events  )",
        "question": "How many customers did not have any event?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select distinct residents.date_moved_in from Residents",
        "question": "What are the distinct move in dates of the residents?",
        "correctness": 1
    },
    {
        "db_id": "local_govt_and_lot",
        "query": "select distinct residents.date_moved_in from Residents_Services join Residents on Residents_Services.resident_id = Residents.resident_id",
        "question": "What are the distinct move in dates of the residents?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select count(*) from school",
        "question": "How many schools are there?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select count(*) from school",
        "question": "Count the number of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from school   order by school.enrollment asc",
        "question": "List the locations of schools in ascending order of enrollment.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from school   order by school.enrollment asc",
        "question": "List the locations of schools in ascending order of enrollment.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from school   order by school.enrollment asc",
        "question": "What is the list of school locations sorted in ascending order of school enrollment?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from school   order by school.enrollment asc",
        "question": "What is the list of school locations sorted in ascending order of school enrollment?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from school   order by school.founded desc",
        "question": "List the locations of schools in descending order of founded year.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from school   order by school.founded desc",
        "question": "List the locations of schools in descending order of founded year.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from school   order by school.founded desc",
        "question": "What is the list of school locations sorted in descending order of school foundation year?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from school   order by school.founded desc",
        "question": "What is the list of school locations sorted in descending order of school foundation year?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.enrollment from school where  school.denomination != \"Catholic\"",
        "question": "What are the enrollments of schools whose denomination is not \"Catholic\"?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.enrollment from school where  school.denomination != \"Catholic\"",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.enrollment from school where  school.denomination != \"Catholic\" and school.school_id not in (select school.School_ID from school where  school.denomination = \"Catholic\"  )",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.enrollment from school   except select school.enrollment from school where  school.denomination = \"Catholic\"",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.enrollment from school where  school.denomination != \"Catholic\" and school.enrollment not in (select school.enrollment from school where  school.denomination = \"Catholic\"  )",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.enrollment from school where  school.denomination != \"Catholic\" and school.school not in (select school.school from school where  school.denomination = \"Catholic\"  )",
        "question": "List the enrollment for each school that does not have \"Catholic\" as denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select avg(school.enrollment) from school",
        "question": "What is the average enrollment of schools?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select avg(school.enrollment) from school",
        "question": "Take the average of the school enrollment.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team from player   order by player.team asc",
        "question": "What are the teams of the players, sorted in ascending alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team from player   order by player.team asc",
        "question": "Find the team of each player and sort them in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select count( distinct player.position) from player",
        "question": "How many different positions of players are there?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select count( distinct player.position) from player",
        "question": "Count the number of distinct player positions.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team from player   order by player.age desc limit 1",
        "question": "Find the team of the player of the highest age.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team from player   order by player.age desc limit 1",
        "question": "Which team has the oldest player?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team from player   order by player.age desc limit 5",
        "question": "List the teams of the players with the top 5 largest ages.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team from player   order by player.age desc limit 5",
        "question": "What are the teams that have the 5 oldest players?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team , school.location from player join school on player.School_ID = school.School_ID",
        "question": "For each player, show the team and the location of school they belong to.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct player.team , school.location from player join school on player.School_ID = school.School_ID",
        "question": "For each player, show the team and the location of school they belong to.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team , school.location from player join school on player.School_ID = school.School_ID  group by player.player",
        "question": "For each player, show the team and the location of school they belong to.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team , school.location from player join school on player.School_ID = school.School_ID  group by player.team, school.location",
        "question": "For each player, show the team and the location of school they belong to.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select player.team , school.location from player join school on player.School_ID = school.School_ID",
        "question": "What are the team and the location of school each player belongs to?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct player.team , school.location from player join school on player.School_ID = school.School_ID",
        "question": "What are the team and the location of school each player belongs to?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from player join school on player.School_ID = school.School_ID  group by player.school_id having  count(*) > 1",
        "question": "Show the locations of schools that have more than 1 player.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from player join school on player.School_ID = school.School_ID  group by school.location having  count(*) > 1",
        "question": "Show the locations of schools that have more than 1 player.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from player join school on player.School_ID = school.School_ID  group by player.school_id having  count(*) > 1",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from player join school on player.School_ID = school.School_ID  group by school.location having  count(*) > 1",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from player join school on player.School_ID = school.School_ID  group by player.school_id having  count(*) > 1",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from player join school on player.School_ID = school.School_ID  group by school.location having  count(*) > 1",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from player join school on player.School_ID = school.School_ID  group by player.school_id  order by count(*) desc limit 1",
        "question": "Show the denomination of the school that has the most players.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from player join school on player.School_ID = school.School_ID  group by player.school_id  order by count(*) desc limit 1",
        "question": "What is the denomination of the school the most players belong to?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location , school_details.nickname from school_details join school on school_details.School_ID = school.School_ID",
        "question": "Show locations and nicknames of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location , school_details.nickname from school_details join school on school_details.School_ID = school.School_ID",
        "question": "Show locations and nicknames of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location , school_details.nickname from school_details join school on school_details.School_ID = school.School_ID",
        "question": "What are the location and nickname of each school?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location , school_details.nickname from school_details join school on school_details.School_ID = school.School_ID",
        "question": "What are the location and nickname of each school?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination , count(*) from school  group by school.denomination",
        "question": "Please show different denominations and the corresponding number of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination , count(*) from school  group by school.denomination",
        "question": "Please show different denominations and the corresponding number of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination , count(*) from school_details join school on school_details.School_ID = school.School_ID  group by school.denomination",
        "question": "Please show different denominations and the corresponding number of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination , count(*) from school  group by school.denomination",
        "question": "For each denomination, return the denomination and the count of schools with that denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination , count(*) from school  group by school.denomination",
        "question": "For each denomination, return the denomination and the count of schools with that denomination.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination , count(*) from school  group by school.denomination  order by count(*) desc",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination , count(*) from school_details join school on school_details.School_ID = school.School_ID  group by school.denomination  order by count(*) desc",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination , count(*) from school  group by school.denomination  order by count(*) desc",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination , count(*) from school  group by school.denomination  order by count(*) desc",
        "question": "Order denominations in descending order of the count of schools with the denomination. Return each denomination with the count of schools.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.school_colors from school   order by school.enrollment desc limit 1",
        "question": "List the school color of the school that has the largest enrollment.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.school_colors from school   order by school.enrollment desc limit 1",
        "question": "What is the school color of the school with the largest enrollment?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from school where  school.school_id not in (select player.School_ID from player  )",
        "question": "List the locations of schools that do not have any player.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from school where  school.school_id not in (select player.School_ID from player  )",
        "question": "List the locations of schools that do not have any player.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.location from school where  school.school_id not in (select player.School_ID from player  )",
        "question": "Which schools do not have any player? Give me the school locations.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.location from school where  school.school_id not in (select player.School_ID from player  )",
        "question": "Which schools do not have any player? Give me the school locations.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from school where  school.founded < 1890   intersect select school.denomination from school where  school.founded > 1900",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination from school where  school.founded < 1890   intersect select distinct school.denomination from school where  school.founded > 1900",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from school where  school.founded < 1890   intersect select school.denomination from school where  school.founded > 1900",
        "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination from school where  school.founded < 1890   intersect select distinct school.denomination from school where  school.founded > 1900",
        "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from school  group by school.denomination having  count(*) > 1",
        "question": "Show the denomination shared by more than one school.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination from school  group by school.denomination having  count(*) > 1",
        "question": "Show the denomination shared by more than one school.",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from school  group by school.denomination having  count(*) > 1",
        "question": "What are the denomination more than one school have?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select distinct school.denomination from school  group by school.denomination having  count(*) > 1",
        "question": "What are the denomination more than one school have?",
        "correctness": 1
    },
    {
        "db_id": "school_player",
        "query": "select school.denomination from school  group by school.denomination having  count( distinct school.school) > 1",
        "question": "What are the denomination more than one school have?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from district   order by district.city_area desc",
        "question": "Find all the distinct district names ordered by city area in descending.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from district  group by district.district_name  order by district.city_area desc",
        "question": "Find all the distinct district names ordered by city area in descending.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district   order by district.city_area desc",
        "question": "Find all the distinct district names ordered by city area in descending.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from district   order by district.city_area desc",
        "question": "What are the different district names in order of descending city area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district   order by district.city_area desc",
        "question": "What are the different district names in order of descending city area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from district  group by district.district_name  order by district.city_area desc",
        "question": "What are the different district names in order of descending city area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.max_page_size from product  group by product.max_page_size having  count(*) > 3",
        "question": "Find the list of page size which have more than 3 product listed",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.max_page_size from product  group by product.max_page_size having  count(*) > 3",
        "question": "Find the list of page size which have more than 3 product listed",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.max_page_size from product  group by product.max_page_size having  count(*) > 3",
        "question": "What is the maximum page size for everything that has more than 3 products listed?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name , district.city_population from district where  district.city_population between 200000 and 2000000",
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name , district.city_population from district where  district.city_population between 200000 and 2000000",
        "question": "Find the name and population of district with population between 200000 and 2000000",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district where  district.city_area > 10 or district.city_population > 100000",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from district where  district.city_area > 10 or district.city_population > 100000",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district where  district.city_area > 10 or district.city_population > 10",
        "question": "Find the name all districts with city area greater than 10 or population larger than 100000",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district where  district.city_area > 10 or district.city_population > 100000",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from district where  district.city_area > 10 or district.city_population > 100000",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district where  district.city_area > 10 or district.city_population > 10000",
        "question": "What are the names of all districts with a city area greater than 10 or have more than 100000 people living there?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district   order by district.city_population desc limit 1",
        "question": "Which district has the largest population?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district  group by district.district_name  order by sum(district.city_population) desc limit 1",
        "question": "Which district has the largest population?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district  group by district.district_name  order by district.city_population desc limit 1",
        "question": "Which district has the largest population?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district   order by district.city_population desc limit 1",
        "question": "What is the name of the district with the most residents?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district  group by district.district_name  order by sum(district.city_population) desc limit 1",
        "question": "What is the name of the district with the most residents?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district  group by district.district_id  order by sum(district.city_population) desc limit 1",
        "question": "What is the name of the district with the most residents?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district   order by district.city_area asc limit 1",
        "question": "Which district has the least area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district  group by district.district_name  order by sum(district.city_area) asc limit 1",
        "question": "Which district has the least area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district  group by district.district_id  order by sum(district.city_area) asc limit 1",
        "question": "Which district has the least area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from district   order by district.city_area asc limit 1",
        "question": "What is the name of the district with the smallest area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select sum(district.city_population) from district   order by district.city_area desc limit 3",
        "question": "Find the total population of the top 3 districts with the largest area.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select store.type , count(*) from store  group by store.type",
        "question": "Find all types of store and number of them.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct store.type , count(*) from store  group by store.type",
        "question": "Find all types of store and number of them.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select count(*) , store.type from store  group by store.type",
        "question": "Find all types of store and number of them.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select store.type , count(*) from store  group by store.type",
        "question": "For each type of store, how many of them are there?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct store.type , count(*) from store  group by store.type",
        "question": "For each type of store, how many of them are there?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select count(*) , store.type from store  group by store.type",
        "question": "For each type of store, how many of them are there?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select store.store_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  district.district_name = \"Khanewal District\"",
        "question": "Find the names of all stores in Khanewal District.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct store.store_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  district.district_name = \"Khanewal District\"",
        "question": "Find the names of all stores in Khanewal District.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select store.store_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  district.district_name = \"Khanewal District\"",
        "question": "What are the names of all the stores located in Khanewal District?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct store.store_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  district.district_name = \"Khanewal District\"",
        "question": "What are the names of all the stores located in Khanewal District?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.store_name = \"Blackville\"",
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.store_name = \"Blackville\"",
        "question": "Which city is the headquarter of the store named \"Blackville\" in?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.store_name = \"Blackville\"",
        "question": "What city is the headquarter of the store Blackville?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.store_name = \"Blackville\"",
        "question": "What city is the headquarter of the store Blackville?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city , count(*) from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city",
        "question": "Find the number of stores in each city.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.headquartered_city , count(*) from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city",
        "question": "Find the number of stores in each city.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select count(*) , district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city",
        "question": "Find the number of stores in each city.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city , count(*) from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city",
        "question": "How many stores are headquarted in each city?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select count(*) , district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city",
        "question": "How many stores are headquarted in each city?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.headquartered_city , count(*) from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city",
        "question": "How many stores are headquarted in each city?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city  order by count(*) desc limit 1",
        "question": "Find the city with the most number of stores.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city  order by count(*) desc limit 1",
        "question": "Find the city with the most number of stores.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city  order by count(*) desc limit 1",
        "question": "What is the city with the most number of flagship stores?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.headquartered_city from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID  group by district.headquartered_city  order by count( distinct store.store_name) desc limit 1",
        "question": "What is the city with the most number of flagship stores?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select avg(product.pages_per_minute_color) from product",
        "question": "What is the average pages per minute color?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select avg(product.pages_per_minute_color) from product",
        "question": "What is the average number of pages per minute color?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" and product.pages_per_minute_color < 5",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.product from product where  product.max_page_size = \"A4\" and product.pages_per_minute_color < 5",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" and product.pages_per_minute_color <= 5",
        "question": "Find products with max page size as \"A4\" and pages per minute color smaller than 5.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" and product.pages_per_minute_color < 5",
        "question": "What are the products with the maximum page size A4 that also have a pages per minute color smaller than 5?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" or product.pages_per_minute_color < 5",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.product from product where  product.max_page_size = \"A4\" or product.pages_per_minute_color < 5",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" or product.pages_per_minute_color <= 5",
        "question": "Find products with max page size as \"A4\" or pages per minute color smaller than 5.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" or product.pages_per_minute_color < 5",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size >= \"A4\" or product.pages_per_minute_color < 5",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.product from product where  product.max_page_size = \"A4\" or product.pages_per_minute_color < 5",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.max_page_size = \"A4\" or product.pages_per_minute_color <= 5",
        "question": "What are the products with the maximum page size eqal to A4 or a pages per minute color less than 5?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.product from product where  product.product like \"%Scanner%\"",
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.product like \"%Scanner%\"",
        "question": "Find all the product whose name contains the word \"Scanner\".",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product where  product.product like \"%Scanner%\"",
        "question": "What are all of the products whose name includes the substring \"Scanner\"?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.product from product where  product.product like \"%Scanner%\"",
        "question": "What are all of the products whose name includes the substring \"Scanner\"?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.max_page_size from product  group by product.max_page_size  order by count(*) desc limit 1",
        "question": "Find the most prominent max page size among all the products.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.max_page_size from product  group by product.max_page_size  order by product.max_page_size desc limit 1",
        "question": "Find the most prominent max page size among all the products.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct product.max_page_size from product   order by product.max_page_size desc limit 1",
        "question": "Find the most prominent max page size among all the products.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.max_page_size from product  group by product.max_page_size  order by count(*) desc limit 1",
        "question": "What is the most common maximum page size?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product   except select product.product from product where  product.max_page_size = 100",
        "question": "Find the name of the products that are not using the most frequently-used max page size.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product   except select product.product from product where  product.max_page_size = 100",
        "question": "What are the names of all products that are not the most frequently-used maximum page size?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select product.product from product   except select product.product from product where  product.max_page_size = \"1\"",
        "question": "What are the names of all products that are not the most frequently-used maximum page size?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select sum(district.city_population) from district where  district.city_area > (select avg(district.city_area) from district  )",
        "question": "Find the total population of the districts where the area is bigger than the average city area.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select sum(district.city_population) from district where  district.city_area > (select avg(district.city_area) from district  )",
        "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select sum(district.city_population) from district where  district.city_area >= (select avg(district.city_area) from district  )",
        "question": "What is the total population for all the districts that have an area larger tahn the average city area?",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select district.district_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.type = \"City Mall\"   intersect select district.district_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.type = \"Village Store\"",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "correctness": 1
    },
    {
        "db_id": "store_product",
        "query": "select distinct district.district_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.type = \"City Mall\"   intersect select distinct district.district_name from store_district join district on store_district.District_ID = district.District_ID join store on store_district.Store_ID = store.Store_ID where  store.type = \"Village Store\"",
        "question": "Find the names of districts where have both city mall and village store type stores.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select count(*) from device",
        "question": "How many devices are there?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select count(*) from device",
        "question": "Count the number of devices.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device   order by device.carrier asc",
        "question": "List the carriers of devices in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.carrier from device   order by device.carrier asc",
        "question": "List the carriers of devices in ascending alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.carrier from device   order by device.carrier asc",
        "question": "What are the different carriers for devices, listed in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device   order by device.carrier asc",
        "question": "What are the different carriers for devices, listed in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device where  device.software_platform != \"Android\"",
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.carrier from device where  device.software_platform != \"Android\"",
        "question": "What are the carriers of devices whose software platforms are not \"Android\"?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device where  device.software_platform != \"Android\"",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device   except select device.carrier from device where  device.software_platform = \"Android\"",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device where  device.device_id not in (select device.Device_ID from device where  device.software_platform = \"Android\"  )",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device where  device.software_platform != \"Android\" and device.carrier not in (select device.carrier from device where  device.software_platform = \"Android\"  )",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.carrier from device where  device.software_platform != \"Android\"",
        "question": "Return the device carriers that do not have Android as their software platform.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop   order by shop.open_year asc",
        "question": "What are the names of shops in ascending order of open year?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from shop   order by shop.open_year asc",
        "question": "What are the names of shops in ascending order of open year?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop   order by shop.open_year asc",
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from shop   order by shop.open_year asc",
        "question": "Return the names of shops, ordered by year of opening ascending.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select avg(stock.quantity) from stock",
        "question": "What is the average quantity of stocks?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select avg(stock.quantity) from stock",
        "question": "Give the average quantity of stocks.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name , shop.location from shop   order by shop.shop_name asc",
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name , shop.location from shop   order by shop.shop_name asc",
        "question": "What are the names and location of the shops in ascending alphabetical order of name.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name , shop.location from shop   order by shop.shop_name asc",
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name , shop.location from shop   order by shop.shop_name asc",
        "question": "Return the names and locations of shops, ordered by name in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select count( distinct device.software_platform) from device",
        "question": "How many different software platforms are there for devices?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select count( distinct device.software_platform) from device",
        "question": "Count the number of different software platforms.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.open_date , shop.open_year from shop where  shop.shop_name = \"Apple\"",
        "question": "List the open date of open year of the shop named \"Apple\".",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.open_date , shop.open_year from shop where  shop.shop_name = \"Apple\"",
        "question": "What are the open dates and years for the shop named Apple?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop   order by shop.open_year desc limit 1",
        "question": "List the name of the shop with the latest open year.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from shop   order by shop.open_year desc limit 1",
        "question": "List the name of the shop with the latest open year.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop   order by shop.open_year desc limit 1",
        "question": "What is the shop name corresponding to the shop that opened in the most recent year?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name , device.carrier from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID",
        "question": "Show names of shops and the carriers of devices they have in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name , device.carrier from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID",
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name , device.carrier from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID",
        "question": "What are the names of device shops, and what are the carriers that they carry devices in stock for?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count(*) > 1",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count( distinct device.device) > 1",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count(*) > 1",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count(*) > 1",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_id having  count(*) > 1",
        "question": "Show names of shops that have more than one kind of device in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count(*) > 1",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count(*) > 1",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count( distinct device.device) > 1",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id having  count(*) > 1",
        "question": "What are the names of shops that have more than a single kind of device in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id  order by count(*) desc limit 1",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id  order by count(*) desc limit 1",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_name  order by count(*) desc limit 1",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_name  order by count(*) desc limit 1",
        "question": "Show the name of the shop that has the most kind of devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_name  order by count(*) desc limit 1",
        "question": "What is the name of the shop that has the most different kinds of devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_name  order by count(*) desc limit 1",
        "question": "What is the name of the shop that has the most different kinds of devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id  order by sum(stock.quantity) desc limit 1",
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_name  order by sum(stock.quantity) desc limit 1",
        "question": "Show the name of the shop that have the largest quantity of devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by stock.shop_id  order by sum(stock.quantity) desc limit 1",
        "question": "What is the name of the shop that has the greatest quantity of devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID  group by shop.shop_name  order by sum(stock.quantity) desc limit 1",
        "question": "What is the name of the shop that has the greatest quantity of devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.software_platform , count(*) from device  group by device.software_platform",
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.software_platform , count(*) from device  group by device.software_platform",
        "question": "Please show different software platforms and the corresponding number of devices using each.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.software_platform , count(*) from device  group by device.software_platform",
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select count(*) , device.software_platform from device  group by device.software_platform",
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.software_platform , count(*) from device  group by device.software_platform",
        "question": "What are the different software platforms for devices, and how many devices have each?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.software_platform from device  group by device.software_platform  order by count(*) desc",
        "question": "Please show the software platforms of devices in descending order of the count.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.software_platform from device  group by device.software_platform  order by count(*) desc",
        "question": "Please show the software platforms of devices in descending order of the count.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.software_platform from device  group by device.software_platform  order by count(*) desc",
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.software_platform from device  group by device.software_platform  order by count(*) desc",
        "question": "What are the different software platforms for devices, ordered by frequency descending?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.software_platform from device  group by device.software_platform  order by count(*) desc limit 1",
        "question": "List the software platform shared by the greatest number of devices.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.software_platform from device  group by device.software_platform  order by count(*) desc limit 1",
        "question": "List the software platform shared by the greatest number of devices.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.software_platform from device  group by device.software_platform  order by count(*) desc limit 1",
        "question": "What is the software platform that is most common amongst all devices?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop where  shop.shop_id not in (select stock.Shop_ID from stock  )",
        "question": "List the names of shops that have no devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop   except select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID",
        "question": "List the names of shops that have no devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from shop where  shop.shop_id not in (select stock.Shop_ID from stock  )",
        "question": "List the names of shops that have no devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop where  shop.shop_id not in (select stock.Shop_ID from stock  )",
        "question": "What are the names of shops that do not have any devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.shop_name from shop   except select shop.shop_name from stock join shop on stock.Shop_ID = shop.Shop_ID",
        "question": "What are the names of shops that do not have any devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.shop_name from shop where  shop.shop_id not in (select stock.Shop_ID from stock  )",
        "question": "What are the names of shops that do not have any devices in stock?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.location from shop where  shop.open_year > 2012   intersect select shop.location from shop where  shop.open_year < 2008",
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.location from shop where  shop.open_year > 2012   intersect select distinct shop.location from shop where  shop.open_year < 2008",
        "question": "Show the locations shared by shops with open year later than 2012 and shops with open year before 2008.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select shop.location from shop where  shop.open_year > 2012   intersect select shop.location from shop where  shop.open_year < 2008",
        "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct shop.location from shop where  shop.open_year > 2012   intersect select distinct shop.location from shop where  shop.open_year < 2008",
        "question": "Which locations contains both shops that opened after the year 2012 and shops that opened before 2008?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device where  device.device_id not in (select stock.Device_ID from stock  )",
        "question": "List the carriers of devices that have no devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device   except select device.carrier from stock join device on stock.Device_ID = device.Device_ID",
        "question": "List the carriers of devices that have no devices in stock.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device where  device.device_id not in (select stock.Device_ID from stock  )",
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from device   except select device.carrier from stock join device on stock.Device_ID = device.Device_ID",
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select distinct device.carrier from device where  device.device_id not in (select stock.Device_ID from stock  )",
        "question": "What are the carriers of devices that are not in stock anywhere?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from stock join device on stock.Device_ID = device.Device_ID  group by device.carrier having  count(*) > 1",
        "question": "Show the carriers of devices in stock at more than one shop.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by device.carrier having  count(*) > 1",
        "question": "Show the carriers of devices in stock at more than one shop.",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from stock join device on stock.Device_ID = device.Device_ID  group by device.carrier having  count(*) > 1",
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "correctness": 1
    },
    {
        "db_id": "device",
        "query": "select device.carrier from stock join device on stock.Device_ID = device.Device_ID join shop on stock.Shop_ID = shop.Shop_ID  group by device.carrier having  count(*) > 1",
        "question": "What are the carriers of devices that are in stock in more than a single shop?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select count(*) from Bookings",
        "question": "How many bookings do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select count(*) from Bookings",
        "question": "Count the total number of bookings made.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.order_date from Bookings",
        "question": "List the order dates of all the bookings.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.order_date from Bookings",
        "question": "What is the order date of each booking?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.planned_delivery_date , bookings.actual_delivery_date from Bookings",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.planned_delivery_date , bookings.actual_delivery_date from Bookings",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select count(*) from Customers",
        "question": "How many customers do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select count(*) from Customers",
        "question": "Count the number of customers recorded.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customers.customer_phone , customers.customer_email_address from Customers where  customers.customer_name = \"Harold\"",
        "question": "What are the phone and email for customer Harold?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customers.customer_email_address , customers.customer_phone from Customers where  customers.customer_name = \"Harold\"",
        "question": "What are the phone and email for customer Harold?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customers.customer_phone , customers.customer_email_address from Customers where  customers.customer_name = \"Harold\"",
        "question": "Find the phone number and email address of customer \"Harold\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customers.customer_email_address , customers.customer_phone from Customers where  customers.customer_name = \"Harold\"",
        "question": "Find the phone number and email address of customer \"Harold\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_name from Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct drama_workshop_groups.store_name from Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_name from Drama_Workshop_Groups",
        "question": "What are the store names of drama workshop groups?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select min(invoices.order_quantity) , avg(invoices.order_quantity) , max(invoices.order_quantity) from Invoices",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select avg(invoices.order_quantity) , min(invoices.order_quantity) , max(invoices.order_quantity) from Invoices",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select max(invoices.order_quantity) , min(invoices.order_quantity) , avg(invoices.order_quantity) from Invoices",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select max(invoices.order_quantity) , avg(invoices.order_quantity) , min(invoices.order_quantity) from Invoices",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select avg(invoices.order_quantity) , min(invoices.order_quantity) , max(invoices.order_quantity) from Invoices",
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct invoices.payment_method_code from Invoices",
        "question": "What are the distinct payment method codes in all the invoices?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct invoices.payment_method_code from Invoices",
        "question": "Show me the distinct payment method codes from the invoice record.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct invoices.payment_method_code from Invoices join Ref_Payment_Methods on Invoices.payment_method_code = Ref_Payment_Methods.payment_method_code",
        "question": "Show me the distinct payment method codes from the invoice record.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select marketing_regions.marketing_region_descriptrion from Marketing_Regions where  marketing_regions.marketing_region_name = \"China\"",
        "question": "What is the description of the marketing region China?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct marketing_regions.marketing_region_descriptrion from Marketing_Regions where  marketing_regions.marketing_region_name = \"China\"",
        "question": "What is the description of the marketing region China?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select marketing_regions.marketing_region_descriptrion from Marketing_Regions where  marketing_regions.marketing_region_name = \"China\"",
        "question": "Find the marketing region description of China?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct marketing_regions.marketing_region_descriptrion from Marketing_Regions where  marketing_regions.marketing_region_name = \"China\"",
        "question": "Find the marketing region description of China?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct products.product_name from Products where  products.product_price > (select avg(products.product_price) from Products  )",
        "question": "Show all the distinct product names with price higher than the average.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct products.product_name from Products where  products.product_price >= (select avg(products.product_price) from Products  )",
        "question": "Show all the distinct product names with price higher than the average.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct products.product_name from Products where  products.product_price > (select avg(products.product_price) from Products  )",
        "question": "What are the distinct names of the products that cost more than the average?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct products.product_name from Products where  products.product_price >= (select avg(products.product_price) from Products  )",
        "question": "What are the distinct names of the products that cost more than the average?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products   order by products.product_price desc limit 1",
        "question": "What is the name of the most expensive product?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products   order by products.product_price desc limit 1",
        "question": "Tell me the name of the most pricy product.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products   order by products.product_price asc",
        "question": "List all product names in ascending order of price.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products   order by products.product_price asc",
        "question": "Sort the names of products in ascending order of their price.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select performers.customer_phone from Performers where  performers.customer_name = \"Ashley\"",
        "question": "What is the phone number of the performer Ashley?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select performers.customer_phone from Performers where  performers.customer_name = (select performers.customer_name from Performers where  performers.customer_name = \"Ashley\"  )",
        "question": "What is the phone number of the performer Ashley?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select performers.customer_phone from Performers where  performers.customer_name = \"Ashley\"",
        "question": "Find the phone number of performer \"Ashley\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select invoices.payment_method_code , count(*) from Invoices  group by invoices.payment_method_code",
        "question": "Show all payment method codes and the number of orders for each code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct invoices.payment_method_code , count(*) from Invoices  group by invoices.payment_method_code",
        "question": "Show all payment method codes and the number of orders for each code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct invoices.payment_method_code , count(*) from Invoices  group by invoices.payment_method_code",
        "question": "List the distinct payment method codes with the number of orders made",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select invoices.payment_method_code , count(*) from Invoices  group by invoices.payment_method_code",
        "question": "List the distinct payment method codes with the number of orders made",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select invoices.payment_method_code from Invoices  group by invoices.payment_method_code  order by count(*) desc limit 1",
        "question": "What is the payment method code used by the most orders?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select invoices.payment_method_code from Invoices  group by invoices.payment_method_code  order by count(*) desc limit 1",
        "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct invoices.payment_method_code from Invoices  group by invoices.payment_method_code  order by count(*) desc limit 1",
        "question": "Find the payment method that is used the most often in all the invoices. Give me its code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.city_town from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.store_name = \"FJA Filming\"",
        "question": "Which city is the address of the store named \"FJA Filming\" located in?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct addresses.city_town from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.store_name = \"FJA Filming\"",
        "question": "Which city is the address of the store named \"FJA Filming\" located in?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.city_town from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.store_name = \"FJA Filming\"",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct addresses.city_town from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.store_name = \"FJA Filming\"",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.state_county from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.marketing_region_code = \"CA\"",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct addresses.state_county from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.marketing_region_code = \"CA\"",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.state_county from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.marketing_region_code = \"CA\"",
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct addresses.state_county from Stores join Addresses on Stores.Address_ID = Addresses.Address_ID where  stores.marketing_region_code = \"CA\"",
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select marketing_regions.marketing_region_name from Stores join Marketing_Regions on Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code where  stores.store_name = \"Rob Dinning\"",
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct marketing_regions.marketing_region_name from Stores join Marketing_Regions on Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code where  stores.store_name = \"Rob Dinning\"",
        "question": "What is the name of the marketing region that the store Rob Dinning belongs to?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select marketing_regions.marketing_region_name from Stores join Marketing_Regions on Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code where  stores.store_name = \"Rob Dinning\"",
        "question": "Return the name of the marketing region the store Rob Dinning is located in.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct marketing_regions.marketing_region_name from Stores join Marketing_Regions on Stores.Marketing_Region_Code = Marketing_Regions.Marketing_Region_Code where  stores.store_name = \"Rob Dinning\"",
        "question": "Return the name of the marketing region the store Rob Dinning is located in.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code where  services.product_price > 100",
        "question": "What are the descriptions of the service types with product price above 100?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code where  services.product_price > 100",
        "question": "Give me the descriptions of the service types that cost more than 100.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_code , ref_service_types.service_type_description , count(*) from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by ref_service_types.service_type_code",
        "question": "What is the description, code and the corresponding count of each service type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , ref_service_types.service_type_code , count(*) from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by ref_service_types.service_type_code",
        "question": "What is the description, code and the corresponding count of each service type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code , count(*) from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by services.service_type_code",
        "question": "List the description, code and the number of services for each service type.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code , count(*) from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by ref_service_types.service_type_code",
        "question": "List the description, code and the number of services for each service type.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , ref_service_types.service_type_code , count(*) from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by services.service_type_code",
        "question": "List the description, code and the number of services for each service type.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , ref_service_types.service_type_code , count(*) from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by ref_service_types.service_type_code",
        "question": "List the description, code and the number of services for each service type.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by services.service_type_code  order by count(*) desc limit 1",
        "question": "What is the description and code of the type of service that is performed the most often?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by ref_service_types.service_type_code  order by count(*) desc limit 1",
        "question": "What is the description and code of the type of service that is performed the most often?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code from Bookings_Services join Services on Bookings_Services.Product_ID = Services.Service_ID join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by services.service_type_code  order by count(*) desc limit 1",
        "question": "What is the description and code of the type of service that is performed the most often?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by services.service_type_code  order by count(*) desc limit 1",
        "question": "Find the description and code of the service type that is performed the most times.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description , services.service_type_code from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code  group by ref_service_types.service_type_code  order by count(*) desc limit 1",
        "question": "Find the description and code of the service type that is performed the most times.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_phone , drama_workshop_groups.store_email_address from Services join Drama_Workshop_Groups on Services.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_email_address , drama_workshop_groups.store_phone from Services join Drama_Workshop_Groups on Services.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name , avg(products.product_price) from Products  group by products.product_name",
        "question": "What are the different product names? What is the average product price for each of them?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct products.product_name , avg(products.product_price) from Products  group by products.product_name",
        "question": "What are the different product names? What is the average product price for each of them?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name , avg(products.product_price) from Products  group by products.product_name",
        "question": "For each distinct product name, show its average product price.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct products.product_name , avg(products.product_price) from Products  group by products.product_name",
        "question": "For each distinct product name, show its average product price.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products  group by products.product_name having  avg(products.product_price) < 1000000",
        "question": "What are the product names with average product price smaller than 1000000?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products  group by products.product_name having  avg(products.product_price) <= 1000000",
        "question": "What are the product names with average product price smaller than 1000000?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products  group by products.product_name having  avg(products.product_price) < 1000000",
        "question": "Find the product names whose average product price is below 1000000.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select products.product_name from Products  group by products.product_name having  avg(products.product_price) <= 1000000",
        "question": "Find the product names whose average product price is below 1000000.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select sum(order_items.order_quantity) from Order_Items join Products on Order_Items.Product_ID = Products.Product_ID where  products.product_name = \"photo\"",
        "question": "What are the total order quantities of photo products?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select sum(order_items.order_quantity) from Order_Items join Products on Order_Items.Product_ID = Products.Product_ID where  products.product_name = \"photo\"",
        "question": "Compute the total order quantities of the product \"photo\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select order_items.other_item_details from Order_Items join Products on Order_Items.Product_ID = Products.Product_ID where  products.product_price > 2000",
        "question": "What are the order details of the products with price higher than 2000?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select order_items.other_item_details from Order_Items join Products on Order_Items.Product_ID = Products.Product_ID where  products.product_price > 2000",
        "question": "Find the order detail for the products with price above 2000.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customer_orders.actual_delivery_date from Order_Items join Customer_Orders on Order_Items.Order_ID = Customer_Orders.Order_ID where  order_items.order_quantity = 1",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customer_orders.actual_delivery_date from Order_Items join Customer_Orders on Order_Items.Order_ID = Customer_Orders.Order_ID where  order_items.order_quantity = \"1\"",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customer_orders.actual_delivery_date from Order_Items join Customer_Orders on Order_Items.Order_ID = Customer_Orders.Order_ID where  order_items.order_quantity = 1",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customer_orders.order_date from Order_Items join Products on Order_Items.Product_ID = Products.Product_ID join Customer_Orders on Order_Items.Order_ID = Customer_Orders.Order_ID where  products.product_price > 1000",
        "question": "What are the order dates of orders with price higher than 1000?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select customer_orders.order_date from Order_Items join Products on Order_Items.Product_ID = Products.Product_ID join Customer_Orders on Order_Items.Order_ID = Customer_Orders.Order_ID where  products.product_price > 1000",
        "question": "Find the order dates of the orders with price above 1000.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select count( distinct drama_workshop_groups.currency_code) from Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select count( distinct drama_workshop_groups.currency_code) from Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_name from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID where  addresses.city_town = \"Feliciaberg\"",
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_name from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID where  addresses.city_town = \"Feliciaberg\"",
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct drama_workshop_groups.store_name from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID where  addresses.city_town = \"Feliciaberg\"",
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_email_address from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID where  addresses.state_county = \"Alaska\"",
        "question": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_email_address from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID where  addresses.state_county = \"Alaska\"",
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.city_town , count(*) from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID  group by addresses.city_town",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.city_town , count(*) from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID  group by addresses.city_town",
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct addresses.city_town , count(*) from Drama_Workshop_Groups join Addresses on Drama_Workshop_Groups.Address_ID = Addresses.Address_ID  group by addresses.city_town",
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.marketing_region_code from Drama_Workshop_Groups  group by drama_workshop_groups.marketing_region_code  order by count(*) desc limit 1",
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select addresses.city_town from Customers join Addresses on Customers.Address_ID = Addresses.Address_ID where  addresses.address_id not in (select Performers.Address_ID from Performers  )  group by addresses.city_town having  count(*) >= 1",
        "question": "Which cities have at least one customer but no performer?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.status_code from Bookings  group by bookings.status_code  order by count(*) desc limit 1",
        "question": "What is the most frequent status of bookings?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.status_code from Bookings_Services join Bookings on Bookings_Services.Order_ID = Bookings.Booking_ID  group by bookings.status_code  order by count(*) desc limit 1",
        "question": "What is the most frequent status of bookings?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct bookings.status_code from Bookings  group by bookings.status_code  order by count(*) desc limit 1",
        "question": "What is the most frequent status of bookings?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select bookings.status_code from Bookings  group by bookings.status_code  order by count(*) desc limit 1",
        "question": "Which status code is the most common of all the bookings?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select drama_workshop_groups.store_name from Bookings join Drama_Workshop_Groups on Bookings.Workshop_Group_ID = Drama_Workshop_Groups.Workshop_Group_ID where  bookings.status_code = \"stop\"",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select clients.customer_name from Clients where  clients.client_id not in (select Bookings.Customer_ID from Bookings  )",
        "question": "Show the names of all the clients with no booking.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select clients.customer_name from Clients   except select clients.customer_name from Bookings join Clients on Bookings.Customer_ID = Clients.Client_ID",
        "question": "Show the names of all the clients with no booking.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct clients.customer_name from Clients where  clients.client_id not in (select Bookings.Customer_ID from Bookings  )",
        "question": "Show the names of all the clients with no booking.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select clients.customer_name from Clients where  clients.client_id not in (select Bookings.Customer_ID from Bookings  )",
        "question": "What are the names of the clients who do not have any booking?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select clients.customer_name from Clients   except select clients.customer_name from Bookings join Clients on Bookings.Customer_ID = Clients.Client_ID",
        "question": "What are the names of the clients who do not have any booking?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select distinct clients.customer_name from Clients where  clients.client_id not in (select Bookings.Customer_ID from Bookings  )",
        "question": "What are the names of the clients who do not have any booking?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select avg(invoices.order_quantity) from Invoices where  invoices.payment_method_code = \"MasterCard\"",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select avg(invoices.order_quantity) from Invoices join Ref_Payment_Methods on Invoices.payment_method_code = Ref_Payment_Methods.payment_method_code where  invoices.payment_method_code = \"MasterCard\" and ref_payment_methods.payment_method_code = \"MasterCard\"",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select avg(invoices.order_quantity) from Invoices where  invoices.payment_method_code = \"MasterCard\"",
        "question": "Check the invoices record and compute the average quantities ordered with the payment method \"MasterCard\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select invoices.product_id from Invoices  group by invoices.product_id  order by count(*) desc limit 1",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select invoices.product_id from Invoices  group by invoices.product_id  order by count(*) desc limit 1",
        "question": "Find the id of the product ordered the most often on invoices.",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code where  services.product_name = \"photo\"   intersect select ref_service_types.service_type_description from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code where  services.product_name = \"film\"",
        "question": "What is the description of the service type which offers both the photo product and the film product?",
        "correctness": 1
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "query": "select ref_service_types.service_type_description from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code where  services.product_name = \"photo\"   intersect select ref_service_types.service_type_description from Services join Ref_Service_Types on Services.Service_Type_Code = Ref_Service_Types.Service_Type_Code where  services.product_name = \"film\"",
        "question": "Give me the description of the service type that offers not only the photo product but also the film product.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Band",
        "question": "How many bands are there?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Band",
        "question": "Find the number of bands.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct albums.label from Albums",
        "question": "What are all the labels?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select albums.label from Albums",
        "question": "What are all the labels?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct albums.label from Albums",
        "question": "What are the different album labels listed?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select * from Albums where  albums.year = 2012",
        "question": "Find all the albums in 2012.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct * from Albums where  albums.year = 2012",
        "question": "Find all the albums in 2012.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select * from Albums where  albums.year = 2012",
        "question": "return all columns of the albums created in the year of 2012.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct * from Albums where  albums.year = 2012",
        "question": "return all columns of the albums created in the year of 2012.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select performance.stageposition from Performance join Band on Performance.Bandmate = Band.Id where  band.firstname = \"Solveig\"",
        "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct performance.stageposition from Performance join Band on Performance.Bandmate = Band.Id where  band.firstname = \"Solveig\"",
        "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select performance.stageposition from Performance join Band on Performance.Bandmate = Band.Id where  band.firstname = \"Solvesg\"",
        "question": "Find all the stage positions of the musicians with first name \"Solveig\"",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct performance.stageposition from Performance join Band on Performance.Bandmate = Band.Id where  band.firstname = \"Solveig\"",
        "question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select performance.stageposition from Performance join Band on Performance.Bandmate = Band.Id where  band.firstname = \"Solveig\"",
        "question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct performance.stageposition from Performance join Band on Performance.Bandmate = Band.Id where  band.firstname = \"Solvesg\"",
        "question": "What are the different stage positions for all musicians whose first name is \"Solveig\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Songs",
        "question": "How many songs are there?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Songs",
        "question": "Count the number of songs.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Flash\"",
        "question": "How many musicians play in the song \"Flash\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct albums.label) from Albums",
        "question": "How many unique labels are there for albums?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct albums.label) from Albums",
        "question": "What are the unique labels for the albums?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select albums.label from Albums  group by albums.label  order by count(*) desc limit 1",
        "question": "What is the label that has the most albums?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select albums.label from Albums  group by albums.label  order by count(*) desc limit 1",
        "question": "What is the label with the most albums?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select band.lastname from Performance join Band on Performance.Bandmate = Band.Id where  performance.stageposition = \"back\"  group by band.lastname  order by count(*) desc limit 1",
        "question": "What is the last name of the musicians who has played back position the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select band.lastname from Performance join Band on Performance.Bandmate = Band.Id where  performance.stageposition = \"Back\"  group by band.lastname  order by count(*) desc limit 1",
        "question": "What is the last name of the musicians who has played back position the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select band.lastname from Performance join Band on Performance.Bandmate = Band.Id where  performance.stageposition = \"b\"  group by band.lastname  order by count(*) desc limit 1",
        "question": "What is the last name of the musicians who has played back position the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Songs where  songs.title like \"%the%\"",
        "question": "Find all the songs whose name contains the word \"the\".",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct songs.title from Songs where  songs.title like \"%the%\"",
        "question": "Find all the songs whose name contains the word \"the\".",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Songs where  songs.title like \"%the%\"",
        "question": "What are the names of the songs whose title has the word \"the\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct songs.title from Songs where  songs.title like \"%the%\"",
        "question": "What are the names of the songs whose title has the word \"the\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Songs where  songs.title like \"%The%\"",
        "question": "What are the names of the songs whose title has the word \"the\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Songs where  songs.title like \"%this%\"",
        "question": "What are the names of the songs whose title has the word \"the\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments",
        "question": "What are all the instruments used?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments",
        "question": "What are all the instruments used?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments",
        "question": "What are the different instruments listed in the database?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments",
        "question": "What are the different instruments listed in the database?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments  group by instruments.instrument  order by count(*) desc limit 1",
        "question": "What is the most used instrument?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments  group by instruments.instrument  order by count(*) desc limit 1",
        "question": "What is the most used instrument?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments  group by instruments.instrument  order by count(*) desc limit 1",
        "question": "What instrument is used the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments  group by instruments.instrument  order by count(*) desc limit 1",
        "question": "What instrument is used the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Instruments join Songs on Instruments.SongId = Songs.SongId where  instruments.instrument = \"drums\"",
        "question": "How many songs have used the instrument \"drums\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Instruments join Songs on Instruments.SongId = Songs.SongId where  instruments.instrument = \"drum\"",
        "question": "How many songs use drums as an instrument?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Instruments join Songs on Instruments.SongId = Songs.SongId where  instruments.instrument = \"drums\"",
        "question": "How many songs use drums as an instrument?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Instruments join Songs on Instruments.SongId = Songs.SongId where  instruments.instrument = \"drumming\"",
        "question": "How many songs use drums as an instrument?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What instruments does the the song \"Le Pop\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What instruments does the the song \"Le Pop\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What are the instruments are used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What are the instruments are used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title like \"%Le Pop%\"",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le pop\"",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments where  instruments.songid = \"Le Pop\"",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title like \"%Le Pop%\"",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Band on Instruments.BandmateId = Band.Id where  band.lastname = \"Heilo\"",
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Band on Instruments.BandmateId = Band.Id where  band.lastname = \"Heilo\"",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Band on Instruments.BandmateId = Band.Id where  band.firstname = \"Heilo\"",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments join Band on Instruments.BandmateId = Band.Id where  band.lastname = \"Heilo\"",
        "question": "Find all the instruments ever used by the musician with last name \"Heilo\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments join Band on Instruments.BandmateId = Band.Id where  band.lastname = \"Heilo\"",
        "question": "Find all the instruments ever used by the musician with last name \"Heilo\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select instruments.instrument from Instruments join Band on Instruments.BandmateId = Band.Id where  band.lastname = \"Heilo\"",
        "question": "What are all the instruments used by the musician with the last name \"Heilo\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct instruments.instrument from Instruments join Band on Instruments.BandmateId = Band.Id where  band.lastname = \"Heilo\"",
        "question": "What are all the instruments used by the musician with the last name \"Heilo\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Vocals join Songs on Vocals.SongId = Songs.SongId  group by vocals.songid  order by count(*) desc limit 1",
        "question": "Which song has the most vocals?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Vocals join Songs on Vocals.SongId = Songs.SongId  group by vocals.songid  order by count(*) desc limit 1",
        "question": "What is the song with the most vocals?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Vocals join Songs on Vocals.SongId = Songs.SongId  group by songs.songid  order by count(*) desc limit 1",
        "question": "What is the song with the most vocals?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals  group by vocals.type  order by count(*) desc limit 1",
        "question": "Which vocal type is the most frequently appearring type?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals  group by vocals.type  order by count(*) desc limit 1",
        "question": "Which vocal type is the most frequently appearring type?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals  group by vocals.type  order by count(*) desc limit 1",
        "question": "What is the type of vocables that appears most frequently?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals  group by vocals.type  order by count(*) desc limit 1",
        "question": "What is the type of vocables that appears most frequently?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id where  band.lastname = \"Heilo\"  group by vocals.type  order by count(*) desc limit 1",
        "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id where  band.lastname = \"Heilo\"  group by vocals.type  order by count(*) desc limit 1",
        "question": "What is the type of vocals that the band member with the last name \"Heilo\" played the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What are the vocal types used in song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What are the types of vocals used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "What are the types of vocals used in the song \"Le Pop\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Vocals where  vocals.type = \"Demon Kitty Rag\"",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals",
        "question": "Find all the vocal types.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals",
        "question": "Find all the vocal types.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals",
        "question": "What are the different types of vocals?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select * from Albums where  albums.year = 2010",
        "question": "What are the albums produced in year 2010?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select * from Albums where  albums.year = 2010",
        "question": "What information is there on albums from 2010?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct * from Albums where  albums.year = 2010",
        "question": "What information is there on albums from 2010?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Badlands\"",
        "question": "How many instruments does the song \"Badlands\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title like \"%Badlands%\"",
        "question": "How many instruments does the song \"Badlands\" use?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title = \"Badlands\"",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments join Songs on Instruments.SongId = Songs.SongId where  songs.title like \"%Badlands%\"",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count( distinct instruments.instrument) from Instruments where  instruments.songid = \"Badlands\"",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Badlands\"",
        "question": "What are the vocal types used in song \"Badlands\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Badlands\"",
        "question": "What types of vocals are used in the song \"Badlands\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Badlands\"",
        "question": "What types of vocals are used in the song \"Badlands\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select count(*) from Vocals join Songs on Vocals.SongId = Songs.SongId where  songs.title = \"Le Pop\"",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id where  band.firstname = \"Solveig\"  group by vocals.type  order by count(*) desc limit 1",
        "question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id where  band.firstname = \"Solveig\"  group by vocals.type  order by count(*) desc limit 1",
        "question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id where  band.firstname = \"Solveig\"  group by vocals.type  order by count(*) desc limit 3",
        "question": "What are the types of vocals that the band member with the first name \"Solveig\" played the most?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id join Songs on Vocals.SongId = Songs.SongId where  band.lastname = \"Heilo\" and songs.title = \"Der Kapitan\"",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id join Songs on Vocals.SongId = Songs.SongId where  band.lastname = \"Heilo\" and songs.title = \"Der Kapitan\"",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct vocals.type from Vocals join Band on Vocals.Bandmate = Band.Id join Songs on Vocals.SongId = Songs.SongId where  band.lastname = \"Heilo\" and songs.title = \"Der Kapitan\"",
        "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select band.firstname , band.lastname from Performance join Band on Performance.Bandmate = Band.Id join Songs on Performance.SongId = Songs.SongId where  performance.stageposition = \"Backstage Position\" and songs.title = \"Der Kapitan\"",
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.title = \"A Kiss Before You Go: Live in Hamburg\"",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.title = \"A Kiss Before You Go: Live in Hamburg\"",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.title = \"A Kiss Before You Go: Live In Hamburg\"",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.title = \"A Kiss Before You Go: Live in Hamburg\"",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.title = \"A Kiss Before You Go: Live in Hamburg\"",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.title = \"A Kiss Before You Go: Live In Hamburg\"",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.label = \"Universal Music Group\"",
        "question": "What are all the songs in albums under label \"Universal Music Group\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.label = \"Universal Music Group\"",
        "question": "What are all the songs in albums under label \"Universal Music Group\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.label = \"Universal Music Group\"",
        "question": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select distinct songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.label = \"Universal Music Group\"",
        "question": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?",
        "correctness": 1
    },
    {
        "db_id": "music_2",
        "query": "select songs.title from Tracklists join Albums on Tracklists.AlbumId = Albums.AId join Songs on Tracklists.SongId = Songs.SongId where  albums.label = \"Universal\"",
        "question": "What are the names of all the songs whose album is under the label of \"Universal Music Group\"?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id from Problem_Log   order by problem_log.log_entry_date desc limit 1",
        "question": "What is the id of the problem log that is created most recently?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id from Problem_Log   order by problem_log.log_entry_date desc limit 1",
        "question": "Which problem log was created most recently? Give me the log id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id , problem_log.log_entry_date from Problem_Log join Problems on Problem_Log.problem_id = Problems.problem_id where  problems.problem_id = 10",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id , problem_log.log_entry_date from Problem_Log where  problem_log.problem_id = 10",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.log_entry_date , problem_log.problem_log_id from Problem_Log join Problems on Problem_Log.problem_id = Problems.problem_id where  problems.problem_id = 10",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id , problem_log.log_entry_date from Problem_Log join Problems on Problem_Log.problem_id = Problems.problem_id where  problems.problem_id like 10",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problem_log.problem_log_id , problem_log.log_entry_date from Problem_Log join Problems on Problem_Log.problem_id = Problems.problem_id where  problems.problem_id = 10",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id , problem_log.log_entry_date from Problem_Log join Problems on Problem_Log.problem_id = Problems.problem_id where  problems.problem_id = 10",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problem_log.problem_log_id , problem_log.log_entry_date from Problem_Log join Problems on Problem_Log.problem_id = Problems.problem_id where  problems.problem_id = 10",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id , problem_log.log_entry_description from Problem_Log",
        "question": "List all the log ids and their descriptions from the problem logs.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problem_log.problem_log_id , problem_log.log_entry_description from Problem_Log",
        "question": "List all the log ids and their descriptions from the problem logs.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_log_id , problem_log.log_entry_description from Problem_Log",
        "question": "What are the log id and entry description of each problem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problem_log.problem_log_id , problem_log.log_entry_description from Problem_Log",
        "question": "What are the log id and entry description of each problem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct staff.staff_first_name , staff.staff_last_name from Problem_Log join Staff on Problem_Log.assigned_to_staff_id = Staff.staff_id where  problem_log.problem_id = 1",
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select staff.staff_first_name , staff.staff_last_name from Problem_Log join Staff on Problem_Log.assigned_to_staff_id = Staff.staff_id where  problem_log.problem_id = 1",
        "question": "Which staff members are assigned to the problem with id 1? Give me their first and last names.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_id , problem_log.problem_log_id from Problem_Log join Staff on Problem_Log.assigned_to_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"",
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problem_log.problem_id , problem_log.problem_log_id from Problem_Log join Staff on Problem_Log.assigned_to_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"",
        "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems where  problems.product_id = \"Voluptatem\"",
        "question": "How many problems are there for product voluptatem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems where  problems.product_id = \"voluptatem\"",
        "question": "How many problems are there for product voluptatem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems where  problems.product_id = \"vouptatem\"",
        "question": "How many problems are there for product voluptatem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems where  problems.product_id = \"Vouptatem\"",
        "question": "How many problems are there for product voluptatem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems where  problems.product_id = \"vuptatem\"",
        "question": "How many problems are there for product voluptatem?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems join Product on Problems.product_id = Product.product_id where  product.product_name = \"voluptatem\"",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems join Product on Problems.product_id = Product.product_id where  product.product_name = \"Voluptatem\"",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) from Problems join Product on Problems.product_id = Product.product_id where  product.product_name = \"voluptatem\" and product.product_id = \"1\"",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 1",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) , product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 1",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by product.product_name  order by count(*) desc limit 1",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) , product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by product.product_name  order by count(*) desc limit 1",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 1",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by product.product_id  order by count(*) desc limit 1",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by product.product_name  order by count(*) desc limit 1",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_description from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Christop\"",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_description from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Christop\"",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_description from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Christop\"",
        "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_description from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Christop\"",
        "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\"",
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.reported_by_staff_id = (select problems.reported_by_staff_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\"  )",
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\"",
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\" and problems.reported_by_staff_id = \"1\"",
        "question": "Find the ids of the problems that are reported by the staff whose last name is Bosco.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\"",
        "question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\"",
        "question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_last_name = \"Bosco\" and problems.reported_by_staff_id = 1",
        "question": "Which problems are reported by the staff with last name \"Bosco\"? Show the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > \"1978-06-26\"",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported >= \"1978-06-26\"",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_id from Problems where  problems.date_problem_reported > \"1978-06-26\"",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > \"1978-06-26\"",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported >= \"1978-06-26\"",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_id from Problems where  problems.date_problem_reported > \"1978-06-26\"",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported < \"1978-06-26\"",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported <= \"1978-06-26\"",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported < \"1978-06-26\"",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_id from Problems where  problems.date_problem_reported < \"1978-06-26\"",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported <= \"1978-06-26\"",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.product_id , count(*) from Problems  group by problems.product_id",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_id , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_id , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by product.product_id",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_id , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by product.product_id",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_id , count(*) from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select count(*) , product.product_id from Problems join Product on Problems.product_id = Product.product_id  group by product.product_id",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.product_id , count(*) from Problems  group by problems.product_id",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.product_id , count(*) from Problems where  problems.date_problem_reported > \"1986-11-13\"  group by problems.product_id",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_id , count(*) from Problems join Product on Problems.product_id = Product.product_id where  problems.date_problem_reported > \"1986-11-13\"  group by product.product_id",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_id , count(*) from Problems join Product on Problems.product_id = Product.product_id where  problems.date_problem_reported > \"1986-11-13\"  group by product.product_id",
        "question": "What are the products that have problems reported after 1986-11-13? Give me the product id and the count of problems reported after 1986-11-13.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct product.product_name from Product   order by product.product_name asc",
        "question": "List the names of all the distinct product names in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Product   order by product.product_name asc",
        "question": "List the names of all the distinct product names in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct product.product_name from Product   order by product.product_name asc",
        "question": "Sort all the distinct product names in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Product   order by product.product_name asc",
        "question": "Sort all the distinct product names in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct product.product_name from Product   order by product.product_id asc",
        "question": "List all the distinct product names ordered by product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Product   order by product.product_id asc",
        "question": "List all the distinct product names ordered by product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct product.product_name from Product   order by product.product_id asc",
        "question": "What is the list of distinct product names sorted by product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Product   order by product.product_id asc",
        "question": "What is the list of distinct product names sorted by product id?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported < (select min(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Lysanne\" and staff.staff_last_name = \"Turcotte\"  )",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported < (select min(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Lysanne\" and staff.staff_last_name = \"Turcotte\"  )",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct problems.problem_id from Problems where  problems.date_problem_reported < (select min(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Lysanne\" and staff.staff_last_name = \"Turcotte\"  )",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > (select min(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"  )",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > (select max(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"  )",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > (select problems.date_problem_reported from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"  )",
        "question": "What are the ids of the problems reported after the date of any problems reported by Rylan Homenick?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > (select min(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"  )",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > (select max(problems.date_problem_reported) from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"  )",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems where  problems.date_problem_reported > (select problems.date_problem_reported from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id where  staff.staff_first_name = \"Rylan\" and staff.staff_last_name = \"Homenick\"  )",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 3",
        "question": "Find the top 3 products which have the largest number of problems?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by product.product_name  order by count(*) desc limit 3",
        "question": "Find the top 3 products which have the largest number of problems?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 3",
        "question": "Find the top 3 products which have the largest number of problems?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 3",
        "question": "What are the three products that have the most problems?s",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select distinct product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by problems.product_id  order by count(*) desc limit 3",
        "question": "What are the three products that have the most problems?s",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by product.product_name  order by count(*) desc limit 3",
        "question": "What are the three products that have the most problems?s",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select product.product_name from Problems join Product on Problems.product_id = Product.product_id  group by product.product_id  order by count(*) desc limit 3",
        "question": "What are the three products that have the most problems?s",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Product on Problems.product_id = Product.product_id where  product.product_name = \"voluptatem\" and problems.date_problem_reported > 1995",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Product on Problems.product_id = Product.product_id where  problems.date_problem_reported > 1995 and product.product_name = \"voluptatem\"",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select problems.problem_id from Problems join Product on Problems.product_id = Product.product_id where  problems.date_problem_reported > 1995 and product.product_name = \"voluptatem\"",
        "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select staff.staff_first_name , staff.staff_last_name from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id join Product on Problems.product_id = Product.product_id where  product.product_name = \"rem\"   except select staff.staff_first_name , staff.staff_last_name from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id join Product on Problems.product_id = Product.product_id where  product.product_name = \"aut\"",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "correctness": 1
    },
    {
        "db_id": "tracking_software_problems",
        "query": "select staff.staff_first_name , staff.staff_last_name from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id join Product on Problems.product_id = Product.product_id where  product.product_name = \"rem\"   except select staff.staff_first_name , staff.staff_last_name from Problems join Staff on Problems.reported_by_staff_id = Staff.staff_id join Product on Problems.product_id = Product.product_id where  product.product_name = \"aut\"",
        "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Student",
        "question": "Find the number of students in total.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Student",
        "question": "How many students are there in total?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record",
        "question": "Find the number of voting records in total.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record",
        "question": "How many voting records do we have?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count( distinct voting_record.president_vote) from Voting_record",
        "question": "Find the distinct number of president votes.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct count( distinct voting_record.president_vote) from Voting_record",
        "question": "Find the distinct number of president votes.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count( distinct voting_record.president_vote) from Voting_record",
        "question": "How many distinct president votes are recorded?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select max(student.age) from Student",
        "question": "Find the maximum age of all the students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select max(student.age) from Student   order by student.age desc limit 1",
        "question": "What is the oldest age among the students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select max(student.age) from Student",
        "question": "What is the oldest age among the students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.lname from Student where  student.major = 50",
        "question": "Find the last names of students with major 50.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.lname from Student where  student.major = 50",
        "question": "Find the last names of students with major 50.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.lname from Student where  student.major = 50",
        "question": "What are the last names of students studying major 50?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.lname from Student where  student.major = 50",
        "question": "What are the last names of students studying major 50?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.fname from Student where  student.age > 22",
        "question": "Find the first names of students with age above 22.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.fname from Student where  student.age > 22",
        "question": "Find the first names of students with age above 22.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.fname from Student where  student.age > 22",
        "question": "What are the first names of all the students aged above 22?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.fname from Student where  student.age > 22",
        "question": "What are the first names of all the students aged above 22?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student where  student.sex = \"M\"",
        "question": "What are the majors of male (sex is M) students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student where  student.sex = \"M\"",
        "question": "List the major of each male student.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select avg(student.age) from Student where  student.sex = \"F\"",
        "question": "What is the average age of female (sex is F) students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select avg(student.age) from Student where  student.sex = \"F\"",
        "question": "Find the average age of female students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select max(student.age) , min(student.age) from Student where  student.major = 600",
        "question": "What are the maximum and minimum age of students with major 600?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select min(student.age) , max(student.age) from Student where  student.major = 600",
        "question": "What are the maximum and minimum age of students with major 600?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select max(student.age) , min(student.age) from Student where  student.major = \"600\"",
        "question": "What are the maximum and minimum age of students with major 600?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select max(student.age) , min(student.age) from Student where  student.major = 600",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor from Student where  student.city_code = \"BAL\"",
        "question": "Who are the advisors for students that live in a city with city code \"BAL\"?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student where  student.city_code = \"BAL\"",
        "question": "Who are the advisors for students that live in a city with city code \"BAL\"?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor from Student where  student.city_code = \"BAL\"",
        "question": "Show the advisors of the students whose city of residence has city code \"BAL\".",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student where  student.city_code = \"BAL\"",
        "question": "Show the advisors of the students whose city of residence has city code \"BAL\".",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.secretary_vote from Voting_record where  voting_record.election_cycle = \"Fall\"",
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.secretary_vote from Voting_record where  voting_record.election_cycle = \"Fall\" and voting_record.secretary_vote != \"null\"",
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.secretary_vote from Voting_record where  voting_record.election_cycle = \"Fall\"",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.secretary_vote from Voting_record where  voting_record.election_cycle = \"Fall\" and voting_record.secretary_vote != \"null\"",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.secretary_vote from Voting_record where  voting_record.election_cycle = \"Fall\" and voting_record.secretary_vote != \"No\"",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.president_vote from Voting_record where  voting_record.registration_date = \"08/30/2015\"",
        "question": "What are the distinct president votes on 08/30/2015?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.president_vote from Voting_record where  voting_record.registration_date = \"08/30/2015\"",
        "question": "Show all the distinct president votes made on 08/30/2015.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.registration_date , voting_record.election_cycle from Voting_record",
        "question": "Report the distinct registration date and the election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.registration_date , voting_record.election_cycle from Voting_record",
        "question": "What are the distinct registration dates and the election cycles?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.president_vote , voting_record.vice_president_vote from Voting_record",
        "question": "Report the distinct president vote and the vice president vote.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.president_vote , voting_record.vice_president_vote from Voting_record",
        "question": "List all the distinct president votes and the vice president votes.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.fname from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID",
        "question": "What are the distinct first names of the students who have class president votes?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.sex = \"M\" and voting_record.election_cycle = \"Fall\"",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.sex = \"M\" and voting_record.election_cycle = \"Fall\"",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\" and voting_record.election_cycle = \"Spring\"",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\" and voting_record.election_cycle = \"Spring\" and voting_record.class_senator_vote = \"Y\"",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Student where  student.city_code = \"NYC\" and student.stuid = (select Voting_record.Class_Senator_Vote from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\"  )",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Student where  student.city_code = \"NYC\" and student.stuid = (select Voting_record.Class_Senator_Vote from Voting_record where  voting_record.election_cycle = \"Spring\"  )",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\" and voting_record.election_cycle = \"Spring\"",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\" and voting_record.election_cycle = \"Spring\" and voting_record.class_senator_vote = \"Y\"",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Student where  student.city_code = \"NYC\" and student.stuid = (select Voting_record.Class_Senator_Vote from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\"  )",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) from Voting_record join Student on Voting_record.Class_Senator_Vote = Student.StuID where  student.city_code = \"NYC\" and voting_record.class_senator_vote = \"Y\"",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor , count(*) from Student  group by student.advisor",
        "question": "For each advisor, report the total number of students advised by him or her.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor , count(*) from Student  group by student.advisor",
        "question": "For each advisor, report the total number of students advised by him or her.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor , count(*) from Student  group by student.advisor",
        "question": "How many students does each advisor have?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor , count(*) from Student  group by student.advisor",
        "question": "How many students does each advisor have?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) , student.advisor from Student  group by student.advisor",
        "question": "How many students does each advisor have?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Report all advisors that advise more than 2 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Report all advisors that advise more than 2 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Which advisors have more than two students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Which advisors have more than two students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student  group by student.major having  count(*) < 3",
        "question": "Report all majors that have less than 3 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.major from Student  group by student.major having  count(*) < 3",
        "question": "Report all majors that have less than 3 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student  group by student.major having  count(*) <= 3",
        "question": "Report all majors that have less than 3 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student  group by student.major having  count(*) < 3",
        "question": "What are the majors only less than three students are studying?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student  group by student.major having  count(*) <= 3",
        "question": "What are the majors only less than three students are studying?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select voting_record.election_cycle , count(*) from Voting_record  group by voting_record.election_cycle",
        "question": "For each election cycle, report the number of voting records.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.election_cycle , count(*) from Voting_record  group by voting_record.election_cycle",
        "question": "For each election cycle, report the number of voting records.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select voting_record.election_cycle , count(*) from Voting_record  group by voting_record.election_cycle",
        "question": "Count the number of voting records for each election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select count(*) , voting_record.election_cycle from Voting_record  group by voting_record.election_cycle",
        "question": "Count the number of voting records for each election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct voting_record.election_cycle , count(*) from Voting_record  group by voting_record.election_cycle",
        "question": "Count the number of voting records for each election cycle.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student  group by student.major  order by count(*) desc limit 1",
        "question": "Which major has the most students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student  group by student.major  order by count(*) desc limit 1",
        "question": "Find the major that is studied by the largest number of students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.major from Student  group by student.major  order by count(*) desc limit 1",
        "question": "Find the major that is studied by the largest number of students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student where  student.sex = \"F\"  group by student.major  order by count(*) desc limit 1",
        "question": "What is the most common major among female (sex is F) students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.major from Student where  student.sex = \"F\"  group by student.major  order by count(*) desc limit 1",
        "question": "Find the major that is studied by the most female students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.city_code from Student  group by student.city_code  order by count(*) desc limit 1",
        "question": "What is the city_code of the city that the most students live in?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.city_code from Student  group by student.city_code  order by count(*) desc limit 1",
        "question": "Return the code of the city that has the most students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.city_code from Student  group by student.city_code  order by count(*) desc limit 1",
        "question": "Return the code of the city that has the most students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Report the distinct advisors who have more than 2 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Report the distinct advisors who have more than 2 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student  group by student.advisor, student.advisor having  count(*) > 2",
        "question": "Report the distinct advisors who have more than 2 students.",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Which advisors are advising more than 2 students?",
        "correctness": 1
    },
    {
        "db_id": "voter_2",
        "query": "select distinct student.advisor from Student  group by student.advisor having  count(*) > 2",
        "question": "Which advisors are advising more than 2 students?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count(*) from event",
        "question": "How many events are there?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select event.name from event   order by event.year desc",
        "question": "List all the event names by year from the most recent to the oldest.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct event.name from event   order by event.year desc",
        "question": "List all the event names by year from the most recent to the oldest.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select event.name from event   order by event.year desc limit 1",
        "question": "What is the name of the event that happened in the most recent year?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count(*) from stadium",
        "question": "How many stadiums are there?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from stadium   order by stadium.capacity desc limit 1",
        "question": "Find the name of the stadium that has the maximum capacity.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct stadium.name from stadium   order by stadium.capacity desc limit 1",
        "question": "Find the name of the stadium that has the maximum capacity.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from stadium where  stadium.capacity < (select avg(stadium.capacity) from stadium  )",
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct stadium.name from stadium where  stadium.capacity < (select avg(stadium.capacity) from stadium  )",
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from stadium where  stadium.capacity <= (select avg(stadium.capacity) from stadium  )",
        "question": "Find the names of stadiums whose capacity is smaller than the average capacity.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country from stadium  group by stadium.country  order by count(*) desc limit 1",
        "question": "Find the country that has the most stadiums.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct stadium.country from stadium  group by stadium.country  order by count(*) desc limit 1",
        "question": "Find the country that has the most stadiums.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country from stadium  group by stadium.country having  count(*) < 3",
        "question": "Which country has at most 3 stadiums listed?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country from stadium  group by stadium.country having  count(*) <= 3",
        "question": "Which country has at most 3 stadiums listed?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country from stadium where  stadium.capacity > 60000   intersect select stadium.country from stadium where  stadium.capacity < 50000",
        "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country from stadium where  stadium.capacity > 60000   intersect select stadium.country from stadium where  stadium.capacity <= 50000",
        "question": "Which country has both stadiums with capacity greater than 60000 and stadiums with capacity less than 50000?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count( distinct stadium.city) from stadium where  stadium.opening_year < 2006",
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count(stadium.city) from stadium where  stadium.opening_year < 2006",
        "question": "How many cities have a stadium that was opened before the year of 2006?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count(*) , stadium.country from stadium  group by stadium.country",
        "question": "How many stadiums does each country have?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country , count(*) from stadium  group by stadium.country",
        "question": "How many stadiums does each country have?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.country from stadium   except select stadium.country from stadium where  stadium.opening_year > 2006",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct stadium.country from stadium   except select distinct stadium.country from stadium where  stadium.opening_year > 2006",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count(*) from stadium where  stadium.country != \"Russia\"",
        "question": "How many stadiums are not in country \"Russia\"?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count(*) from stadium where  stadium.id not in (select stadium.ID from stadium where  stadium.country = \"Russia\"  )",
        "question": "How many stadiums are not in country \"Russia\"?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from swimmer   order by swimmer.meter_100 asc",
        "question": "Find the names of all swimmers, sorted by their 100 meter scores in ascending order.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select count( distinct swimmer.nationality) from swimmer",
        "question": "How many different countries are all the swimmers from?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.meter_200 , swimmer.meter_300 from swimmer where  swimmer.nationality = \"Australia\"",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Win\"",
        "question": "Find the names of swimmers who has a result of \"win\".",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from event join stadium on event.Stadium_ID = stadium.ID  group by event.stadium_id  order by count(*) desc limit 1",
        "question": "What is the name of the stadium which held the most events?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from event join stadium on event.Stadium_ID = stadium.ID  group by stadium.id  order by count(*) desc limit 1",
        "question": "What is the name of the stadium which held the most events?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name , stadium.capacity from event join stadium on event.Stadium_ID = stadium.ID where  event.name = \"World Junior\"",
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct stadium.name , stadium.capacity from event join stadium on event.Stadium_ID = stadium.ID where  event.name = \"World Junior\"",
        "question": "Find the name and capacity of the stadium where the event named \"World Junior\" happened.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from stadium where  stadium.id not in (select event.Stadium_ID from event  )",
        "question": "Find the names of stadiums which have never had any event.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct stadium.name from stadium where  stadium.id not in (select event.Stadium_ID from event  )",
        "question": "Find the names of stadiums which have never had any event.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by record.swimmer_id  order by count(*) desc limit 1",
        "question": "Find the name of the swimmer who has the most records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by swimmer.id  order by count(*) desc limit 1",
        "question": "Find the name of the swimmer who has the most records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by record.swimmer_id  order by count(*) desc limit 1",
        "question": "Find the name of the swimmer who has the most records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by swimmer.name  order by count(*) desc limit 1",
        "question": "Find the name of the swimmer who has the most records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by record.swimmer_id having  count(*) >= 2",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by swimmer.id having  count(*) >= 2",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID  group by swimmer.name having  count(*) >= 2",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name , swimmer.nationality from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Win\"  group by swimmer.id having  count(*) > 1",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name , swimmer.nationality from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Win\"  group by swimmer.name having  count(*) > 1",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from swimmer where  swimmer.id not in (select record.Swimmer_ID from record  )",
        "question": "Find the names of the swimmers who have no record.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from swimmer   except select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID",
        "question": "Find the names of the swimmers who have no record.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct swimmer.name from swimmer where  swimmer.id not in (select record.Swimmer_ID from record  )",
        "question": "Find the names of the swimmers who have no record.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Win\"   intersect select swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Loss\"",
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select distinct swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Win\"   intersect select distinct swimmer.name from record join swimmer on record.Swimmer_ID = swimmer.ID where  record.result = \"Loss\"",
        "question": "Find the names of the swimmers who have both \"win\" and \"loss\" results in the record.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from record join swimmer on record.Swimmer_ID = swimmer.ID join event on record.Event_ID = event.ID join stadium on event.Stadium_ID = stadium.ID where  swimmer.nationality = \"Australia\"",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from record join swimmer on record.Swimmer_ID = swimmer.ID join event on record.Event_ID = event.ID join stadium on event.Stadium_ID = stadium.ID  group by event.stadium_id  order by count(*) desc limit 1",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select stadium.name from record join swimmer on record.Swimmer_ID = swimmer.ID join event on record.Event_ID = event.ID join stadium on event.Stadium_ID = stadium.ID  group by stadium.id  order by count(*) desc limit 1",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select * from swimmer",
        "question": "Find all details for each swimmer.",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select avg(stadium.capacity) from stadium where  stadium.opening_year = 2005",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "correctness": 1
    },
    {
        "db_id": "swimming",
        "query": "select avg(stadium.capacity) from stadium where  stadium.opening_year = \"2005\"",
        "question": "What is the average capacity of the stadiums that were opened in year 2005?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.gender = \"F\"",
        "question": "Find the name of dorms only for female (F gender).",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm where  dorm.gender = \"F\"",
        "question": "Find the name of dorms only for female (F gender).",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.gender = \"F\"",
        "question": "What are the names of the all-female dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm where  dorm.gender = \"F\"",
        "question": "What are the names of the all-female dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.gender = \"F\"  group by dorm.dorm_name",
        "question": "What are the names of the all-female dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.student_capacity > 300",
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm  group by dorm.dorm_name having  sum(dorm.student_capacity) > 300",
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm where  dorm.student_capacity > 300",
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm  group by dorm.dorm_name having  max(dorm.student_capacity) > 300",
        "question": "Find the name of dorms that can accommodate more than 300 students.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.student_capacity > 300",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm  group by dorm.dorm_name having  sum(dorm.student_capacity) > 300",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm where  dorm.student_capacity > 300",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Student where  student.sex = \"F\" and student.age < 25",
        "question": "How many female students (sex is F) whose age is below 25?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Student where  student.sex = \"F\" and student.age <= 25",
        "question": "How many female students (sex is F) whose age is below 25?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Student where  student.sex = \"F\" and student.age < 25",
        "question": "How many girl students who are younger than 25?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Student where  student.age > 20",
        "question": "Find the first name of students who is older than 20.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname from Student where  student.age > 20",
        "question": "Find the first name of students who is older than 20.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Student where  student.age > 20",
        "question": "What are the first names of all students who are older than 20?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname from Student where  student.age > 20",
        "question": "What are the first names of all students who are older than 20?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Student where  student.city_code = \"PHL\" and student.age between 20 and 25",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Student where  student.age between 20 and 25 and student.city_code = \"PHL\"",
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname from Student where  student.age between 20 and 25 and student.city_code = \"PHL\"",
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Student where  student.city_code = \"PHL\" and student.age between 20 and 25",
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Dorm",
        "question": "How many dorms are there?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Dorm",
        "question": "How many dorms are in the database?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select sum(dorm.student_capacity) from Dorm",
        "question": "Find the total capacity of all dorms.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select sum(dorm.student_capacity) from Dorm",
        "question": "What is the total student capacity of all dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Student",
        "question": "How many students are there?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Student",
        "question": "How many students exist?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , avg(student.age) from Student  group by student.city_code",
        "question": "Find the average age of all students living in the each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , student.city_code from Student  group by student.city_code",
        "question": "Find the average age of all students living in the each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.city_code , avg(student.age) from Student  group by student.city_code",
        "question": "Find the average age of all students living in the each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , avg(student.age) from Student  group by student.city_code",
        "question": "What is the average age for each city and what are those cities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , student.city_code from Student  group by student.city_code",
        "question": "What is the average age for each city and what are those cities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.city_code , avg(student.age) from Student  group by student.city_code",
        "question": "What is the average age for each city and what are those cities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(dorm.student_capacity) , sum(dorm.student_capacity) from Dorm where  dorm.gender = \"X\"",
        "question": "Find the average and total capacity of dorms for the students with gender X.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(dorm.student_capacity) , sum(dorm.student_capacity) from Dorm where  dorm.gender = \"X\"",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count( distinct dorm.dormid) from Dorm",
        "question": "Find the number of dorms that have some amenity.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count( distinct has_amenity.dormid) from Has_amenity",
        "question": "How many dorms have amenities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.dormid not in (select Has_amenity.dormid from Has_amenity  )",
        "question": "Find the name of dorms that do not have any amenity",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm where  dorm.dormid not in (select Has_amenity.dormid from Has_amenity  )",
        "question": "Find the name of dorms that do not have any amenity",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.dormid not in (select Has_amenity.dormid from Has_amenity  )",
        "question": "What are the names of all the dorms that don't have any amenities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm where  dorm.dormid not in (select Has_amenity.dormid from Has_amenity  )",
        "question": "What are the names of all the dorms that don't have any amenities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count( distinct dorm.gender) from Dorm",
        "question": "Find the number of distinct gender for dorms.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count( distinct dorm.gender) from Dorm",
        "question": "How many different genders are there in the dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.student_capacity , dorm.gender from Dorm where  dorm.dorm_name like \"%Donor%\"",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.student_capacity , dorm.gender from Dorm where  dorm.dorm_name like \"%Donor%\"",
        "question": "What is the student capacity and type of gender for the dorm whose name as the phrase Donor in it?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , dorm.gender from Dorm where  dorm.student_capacity > 300 or dorm.student_capacity < 100",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name , dorm.gender from Dorm where  dorm.student_capacity > 300 or dorm.student_capacity < 100",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , dorm.gender from Dorm where  dorm.student_capacity > 300 or dorm.student_capacity <= 100",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"   intersect select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"Study Room\"",
        "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"   intersect select distinct dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"Study Room\"",
        "question": "Find the name of dorms which have both TV Lounge and Study Room as amenities.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"   intersect select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"Study Room\"",
        "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"Study Room\"   intersect select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "What is the name of the dorm with both a TV Lounge and Study Room listed as amenities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"   except select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"Study Room\"",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"   except select distinct dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"Study Room\"",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname from Student where  student.sex = \"F\" and student.city_code = \"BAL\"   union select student.lname from Student where  student.sex = \"M\" and student.age < 20",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.lname from Student where  student.sex = \"F\" and student.city_code = \"BAL\"   union select distinct student.lname from Student where  student.sex = \"M\" and student.age < 20",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname from Student where  student.city_code = \"BAL\" and student.sex = \"F\"   union select student.lname from Student where  student.sex = \"M\" and student.age < 20",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm   order by dorm.student_capacity desc limit 1",
        "question": "Find the name of the dorm with the largest capacity.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm   order by dorm.student_capacity desc limit 1",
        "question": "Find the name of the dorm with the largest capacity.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm   order by dorm.student_capacity desc limit 1",
        "question": "What are the names of the dorm with the largest capacity?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm   order by dorm.student_capacity desc limit 1",
        "question": "What are the names of the dorm with the largest capacity?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Dorm_amenity   order by dorm_amenity.amenity_name asc",
        "question": "List in alphabetic order all different amenities.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Dorm_amenity   order by dorm_amenity.amenity_name asc",
        "question": "List in alphabetic order all different amenities.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Dorm_amenity   order by dorm_amenity.amenity_name asc",
        "question": "What are the different dorm amenity names in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Dorm_amenity   order by dorm_amenity.amenity_name asc",
        "question": "What are the different dorm amenity names in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code from Student  group by student.city_code  order by count(*) desc limit 1",
        "question": "Find the code of city where most of students are living in.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.city_code from Student  group by student.city_code  order by count(*) desc limit 1",
        "question": "Find the code of city where most of students are living in.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code from Student  group by student.city_code  order by count(*) desc limit 1",
        "question": "What is the code of the city with the most students?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.age < (select avg(student.age) from Student  )",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname , student.fname from Student where  student.age < (select avg(student.age) from Student  )",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname , student.lname from Student where  student.age < (select avg(student.age) from Student  )",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.age <= (select avg(student.age) from Student  )",
        "question": "Find the first and last name of students whose age is younger than the average age.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.age < (select avg(student.age) from Student  )",
        "question": "What is the first and last name of all students who are younger than average?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname , student.fname from Student where  student.age < (select avg(student.age) from Student  )",
        "question": "What is the first and last name of all students who are younger than average?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname , student.lname from Student where  student.age < (select avg(student.age) from Student  )",
        "question": "What is the first and last name of all students who are younger than average?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.age <= (select avg(student.age) from Student  )",
        "question": "What is the first and last name of all students who are younger than average?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.stuid not in (select Student.StuID from Student where  student.city_code = \"HKG\"  )    order by student.age asc",
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.city_code != \"HKG\"   order by student.age asc",
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname , student.fname from Student where  student.stuid not in (select Student.StuID from Student where  student.city_code = \"HKG\"  )    order by student.age asc",
        "question": "List the first and last name of students who are not living in the city with code HKG, and sorted the results by their ages.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.city_code != \"HKG\"   order by student.age asc",
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.stuid not in (select Student.StuID from Student where  student.city_code = \"HKG\"  )    order by student.age asc",
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname , student.fname from Student where  student.city_code != \"HKG\"   order by student.age asc",
        "question": "What are the first and last names of all students who are not living in the city HKG and order the results by age?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Anonymous Donor Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Anonymous Donor Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Anonymous Donor Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Anonymous Donor Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "What are the amenities in alphabetical order that Anonymous Donor Hall has?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , sum(dorm.student_capacity) , dorm.gender from Dorm  group by dorm.gender",
        "question": "Find the number of dorms and total capacity for each gender.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.gender , count(*) , sum(dorm.student_capacity) from Dorm  group by dorm.gender",
        "question": "Find the number of dorms and total capacity for each gender.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , dorm.gender , sum(dorm.student_capacity) from Dorm  group by dorm.gender",
        "question": "How many dorms are there and what is the total capacity for each gender?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , max(student.age) , student.sex from Student  group by student.sex",
        "question": "Find the average and oldest age for students with different sex.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.sex , avg(student.age) , max(student.age) from Student  group by student.sex",
        "question": "Find the average and oldest age for students with different sex.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select max(student.age) , avg(student.age) , student.sex from Student  group by student.sex",
        "question": "Find the average and oldest age for students with different sex.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , max(student.age) , student.sex from Student  group by student.sex",
        "question": "What is the average and oldest age for each gender of student?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.sex , avg(student.age) , max(student.age) from Student  group by student.sex",
        "question": "What is the average and oldest age for each gender of student?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.major , count(*) from Student  group by student.major",
        "question": "Find the number of students in each major.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.major , count(*) from Student  group by student.major",
        "question": "Find the number of students in each major.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.major , count(*) from Student  group by student.major",
        "question": "How many students are there in each major?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.major , count(*) from Student  group by student.major",
        "question": "How many students are there in each major?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , count(*) , avg(student.age) from Student  group by student.city_code",
        "question": "Find the number and average age of students living in each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , avg(student.age) , student.city_code from Student  group by student.city_code",
        "question": "Find the number and average age of students living in each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , count(*) , avg(student.age) from Student  group by student.city_code",
        "question": "How many students live in each city and what are their average ages?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , count(*) , student.city_code from Student where  student.sex = \"M\"  group by student.city_code",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , avg(student.age) , count(*) from Student where  student.sex = \"M\"  group by student.city_code",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , count(*) from Student  group by student.city_code having  count(*) > 1",
        "question": "Find the number of students for the cities where have more than one student.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , student.city_code from Student  group by student.city_code having  count(*) > 1",
        "question": "Find the number of students for the cities where have more than one student.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.city_code , count(*) from Student  group by student.city_code having  count(*) > 1",
        "question": "How many students are from each city, and which cities have more than one cities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.city_code , count(*) from Student  group by student.city_code having  count(*) > 1",
        "question": "How many students are from each city, and which cities have more than one cities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.major not in (select student.major from Student  group by student.major  order by count(*) desc limit 1 )",
        "question": "Find the first and last name of students who are not in the largest major.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Student where  student.major not in (select student.major from Student  group by student.major  order by count(*) desc limit 1 )",
        "question": "What is the first and last name of the students who are not in the largest major?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , student.sex from Student where  student.age > (select avg(student.age) from Student  )  group by student.sex",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.sex , count(*) from Student where  student.age > (select avg(student.age) from Student  )  group by student.sex",
        "question": "How many students are older than average for each gender?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , student.sex from Student where  student.age > (select avg(student.age) from Student  )  group by student.sex",
        "question": "How many students are older than average for each gender?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.sex , count(*) from Student where  student.age > (select avg(student.age) from Student  )  group by student.sex",
        "question": "How many students are older than average for each gender?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , avg(student.age) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID  group by dorm.dorm_name",
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , dorm.dorm_name from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID  group by dorm.dorm_name",
        "question": "Find the average age of students living in each dorm and the name of dorm.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , avg(student.age) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID  group by dorm.dorm_name",
        "question": "What is the average age for each dorm and what are the names of each dorm?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select avg(student.age) , dorm.dorm_name from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID  group by dorm.dorm_name",
        "question": "What is the average age for each dorm and what are the names of each dorm?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.age > 20  group by dorm.dorm_name",
        "question": "Find the number of students who is older than 20 in each dorm.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , dorm.dorm_name from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.age > 20  group by dorm.dorm_name",
        "question": "Find the number of students who is older than 20 in each dorm.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name , count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.age > 20  group by dorm.dorm_name",
        "question": "Find the number of students who is older than 20 in each dorm.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.age > 20  group by dorm.dorm_name",
        "question": "How many students are older than 20 in each dorm?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name , count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.age > 20  group by dorm.dorm_name",
        "question": "How many students are older than 20 in each dorm?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) , dorm.dorm_name from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.age > 20  group by dorm.dorm_name",
        "question": "How many students are older than 20 in each dorm?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.dorm_name = \"Smith Hall\"",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.dorm_name = \"Smith Hall\"",
        "question": "What are the first names of all students in Smith Hall?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.gender = \"M\"",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.sex = \"M\" and dorm.gender = \"M\"",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.gender = \"M\" and student.sex = \"M\"",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.gender = \"M\"",
        "question": "What are the total number of students who are living in a male dorm?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.sex = \"F\" and dorm.dorm_name = \"Smith Hall\"",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.dorm_name = \"Smith Hall\" and student.sex = \"F\"",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  student.sex = \"F\" and dorm.dorm_name = \"Smith Hall\"",
        "question": "How many female students live in Smith Hall?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select count(*) from Lives_in join Dorm on Lives_in.dormid = Dorm.dormid join Student on Lives_in.stuid = Student.StuID where  dorm.dorm_name = \"Smith Hall\" and student.sex = \"F\"",
        "question": "How many female students live in Smith Hall?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"",
        "question": "Find the name of amenities Smith Hall dorm have.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"",
        "question": "Find the name of amenities Smith Hall dorm have.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"",
        "question": "What are the names of the amenities that Smith Hall has?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"",
        "question": "What are the names of the amenities that Smith Hall has?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "Find the name of amenities Smith Hall dorm have. ordered the results by amenity names.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "What amenities does Smith Hall have in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm.dorm_name = \"Smith Hall\"   order by dorm_amenity.amenity_name asc",
        "question": "What amenities does Smith Hall have in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Dorm_amenity  group by dorm_amenity.amenity_name  order by count(*) desc limit 1",
        "question": "Find the name of amenity that is most common in all dorms.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID  group by dorm_amenity.amenity_name  order by count(*) desc limit 1",
        "question": "Find the name of amenity that is most common in all dorms.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Dorm_amenity  group by dorm_amenity.amenity_name  order by count(*) desc limit 1",
        "question": "What is the most common amenity in the dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid  group by dorm_amenity.amenity_name  order by count(*) desc limit 1",
        "question": "What is the most common amenity in the dorms?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , dorm.student_capacity from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid  group by dorm.dorm_name  order by count(*) asc limit 1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , dorm.student_capacity from Dorm where  dorm.dormid in (select Has_amenity.dormid from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid  group by Has_amenity.dormid  order by count(*) asc limit 1 )",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name , dorm.student_capacity from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid  group by dorm.dorm_name  order by count(*) asc limit 1",
        "question": "What is the name and capacity of the dorm with the fewest amount of amenities?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm   except select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.dormid not in (select Has_amenity.dormid from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid where  dorm_amenity.amenity_name = \"TV Lounge\"  )",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm   except select distinct dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm   except select dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm.dorm_name from Dorm where  dorm.dormid not in (select Has_amenity.dormid from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid where  dorm_amenity.amenity_name = \"TV Lounge\"  )",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct dorm.dorm_name from Dorm   except select distinct dorm.dorm_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname , student.fname from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname , student.lname from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "Find the first and last name of students who are living in the dorms that have amenity TV Lounge.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.fname , student.lname from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select student.lname , student.fname from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select distinct student.fname , student.lname from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  dorm_amenity.amenity_name = \"TV Lounge\"",
        "question": "What are the first and last names of all students who are living in a dorm with a TV Lounge?",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  student.lname = \"Smith\"",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "correctness": 1
    },
    {
        "db_id": "dorm_1",
        "query": "select dorm_amenity.amenity_name from Has_amenity join Dorm_amenity on Has_amenity.amenid = Dorm_amenity.amenid join Dorm on Has_amenity.dormid = Dorm.dormid join Lives_in on Dorm.dormid = Lives_in.dormid join Student on Lives_in.stuid = Student.StuID where  student.lname = \"Smith\"",
        "question": "What are the amenities in the dorm that a student who has the last name of Smith lives in?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count(*) from Customers",
        "question": "How many customers are there?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count(*) from Customers",
        "question": "Count the number of customers.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.email_address , customers.phone_number from Customers   order by customers.email_address,customers.phone_number asc",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.email_address , customers.phone_number from Customers   order by customers.email_address asc",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct customers.email_address , customers.phone_number from Customers   order by customers.email_address,customers.phone_number asc",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.email_address , customers.phone_number from Customers   order by customers.email_address,customers.phone_number asc",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.email_address , customers.phone_number from Customers   order by customers.email_address asc",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct customers.email_address , customers.phone_number from Customers   order by customers.email_address,customers.phone_number asc",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.town_city from Customers where  customers.customer_type_code = \"Good Credit Rating\"  group by customers.town_city  order by count(*) asc limit 1",
        "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.town_city from Customers where  customers.customer_type_code = \"Good Credit Rating\"  group by customers.town_city having  count(*) < 100  order by count(*) asc limit 1",
        "question": "Which city has the least number of customers whose type code is \"Good Credit Rating\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.town_city from Customers where  customers.customer_type_code = \"Good Credit Rating\"  group by customers.town_city  order by count(*) asc limit 1",
        "question": "Return the city with the customer type code \"Good Credit Rating\" that had the fewest customers.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_name , count(*) from Complaints join Products on Complaints.product_id = Products.product_id  group by complaints.product_id",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_name , count(*) from Complaints join Products on Complaints.product_id = Products.product_id  group by products.product_name",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_name , count(*) from Complaints join Products on Complaints.product_id = Products.product_id  group by complaints.product_id",
        "question": "What are all the different product names, and how many complains has each received?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct products.product_name , count(*) from Complaints join Products on Complaints.product_id = Products.product_id  group by complaints.product_id",
        "question": "What are all the different product names, and how many complains has each received?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_name , count(*) from Complaints join Products on Complaints.product_id = Products.product_id  group by products.product_name",
        "question": "What are all the different product names, and how many complains has each received?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count(*) , products.product_name from Complaints join Products on Complaints.product_id = Products.product_id  group by complaints.product_id",
        "question": "What are all the different product names, and how many complains has each received?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct products.product_name , count(*) from Complaints join Products on Complaints.product_id = Products.product_id  group by products.product_name",
        "question": "What are all the different product names, and how many complains has each received?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.phone_number from Complaints join Customers on Complaints.customer_id = Customers.customer_id   order by complaints.date_complaint_raised desc limit 1",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.phone_number from Complaints join Customers on Complaints.customer_id = Customers.customer_id   order by complaints.date_complaint_raised desc limit 1",
        "question": "Return the phone number of the customer who filed the complaint that was raised most recently.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.email_address , customers.phone_number from Customers where  customers.customer_id not in (select Complaints.customer_id from Complaints  )",
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.email_address , customers.phone_number from Customers   except select customers.email_address , customers.phone_number from Complaints join Customers on Complaints.customer_id = Customers.customer_id",
        "question": "Find the email and phone number of the customers who have never filed a complaint before.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_description from Products where  products.product_name = \"Chocolate\"",
        "question": "What is the description of the product named \"Chocolate\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct products.product_description from Products where  products.product_name = \"Chocolate\"",
        "question": "What is the description of the product named \"Chocolate\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_description from Products where  products.product_name = \"Chocolate\"",
        "question": "Return the description of the product called \"Chocolate\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct products.product_description from Products where  products.product_name = \"Chocolate\"",
        "question": "Return the description of the product called \"Chocolate\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_name , products.product_category_code from Products   order by products.product_price desc limit 1",
        "question": "Find the name and category of the most expensive product.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_name , products.product_category_code from Products   order by products.product_price desc limit 1",
        "question": "What is the name and category code of the product with the highest price?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_price from Products where  products.product_id not in (select Complaints.product_id from Complaints  )",
        "question": "Find the prices of products which has never received a single complaint.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_price from Products where  products.product_id not in (select Complaints.product_id from Complaints  )",
        "question": "What are the prices of products that have never gotten a complaint?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_category_code , avg(products.product_price) from Products  group by products.product_category_code",
        "question": "What is the average price of the products for each category?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select avg(products.product_price) , products.product_category_code from Products  group by products.product_category_code",
        "question": "What is the average price of the products for each category?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct products.product_category_code , avg(products.product_price) from Products  group by products.product_category_code",
        "question": "What is the average price of the products for each category?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select products.product_category_code , avg(products.product_price) from Products  group by products.product_category_code",
        "question": "Return the average price of products that have each category code.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select avg(products.product_price) , products.product_category_code from Products  group by products.product_category_code",
        "question": "Return the average price of products that have each category code.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Complaints join Products on Complaints.product_id = Products.product_id join Staff on Complaints.staff_id = Staff.staff_id   order by products.product_price asc limit 1",
        "question": "Find the last name of the staff member who processed the complaint of the cheapest product.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Complaints join Products on Complaints.product_id = Products.product_id join Staff on Complaints.staff_id = Staff.staff_id   order by products.product_price asc limit 1",
        "question": "What is the last name of the staff member in charge of the complaint on the product with the lowest price?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select complaints.complaint_status_code from Complaints  group by complaints.complaint_status_code having  count(*) > 3",
        "question": "Which complaint status has more than 3 records on file?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct complaints.complaint_status_code from Complaints  group by complaints.complaint_status_code having  count(*) > 3",
        "question": "Which complaint status has more than 3 records on file?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select complaints.complaint_status_code from Complaints  group by complaints.complaint_status_code having  count(*) > 3",
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct complaints.complaint_status_code from Complaints  group by complaints.complaint_status_code having  count(*) > 3",
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select complaints.complaint_status_code from Complaints  group by complaints.complaint_status_code having  count(*) >= 3",
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select complaints.complaint_status_code from Complaints  group by complaints.complaint_status_code, complaints.complaint_status_code having  count(*) > 3",
        "question": "Return complaint status codes have more than 3 corresponding complaints?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Staff where  staff.email_address like \"%wrau%\"",
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct staff.last_name from Staff where  staff.email_address like \"%wrau%\"",
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Staff where  staff.email_address in (select staff.email_address from Staff where  staff.email_address like \"%wrau%\"  )",
        "question": "Find the last name of the staff whose email address contains \"wrau\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Staff where  staff.email_address like \"%wrau%\"",
        "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Staff where  staff.email_address = (select staff.email_address from Staff where  staff.email_address like \"%wrau%\"  )",
        "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Staff where  staff.email_address in (select staff.email_address from Staff where  staff.email_address like \"%wrau%\"  )",
        "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct staff.last_name from Staff where  staff.email_address like \"%wrau%\"",
        "question": "What are the last names of staff with email addressed containing the substring \"wrau\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count(*) from Customers  group by customers.customer_type_code  order by count(*) desc limit 1",
        "question": "Count the number of customers that have the customer type that is most common.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Complaints join Staff on Complaints.staff_id = Staff.staff_id   order by complaints.date_complaint_raised asc limit 1",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select staff.last_name from Complaints join Staff on Complaints.staff_id = Staff.staff_id   order by complaints.date_complaint_raised asc limit 1",
        "question": "Return the last name of the staff member who handled the complaint with the earliest date raised.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count( distinct complaints.complaint_type_code) from Complaints",
        "question": "How many distinct complaint type codes are there in the database?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count( distinct complaints.complaint_type_code) from Complaints",
        "question": "Count the number of different complaint type codes.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.address_line_1 , customers.address_line_2 from Customers where  customers.email_address = \"vbogisich@example.org\"",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct customers.address_line_1 , customers.address_line_2 from Customers where  customers.email_address = \"vbogisich@example.org\"",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select customers.address_line_1 , customers.address_line_2 from Customers where  customers.email_address = \"vbogisich@example.org\"",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct customers.address_line_1 , customers.address_line_2 from Customers where  customers.email_address = \"vbogisich@example.org\"",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select complaints.complaint_status_code , count(*) from Complaints where  complaints.complaint_type_code = \"Product Failure\"  group by complaints.complaint_status_code",
        "question": "Find the number of complaints with Product Failure type for each complaint status.",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select complaints.complaint_status_code , count(*) from Complaints where  complaints.complaint_type_code = \"Product Failure\"  group by complaints.complaint_status_code",
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select distinct complaints.complaint_status_code , count(*) from Complaints where  complaints.complaint_type_code = \"Product Failure\"  group by complaints.complaint_status_code",
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "correctness": 1
    },
    {
        "db_id": "customer_complaints",
        "query": "select count(*) , complaints.complaint_status_code from Complaints where  complaints.complaint_type_code = \"Product Failure\"  group by complaints.complaint_status_code",
        "question": "Of complaints with the type code \"Product Failure\", how many had each different status code?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select count(*) from submission",
        "question": "How many submissions are there?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select count(*) from submission",
        "question": "Count the number of submissions.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission   order by submission.scores asc",
        "question": "List the authors of submissions in ascending order of scores.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.author from submission   order by submission.scores asc",
        "question": "List the authors of submissions in ascending order of scores.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission   order by submission.scores asc",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission  group by submission.author  order by submission.scores asc",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , submission.college from submission",
        "question": "What are the authors of submissions and their colleges?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.author , submission.college from submission",
        "question": "What are the authors of submissions and their colleges?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , submission.college from submission",
        "question": "For each submission, show the author and their affiliated college.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , submission.college from submission  group by submission.college",
        "question": "For each submission, show the author and their affiliated college.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , submission.college from submission  group by submission.author",
        "question": "For each submission, show the author and their affiliated college.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , submission.college from submission  group by submission.author, submission.college",
        "question": "For each submission, show the author and their affiliated college.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission where  submission.college = \"Florida\" or submission.college = \"Temple\"",
        "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.author from submission where  submission.college = \"Florida\" or submission.college = \"Temple\"",
        "question": "Show the names of authors from college \"Florida\" or \"Temple\"",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission where  submission.college = \"Florida\" or submission.college = \"Temple\"",
        "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.author from submission where  submission.college = \"Florida\" or submission.college = \"Temple\"",
        "question": "Which authors with submissions are from college \"Florida\" or \"Temple\"?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select avg(submission.scores) from submission",
        "question": "What is the average score of submissions?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select avg(submission.scores) from submission",
        "question": "Compute the average score of submissions.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission   order by submission.scores desc limit 1",
        "question": "What is the author of the submission with the highest score?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission   order by submission.scores desc limit 1",
        "question": "Find the author who achieved the highest score in a submission.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college , count(*) from submission  group by submission.college",
        "question": "Show different colleges along with the number of authors of submission from each college.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college , count(*) from submission  group by submission.college",
        "question": "For each college, return the college name and the count of authors with submissions from that college.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college from submission  group by submission.college  order by count(*) desc limit 1",
        "question": "Show the most common college of authors of submissions.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.college from submission  group by submission.college  order by count(*) desc limit 1",
        "question": "Show the most common college of authors of submissions.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college from submission  group by submission.college  order by count(*) desc limit 1",
        "question": "Which college has the most authors with submissions?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college from submission  group by submission.college  order by count(submission.author) desc limit 1",
        "question": "Which college has the most authors with submissions?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college from submission where  submission.scores > 90   intersect select submission.college from submission where  submission.scores < 80",
        "question": "Show the colleges that have both authors with submission score larger than 90 and authors with submission score smaller than 80.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.college from submission where  submission.scores > 90   intersect select submission.college from submission where  submission.scores < 80",
        "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.college from submission where  submission.scores > 90   intersect select distinct submission.college from submission where  submission.scores < 80",
        "question": "Which colleges have both authors with submission score above 90 and authors with submission score below 80?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , acceptance.result from Acceptance join submission on Acceptance.Submission_ID = submission.Submission_ID",
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author , acceptance.result from Acceptance join submission on Acceptance.Submission_ID = submission.Submission_ID",
        "question": "For each submission, find its author and acceptance result.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select acceptance.result from Acceptance join submission on Acceptance.Submission_ID = submission.Submission_ID   order by submission.scores desc limit 1",
        "question": "Show the result of the submission with the highest score.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from Acceptance join workshop on Acceptance.Workshop_ID = workshop.Workshop_ID join submission on Acceptance.Submission_ID = submission.Submission_ID  group by submission.author having  count(*) > 1",
        "question": "Show the authors who have submissions to more than one workshop.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from Acceptance join workshop on Acceptance.Workshop_ID = workshop.Workshop_ID join submission on Acceptance.Submission_ID = submission.Submission_ID  group by submission.author having  count(*) > 1",
        "question": "Which authors have submitted to more than one workshop?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select workshop.date , workshop.venue from workshop   order by workshop.venue asc",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select workshop.venue , workshop.date from workshop   order by workshop.venue asc",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select workshop.date , workshop.venue from workshop   order by workshop.venue asc",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select workshop.venue , workshop.date from workshop   order by workshop.venue asc",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct workshop.date , workshop.venue from workshop   order by workshop.venue asc",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission   except select submission.author from Acceptance join workshop on Acceptance.Workshop_ID = workshop.Workshop_ID join submission on Acceptance.Submission_ID = submission.Submission_ID",
        "question": "List the authors who do not have submission to any workshop.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission where  submission.submission_id not in (select Acceptance.Submission_ID from Acceptance  )",
        "question": "List the authors who do not have submission to any workshop.",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission   except select submission.author from Acceptance join workshop on Acceptance.Workshop_ID = workshop.Workshop_ID join submission on Acceptance.Submission_ID = submission.Submission_ID",
        "question": "Which authors did not submit to any workshop?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select submission.author from submission where  submission.submission_id not in (select Acceptance.Submission_ID from Acceptance  )",
        "question": "Which authors did not submit to any workshop?",
        "correctness": 1
    },
    {
        "db_id": "workshop_paper",
        "query": "select distinct submission.author from submission   except select distinct submission.author from Acceptance join workshop on Acceptance.Workshop_ID = workshop.Workshop_ID join submission on Acceptance.Submission_ID = submission.Submission_ID",
        "question": "Which authors did not submit to any workshop?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select count(*) from Hotels",
        "question": "How many available hotels are there in total?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select count(*) from Hotels",
        "question": "Find the total number of available hotels.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.price_range from Hotels",
        "question": "What are the price ranges of hotels?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.price_range from Hotels",
        "question": "Tell me the price ranges for all the hotels.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct locations.location_name from Locations",
        "question": "Show all distinct location names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct locations.location_name from Locations  group by locations.location_name",
        "question": "Show all distinct location names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct locations.location_name from Locations",
        "question": "What are the distinct location names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct locations.location_name from Locations  group by locations.location_name",
        "question": "What are the distinct location names?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select staff.name , staff.other_details from Staff",
        "question": "Show the names and details of all the staff members.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct staff.name , staff.other_details from Staff",
        "question": "Show the names and details of all the staff members.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select staff.name , staff.other_details from Staff",
        "question": "What is the name and detail of each staff member?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct staff.name , staff.other_details from Staff",
        "question": "What is the name and detail of each staff member?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select staff.name , staff.other_details from Staff  group by staff.staff_id",
        "question": "What is the name and detail of each staff member?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visitors.tourist_details from Visitors",
        "question": "Show details of all visitors.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct visitors.tourist_details from Visitors",
        "question": "Show details of all visitors.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visitors.tourist_details from Visitors",
        "question": "What is the detail of each visitor?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct visitors.tourist_details from Visitors",
        "question": "What is the detail of each visitor?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visitors.tourist_details from Visitors  group by visitors.tourist_id",
        "question": "What is the detail of each visitor?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.price_range from Hotels where  hotels.star_rating_code = 5",
        "question": "Show the price ranges of hotels with 5 star ratings.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.price_range from Hotels where  hotels.star_rating_code = \"5\"",
        "question": "Show the price ranges of hotels with 5 star ratings.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.price_range from Hotels where  hotels.star_rating_code = \"5\"",
        "question": "What are the price ranges of five star hotels?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.address from Locations where  locations.location_name = \"UK Gallery\"",
        "question": "What is the address of the location \"UK Gallery\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.address from Locations where  locations.location_name = \"UK Gallery\"",
        "question": "Find the address of the location named \"UK Gallery\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.other_details from Locations where  locations.location_name = \"UK Gallery\"",
        "question": "What is the detail of the location UK Gallery?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.other_details from Locations where  locations.location_name = \"UK Gallery\"",
        "question": "Return the detail of the location named \"UK Gallery\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.location_name from Locations where  locations.location_name like \"%film%\"",
        "question": "Which location names contain the word \"film\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct locations.location_name from Locations where  locations.location_name like \"%film%\"",
        "question": "Which location names contain the word \"film\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.location_name from Locations where  locations.location_name in (select locations.location_name from Locations where  locations.location_name like \"%film%\"  )",
        "question": "Which location names contain the word \"film\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.location_name from Locations where  locations.location_name like \"%%film%\"",
        "question": "Which location names contain the word \"film\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.location_name from Locations where  locations.location_name like \"%film%\"",
        "question": "Find all the locations whose names contain the word \"film\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct locations.location_name from Locations where  locations.location_name like \"%film%\"",
        "question": "Find all the locations whose names contain the word \"film\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select locations.location_name from Locations where  locations.location_name in (select locations.location_name from Locations where  locations.location_name like \"%film%\"  )",
        "question": "Find all the locations whose names contain the word \"film\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select count( distinct photos.name) from Photos",
        "question": "How many distinct names are associated with all the photos?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select count( distinct photos.name) from Photos",
        "question": "Count the number of distinct names associated with the photos.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct visits.visit_date from Visits",
        "question": "What are the distinct visit dates?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct visits.visit_date from Visits",
        "question": "Find all the distinct visit dates.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , tourist_attractions.opening_hours from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\" or tourist_attractions.how_to_get_there = \"walk\"",
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.opening_hours , tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\" or tourist_attractions.how_to_get_there = \"walk\"",
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , tourist_attractions.opening_hours from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\" or tourist_attractions.how_to_get_there = \"walk\"",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.opening_hours , tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\" or tourist_attractions.how_to_get_there = \"walk\"",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select ref_hotel_star_ratings.star_rating_description from Hotels join Ref_Hotel_Star_Ratings on Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code where  hotels.price_range > 10000",
        "question": "What are the star rating descriptions of the hotels with price above 10000?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select ref_hotel_star_ratings.star_rating_description from Hotels join Ref_Hotel_Star_Ratings on Hotels.star_rating_code = Ref_Hotel_Star_Ratings.star_rating_code where  hotels.price_range > 10000",
        "question": "Give me the star rating descriptions of the hotels that cost more than 10000.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select museums.museum_details , tourist_attractions.opening_hours from Museums join Tourist_Attractions on Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID",
        "question": "What are the details and opening hours of the museums?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct museums.museum_details , tourist_attractions.opening_hours from Museums join Tourist_Attractions on Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID",
        "question": "What are the details and opening hours of the museums?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select museums.museum_details , tourist_attractions.opening_hours from Museums join Tourist_Attractions on Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID",
        "question": "Give me the detail and opening hour for each museum.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct museums.museum_details , tourist_attractions.opening_hours from Museums join Tourist_Attractions on Museums.Museum_ID = Tourist_Attractions.Tourist_Attraction_ID",
        "question": "Give me the detail and opening hour for each museum.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  photos.name = \"game1\"",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  photos.name = \"game1\"",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  photos.name = \"game1\"",
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  photos.name = \"game1\"",
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select photos.name , photos.description from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"film festival\"",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct photos.name , photos.description from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"film festival\"",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select photos.name , photos.description from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"film festival\"",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct photos.name , photos.description from Photos join Tourist_Attractions on Photos.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"film festival\"",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select shops.shop_details from Shops join Tourist_Attractions on Shops.Shop_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\"",
        "question": "What are the details of the shops that can be accessed by walk?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct shops.shop_details from Shops join Tourist_Attractions on Shops.Shop_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\"",
        "question": "What are the details of the shops that can be accessed by walk?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select shops.shop_details from Shops join Tourist_Attractions on Shops.Shop_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\"",
        "question": "Find the details of the shops that can be reached by walk.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct shops.shop_details from Shops join Tourist_Attractions on Shops.Shop_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\"",
        "question": "Find the details of the shops that can be reached by walk.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select staff.name from Staff join Tourist_Attractions on Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"US museum\"",
        "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct staff.name from Staff join Tourist_Attractions on Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"US museum\"",
        "question": "What is the name of the staff that is in charge of the attraction named \"US museum\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select staff.name from Staff join Tourist_Attractions on Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"US museum\"",
        "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct staff.name from Staff join Tourist_Attractions on Staff.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.name = \"US museum\"",
        "question": "Tell me the name of the staff in charge of the attraction called \"US museum\".",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select street_markets.market_details from Street_Markets join Tourist_Attractions on Street_Markets.Market_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\" or tourist_attractions.how_to_get_there = \"bus\"",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct street_markets.market_details from Street_Markets join Tourist_Attractions on Street_Markets.Market_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\" or tourist_attractions.how_to_get_there = \"bus\"",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select street_markets.market_details from Street_Markets join Tourist_Attractions on Street_Markets.Market_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\" or tourist_attractions.how_to_get_there = \"bus\"",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct street_markets.market_details from Street_Markets join Tourist_Attractions on Street_Markets.Market_ID = Tourist_Attractions.Tourist_Attraction_ID where  tourist_attractions.how_to_get_there = \"walk\" or tourist_attractions.how_to_get_there = \"bus\"",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visits.visit_date , visits.visit_details from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visits.visit_details , visits.visit_date from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visits.visit_date , visits.visit_details from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select visits.visit_details , visits.visit_date from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "Which tourist attractions does the visitor with detail 'Vincent' visit?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.visit_date from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\" or visitors.tourist_details = \"Vivian\"",
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.visit_date from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\" or visitors.tourist_details = \"Vivian\"",
        "question": "For each tourist attraction, return its name and the date when the tourists named Vincent or Vivian visited there.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.star_rating_code , avg(hotels.price_range) from Hotels  group by hotels.star_rating_code",
        "question": "Show the average price of hotels for each star rating code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct hotels.star_rating_code , avg(hotels.price_range) from Hotels  group by hotels.star_rating_code",
        "question": "Show the average price of hotels for each star rating code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select avg(hotels.price_range) , hotels.star_rating_code from Hotels  group by hotels.star_rating_code",
        "question": "Show the average price of hotels for each star rating code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.star_rating_code , avg(hotels.price_range) from Hotels  group by hotels.star_rating_code",
        "question": "What is the average price range of hotels for each each star rating code?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select avg(hotels.price_range) , hotels.star_rating_code from Hotels  group by hotels.star_rating_code",
        "question": "What is the average price range of hotels for each each star rating code?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct hotels.star_rating_code , avg(hotels.price_range) from Hotels  group by hotels.star_rating_code",
        "question": "What is the average price range of hotels for each each star rating code?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.pets_allowed_yn , avg(hotels.price_range) from Hotels  group by hotels.pets_allowed_yn",
        "question": "Show the average price of hotels for different pet policy.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct hotels.pets_allowed_yn , avg(hotels.price_range) from Hotels  group by hotels.pets_allowed_yn",
        "question": "Show the average price of hotels for different pet policy.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select avg(hotels.price_range) , hotels.pets_allowed_yn from Hotels  group by hotels.pets_allowed_yn",
        "question": "Show the average price of hotels for different pet policy.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select avg(hotels.price_range) , hotels.pets_allowed_yn from Hotels  group by hotels.pets_allowed_yn",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.pets_allowed_yn , avg(hotels.price_range) from Hotels  group by hotels.pets_allowed_yn",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.hotel_id , hotels.star_rating_code from Hotels   order by hotels.price_range asc",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.hotel_id , hotels.star_rating_code from Hotels   order by hotels.price_range asc",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct hotels.hotel_id , hotels.star_rating_code from Hotels   order by hotels.price_range asc",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.other_hotel_details from Hotels   order by hotels.price_range desc limit 3",
        "question": "Show the details of the top 3 most expensive hotels.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.other_hotel_details from Hotels   order by hotels.price_range asc limit 3",
        "question": "Show the details of the top 3 most expensive hotels.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.other_hotel_details from Hotels   order by hotels.price_range desc limit 3",
        "question": "What are the details of the three most expensive hotels?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.other_hotel_details from Hotels   order by hotels.price_range asc limit 3",
        "question": "What are the details of the three most expensive hotels?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.other_hotel_details , hotels.star_rating_code from Hotels   order by hotels.price_range asc limit 3",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.star_rating_code , hotels.other_hotel_details from Hotels   order by hotels.price_range asc limit 3",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select hotels.other_hotel_details , hotels.star_rating_code from Hotels   order by hotels.price_range asc limit 3",
        "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.how_to_get_there from Tourist_Attractions  group by tourist_attractions.how_to_get_there  order by count(*) desc limit 1",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.how_to_get_there from Tourist_Attractions  group by tourist_attractions.how_to_get_there  order by count(*) desc limit 1",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.how_to_get_there from Tourist_Attractions  group by tourist_attractions.how_to_get_there  order by count(*) desc limit 1",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select ref_attraction_types.attraction_type_description , tourist_attractions.attraction_type_code from Tourist_Attractions join Ref_Attraction_Types on Tourist_Attractions.Attraction_Type_Code = Ref_Attraction_Types.Attraction_Type_Code  group by tourist_attractions.attraction_type_code  order by count(*) desc limit 1",
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select ref_attraction_types.attraction_type_description , tourist_attractions.attraction_type_code from Tourist_Attractions join Ref_Attraction_Types on Tourist_Attractions.Attraction_Type_Code = Ref_Attraction_Types.Attraction_Type_Code  group by tourist_attractions.attraction_type_code  order by count(*) desc limit 1",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.attraction_type_code , ref_attraction_types.attraction_type_description from Tourist_Attractions join Ref_Attraction_Types on Tourist_Attractions.Attraction_Type_Code = Ref_Attraction_Types.Attraction_Type_Code  group by tourist_attractions.attraction_type_code  order by count(*) desc limit 1",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.how_to_get_there , count(*) from Tourist_Attractions  group by tourist_attractions.how_to_get_there",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.how_to_get_there , count(*) from Tourist_Attractions  group by tourist_attractions.how_to_get_there",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.how_to_get_there , count(*) from Tourist_Attractions  group by tourist_attractions.how_to_get_there",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.how_to_get_there , count(*) from Tourist_Attractions  group by tourist_attractions.how_to_get_there",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id , count(*) from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id",
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id , count(*) from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by tourist_attractions.tourist_attraction_id",
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.tourist_attraction_id , count(*) from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id",
        "question": "Show different tourist attractions' names, ids, and the corresponding number of visits.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , tourist_attractions.tourist_attraction_id , count(*) from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id",
        "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.tourist_attraction_id , count(*) from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id",
        "question": "What are the name, id and the corresponding number of visits for each  tourist attraction?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.tourist_attraction_id from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id having  count(*) >= 2",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.tourist_attraction_id from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id having  count(*) >= 2",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name , visits.tourist_attraction_id from Visits join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID  group by visits.tourist_attraction_id having  count(*) <= 1",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"walk\"   union select tourist_attractions.name from Tourist_Attractions join Locations on Tourist_Attractions.Location_ID = Locations.Location_ID where  locations.address = \"660 Shea Crescent\"",
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"walk\" or tourist_attractions.location_id = \"660 Shea Crescent\"",
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"walk\"   union select tourist_attractions.name from Tourist_Attractions join Locations on Tourist_Attractions.Location_ID = Locations.Location_ID where  locations.address = \"660 Shea Crescent\"",
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"walk\" or tourist_attractions.location_id = \"660 Shea Crescent\"",
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"   union select tourist_attractions.name from Tourist_Attractions join Locations on Tourist_Attractions.Location_ID = Locations.Location_ID where  locations.address = \"254 Ottilie Junction\"",
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\" or tourist_attractions.location_id = \"254 Ottilie Junction\"",
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"   union select tourist_attractions.name from Tourist_Attractions join Locations on Tourist_Attractions.Location_ID = Locations.Location_ID where  locations.address = \"254 Ottilie Junction\"",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\" or tourist_attractions.location_id = \"254 Ottilie Junction\"",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Tourist_Attractions where  tourist_attractions.how_to_get_there = \"bus\"   union select distinct tourist_attractions.name from Tourist_Attractions join Locations on Tourist_Attractions.Location_ID = Locations.Location_ID where  locations.address = \"254 Ottilie Junction\"",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"   intersect select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Marcelle\"",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"   intersect select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Marcelle\"",
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select distinct tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Vincent\"   intersect select distinct tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Marcelle\"",
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Alison\"   except select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Rosalind\"",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Alison\"   except select tourist_attractions.name from Visits join Visitors on Visits.Tourist_ID = Visitors.Tourist_ID join Tourist_Attractions on Visits.Tourist_Attraction_ID = Tourist_Attractions.Tourist_Attraction_ID where  visitors.tourist_details = \"Rosalind\"",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select count(*) from Visitors where  visitors.tourist_id not in (select Visits.Tourist_ID from Visits  )",
        "question": "How many tourists did not make any visit?",
        "correctness": 1
    },
    {
        "db_id": "cre_Theme_park",
        "query": "select count(*) from Visitors where  visitors.tourist_id not in (select Visits.Tourist_ID from Visits  )",
        "question": "Count the number of tourists who did not visit any place.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select hosting_city.host_city from hosting_city   order by hosting_city.year desc limit 1",
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select hosting_city.match_id from hosting_city join match on hosting_city.Match_ID = match.Match_ID where  match.competition = \"1994 FIFA World Cup qualification\"",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct hosting_city.match_id from hosting_city join match on hosting_city.Match_ID = match.Match_ID where  match.competition = \"1994 FIFA World Cup qualification\"",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select match.match_id from match where  match.competition = \"1994 FIFA World Cup qualification\"",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID where  hosting_city.year > 2010",
        "question": "Find the cities which were once a host city after 2010?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from hosting_city join city on hosting_city.Host_City = city.City_ID where  hosting_city.year > 2010",
        "question": "Find the cities which were once a host city after 2010?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID where  hosting_city.year > 2010  group by city.city_id having  count(*) >= 1",
        "question": "Find the cities which were once a host city after 2010?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID where  hosting_city.year > 2010  group by hosting_city.host_city having  count(*) >= 1",
        "question": "Find the cities which were once a host city after 2010?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID where  hosting_city.year > 2010",
        "question": "Which cities served as a host city after 2010?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID where  hosting_city.year > 2010  group by city.city",
        "question": "Which cities served as a host city after 2010?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by hosting_city.host_city  order by count(*) desc limit 1",
        "question": "Which city has hosted the most events?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.city  order by count(*) desc limit 1",
        "question": "Which city has hosted the most events?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by hosting_city.host_city  order by count(*) desc limit 1",
        "question": "Find the city that hosted the most events.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.city_id  order by count(*) desc limit 1",
        "question": "Find the city that hosted the most events.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.city  order by count(*) desc limit 1",
        "question": "Find the city that hosted the most events.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select temperature.jan from temperature join city on temperature.City_ID = city.City_ID where  city.city = \"Shanghai\" and temperature.jan = \"jan\"",
        "question": "Give me the temperature of Shanghai in January.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select temperature.jan from temperature join city on temperature.City_ID = city.City_ID where  city.city = \"Shanghai\"",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select temperature.jan from temperature join city on temperature.City_ID = city.City_ID where  city.city = \"Shanghai\" and temperature.jan = \"jan\"",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city   order by city.regional_population desc limit 3",
        "question": "Which three cities have the largest regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city  group by city.city  order by sum(city.regional_population) desc limit 3",
        "question": "Which three cities have the largest regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city  group by city.city  order by city.regional_population desc limit 3",
        "question": "Which three cities have the largest regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city  group by city.city  order by avg(city.regional_population) desc limit 3",
        "question": "Which three cities have the largest regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from city   order by city.regional_population desc limit 3",
        "question": "Which three cities have the largest regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city   order by city.regional_population desc limit 3",
        "question": "What are the three largest cities in terms of regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city  group by city.regional_population  order by city.regional_population desc limit 3",
        "question": "What are the three largest cities in terms of regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city  group by city.city  order by city.regional_population desc limit 3",
        "question": "What are the three largest cities in terms of regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from city   order by city.regional_population desc limit 3",
        "question": "What are the three largest cities in terms of regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city  group by city.city  order by sum(city.regional_population) desc limit 3",
        "question": "What are the three largest cities in terms of regional population?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city , city.gdp from city   order by city.gdp asc limit 1",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city , city.gdp from city   order by city.gdp asc limit 1",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.jul or temperature.oct > temperature.mar",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.oct or temperature.mar < temperature.jul",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.jul or temperature.oct >= temperature.mar",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.jul or temperature.oct > temperature.mar",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.sep or temperature.oct > temperature.mar",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.jul or temperature.oct > temperature.mar",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.oct or temperature.mar < temperature.jul",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.jul or temperature.oct >= temperature.mar",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.jul or temperature.oct > temperature.mar",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.oct or temperature.mar < temperature.jul",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID join hosting_city on city.City_ID = hosting_city.Host_City where  temperature.mar < temperature.jul  group by hosting_city.host_city having  count(*) >= 1",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID join hosting_city on city.City_ID = hosting_city.Host_City where  temperature.mar < temperature.jul  group by city.city_id having  count(*) >= 1",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID join hosting_city on city.City_ID = hosting_city.Host_City where  temperature.mar <= temperature.jul  group by hosting_city.host_city having  count(*) >= 1",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from temperature join city on temperature.City_ID = city.City_ID join hosting_city on city.City_ID = hosting_city.Host_City where  temperature.mar < temperature.jul  group by hosting_city.host_city having  count(*) >= 1",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.dec   except select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.dec   except select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.dec and city.city_id not in (select hosting_city.Host_City from hosting_city  )",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.mar < temperature.dec   except select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by hosting_city.host_city having  count(*) > 1",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.feb > temperature.jun   union select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by hosting_city.host_city having  count(*) >= 1",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.feb > temperature.jun   union select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.city_id having  count(*) >= 1",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from temperature join city on temperature.City_ID = city.City_ID where  temperature.feb > \"jun\"   union select city.city from hosting_city join city on hosting_city.Host_City = city.City_ID  group by hosting_city.host_city having  count(*) >= 1",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city where  city.regional_population > 10000000",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from city where  city.regional_population > 10000000",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city where  city.regional_population > 10000000  group by city.city_id",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city where  city.regional_population > 10000000  group by city.city",
        "question": "Please give me a list of cities whose regional population is over 10000000.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city where  city.regional_population > 10000000",
        "question": "Which cities have regional population above 10000000?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct city.city from city where  city.regional_population > 10000000",
        "question": "Which cities have regional population above 10000000?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city where  city.regional_population > 10000000  group by city.city_id",
        "question": "Which cities have regional population above 10000000?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.city from city where  city.regional_population > 10000000  group by city.city",
        "question": "Which cities have regional population above 10000000?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select count(*) , match.competition from match  group by match.competition",
        "question": "Find the number of matches in different competitions.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select match.competition , count(*) from match  group by match.competition",
        "question": "Find the number of matches in different competitions.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select match.competition , count(*) from match  group by match.competition",
        "question": "For each competition, count the number of matches.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select count(*) , match.competition from match  group by match.competition",
        "question": "For each competition, count the number of matches.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select distinct match.competition , count(*) from match  group by match.competition",
        "question": "For each competition, count the number of matches.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select match.venue from match   order by match.date desc",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select match.venue from match   order by match.date desc",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp from city   order by city.regional_population desc limit 1",
        "question": "what is the GDP of the city with the largest population.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp from city  group by city.gdp  order by sum(city.regional_population) desc limit 1",
        "question": "what is the GDP of the city with the largest population.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp from city  group by city.gdp  order by city.regional_population desc limit 1",
        "question": "what is the GDP of the city with the largest population.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp from city   order by city.regional_population desc limit 1",
        "question": "Find the GDP of the city with the largest regional population.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp from city  group by city.regional_population  order by city.regional_population desc limit 1",
        "question": "Find the GDP of the city with the largest regional population.",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp , city.regional_population from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.city_id having  count(*) > 1",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp , city.regional_population from hosting_city join city on hosting_city.Host_City = city.City_ID  group by hosting_city.host_city having  count(*) > 1",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp , city.regional_population from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.gdp having  count(*) > 1",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "correctness": 1
    },
    {
        "db_id": "city_record",
        "query": "select city.gdp , city.regional_population from hosting_city join city on hosting_city.Host_City = city.City_ID  group by city.city_id having  count(*) > 1",
        "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select individuals.individual_first_name , individuals.individual_middle_name , individuals.individual_last_name from Individuals   order by individuals.individual_last_name asc",
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct individuals.individual_first_name , individuals.individual_middle_name , individuals.individual_last_name from Individuals   order by individuals.individual_last_name asc",
        "question": "List every individual's first name, middle name and last name in alphabetical order by last name.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select individuals.individual_first_name , individuals.individual_middle_name , individuals.individual_last_name from Individuals   order by individuals.individual_last_name asc",
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct individuals.individual_first_name , individuals.individual_middle_name , individuals.individual_last_name from Individuals   order by individuals.individual_last_name asc",
        "question": "What are the first, middle, and last names of all individuals, ordered by last name?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct forms.form_type_code from Forms",
        "question": "List all the types of forms.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct forms.form_type_code from Forms",
        "question": "What are the different types of forms?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select forms.form_name from Party_Forms join Forms on Party_Forms.form_id = Forms.form_id  group by party_forms.form_id  order by count(*) desc limit 1",
        "question": "Find the name of the most popular party form.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select forms.form_name from Party_Forms join Forms on Party_Forms.form_id = Forms.form_id  group by forms.form_id  order by count(*) desc limit 1",
        "question": "Find the name of the most popular party form.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select forms.form_name from Party_Forms join Forms on Party_Forms.form_id = Forms.form_id  group by forms.form_name  order by count(*) desc limit 1",
        "question": "Find the name of the most popular party form.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select forms.form_name from Party_Forms join Forms on Party_Forms.form_id = Forms.form_id  group by party_forms.form_id  order by count(*) desc limit 1",
        "question": "What is the name of the party form that is most common?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select forms.form_name from Party_Forms join Forms on Party_Forms.form_id = Forms.form_id  group by forms.form_name  order by count(*) desc limit 1",
        "question": "What is the name of the party form that is most common?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select forms.form_name from Party_Forms join Forms on Party_Forms.form_id = Forms.form_id  group by forms.form_id  order by count(*) desc limit 1",
        "question": "What is the name of the party form that is most common?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code , parties.party_phone from Parties where  parties.party_email = \"enrico09@example.com\"",
        "question": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct parties.payment_method_code , parties.party_phone from Parties where  parties.party_email = \"enrico09@example.com\"",
        "question": "Find the payment method and phone of the party with email \"enrico09@example.com\".",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code , parties.party_phone from Parties where  parties.party_email = \"enrico09@example.com\"",
        "question": "What is the payment method code and party phone of the party with the email 'enrico09@example.com'?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organizations   order by organizations.date_formed asc",
        "question": "List all the name of organizations in order of the date formed.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct organizations.organization_name from Organizations   order by organizations.date_formed asc",
        "question": "List all the name of organizations in order of the date formed.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organizations   order by organizations.date_formed asc",
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct organizations.organization_name from Organizations   order by organizations.date_formed asc",
        "question": "What are the names of organizations, ordered by the date they were formed, ascending?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organizations   order by organizations.date_formed desc limit 1",
        "question": "What is the name of the organization that was formed most recently?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select individuals.individual_last_name from Organization_Contact_Individuals join Individuals on Organization_Contact_Individuals.individual_id = Individuals.individual_id join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id where  organizations.organization_name = \"Labour Party\"   order by organization_contact_individuals.date_contact_to desc limit 1",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select individuals.individual_last_name from Organization_Contact_Individuals join Individuals on Organization_Contact_Individuals.individual_id = Individuals.individual_id join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id where  organizations.organization_name = \"Labour Party\"   order by organization_contact_individuals.date_contact_to desc limit 1",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select count(*) from Services",
        "question": "How many services are there?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select count(*) from Services",
        "question": "Count the number of services.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select services.service_name from Services   except select services.service_name from Party_Services join Services on Party_Services.service_id = Services.service_id",
        "question": "Find name of the services that has never been used.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select services.service_name from Services   except select services.service_name from Party_Services join Services on Party_Services.service_id = Services.service_id",
        "question": "What are the names of the services that have never been used?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select count(*) from Addresses where  addresses.state_province_county = \"Colorado\"",
        "question": "How many cities are there in state \"Colorado\"?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select count(*) from Addresses where  addresses.state_province_county = \"Colorado\"",
        "question": "Count the number of cities in the state of Colorado.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code from Parties  group by parties.payment_method_code having  count(*) > 3",
        "question": "Find the payment method code used by more than 3 parties.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code from Parties  group by parties.payment_method_code having  count( distinct parties.party_id) > 3",
        "question": "Find the payment method code used by more than 3 parties.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct parties.payment_method_code from Parties  group by parties.payment_method_code having  count(*) > 3",
        "question": "Find the payment method code used by more than 3 parties.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code from Parties  group by parties.payment_method_code having  count(*) > 3",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code from Parties  group by parties.payment_method_code having  count( distinct parties.party_id) > 3",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.payment_method_code from Parties  group by parties.payment_method_code, parties.payment_method_code having  count(*) > 3",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct parties.payment_method_code from Parties  group by parties.payment_method_code having  count(*) > 3",
        "question": "What are the payment method codes that have been used by more than 3 parties?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organizations where  organizations.organization_name like \"%Party%\"",
        "question": "Find the name of organizations whose names contain \"Party\".",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct organizations.organization_name from Organizations where  organizations.organization_name like \"%Party%\"",
        "question": "Find the name of organizations whose names contain \"Party\".",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organizations where  organizations.organization_name like \"%Party%\"",
        "question": "What are the names of organizations that contain the word \"Party\"?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct organizations.organization_name from Organizations where  organizations.organization_name like \"%Party%\"",
        "question": "What are the names of organizations that contain the word \"Party\"?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select count( distinct parties.payment_method_code) from Parties",
        "question": "How many distinct payment methods are used by parties?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select count( distinct parties.payment_method_code) from Parties",
        "question": "Count the number of different payment method codes used by parties.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.party_email from Party_Services join Parties on Party_Services.customer_id = Parties.party_id  group by parties.party_email  order by count(*) desc limit 1",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.party_email from Party_Services join Parties on Party_Services.customer_id = Parties.party_id  group by parties.party_email  order by count(*) desc limit 1",
        "question": "Return the party email that has used party services the greatest number of times.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select parties.party_email from Party_Services join Parties on Party_Services.customer_id = Parties.party_id  group by parties.party_id  order by count(*) desc limit 1",
        "question": "Return the party email that has used party services the greatest number of times.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organization_Contact_Individuals join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id  group by organization_contact_individuals.organization_id  order by count(*) desc limit 1",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organization_Contact_Individuals join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id  group by organizations.organization_name  order by count(*) desc limit 1",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organization_Contact_Individuals join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id  group by organizations.organization_id  order by count(*) desc limit 1",
        "question": "What is the name of organization that has the greatest number of contact individuals?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organization_Contact_Individuals join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id  group by organization_contact_individuals.organization_id  order by count(*) desc limit 1",
        "question": "Return the name of the organization which has the most contact individuals.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organization_Contact_Individuals join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id  group by organizations.organization_name  order by count(*) desc limit 1",
        "question": "Return the name of the organization which has the most contact individuals.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select organizations.organization_name from Organization_Contact_Individuals join Organizations on Organization_Contact_Individuals.organization_id = Organizations.organization_id  group by organizations.organization_id  order by count(*) desc limit 1",
        "question": "Return the name of the organization which has the most contact individuals.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct individuals.individual_last_name from Organization_Contact_Individuals join Individuals on Organization_Contact_Individuals.individual_id = Individuals.individual_id",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select distinct individuals.individual_last_name from Organization_Contact_Individuals join Individuals on Organization_Contact_Individuals.individual_id = Individuals.individual_id",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "correctness": 1
    },
    {
        "db_id": "e_government",
        "query": "select individuals.individual_last_name from Organization_Contact_Individuals join Individuals on Organization_Contact_Individuals.individual_id = Individuals.individual_id  group by individuals.individual_last_name",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select count(*) from driver",
        "question": "How many drivers are there?",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name , driver.home_city , driver.age from driver",
        "question": "Show the name, home city, and age for all drivers.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.name , driver.home_city , driver.age from driver",
        "question": "Show the name, home city, and age for all drivers.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.party , count(*) from driver  group by driver.party",
        "question": "Show the party and the number of drivers in each party.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from driver   order by driver.age desc",
        "question": "Show the name of drivers in descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.name from driver   order by driver.age desc",
        "question": "Show the name of drivers in descending order of age.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.home_city from driver",
        "question": "Show all different home cities.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.home_city from driver  group by driver.home_city  order by count(*) desc limit 1",
        "question": "Show the home city with the most number of drivers.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.home_city from driver  group by driver.home_city  order by count(*) desc limit 1",
        "question": "Show the home city with the most number of drivers.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.party from driver where  driver.home_city = \"Hartford\" and driver.age > 40",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.home_city from driver where  driver.age > 40  group by driver.home_city having  count(*) >= 2",
        "question": "Show home city where at least two drivers older than 40 are from.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.home_city from driver   except select driver.home_city from driver where  driver.age > 40",
        "question": "Show all home cities except for those having a driver older than 40.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.home_city from driver   except select distinct driver.home_city from driver where  driver.age > 40",
        "question": "Show all home cities except for those having a driver older than 40.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from driver   except select driver.name from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID",
        "question": "Show the names of the drivers without a school bus.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from driver where  driver.driver_id not in (select school_bus.Driver_ID from school_bus  )",
        "question": "Show the names of the drivers without a school bus.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.name from driver   except select distinct driver.name from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID",
        "question": "Show the names of the drivers without a school bus.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select school.type from school  group by school.type having  count(*) = 2",
        "question": "Show the types of schools that have two schools.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct school.type from school  group by school.type having  count(*) = 2",
        "question": "Show the types of schools that have two schools.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select school.school , driver.name from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID join school on school_bus.School_ID = school.School_ID",
        "question": "Show the school name and driver name for all school buses.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name , school.school from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID join school on school_bus.School_ID = school.School_ID",
        "question": "Show the school name and driver name for all school buses.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select school.school , driver.name from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID join school on school_bus.School_ID = school.School_ID  group by school_bus.school_id",
        "question": "Show the school name and driver name for all school buses.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select max(school_bus.years_working) , min(school_bus.years_working) , avg(school_bus.years_working) from school_bus",
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select max(school_bus.years_working) , avg(school_bus.years_working) , min(school_bus.years_working) from school_bus",
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select avg(school_bus.years_working) , max(school_bus.years_working) , min(school_bus.years_working) from school_bus",
        "question": "What is the maximum, minimum and average years spent working on a school bus?",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select school.school , school.type from school where  school.school_id not in (select school_bus.School_ID from school_bus  )",
        "question": "Show the school name and type for schools without a school bus.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select school.school , school.type from school   except select school.school , school.type from school_bus join school on school_bus.School_ID = school.School_ID",
        "question": "Show the school name and type for schools without a school bus.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select school.type , count(*) from school_bus join school on school_bus.School_ID = school.School_ID  group by school.type",
        "question": "Show the type of school and the number of buses for each type.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from driver where  driver.home_city = \"Hartford\" and driver.age < (select driver.age from driver  )",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from driver where  driver.home_city = \"Hartford\" and driver.age < 40",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from driver where  driver.home_city = \"Hartford\" and driver.age < (select driver.age from driver where  driver.home_city = \"Hartford\"  )",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select driver.name from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID   order by school_bus.years_working desc limit 1",
        "question": "find the name of driver who is driving the school bus with the longest working history.",
        "correctness": 1
    },
    {
        "db_id": "school_bus",
        "query": "select distinct driver.name from school_bus join driver on school_bus.Driver_ID = driver.Driver_ID   order by school_bus.years_working desc limit 1",
        "question": "find the name of driver who is driving the school bus with the longest working history.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Accounts",
        "question": "How many accounts do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Accounts",
        "question": "Count the number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select accounts.account_id , accounts.account_details from Accounts",
        "question": "Show all account ids and account details.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct accounts.account_id , accounts.account_details from Accounts",
        "question": "Show all account ids and account details.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select accounts.account_id , accounts.account_details from Accounts",
        "question": "What are the ids and details of all accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct accounts.account_id , accounts.account_details from Accounts",
        "question": "What are the ids and details of all accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Statements",
        "question": "How many statements do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Statements",
        "question": "Count the number of statements.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details from Statements",
        "question": "List all statement ids and statement details.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct statements.statement_id , statements.statement_details from Statements",
        "question": "List all statement ids and statement details.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details from Statements",
        "question": "What are the ids and details of all statements?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct statements.statement_id , statements.statement_details from Statements",
        "question": "What are the ids and details of all statements?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details , accounts.account_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct statements.statement_id , statements.statement_details , accounts.account_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details , accounts.account_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct statements.statement_id , statements.statement_details , accounts.account_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select accounts.statement_id , statements.statement_details , accounts.account_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , count(*) from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID  group by accounts.statement_id",
        "question": "Show all statement id and the number of accounts for each statement.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , count(*) from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID  group by statements.statement_id",
        "question": "Show all statement id and the number of accounts for each statement.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select accounts.statement_id , count(*) from Accounts  group by accounts.statement_id",
        "question": "Show all statement id and the number of accounts for each statement.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select accounts.statement_id , count(*) from Accounts  group by accounts.statement_id",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct accounts.statement_id , count(*) from Accounts  group by accounts.statement_id",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) , accounts.statement_id from Accounts  group by accounts.statement_id",
        "question": "What are the different statement ids on accounts, and the number of accounts for each?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID  group by accounts.statement_id  order by count(*) desc limit 1",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID  group by statements.statement_id  order by count(*) desc limit 1",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID  group by accounts.statement_id  order by count(*) desc limit 1",
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_id , statements.statement_details from Accounts join Statements on Accounts.Statement_ID = Statements.Statement_ID  group by statements.statement_id  order by count(*) desc limit 1",
        "question": "What are the statement id and statement detail for the statement that has the most corresponding accounts?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Documents",
        "question": "Show the number of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Documents",
        "question": "Count the number of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code , documents.document_name , documents.document_description from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  documents.document_name = \"Noel CV\" or documents.document_name = \"King Book\"",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code , documents.document_name , documents.document_description from Documents where  documents.document_name = \"Noel CV\" or documents.document_name = \"King Book\"",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_code , documents.document_name , documents.document_description from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  documents.document_name = \"Noel CV\" or documents.document_name = \"King Book\"",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code , documents.document_name , documents.document_description from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code where  documents.document_name = \"Noel CV\" or documents.document_name = \"King Book\"",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code , documents.document_name , documents.document_description from Documents where  documents.document_name = \"Noel CV\" or documents.document_name = \"King Book\"",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id , documents.document_name from Documents",
        "question": "Show the ids and names of all documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_id , documents.document_name from Documents",
        "question": "Show the ids and names of all documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , documents.document_id from Documents",
        "question": "Show the ids and names of all documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id , documents.document_name from Documents",
        "question": "What are the ids and names for each of the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_id , documents.document_name from Documents",
        "question": "What are the ids and names for each of the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id , documents.document_name from Documents  group by documents.document_id",
        "question": "What are the ids and names for each of the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , documents.document_id from Documents",
        "question": "What are the ids and names for each of the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , documents.document_id from Documents where  documents.document_type_code = \"BK\"",
        "question": "Find names and ids of all documents with document type code BK.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_name , documents.document_id from Documents where  documents.document_type_code = \"BK\"",
        "question": "Find names and ids of all documents with document type code BK.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , documents.document_id from Documents where  documents.document_type_code = \"BK\"",
        "question": "What are the names and ids of documents that have the type code BK?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_name , documents.document_id from Documents where  documents.document_type_code = \"BK\"",
        "question": "What are the names and ids of documents that have the type code BK?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) , documents.project_id from Documents where  documents.document_type_code = \"BK\"  group by documents.project_id",
        "question": "How many documents are with document type code BK for each product id?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) , documents.project_id from Documents where  documents.document_type_code = \"BK\"  group by documents.project_id",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , documents.document_date from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  projects.project_details = \"Graph Database project\"",
        "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_name , documents.document_date from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  projects.project_details = \"Graph Database project\"",
        "question": "Show the document name and the document date for all documents on project with details 'Graph Database project'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , documents.document_date from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  projects.project_details = \"Graph Database project\"",
        "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_name , documents.document_date from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  projects.project_details = \"Graph Database project\"",
        "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id , count(*) from Documents  group by documents.project_id",
        "question": "Show project ids and the number of documents in each project.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , count(*) from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id",
        "question": "Show project ids and the number of documents in each project.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id , count(*) from Documents  group by documents.project_id",
        "question": "How many documents correspond with each project id?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , count(*) from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id",
        "question": "How many documents correspond with each project id?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) , documents.project_id from Documents  group by documents.project_id",
        "question": "How many documents correspond with each project id?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id from Documents  group by documents.project_id  order by count(*) asc limit 1",
        "question": "What is the id of the project with least number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id from Documents where  documents.project_id in (select documents.project_id from Documents  group by documents.project_id  order by count(*) asc limit 1 )",
        "question": "What is the id of the project with least number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id  order by count(*) asc limit 1",
        "question": "What is the id of the project with least number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id from Documents  group by documents.project_id  order by count(*) asc limit 1",
        "question": "Return the id of the project that has the fewest corresponding documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id from Documents where  documents.project_id in (select documents.project_id from Documents  group by documents.project_id  order by count(*) asc limit 1 )",
        "question": "Return the id of the project that has the fewest corresponding documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id  order by count(*) asc limit 1",
        "question": "Return the id of the project that has the fewest corresponding documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id having  count(*) >= 2",
        "question": "Show the ids for projects with at least 2 documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id from Documents  group by documents.project_id having  count(*) >= 2",
        "question": "Show the ids for projects with at least 2 documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by projects.project_id having  count(*) >= 2",
        "question": "Show the ids for projects with at least 2 documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.project_id from Documents  group by documents.project_id having  count(*) >= 2",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id having  count(*) >= 2",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.project_id from Documents  group by documents.project_id having  count(*) >= 2",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code , count(*) from Documents  group by documents.document_type_code",
        "question": "List document type codes and the number of documents in each code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_type_code , count(*) from Documents  group by documents.document_type_code",
        "question": "List document type codes and the number of documents in each code.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code , count(*) from Documents  group by documents.document_type_code",
        "question": "How many documents are there of each type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_type_code , count(*) from Documents  group by documents.document_type_code",
        "question": "How many documents are there of each type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) , documents.document_type_code from Documents  group by documents.document_type_code",
        "question": "How many documents are there of each type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code , count(*) from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code  group by documents.document_type_code",
        "question": "How many documents are there of each type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code  order by count(*) desc limit 1",
        "question": "What is the document type code with most number of documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code  order by count(*) desc limit 1",
        "question": "Return the code of the document type that is most common.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code  group by ref_document_types.document_type_code  order by count(*) desc limit 1",
        "question": "Return the code of the document type that is most common.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code  group by documents.document_type_code  order by count(*) desc limit 1",
        "question": "Return the code of the document type that is most common.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) < 3",
        "question": "Show the document type code with fewer than 3 documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_type_code from Documents  group by documents.document_type_code having  count(*) < 3",
        "question": "What are the codes corresponding to document types for which there are less than 3 documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_details , documents.document_name from Statements join Documents on Statements.Statement_ID = Documents.Document_ID where  statements.statement_details = \"Private Project\"",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , statements.statement_details from Statements join Documents on Statements.Statement_ID = Documents.Document_ID where  statements.statement_details = \"Private Project\"",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select statements.statement_details , documents.document_name from Statements join Documents on Statements.Statement_ID = Documents.Document_ID where  statements.statement_details = \"Private Project\"",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_name , statements.statement_details from Statements join Documents on Statements.Statement_ID = Documents.Document_ID where  statements.statement_details = \"Private Project\"",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code , ref_document_types.document_type_name , ref_document_types.document_type_description from Ref_Document_Types",
        "question": "Show all document type codes, document type names, document type descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_code , ref_document_types.document_type_name , ref_document_types.document_type_description from Ref_Document_Types",
        "question": "Show all document type codes, document type names, document type descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_code , ref_document_types.document_type_name , ref_document_types.document_type_description from Ref_Document_Types",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_code , ref_document_types.document_type_name , ref_document_types.document_type_description from Ref_Document_Types",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_name , ref_document_types.document_type_code , ref_document_types.document_type_description from Ref_Document_Types",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_name = \"Film\"",
        "question": "What is the document type description for document type named Film?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_name = \"Film\"",
        "question": "What is the document type description for document type named Film?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_name = \"Film\"",
        "question": "Return the description of the document type name 'Film'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_description from Ref_Document_Types where  ref_document_types.document_type_name = \"Film\"",
        "question": "Return the description of the document type name 'Film'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_name , ref_document_types.document_type_description , documents.document_date from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code",
        "question": "What is the document type name and the document type description and creation date for all the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_name , ref_document_types.document_type_description , documents.document_date from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code",
        "question": "What is the document type name and the document type description and creation date for all the documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_document_types.document_type_name , ref_document_types.document_type_description , documents.document_date from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code",
        "question": "Return the type name, type description, and date of creation for each document.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_document_types.document_type_name , ref_document_types.document_type_description , documents.document_date from Documents join Ref_Document_Types on Documents.Document_Type_Code = Ref_Document_Types.Document_Type_Code",
        "question": "Return the type name, type description, and date of creation for each document.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Projects",
        "question": "Show the number of projects.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Projects",
        "question": "How many projects are there?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , projects.project_details from Projects",
        "question": "List ids and details for all projects.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct projects.project_id , projects.project_details from Projects",
        "question": "List ids and details for all projects.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , projects.project_details from Projects",
        "question": "What are the ids and details for each project?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct projects.project_id , projects.project_details from Projects",
        "question": "What are the ids and details for each project?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id having  count(*) >= 2",
        "question": "What is the project id and detail for the project with at least two documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by projects.project_id having  count(*) >= 2",
        "question": "What is the project id and detail for the project with at least two documents?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by documents.project_id having  count(*) > 2",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_id , projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID  group by projects.project_id having  count(*) > 2",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  documents.document_name = \"King Book\"",
        "question": "What is the project detail for the project with document \"King Book\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  documents.document_name = \"King Book\"",
        "question": "What is the project detail for the project with document \"King Book\"?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select projects.project_details from Documents join Projects on Documents.Project_ID = Projects.Project_ID where  documents.document_name = \"King Book\"",
        "question": "Give the details of the project with the document name 'King Book'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Ref_Budget_Codes",
        "question": "How many budget types do we have?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Ref_Budget_Codes",
        "question": "Count the number of budget codes.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description from Ref_Budget_Codes",
        "question": "List all budget type codes and descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description from Ref_Budget_Codes",
        "question": "List all budget type codes and descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_description , ref_budget_codes.budget_type_code from Ref_Budget_Codes",
        "question": "List all budget type codes and descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_description , ref_budget_codes.budget_type_code from Ref_Budget_Codes",
        "question": "List all budget type codes and descriptions.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description from Ref_Budget_Codes",
        "question": "What are the type codes and descriptions of each budget type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_description , ref_budget_codes.budget_type_code from Ref_Budget_Codes",
        "question": "What are the type codes and descriptions of each budget type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description from Ref_Budget_Codes",
        "question": "What are the type codes and descriptions of each budget type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_description , ref_budget_codes.budget_type_code from Ref_Budget_Codes",
        "question": "What are the type codes and descriptions of each budget type?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_description from Ref_Budget_Codes where  ref_budget_codes.budget_type_code = \"ORG\"",
        "question": "What is the description for the budget type with code ORG?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_description from Ref_Budget_Codes where  ref_budget_codes.budget_type_code = \"ORG\"",
        "question": "What is the description for the budget type with code ORG?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_description from Ref_Budget_Codes where  ref_budget_codes.budget_type_code = \"ORG\"",
        "question": "Return the description of the budget type that has the code ORG.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_description from Ref_Budget_Codes where  ref_budget_codes.budget_type_code = \"ORG\"",
        "question": "Return the description of the budget type that has the code ORG.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Documents_with_Expenses",
        "question": "How many documents have expenses?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Documents_with_Expenses",
        "question": "Count the number of documents with expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code where  ref_budget_codes.budget_type_code = \"SF\"",
        "question": "What are the document ids for the budget type code 'SF'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code where  ref_budget_codes.budget_type_code = \"SF\"",
        "question": "What are the document ids for the budget type code 'SF'?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents_with_expenses.document_id from Documents_with_Expenses where  documents_with_expenses.budget_type_code = \"SF\"",
        "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents_with_expenses.document_id from Documents_with_Expenses where  documents_with_expenses.budget_type_code = \"SF\"",
        "question": "Give the ids of documents with expenses that have the budget code 'SF'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description , documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code",
        "question": "Show the budget type code and description and the corresponding document id.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description , documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code  group by documents.document_id",
        "question": "Show the budget type code and description and the corresponding document id.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code , ref_budget_codes.budget_type_description , documents_with_expenses.document_id from Documents_with_Expenses join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code where  ref_budget_codes.budget_type_description = \"Government\"",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code where  ref_budget_codes.budget_type_description = \"Government\"",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code where  ref_budget_codes.budget_type_description = \"Government\"",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code where  ref_budget_codes.budget_type_description = \"Government\"",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents_with_expenses.budget_type_code , count(*) from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID  group by documents_with_expenses.budget_type_code",
        "question": "Show budget type codes and the number of documents in each budget type.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct documents_with_expenses.budget_type_code , count(*) from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID  group by documents_with_expenses.budget_type_code",
        "question": "Show budget type codes and the number of documents in each budget type.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code , count(*) from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code  group by ref_budget_codes.budget_type_code",
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select distinct ref_budget_codes.budget_type_code , count(*) from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code  group by ref_budget_codes.budget_type_code",
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents_with_expenses.budget_type_code , count(*) from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID  group by documents_with_expenses.budget_type_code",
        "question": "What are the different budget type codes, and how many documents are there for each?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents_with_expenses.budget_type_code from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID  group by documents_with_expenses.budget_type_code  order by count(*) desc limit 1",
        "question": "What is the budget type code with most number of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents_with_expenses.budget_type_code from Documents_with_Expenses  group by documents_with_expenses.budget_type_code  order by count(*) desc limit 1",
        "question": "What is the budget type code with most number of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select ref_budget_codes.budget_type_code from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID join Ref_Budget_Codes on Documents_with_Expenses.Budget_Type_Code = Ref_Budget_Codes.Budget_Type_Code  group by ref_budget_codes.budget_type_code  order by count(*) desc limit 1",
        "question": "What is the budget type code with most number of documents.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents_with_expenses.budget_type_code from Documents_with_Expenses  group by documents_with_expenses.budget_type_code  order by count(*) desc limit 1",
        "question": "Give the budget type code that is most common among documents with expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents   except select documents_with_expenses.document_id from Documents_with_Expenses",
        "question": "What are the ids of documents which don't have expense budgets?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents where  documents.document_id not in (select Documents_with_Expenses.Document_ID from Documents_with_Expenses  )",
        "question": "What are the ids of documents which don't have expense budgets?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents   except select documents_with_expenses.document_id from Documents_with_Expenses",
        "question": "Return the ids of documents that do not have expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents where  documents.document_id not in (select Documents_with_Expenses.Document_ID from Documents_with_Expenses  )",
        "question": "Return the ids of documents that do not have expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents where  documents.document_id not in (select documents_with_expenses.document_id from Documents_with_Expenses  )",
        "question": "Return the ids of documents that do not have expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents where  documents.document_type_code = \"CV\"   except select documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents where  documents.document_type_code = \"CV\"   except select documents_with_expenses.document_id from Documents_with_Expenses  group by documents_with_expenses.document_id  having  min(documents_with_expenses.document_id) > 1",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents where  documents.document_id in (select Documents_with_Expenses.Document_ID from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents.document_name like \"%s%\"  )",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_id from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents.document_name like \"%s%\" or documents_with_expenses.document_id like \"%s%\"",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Documents where  documents.document_id not in (select Documents_with_Expenses.Document_ID from Documents_with_Expenses  )",
        "question": "How many documents do not have any expense?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select count(*) from Documents where  documents.document_id not in (select Documents_with_Expenses.Document_ID from Documents_with_Expenses  )",
        "question": "Count the number of documents that do not have expenses.",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_date from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents_with_expenses.budget_type_code = \"GV\"   intersect select documents.document_date from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents_with_expenses.budget_type_code = \"SF\"",
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_date from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents_with_expenses.budget_type_code = \"GV\"   intersect select documents.document_date from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents_with_expenses.budget_type_code = \"SFC\"",
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "correctness": 1
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "query": "select documents.document_date from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents_with_expenses.budget_type_code = \"GV\"   intersect select documents.document_date from Documents_with_Expenses join Documents on Documents_with_Expenses.Document_ID = Documents.Document_ID where  documents_with_expenses.budget_type_code = \"SF\"",
        "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) from Scientists",
        "question": "Find the total number of scientists.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) from Scientists",
        "question": "How many scientists are there?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select sum(projects.hours) from Projects",
        "question": "Find the total hours of all projects.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select sum(projects.hours) from Projects",
        "question": "What is the total number of hours for all projects?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count( distinct assignedto.scientist) from AssignedTo",
        "question": "How many different scientists are assigned to any project?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count( distinct assignedto.scientist) from AssignedTo",
        "question": "Count the number of different scientists assigned to any project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count( distinct projects.name) from Projects",
        "question": "Find the number of distinct projects.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count( distinct projects.name) from Projects",
        "question": "How many different projects are there?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select avg(projects.hours) from Projects",
        "question": "Find the average hours of all projects.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select avg(projects.hours) from Projects",
        "question": "What is the average hours across all projects?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects   order by projects.hours desc limit 1",
        "question": "Find the name of project that continues for the longest time.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects   order by projects.hours desc limit 1",
        "question": "What is the name of the project with the most hours?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects  group by projects.name  order by sum(projects.hours) desc limit 1",
        "question": "What is the name of the project with the most hours?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.hours > (select avg(projects.hours) from Projects  )",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct projects.name from Projects where  projects.hours > (select avg(projects.hours) from Projects  )",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.hours >= (select avg(projects.hours) from Projects  )",
        "question": "List the name of all projects that are operated longer than the average working hours of all projects.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.hours > (select avg(projects.hours) from Projects  )",
        "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct projects.name from Projects where  projects.hours > (select avg(projects.hours) from Projects  )",
        "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.hours >= (select avg(projects.hours) from Projects  )",
        "question": "What are the names of projects that have taken longer than the average number of hours for all projects?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by projects.name  order by count(*) desc limit 1",
        "question": "Find the name and hours of project that has the most number of scientists.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by projects.code  order by count(*) desc limit 1",
        "question": "Find the name and hours of project that has the most number of scientists.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by assignedto.project  order by count(*) desc limit 1",
        "question": "Find the name and hours of project that has the most number of scientists.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code  group by assignedto.project  order by count(*) desc limit 1",
        "question": "What is the name and hours for the project which has the most scientists assigned to it?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code  group by projects.name  order by count(*) desc limit 1",
        "question": "What is the name and hours for the project which has the most scientists assigned to it?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  scientists.name like \"%Smith%\"",
        "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  scientists.name like \"%smith%\"",
        "question": "Find the name of the project for which a scientist whose name contains \u2018Smith\u2019 is assigned to.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  scientists.name like \"%Smith%\"",
        "question": "What is the name of the project that has a scientist assigned to it whose name contains 'Smith'?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.hours between 100 and 300",
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects  group by projects.name having  avg(projects.hours) between 100 and 300",
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct projects.name from Projects where  projects.hours between 100 and 300",
        "question": "Find the name of projects that require between 100 and 300 hours of work.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.hours between 100 and 300",
        "question": "What are the names of projects that require between 100 and 300 hours?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects  group by projects.name having  avg(projects.hours) between 100 and 300",
        "question": "What are the names of projects that require between 100 and 300 hours?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct projects.name from Projects where  projects.hours between 100 and 300",
        "question": "What are the names of projects that require between 100 and 300 hours?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"Matter of Time\"   intersect select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"A Puzzling Parallax\"",
        "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"Matter Of Time\"   intersect select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"A Puzzling Parallax\"",
        "question": "Find the name of the scientist who worked on both a project named 'Matter of Time' and a project named 'A Puzzling Parallax'.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"Matter of Time\"   intersect select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"A Puzzling Pattern\"",
        "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"Matter of Time\"   intersect select distinct scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"A Puzzling Pattern\"",
        "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"Matter Of Time\"   intersect select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.name = \"A Puzzling Pattern\"",
        "question": "What are the names of any scientists who worked on projects named 'Matter of Time' and 'A Puzzling Pattern'?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from Scientists   order by scientists.name asc",
        "question": "List the names of all scientists sorted in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct scientists.name from Scientists   order by scientists.name asc",
        "question": "List the names of all scientists sorted in alphabetical order.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from Scientists   order by scientists.name asc",
        "question": "What are the names of all the scientists in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct scientists.name from Scientists   order by scientists.name asc",
        "question": "What are the names of all the scientists in alphabetical order?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by projects.name",
        "question": "Find the number of scientists involved for each project name.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code  group by projects.name",
        "question": "Find the number of scientists involved for each project name.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code  group by projects.name",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code  group by assignedto.project",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code where  projects.hours > 300  group by projects.name",
        "question": "What are the names of projects that require more than 300 hours, and how many scientists are assigned to each?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) , scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by scientists.name",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by scientists.name",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name , count(*) from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN  group by assignedto.scientist",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN",
        "question": "Find the name of scientists who are assigned to some project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct scientists.name from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN",
        "question": "Find the name of scientists who are assigned to some project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN where  assignedto.project = \"project\"",
        "question": "Find the name of scientists who are assigned to some project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN",
        "question": "What are the names of scientists who are assigned to any project?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct scientists.name from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN",
        "question": "What are the names of scientists who are assigned to any project?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.code not in (select AssignedTo.Project from AssignedTo  )",
        "question": "Select the project names which are not assigned yet.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects   except select projects.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code",
        "question": "Select the project names which are not assigned yet.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct projects.name from Projects where  projects.code not in (select AssignedTo.Project from AssignedTo  )",
        "question": "Select the project names which are not assigned yet.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects where  projects.code not in (select AssignedTo.Project from AssignedTo  )",
        "question": "What are the names of projects that have not been assigned?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select projects.name from Projects   except select projects.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code",
        "question": "What are the names of projects that have not been assigned?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct projects.name from Projects where  projects.code not in (select AssignedTo.Project from AssignedTo  )",
        "question": "What are the names of projects that have not been assigned?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from Scientists where  scientists.ssn not in (select AssignedTo.Scientist from AssignedTo  )",
        "question": "Find the name of scientists who are not assigned to any project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select distinct scientists.name from Scientists where  scientists.ssn not in (select AssignedTo.Scientist from AssignedTo  )",
        "question": "Find the name of scientists who are not assigned to any project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from Scientists where  scientists.ssn not in (select AssignedTo.Scientist from AssignedTo  )",
        "question": "What are the names of scientists who have not been assigned a project?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) from Scientists where  scientists.ssn not in (select AssignedTo.Scientist from AssignedTo  )",
        "question": "Find the number of scientists who are not assigned to any project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN where  assignedto.project not in (select AssignedTo.Project from AssignedTo  )",
        "question": "Find the number of scientists who are not assigned to any project.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) from Scientists where  scientists.ssn not in (select AssignedTo.Scientist from AssignedTo  )",
        "question": "How many scientists do not have any projects assigned to them?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select count(*) from AssignedTo join Scientists on AssignedTo.Scientist = Scientists.SSN where  assignedto.project not in (select AssignedTo.Project from AssignedTo  )",
        "question": "How many scientists do not have any projects assigned to them?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from Scientists   except select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.hours = 100",
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name from Scientists   except select scientists.name from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN where  projects.hours = 100",
        "question": "What are the names of scientists who are not working on the project with the most hours?",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name , projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN   order by projects.name,scientists.name asc",
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "correctness": 1
    },
    {
        "db_id": "scientist_1",
        "query": "select scientists.name , projects.name , projects.hours from AssignedTo join Projects on AssignedTo.Project = Projects.Code join Scientists on AssignedTo.Scientist = Scientists.SSN   order by projects.name,scientists.name asc",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from airports where  airports.city = \"Goroka\"",
        "question": "Find the name of the airport in the city of Goroka.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from airports where  airports.city = \"Goroka\"",
        "question": "What are the names of the airports in the city of Goroka?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , airports.city , airports.country , airports.elevation from airports where  airports.city = \"New York\" and airports.elevation >= 0",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , airports.city , airports.country , airports.elevation from airports where  airports.city = \"New York\"   intersect select airports.name , airports.city , airports.country , airports.elevation from airports where  airports.city = \"New York\"",
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from airlines",
        "question": "How many airlines are there?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from airlines",
        "question": "What is the total number of airlines?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from airlines where  airlines.country = \"Russia\"",
        "question": "How many airlines does Russia has?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from airlines where  airlines.country = \"Russia\"",
        "question": "What is the number of airlines based in Russia?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select max(airports.elevation) from airports where  airports.country = \"Iceland\"",
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select max(airports.elevation) from airports where  airports.country = \"Iceland\"",
        "question": "What is the highest elevation of an airport in the country of Iceland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from airports where  airports.country = \"Cuba\" or airports.country = \"Argentina\"",
        "question": "Find the name of the airports located in Cuba or Argentina.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from airports where  airports.country = \"Cuba\" or airports.country = \"Argentina\"",
        "question": "What are the names of all airports in Cuba or Argentina?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines where  airlines.name like \"%Orbit%\"",
        "question": "Find the country of the airlines whose name starts with 'Orbit'.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines where  airlines.name like \"%Orbit%\"",
        "question": "What are the countries of all airlines whose names start with Orbit?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines where  airlines.name like \"Orbit%\"",
        "question": "What are the countries of all airlines whose names start with Orbit?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from airports where  airports.elevation between -50 and 50",
        "question": "Find the name of airports whose altitude is between -50 and 50.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from airports where  airports.elevation between -50 and 50",
        "question": "What are the names of all airports whose elevation is between -50 and 50?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.country from airports   order by airports.elevation desc limit 1",
        "question": "Which country is the airport that has the highest altitude located in?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.country from airports   order by airports.elevation desc limit 1",
        "question": "What is the country of the airport with the highest elevation?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from airports where  airports.name like \"%International%\"",
        "question": "Find the number of airports whose name contain the word 'International'.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from airports where  airports.name in (select airports.name from airports where  airports.name like \"%International%\"  )",
        "question": "Find the number of airports whose name contain the word 'International'.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count( distinct airports.city) from airports where  airports.country = \"Greenland\"",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count( distinct airports.city) from airports where  airports.apid in (select airports.apid from airports where  airports.country = \"Greenland\"  )",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count( distinct airports.city) from airports where  airports.country in (select airports.country from airports where  airports.country = \"Greenland\"  )",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count( distinct airports.city) from airports where  airports.name in (select airports.name from airports where  airports.country = \"Greenland\"  )",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count( distinct airports.city) from airports where  airports.city in (select airports.city from airports where  airports.country = \"Greenland\"  )",
        "question": "How many different cities do have some airport in the country of Greenland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count( distinct airports.city) from airports where  airports.country = \"Greenland\"",
        "question": "In how many cities are there airports in the country of Greenland?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from routes join airlines on routes.alid = airlines.alid where  airlines.name = \"American Airlines\"",
        "question": "Find the number of routes operated by American Airlines.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from routes join airlines on routes.alid = airlines.alid where  airlines.name = \"American Airlines\"",
        "question": "How many routes does American Airlines operate?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from routes where  routes.airline = (select routes.airline from routes join airlines on routes.alid = airlines.alid where  airlines.name = \"American Airlines\"  )",
        "question": "How many routes does American Airlines operate?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , airports.city , airports.country from airports   order by airports.elevation asc limit 1",
        "question": "Find the name, city, and country of the airport that has the lowest altitude.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , airports.city , airports.country from airports   order by airports.elevation asc limit 1",
        "question": "What is the name, city, and country of the airport with the lowest altitude?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , airports.city , airports.country from airports   order by airports.elevation desc limit 1",
        "question": "Find the name, city, and country of the airport that has the highest latitude.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , airports.city , airports.country from airports   order by airports.elevation desc limit 1",
        "question": "What is the name, city, and country of the airport with the highest elevation?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines  group by airlines.country  order by count(*) desc limit 1",
        "question": "Which countries has the most number of airlines?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines  group by airlines.country  order by count(*) desc limit 1",
        "question": "What is the name of the country with the most number of home airlines?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines where  airlines.active = \"Y\"  group by airlines.country  order by count(*) desc limit 1",
        "question": "Which countries has the most number of airlines whose active status is 'Y'?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country from airlines where  airlines.active = \"Y\"  group by airlines.country  order by count(*) desc limit 1",
        "question": "What are the countries with the most airlines whose active status is Y?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country , count(*) from airlines  group by airlines.country  order by count(*) desc",
        "question": "List all countries and their number of airlines in the descending order of number of airlines.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) , airlines.country from airlines  group by airlines.country  order by count(*) desc",
        "question": "How many airlines operate out of each country in descending order?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country , count(*) from airlines  group by airlines.country  order by count(*) desc",
        "question": "How many airlines operate out of each country in descending order?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.country , count(*) from airports  group by airports.country  order by count(*) desc",
        "question": "How many airports are there per country? Order the countries by decreasing number of airports.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) , airports.country from airports  group by airports.country  order by count(*) desc",
        "question": "What is the number of airports per country, ordered from most to least?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city from airports where  airports.country = \"United States\"  group by airports.city having  count(*) > 3",
        "question": "Return the cities with more than 3 airports in the United States.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city , count(*) from airports  group by airports.city having  count(*) > 1",
        "question": "List the cities which have more than one airport and number of airports.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city , count(*) from airports  group by airports.city having  count(*) > 1",
        "question": "What are the names of all cities with more than one airport and how many airports do they have?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city from airports  group by airports.city having  count(*) > 2  order by count(*) asc",
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city from airports  group by airports.city having  count(*) > 2  order by count(*) asc",
        "question": "What are the cities that have more than 2 airports sorted by number of airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select distinct airports.city from airports  group by airports.city having  count(*) > 2  order by count(*) asc",
        "question": "What are the cities that have more than 2 airports sorted by number of airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) , airports.name from routes join airports on routes.src_apid = airports.apid  group by airports.name",
        "question": "Find the number of routes for each source airport and the airport name.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , count(*) from routes join airports on routes.src_apid = airports.apid  group by airports.name",
        "question": "Find the number of routes for each source airport and the airport name.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , count(*) from routes join airports on routes.src_apid = airports.apid  group by airports.name",
        "question": "For each airport name, how many routes start at that airport?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) , airports.name from routes join airports on routes.src_apid = airports.apid  group by airports.name",
        "question": "For each airport name, how many routes start at that airport?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select distinct airports.name , count(*) from routes join airports on routes.src_apid = airports.apid  group by airports.name",
        "question": "For each airport name, how many routes start at that airport?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , count(*) from routes join airports on routes.src_apid = airports.apid  group by airports.name  order by count(*) desc",
        "question": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) , airports.name from routes join airports on routes.src_apid = airports.apid  group by airports.name  order by count(*) desc",
        "question": "Find the number of routes and airport name for each source airport, order the results by decreasing number of routes.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name , count(*) from routes join airports on routes.src_apid = airports.apid  group by airports.name  order by count(*) desc",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) , airports.name from routes join airports on routes.src_apid = airports.apid  group by airports.name  order by count(*) desc",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select avg(airports.elevation) , airports.country from airports  group by airports.country",
        "question": "Find the average elevation of all airports for each country.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.country , avg(airports.elevation) from airports  group by airports.country",
        "question": "Find the average elevation of all airports for each country.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.country , avg(airports.elevation) from airports  group by airports.country",
        "question": "For each country, what is the average elevation of that country's airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select avg(airports.elevation) , airports.country from airports  group by airports.country",
        "question": "For each country, what is the average elevation of that country's airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city from airports  group by airports.city having  count(*) = 2",
        "question": "Find the cities which have exactly two airports.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select distinct airports.city from airports  group by airports.city having  count(*) = 2",
        "question": "Find the cities which have exactly two airports.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city from airports  group by airports.city having  count(*) = 2",
        "question": "What are the cities with exactly two airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.city from airports  group by airports.city having  count(*) = 2  intersect select airports.city from airports  group by airports.city having  count(*) = 2",
        "question": "What are the cities with exactly two airports?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.country , airlines.name , count(*) from routes join airlines on routes.alid = airlines.alid  group by airlines.country, airlines.name",
        "question": "For each country and airline name, how many routes are there?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select count(*) from routes join airlines on routes.alid = airlines.alid join airports on routes.src_apid = airports.apid where  airports.country = \"Italy\" and airlines.name = \"American Airlines\"",
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.name from routes join airlines on routes.alid = airlines.alid  group by airlines.name  order by count(*) desc limit 1",
        "question": "Find the name of airline which runs the most number of routes.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airlines.name from routes join airlines on routes.alid = airlines.alid  group by airlines.name  order by count(*) desc limit 1",
        "question": "What is the name of the airline with the most routes?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by airports.name  order by count(*) desc limit 1",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by routes.src_apid  order by count(*) desc limit 1",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by airports.name  order by count(*) desc limit 1",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by routes.src_apid  order by count(*) desc limit 1",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by airports.name  order by count(*) desc limit 1",
        "question": "Find the busiest destination airport that runs most number of routes in China.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by routes.src_apid  order by count(*) desc limit 1",
        "question": "Find the busiest destination airport that runs most number of routes in China.",
        "correctness": 1
    },
    {
        "db_id": "flight_4",
        "query": "select airports.name from routes join airports on routes.src_apid = airports.apid where  airports.country = \"China\"  group by airports.name  order by count(*) desc limit 1",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select count(*) from architect where  architect.gender = \"female\"",
        "question": "How many architects are female?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.name , architect.nationality , architect.id from architect where  architect.gender = \"male\"   order by architect.name asc",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select max(bridge.length_meters) , architect.name from bridge join architect on bridge.architect_id = architect.id",
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select max(bridge.length_meters) , architect.name from bridge join architect on bridge.architect_id = architect.id   order by bridge.length_meters desc limit 1",
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select avg(bridge.length_feet) from bridge",
        "question": "What is the average length in feet of the bridges?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.name , mill.built_year from mill where  mill.type = \"Grondzeiler\"",
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.name , mill.built_year from mill where  mill.type = \"Grondzeiler\"",
        "question": "What are the names and year of construction for the mills of 'Grondzeiler' type?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct architect.name , architect.nationality from mill join architect on mill.architect_id = architect.id",
        "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.name from mill where  mill.location != \"Donceel\"",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.name from mill   except select mill.name from mill where  mill.location = \"Donceel\"",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.name from mill where  mill.id not in (select mill.id from mill where  mill.location = \"Donceel\"  )",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.name from mill where  mill.location != \"Donceel\"",
        "question": "What are the names of the mills which are not located in 'Donceel'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.type from mill join architect on mill.architect_id = architect.id where  architect.nationality = \"American\" or architect.nationality = \"Canadian\"",
        "question": "What are the distinct types of mills that are built by American or Canadian architects?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.type from mill join architect on mill.architect_id = architect.id where  architect.nationality = \"American\"   intersect select distinct mill.type from mill join architect on mill.architect_id = architect.id where  architect.nationality = \"Canadian\"",
        "question": "What are the distinct types of mills that are built by American or Canadian architects?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.type from mill join architect on mill.architect_id = architect.id where  architect.nationality = \"American\" or architect.nationality = \"Canada\"",
        "question": "What are the distinct types of mills that are built by American or Canadian architects?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.id , architect.name from bridge join architect on bridge.architect_id = architect.id  group by architect.id having  count(*) >= 3",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.id , architect.name from bridge join architect on bridge.architect_id = architect.id  group by bridge.architect_id having  count(*) >= 3",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.name , architect.id from bridge join architect on bridge.architect_id = architect.id  group by architect.id having  count(*) >= 3",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.id , architect.name , architect.nationality from mill join architect on mill.architect_id = architect.id  group by mill.architect_id  order by count(*) desc limit 1",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.id , architect.name , architect.nationality from mill join architect on mill.architect_id = architect.id  group by architect.id  order by count(*) desc limit 1",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.name , architect.id , architect.nationality from mill join architect on mill.architect_id = architect.id  group by mill.architect_id  order by count(*) desc limit 1",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select architect.id , architect.name , architect.gender from bridge join architect on bridge.architect_id = architect.id  group by architect.id having  count(*) = 2  union select architect.id , architect.name , architect.gender from mill join architect on mill.architect_id = architect.id  group by architect.id having  count(*) = 1",
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select bridge.location from bridge where  bridge.name = \"Kolob Arch\" or bridge.name = \"Rainbow Bridge\"",
        "question": "What is the location of the bridge named 'Kolob Arch' or 'Rainbow Bridge'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.name from mill where  mill.name like \"%Moulin%\"",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.name from mill where  mill.name like \"%Moulin%\"",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.name from mill where  mill.name in (select mill.name from mill where  mill.name like \"%Moulin%\"  )",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select distinct mill.name from bridge join architect on bridge.architect_id = architect.id join mill on architect.id = mill.architect_id where  bridge.length_meters > 80",
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select mill.type , count(*) from mill  group by mill.type  order by count(*) desc limit 1",
        "question": "What is the most common mill type, and how many are there?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select count(*) from architect where  architect.id not in (select mill.architect_id from mill where  mill.built_year < 1850  )",
        "question": "How many architects haven't built a mill before year 1850?",
        "correctness": 1
    },
    {
        "db_id": "architecture",
        "query": "select bridge.name from bridge join architect on bridge.architect_id = architect.id where  architect.nationality = \"American\"   order by bridge.length_feet asc",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "correctness": 1
    }
]