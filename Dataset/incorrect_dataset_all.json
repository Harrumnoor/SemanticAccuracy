[
    {
        "db_id": "allergy_1",
        "question": "How many male students (sex is 'M') are allergic to any type of food?",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many male students (sex is 'M') are allergic to any type of food?",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many male students (sex is 'M') are allergic to any type of food?",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of male (sex is 'M') students who have some food type allery.",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value AND T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE sex  =  \"M\" AND StuID IN (SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\")",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many locations are listed in the database?",
        "query": "SELECT Count ( DISTINCT Location_Description ) FROM Ref_Locations",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many locations are listed in the database?",
        "query": "SELECT Count ( DISTINCT Location_Description ) FROM Ref_Locations",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which job titles correspond to jobs with salaries over 9000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT job_title FROM jobs WHERE min_salary  >  9000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the salaries and manager ids for employees who have managers?",
        "query": "SELECT SALARY , MANAGER_ID FROM employees",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the salaries and manager ids for employees who have managers?",
        "query": "SELECT SALARY , MANAGER_ID FROM employees",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have not produced films with director \"Walter Hill\".",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the headquarters without companies that are in the banking industry?",
        "query": "SELECT Headquarters FROM company WHERE Main_Industry ! = value",
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the headquarters without companies that are in the banking industry?",
        "query": "SELECT Headquarters FROM company WHERE Main_Industry ! = value",
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Which studios have never worked with the director Walter Hill?",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Which studios have never worked with the director Walter Hill?",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Which studios have never worked with the director Walter Hill?",
        "query": "SELECT Studio FROM film WHERE Director ! = value",
        "gold_parse": "SELECT Studio FROM film EXCEPT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "query": "SELECT billing_country FROM invoices GROUP BY billing_country ORDER BY Sum ( total ) Desc LIMIT value",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of the top 8 countries by total invoice size and what are those sizes?",
        "query": "SELECT billing_country FROM invoices GROUP BY billing_country ORDER BY Sum ( total ) Desc LIMIT value",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee id and salary of all employees who report to Payam (first name).",
        "query": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE FIRST_NAME = value",
        "gold_parse": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee id and salary of all employees who report to Payam (first name).",
        "query": "SELECT EMPLOYEE_ID , SALARY FROM employees WHERE FIRST_NAME = value",
        "gold_parse": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.",
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value OR T2.staff_first_name = value",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems were reported by the staff named Dameon Frami or Jolie Weber? Give me the ids of the problems.",
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value OR T2.staff_first_name = value",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported before 1978-06-26?",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "query": "SELECT Count ( * ) FROM film_market_estimation WHERE Low_Estimate < value",
        "gold_parse": "SELECT count(*) FROM market WHERE Number_cities  <  300",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Count the number of markets that have a number of cities lower than 300.",
        "query": "SELECT Count ( * ) FROM film_market_estimation WHERE Low_Estimate < value",
        "gold_parse": "SELECT count(*) FROM market WHERE Number_cities  <  300",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY Sum ( T2.total ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 10 customers by total gross sales. List customers' first and last name and total gross sales.",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name ORDER BY Sum ( T2.total ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on playlists titled Movies?",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all of Bob's friends?",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all of Bob's friends?",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the date and venue of each workshop in ascending alphabetical order of the venue.",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the customer who started a policy most recently.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Start_Date Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the customer who started a policy most recently.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.Start_Date Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the names of courses that have either 3 credits or 1 credit but 4 hours.",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Who advises student 1004?",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Who advises student 1004?",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "query": "SELECT Poll_Source FROM candidate WHERE Unsure_rate = value",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "query": "SELECT Poll_Source FROM candidate WHERE Unsure_rate = value",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "query": "SELECT Title , Studio FROM film WHERE Title LIKE value",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Find the titles and studios of the films that are produced by some film studios that contained the word \"Universal\".",
        "query": "SELECT Title , Studio FROM film WHERE Title LIKE value",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "query": "SELECT first_name , last_name FROM customers GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the top 10 customers' first and last names by total number of orders and how many orders did they make?",
        "query": "SELECT first_name , last_name FROM customers GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "query": "SELECT name , Industry FROM Companies ORDER BY name Asc",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "What are the name and assets of each company, sorted in ascending order of company name?",
        "query": "SELECT name , Industry FROM Companies ORDER BY name Asc",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the highest base price?",
        "query": "SELECT decor FROM Rooms ORDER BY basePrice Desc LIMIT value",
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the highest base price?",
        "query": "SELECT decor FROM Rooms ORDER BY basePrice Desc LIMIT value",
        "gold_parse": "SELECT RoomId ,  roomName FROM Rooms ORDER BY basePrice DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of budget codes.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of budget codes.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "query": "SELECT T1.name , T1.Type FROM operate_company AS T1 WHERE T1.id IN ( SELECT T2.company_id FROM flight AS T2 )",
        "gold_parse": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the names and types of the companies that have ever operated a flight?",
        "query": "SELECT T1.name , T1.Type FROM operate_company AS T1 WHERE T1.id IN ( SELECT T2.company_id FROM flight AS T2 )",
        "gold_parse": "SELECT T1.name ,  T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names of friends who are younger than the average age for a friend?",
        "query": "SELECT DISTINCT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names of friends who are younger than the average age for a friend?",
        "query": "SELECT DISTINCT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date > value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems which are reported after 1978-06-26?",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date > value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that have produced the most number of songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that have produced the most number of songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT value",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Who is the youngest employee in the company? List employee's first and last name.",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT value",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the number of projects.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Projects",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and savings balance of all accounts in the bank sorted by their total checking and savings balance in descending order.",
        "query": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "query": "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.SALARY Asc",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M and make the result set in ascending order by department number.",
        "query": "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.SALARY Asc",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show names of pilots that have more than one record.",
        "query": "SELECT Pilot_name FROM pilot GROUP BY Pilot_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show names of pilots that have more than one record.",
        "query": "SELECT Pilot_name FROM pilot GROUP BY Pilot_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Which building does the instructor who teaches the most number of courses live in?",
        "query": "SELECT Building FROM Faculty GROUP BY Building ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "query": "SELECT Document_Type_Code , Document_Description , Document_ID FROM Documents",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the budget type codes, budget type descriptions and document ids for documents with expenses.",
        "query": "SELECT Document_Type_Code , Document_Description , Document_ID FROM Documents",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "query": "SELECT T1.staff_name , Count ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T2.contact_staff_id",
        "gold_parse": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many engineers did each staff contact? List both the contact staff name and number of engineers contacted.",
        "query": "SELECT T1.staff_name , Count ( * ) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id = T2.contact_staff_id GROUP BY T2.contact_staff_id",
        "gold_parse": "SELECT T1.staff_name ,  count(*) FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id GROUP BY T1.staff_name",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the number of documents.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Count the number of distinct claim outcome codes.",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Count the number of distinct claim outcome codes.",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have vocals of type lead?",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have vocals of type lead?",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the oldest person whose job is student?",
        "query": "SELECT name FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the oldest person whose job is student?",
        "query": "SELECT name FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has friends that are younger than the average age?",
        "query": "SELECT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has friends that are younger than the average age?",
        "query": "SELECT name FROM Person WHERE age < ( SELECT Avg ( age ) FROM Person )",
        "gold_parse": "SELECT DISTINCT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  <  (SELECT avg(age) FROM person)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are full names and salaries of employees working in the city of London?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are full names and salaries of employees working in the city of London?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the location with the largest number of documents.",
        "query": "SELECT Location_Description FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the location with the largest number of documents.",
        "query": "SELECT Location_Description FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the number of invoices from Chicago, IL.",
        "query": "SELECT Count ( * ) FROM invoices WHERE billing_city = value",
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the number of invoices from Chicago, IL.",
        "query": "SELECT Count ( * ) FROM invoices WHERE billing_city = value",
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first name, and department number for all employees whose last name is \"McEwen\".",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
        "query": "SELECT Count ( * ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city = value AND T2.end_date = value",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips stated from  a station in Mountain View and ended at one in Palo Alto?",
        "query": "SELECT Count ( * ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city = value AND T2.end_date = value",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total number of people who could stay in the modern rooms in this inn?",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "How many different projects are there?",
        "query": "SELECT Count ( * ) FROM Scientists",
        "gold_parse": "SELECT count(DISTINCT name) FROM projects",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "How many different projects are there?",
        "query": "SELECT Count ( * ) FROM Scientists",
        "gold_parse": "SELECT count(DISTINCT name) FROM projects",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs that do not have a lead vocal.",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs that do not have a lead vocal.",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the label with the most albums?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId GROUP BY T2.Label ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the label with the most albums?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId GROUP BY T2.Label ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT label FROM albums GROUP BY label ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
        "query": "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = value AND T2.date_problem_closed > value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems that are from the product \"voluptatem\" and are reported after 1995?",
        "query": "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = value AND T2.date_problem_closed > value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) > = value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the zip codes that have an average mean humidity below 70 and had at least 100 trips come through there?",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) > = value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_humidity)  <  70 INTERSECT SELECT zip_code FROM trip GROUP BY zip_code HAVING count(*)  >=  100",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "query": "SELECT Theme FROM farm_competition WHERE Competition_ID NOT IN ( SELECT Theme FROM farm_competition )",
        "gold_parse": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the hosts of competitions for which the theme is not Aliens?",
        "query": "SELECT Theme FROM farm_competition WHERE Competition_ID NOT IN ( SELECT Theme FROM farm_competition )",
        "gold_parse": "SELECT Hosts FROM farm_competition WHERE Theme !=  'Aliens'",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "which gender got the highest average uncertain ratio.",
        "query": "SELECT Sex FROM people GROUP BY Sex ORDER BY Avg ( Height ) Desc LIMIT value",
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "which gender got the highest average uncertain ratio.",
        "query": "SELECT Sex FROM people GROUP BY Sex ORDER BY Avg ( Height ) Desc LIMIT value",
        "gold_parse": "SELECT t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex ORDER BY avg(t2.unsure_rate) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the average age for male and female students.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the average age for male and female students.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
        "query": "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "gold_parse": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problem id and log id are assigned to the staff named Rylan Homenick?",
        "query": "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "gold_parse": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the states which do not have any employee in their record.",
        "query": "SELECT state_province_county FROM Addresses EXCEPT SELECT state_province_county FROM Addresses",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the states which do not have any employee in their record.",
        "query": "SELECT state_province_county FROM Addresses EXCEPT SELECT state_province_county FROM Addresses",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE address_id NOT IN (SELECT employee_address_id FROM Employees)",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "return all columns of the albums created in the year of 2012.",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "return all columns of the albums created in the year of 2012.",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of the people who have no friends who are students?",
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of the people who have no friends who are students?",
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of accounts.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of accounts.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of the youngest male?",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of the youngest male?",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "query": "SELECT id FROM station WHERE city = value AND long > value AND long > value",
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that are located in San Francisco and have average bike availability above 10.",
        "query": "SELECT id FROM station WHERE city = value AND long > value AND long > value",
        "gold_parse": "SELECT id FROM station WHERE city  =  \"San Francisco\" INTERSECT SELECT station_id FROM status GROUP BY station_id HAVING avg(bikes_available)  >  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
        "query": "SELECT T1.long , T1.city , T2.start_station_name FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT value",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the latitude, longitude, and city of the station from which the trip with smallest duration started?",
        "query": "SELECT T1.long , T1.city , T2.start_station_name FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT value",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the number of people whose age is greater than all engineers.",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the number of people whose age is greater than all engineers.",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all tracks in the playlists of Movies.",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all tracks in the playlists of Movies.",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id = T2.track_id JOIN playlists AS T3 ON T3.id = T2.playlist_id WHERE T3.name = \"Movies\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first name of the band mate who perfomed in the most songs?",
        "query": "SELECT Firstname FROM Band GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first name of the band mate who perfomed in the most songs?",
        "query": "SELECT Firstname FROM Band GROUP BY Id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of documents with document type code CV or BK.",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of documents with document type code CV or BK.",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Badlands\" use?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Badlands\" use?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "query": "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "gold_parse": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the problem id and log id which are assigned to the staff named Rylan Homenick.",
        "query": "SELECT T2.problem_id , T2.reported_by_staff_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "gold_parse": "SELECT DISTINCT T2.problem_id ,  T2.problem_log_id FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T1.staff_first_name = \"Rylan\" AND T1.staff_last_name = \"Homenick\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name, checking balance and saving balance of all accounts in the bank.",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "query": "SELECT Music_Festival , Result FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony and the results of all music festivals",
        "query": "SELECT Music_Festival , Result FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has the highest temperature in February?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has the highest temperature in February?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "SELECT email , phone FROM customers WHERE last_name = value",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "SELECT email , phone FROM customers WHERE last_name = value",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List name of all tracks in Balls to the Wall.",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List name of all tracks in Balls to the Wall.",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT T2.name FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.title = \"Balls to the Wall\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of accounts whose checking balance is higher than corresponding saving balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the name, rate, check in and check out date for the room with the highest rate.",
        "query": "SELECT T1.roomName , T1.bedType , T2.Room FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT value",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the name, rate, check in and check out date for the room with the highest rate.",
        "query": "SELECT T1.roomName , T1.bedType , T2.Room FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT value",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the low and high estimates of film markets?",
        "query": "SELECT Type , High_Estimate FROM film_market_estimation",
        "gold_parse": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the low and high estimates of film markets?",
        "query": "SELECT Type , High_Estimate FROM film_market_estimation",
        "gold_parse": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the student first and last names and grade points of all enrollments.",
        "query": "SELECT Fname , LName FROM Student",
        "gold_parse": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the student first and last names and grade points of all enrollments.",
        "query": "SELECT Fname , LName FROM Student",
        "gold_parse": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "gold_parse": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the id of each employee and the number of document destruction authorised by that employee.",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "gold_parse": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "How many companies are there?",
        "query": "SELECT Count ( * ) FROM buildings",
        "gold_parse": "SELECT count(*) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "How many companies are there?",
        "query": "SELECT Count ( * ) FROM buildings",
        "gold_parse": "SELECT count(*) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "query": "SELECT Name FROM people WHERE Sex = value ORDER BY Name Asc",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "list all female (sex is F) candidate names in the alphabetical order.",
        "query": "SELECT Name FROM people WHERE Sex = value ORDER BY Name Asc",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Demon Kitty Rag\"?",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Demon Kitty Rag\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
        "query": "SELECT T2.EMPLOYEE_ID , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the ids, full names, and salaries for employees making more than average and who work in a department with employees who have the letter J in their first name?",
        "query": "SELECT T2.EMPLOYEE_ID , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  salary FROM employees WHERE salary  >  ( SELECT AVG (salary) FROM employees ) AND department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%J%')",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems are reported before 1978-06-26? Give me the ids of the problems.",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date < value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported < \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of the trips that lasted the longest and how long did they last?",
        "query": "SELECT id , end_date FROM trip ORDER BY duration Desc LIMIT value",
        "gold_parse": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of the trips that lasted the longest and how long did they last?",
        "query": "SELECT id , end_date FROM trip ORDER BY duration Desc LIMIT value",
        "gold_parse": "SELECT id ,  duration FROM trip ORDER BY duration DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musicians who has played back position the most?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musicians who has played back position the most?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "query": "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "gold_parse": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes with more than 1 week on top?",
        "query": "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "gold_parse": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "query": "SELECT bedType , Count ( * ) FROM Rooms GROUP BY bedType",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have king beds? Report the number for each decor type.",
        "query": "SELECT bedType , Count ( * ) FROM Rooms GROUP BY bedType",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names, departments, cities, and state provinces for each employee?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "query": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and id of accounts whose checking balance is below the maximum checking balance.",
        "query": "SELECT T1.name , T1.custid FROM ACCOUNTS AS T1 WHERE T1.custid < ( SELECT Max ( T2.balance ) FROM CHECKING AS T2 )",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "query": "SELECT * FROM Albums WHERE Year > = value AND Year < = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "query": "SELECT * FROM Albums WHERE Year > = value AND Year < = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of the customers with the 10 cheapest invoices?",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names of all students that are not enrolled in courses?",
        "query": "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student",
        "gold_parse": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names of all students that are not enrolled in courses?",
        "query": "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student",
        "gold_parse": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job title and average salary of employees.",
        "query": "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE",
        "gold_parse": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job title and average salary of employees.",
        "query": "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE",
        "gold_parse": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name of account that has the lowest total checking and saving balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the person that has no friend?",
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the person that has no friend?",
        "query": "SELECT T1.name FROM Person AS T1 WHERE T1.name NOT IN ( SELECT T2.friend FROM PersonFriend AS T2 )",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT name FROM PersonFriend",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of distinct projects.",
        "query": "SELECT Count ( * ) FROM Scientists",
        "gold_parse": "SELECT count(DISTINCT name) FROM projects",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of distinct projects.",
        "query": "SELECT Count ( * ) FROM Scientists",
        "gold_parse": "SELECT count(DISTINCT name) FROM projects",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the average salary for each job title?",
        "query": "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE",
        "gold_parse": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the average salary for each job title?",
        "query": "SELECT JOB_TITLE , Avg ( MAX_SALARY ) FROM jobs GROUP BY JOB_TITLE",
        "gold_parse": "SELECT job_title ,  AVG(salary) FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id GROUP BY T2.job_title",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "From the trip record, find the number of unique bikes.",
        "query": "SELECT Count ( * ) FROM station",
        "gold_parse": "SELECT count(DISTINCT bike_id) FROM trip",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "From the trip record, find the number of unique bikes.",
        "query": "SELECT Count ( * ) FROM station",
        "gold_parse": "SELECT count(DISTINCT bike_id) FROM trip",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the male members of club \"Hopkins Student Enterprises\". Show the first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t3.sex  =  \"M\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the average age for a male in each job?",
        "query": "SELECT Avg ( age ) , city FROM Person WHERE gender = value GROUP BY city",
        "gold_parse": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the average age for a male in each job?",
        "query": "SELECT Avg ( age ) , city FROM Person WHERE gender = value GROUP BY city",
        "gold_parse": "SELECT avg(age) ,  job FROM Person WHERE gender  =  'male' GROUP BY job",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has a friend that is from new york city?",
        "query": "SELECT name FROM Person WHERE city = value",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has a friend that is from new york city?",
        "query": "SELECT name FROM Person WHERE city = value",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "query": "SELECT Avg ( T1.Age ) FROM Student AS T1 WHERE T1.Sex IN ( SELECT T2.AllergyType FROM Allergy_Type AS T2 )",
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the average age of the students who have allergies with food and animal types.",
        "query": "SELECT Avg ( T1.Age ) FROM Student AS T1 WHERE T1.Sex IN ( SELECT T2.AllergyType FROM Allergy_Type AS T2 )",
        "gold_parse": "SELECT avg(age) FROM Student WHERE StuID IN ( SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" INTERSECT SELECT T1.StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"animal\")",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "How many distinct claim outcome codes are there?",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "How many distinct claim outcome codes are there?",
        "query": "SELECT Count ( DISTINCT Claim_Status_Code ) FROM Claim_Headers",
        "gold_parse": "SELECT count(DISTINCT claim_outcome_code) FROM claims_processing",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "query": "SELECT Name FROM people WHERE Sex = value ORDER BY Name Asc",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of all female candidates in alphabetical order (sex is F)?",
        "query": "SELECT Name FROM people WHERE Sex = value ORDER BY Name Asc",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t1.sex  =  'F' ORDER BY t1.name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the document type \"Paper\".",
        "query": "SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Code = value",
        "gold_parse": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the code of the document type \"Paper\".",
        "query": "SELECT Document_Type_Name FROM Ref_Document_Types WHERE Document_Type_Code = value",
        "gold_parse": "SELECT document_type_code FROM Ref_document_types WHERE document_type_name  =  \"Paper\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have a king bed?",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many rooms have a king bed?",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name of the first 5 customers.",
        "query": "SELECT customer_name FROM Customers ORDER BY customer_name Asc LIMIT value",
        "gold_parse": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name of the first 5 customers.",
        "query": "SELECT customer_name FROM Customers ORDER BY customer_name Asc LIMIT value",
        "gold_parse": "SELECT customer_name FROM Customers ORDER BY date_became_customer LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first names and department numbers for employees with last name McEwen?",
        "query": "SELECT T2.FIRST_NAME , T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  department_id FROM employees WHERE last_name  =  'McEwen'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have lower temperature in March than in Dec and have never served as host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "What are the average profits of companies?",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "What are the average profits of companies?",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many accounts do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the friends of Bob?",
        "query": "SELECT friend FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the friends of Bob?",
        "query": "SELECT friend FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Bob'",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "query": "SELECT T1.Main_Industry FROM company AS T1 WHERE T1.Company_ID NOT IN ( SELECT T2.Company_ID FROM station_company AS T2 )",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the main industries of the companies without gas stations and what are the companies?",
        "query": "SELECT T1.Main_Industry FROM company AS T1 WHERE T1.Company_ID NOT IN ( SELECT T2.Company_ID FROM station_company AS T2 )",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "query": "SELECT DISTINCT name FROM airport WHERE Country = value OR Country = value",
        "gold_parse": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the different pilot names who had piloted a flight in the country 'United States' or in the airport named 'Billund Airport'?",
        "query": "SELECT DISTINCT name FROM airport WHERE Country = value OR Country = value",
        "gold_parse": "SELECT DISTINCT T2.pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id WHERE T1.country  =  'United States' OR T1.name  =  'Billund Airport'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY BETWEEN value AND value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY BETWEEN value AND value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the number of matches in different competitions.",
        "query": "SELECT Count ( DISTINCT Competition ) FROM match",
        "gold_parse": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the number of matches in different competitions.",
        "query": "SELECT Count ( DISTINCT Competition ) FROM match",
        "gold_parse": "SELECT count(*) ,  Competition FROM MATCH GROUP BY Competition",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the days that had the smallest temperature range, and what was that range?",
        "query": "SELECT T1.start_date , T1.duration FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.min_humidity Asc LIMIT value",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the days that had the smallest temperature range, and what was that range?",
        "query": "SELECT T1.start_date , T1.duration FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.min_humidity Asc LIMIT value",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T2.Destroyed_by_Employee_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Which employees have either destroyed a document or made an authorization to do so? Return their employee ids.",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T2.Destroyed_by_Employee_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "query": "SELECT T3.Statement_ID , T2.Statement_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID AND T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement id and the statement detail for the statement with most number of accounts.",
        "query": "SELECT T3.Statement_ID , T2.Statement_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID AND T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID GROUP BY T1.Document_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id GROUP BY T1.statement_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "query": "SELECT name FROM PersonFriend ORDER BY year Asc LIMIT value",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Alice for the shortest years.",
        "query": "SELECT name FROM PersonFriend ORDER BY year Asc LIMIT value",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "query": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the checking balance of the account whose owner\u2019s name contains the substring \u2018ee\u2019?",
        "query": "SELECT T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name LIKE value",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name LIKE '%ee%'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many courses are there in total?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many courses are there in total?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many albums does Billy Cobham has?",
        "query": "SELECT Count ( * ) FROM tracks WHERE name = value",
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many albums does Billy Cobham has?",
        "query": "SELECT Count ( * ) FROM tracks WHERE name = value",
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
        "query": "SELECT City , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > value",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have served as host cities more than once? Return me their GDP and population.",
        "query": "SELECT City , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > value",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many unique labels are there for albums?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT label) FROM albums",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many unique labels are there for albums?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT label) FROM albums",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the different first names and cities of the students who have allergy to milk or cat.",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex > = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "query": "SELECT Min ( duration ) , Min ( duration ) FROM trip WHERE start_station_name = value",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each station, find its latitude and the minimum duration of trips that ended at the station.",
        "query": "SELECT Min ( duration ) , Min ( duration ) FROM trip WHERE start_station_name = value",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance and saving balance in the Brown\u2019s account.",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the starting date and ending data in location for the document named \"Robin CV\".",
        "query": "SELECT T2.Date_in_Location_From , T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = value",
        "gold_parse": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "query": "SELECT skill_id , skill_description FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which skill is used in fixing the most number of faults? List the skill id and description.",
        "query": "SELECT skill_id , skill_description FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.skill_id ,  T1.skill_description FROM Skills AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.skill_id  =  T2.skill_id GROUP BY T1.skill_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "query": "SELECT Max ( Consider_rate ) , Min ( Oppose_rate ) , Max ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the maximum support rate, minimum consider rate, and minimum oppose rate across all candidates?",
        "query": "SELECT Max ( Consider_rate ) , Min ( Oppose_rate ) , Max ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the the phone number of Nancy Edwards?",
        "query": "SELECT phone FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the the phone number of Nancy Edwards?",
        "query": "SELECT phone FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "In February, which city marks the highest temperature?",
        "query": "SELECT T1.City , T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "In February, which city marks the highest temperature?",
        "query": "SELECT T1.City , T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id ORDER BY T2.Feb DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Documents",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "query": "SELECT Avg ( T1.Vote_Percent ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = value",
        "gold_parse": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What is the average number of votes of representatives from party \"Republican\"?",
        "query": "SELECT Avg ( T1.Vote_Percent ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID WHERE T2.Party = value",
        "gold_parse": "SELECT avg(T1.Votes) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID  =  T2.Representative_ID WHERE T2.Party  =  \"Republican\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.total Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the top 10 customers' first and last names with the highest gross sales, and also what are the sales?",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id ORDER BY T2.total Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  SUM(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY SUM(T2.total) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the albums produced in year 2010?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the albums produced in year 2010?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "query": "SELECT T1.Name , Count ( * ) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project GROUP BY T2.Project",
        "gold_parse": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the naems of all the projects, and how many scientists were assigned to each of them?",
        "query": "SELECT T1.Name , Count ( * ) FROM Projects AS T1 JOIN AssignedTo AS T2 ON T1.Code = T2.Project GROUP BY T2.Project",
        "gold_parse": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival , Result FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival , Result FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the budget type code and description and the corresponding document id.",
        "query": "SELECT T1.Document_Type_Code , T2.Document_Details , T1.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID",
        "gold_parse": "SELECT T2.budget_type_code ,  T2.budget_type_description ,  T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_budget_codes AS T2 ON T1.budget_type_code  =  T2.budget_type_code",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids and dates of hire for employees hired after November 5th, 2007 and before July 5th, 2009?",
        "query": "SELECT T2.EMPLOYEE_ID , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.FIRST_NAME = value AND T2.LAST_NAME > value AND T2.LAST_NAME < value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Which friend of Zach has the longest-lasting friendship?",
        "query": "SELECT name FROM Person ORDER BY gender Desc LIMIT value",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Which friend of Zach has the longest-lasting friendship?",
        "query": "SELECT name FROM Person ORDER BY gender Desc LIMIT value",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the first and last name of the employee who reports to Nancy Edwards?",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the first and last name of the employee who reports to Nancy Edwards?",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "query": "SELECT T2.Name , Min ( T1.Unsure_rate ) FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Sex",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name of the candidates whose oppose percentage is the lowest for each sex.",
        "query": "SELECT T2.Name , Min ( T1.Unsure_rate ) FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID GROUP BY T2.Sex",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MAX_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MAX_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "SELECT MANAGER_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the ID for those employees who did two or more jobs in the past.",
        "query": "SELECT MANAGER_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "query": "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Which buildings have more than one company offices? Give me the building names.",
        "query": "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "query": "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Avg ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "query": "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Avg ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the country ID and number of cities for each country.",
        "query": "SELECT COUNTRY_ID , Count ( * ) FROM countries GROUP BY COUNTRY_ID",
        "gold_parse": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the country ID and number of cities for each country.",
        "query": "SELECT COUNTRY_ID , Count ( * ) FROM countries GROUP BY COUNTRY_ID",
        "gold_parse": "SELECT country_id ,  COUNT(*) FROM locations GROUP BY country_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "query": "SELECT skill_id , skill_code FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part fault requires the most number of skills to fix? List part id and name.",
        "query": "SELECT skill_id , skill_code FROM Skills GROUP BY skill_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.part_id ,  T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id JOIN Skills_Required_To_Fix AS T3 ON T2.part_fault_id  =  T3.part_fault_id GROUP BY T1.part_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 EXCEPT SELECT T3.EMPLOYEE_ID FROM departments AS T2 JOIN job_history AS T3 ON T2.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T2.LOCATION_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the ids of the employees who does not work in those departments where some employees works whose manager id within the range 100 and 200.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 EXCEPT SELECT T3.EMPLOYEE_ID FROM departments AS T2 JOIN job_history AS T3 ON T2.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T2.LOCATION_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE department_id NOT IN (SELECT department_id FROM departments WHERE manager_id BETWEEN 100 AND 200)",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have either destroyed a document or made an authorization to do this.",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
        "gold_parse": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed UNION SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "query": "SELECT id , City , name FROM airport ORDER BY name Asc",
        "gold_parse": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "List the id, country, city and name of the airports ordered alphabetically by the name.",
        "query": "SELECT id , City , name FROM airport ORDER BY name Asc",
        "gold_parse": "SELECT id ,  country ,  city ,  name FROM airport ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips did not end in San Francisco?",
        "query": "SELECT Count ( * ) FROM station WHERE city ! = value",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips did not end in San Francisco?",
        "query": "SELECT Count ( * ) FROM station WHERE city ! = value",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city != \"San Francisco\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How long does track Fast As a Shark has?",
        "query": "SELECT Max ( milliseconds ) FROM tracks",
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How long does track Fast As a Shark has?",
        "query": "SELECT Max ( milliseconds ) FROM tracks",
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs performed by artist with last name \"Heilo\"",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = value",
        "gold_parse": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "query": "SELECT Event_ID FROM Events WHERE Event_Details ! = value",
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which events id does not have any participant with detail 'Kenyatta Kuhn'?",
        "query": "SELECT Event_ID FROM Events WHERE Event_Details ! = value",
        "gold_parse": "SELECT event_id FROM EVENTS EXCEPT SELECT T1.event_id FROM Participants_in_Events AS T1 JOIN Participants AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE Participant_Details  =  'Kenyatta Kuhn'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculty members who are a part of department 520?",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculty members who are a part of department 520?",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "query": "SELECT T1.start_date , T2.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f = value AND T2.min_temperature_f < value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day and in which zip code was the min dew point lower than any day in zip code 94107?",
        "query": "SELECT T1.start_date , T2.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f = value AND T2.min_temperature_f < value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE min_dew_point_f  <  (SELECT min(min_dew_point_f) FROM weather WHERE zip_code  =  94107)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "query": "SELECT id , name FROM station GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the ids and names of stations from which at least 200 trips started.",
        "query": "SELECT id , name FROM station GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "gold_parse": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destroyed by that employee?",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "gold_parse": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "query": "SELECT Claim_Status_Code FROM Claim_Headers GROUP BY Claim_Status_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which claim processing stage has the most claims? Show the claim status name.",
        "query": "SELECT Claim_Status_Code FROM Claim_Headers GROUP BY Claim_Status_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Show the theme for exhibitions with both records of an attendance below 100 and above 500.",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "query": "SELECT T1.fault_description , T2.fault_status FROM Part_Faults AS T1 JOIN Fault_Log_Parts AS T2 ON T1.part_fault_id = T2.part_fault_id",
        "gold_parse": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the fault descriptions and the fault status of all the faults recoreded in the logs?",
        "query": "SELECT T1.fault_description , T2.fault_status FROM Part_Faults AS T1 JOIN Fault_Log_Parts AS T2 ON T1.part_fault_id = T2.part_fault_id",
        "gold_parse": "SELECT T1.fault_description ,  T2.fault_status FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the ages of all of Zach's friends who are in the longest relationship?",
        "query": "SELECT age FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the ages of all of Zach's friends who are in the longest relationship?",
        "query": "SELECT age FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the checking balance of the accounts whose savings balance is higher than the average savings balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "query": "SELECT Title FROM film WHERE Director = value INTERSECT SELECT Title FROM film WHERE Director = value",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the names of studios that have produced films with both Nicholas Meyer and Walter Hill?",
        "query": "SELECT Title FROM film WHERE Director = value INTERSECT SELECT Title FROM film WHERE Director = value",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id GROUP BY T2.Headquarters ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Which building has the largest number of company offices? Give me the building name.",
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id GROUP BY T2.Headquarters ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the oldest log id and its corresponding problem id.",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the oldest log id and its corresponding problem id.",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "query": "SELECT part_name , Count ( * ) FROM Parts GROUP BY part_id",
        "gold_parse": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets can each parts be used in? List the part name and the number.",
        "query": "SELECT part_name , Count ( * ) FROM Parts GROUP BY part_id",
        "gold_parse": "SELECT T1.part_name ,  count(*) FROM Parts AS T1 JOIN Asset_Parts AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = value",
        "gold_parse": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the maximum and minimum grade point of students who live in NYC?",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = value",
        "gold_parse": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the number of distinct stages in claim processing.",
        "query": "SELECT Count ( * ) FROM Customers",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the number of distinct stages in claim processing.",
        "query": "SELECT Count ( * ) FROM Customers",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "query": "SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = value INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = value",
        "gold_parse": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the states where both the secretary of 'Treasury' department and the secretary of 'Homeland Security' were born.",
        "query": "SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = value INTERSECT SELECT T1.born_state FROM head AS T1 JOIN management AS T2 ON T1.head_ID = T2.head_ID WHERE T2.temporary_acting = value",
        "gold_parse": "SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Treasury' INTERSECT SELECT T3.born_state FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T1.name  =  'Homeland Security'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "query": "SELECT start_date , start_station_id FROM trip ORDER BY id Asc LIMIT value",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the start station and end station for the trips with the three oldest id.",
        "query": "SELECT start_date , start_station_id FROM trip ORDER BY id Asc LIMIT value",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many vocal types are used in the song \"Le Pop\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "List the authors who do not have submission to any workshop.",
        "query": "SELECT Author FROM submission EXCEPT SELECT Author FROM submission",
        "gold_parse": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "List the authors who do not have submission to any workshop.",
        "query": "SELECT Author FROM submission EXCEPT SELECT Author FROM submission",
        "gold_parse": "SELECT Author FROM submission WHERE Submission_ID NOT IN (SELECT Submission_ID FROM acceptance)",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "In which country does Roberto Almeida?",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "In which country does Roberto Almeida?",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and what are the total savings balances for each?",
        "query": "SELECT T1.name , Sum ( T2.balance ) FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.custid",
        "gold_parse": "SELECT sum(T2.balance) ,  T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the friends of Alice that are doctors?",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who are the friends of Alice that are doctors?",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.name = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "query": "SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_last_name > = value AND T1.staff_last_name < = value INTERSECT SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the product ids for the problems reported by Christop Berge with closure authorised by Ashley Medhurst?",
        "query": "SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_last_name > = value AND T1.staff_last_name < = value INTERSECT SELECT T2.product_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\" AND T2.staff_last_name = \"Berge\" INTERSECT SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Ashley\" AND T2.staff_last_name = \"Medhurst\"",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show the details of all trucks in the order of their license number.",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Show the details of all trucks in the order of their license number.",
        "query": "SELECT truck_details FROM Trucks ORDER BY truck_details Asc",
        "gold_parse": "SELECT truck_details FROM trucks ORDER BY truck_licence_number",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the youngest male?",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the youngest male?",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' AND age  =  (SELECT min(age) FROM person WHERE gender  =  'male' )",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "query": "SELECT Famous_Title FROM artist WHERE Age > = value",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return names of songs in volumes that are by artists that are at least 32 years old.",
        "query": "SELECT Famous_Title FROM artist WHERE Age > = value",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids of employees who report to Payam, and what are their salaries?",
        "query": "SELECT T2.EMPLOYEE_ID , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "gold_parse": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids of employees who report to Payam, and what are their salaries?",
        "query": "SELECT T2.EMPLOYEE_ID , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "gold_parse": "SELECT employee_id ,  salary FROM employees WHERE manager_id  =  (SELECT employee_id FROM employees WHERE first_name  =  'Payam' )",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, list their names in decreasing order by their highest station latitude.",
        "query": "SELECT city , name FROM station GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, list their names in decreasing order by their highest station latitude.",
        "query": "SELECT city , name FROM station GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many friends does Dan have?",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many friends does Dan have?",
        "query": "SELECT Count ( * ) FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT count(T2.friend) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T1.name  =  'Dan'",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product which has problems, what are the number of problems and the product id?",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which service id and type has the least number of participants?",
        "query": "SELECT Service_ID , Service_Type_Code FROM Services GROUP BY Service_ID ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "Which service id and type has the least number of participants?",
        "query": "SELECT Service_ID , Service_Type_Code FROM Services GROUP BY Service_ID ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T3.service_id ,  T4.Service_Type_Code FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID JOIN EVENTS AS T3 ON T2.Event_ID   =  T3.Event_ID JOIN services AS T4 ON T3.service_id  =  T4.service_id GROUP BY T3.service_id ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the maximum and minumum grade points?",
        "query": "SELECT Max ( gradepoint ) , Min ( lettergrade ) FROM Gradeconversion",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Display the first and last name, and salary for those employees whose first name is ending with the letter m.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for those who had two or more jobs.",
        "query": "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for those who had two or more jobs.",
        "query": "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "query": "SELECT Name , Count ( * ) FROM artist GROUP BY Name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Show all artist names and the number of exhibitions for each artist.",
        "query": "SELECT Name , Count ( * ) FROM artist GROUP BY Name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.EMPLOYEE_ID Asc",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire data, salary and department id for employees without the letter M in their first name, ordered by ascending department id?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME ! = value ORDER BY T2.EMPLOYEE_ID Asc",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%' ORDER BY department_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Luca Mancini have in his invoices?",
        "query": "SELECT Count ( * ) FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Luca Mancini have in his invoices?",
        "query": "SELECT Count ( * ) FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the names of accounts whose checking balance is above the average checking balance, but savings balance is below the average savings balance.",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid GROUP BY T1.name ORDER BY Avg ( T2.balance ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM checking) INTERSECT SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM savings)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "query": "SELECT HIRE_DATE FROM employees WHERE LAST_NAME ! = value",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "On what dates were employees without the letter M in their first names hired?",
        "query": "SELECT HIRE_DATE FROM employees WHERE LAST_NAME ! = value",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "For each player, show the team and the location of school they belong to.",
        "query": "SELECT Team , Position FROM player",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "For each player, show the team and the location of school they belong to.",
        "query": "SELECT Team , Position FROM player",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the members of the club \"Tennis Club\".",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the members of the club \"Tennis Club\".",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value OR MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value OR MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the course names for courses taught on MTW?",
        "query": "SELECT CName FROM Course WHERE CName = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the course names for courses taught on MTW?",
        "query": "SELECT CName FROM Course WHERE CName = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Days  =  \"MTW\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the total number of clubs.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM club",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the total number of clubs.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM club",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Description = value",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Description = value",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many females are in the network?",
        "query": "SELECT Count ( * ) FROM Person WHERE gender = value AND age = value",
        "gold_parse": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many females are in the network?",
        "query": "SELECT Count ( * ) FROM Person WHERE gender = value AND age = value",
        "gold_parse": "SELECT count(*) FROM Person WHERE gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = value AND T3.Position = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all the female members of club \"Bootup Baltimore\". Show the first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = value AND T3.Position = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses with more than 2 credits.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Count the number of courses with more than 2 credits.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "query": "SELECT Count ( * ) , company_id FROM Third_Party_Companies GROUP BY company_id",
        "gold_parse": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each third party company supply? List the count and the company id.",
        "query": "SELECT Count ( * ) , company_id FROM Third_Party_Companies GROUP BY company_id",
        "gold_parse": "SELECT count(*) ,  T1.company_id FROM Third_Party_Companies AS T1 JOIN Assets AS T2 ON T1.company_id  =  T2.supplier_company_id GROUP BY T1.company_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many animal type allergies exist?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many animal type allergies exist?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "query": "SELECT Company , Rank FROM company ORDER BY Sales_billion Asc",
        "gold_parse": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "List the company name and rank for all companies in the decreasing order of their sales.",
        "query": "SELECT Company , Rank FROM company ORDER BY Sales_billion Asc",
        "gold_parse": "SELECT company ,  rank FROM company ORDER BY Sales_billion DESC",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Which vocal type did the musician with last name \"Heilo\" played in the song with title \"Der Kapitan\"?",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value AND T1.Lastname = value",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the different main industries for all companies?",
        "query": "SELECT DISTINCT Company FROM company",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the different main industries for all companies?",
        "query": "SELECT DISTINCT Company FROM company",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances for all customers?",
        "query": "SELECT T1.name , T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different album labels listed?",
        "query": "SELECT DISTINCT Title FROM Songs",
        "gold_parse": "SELECT DISTINCT label FROM Albums",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different album labels listed?",
        "query": "SELECT DISTINCT Title FROM Songs",
        "gold_parse": "SELECT DISTINCT label FROM Albums",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY > value AND MANAGER_ID = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Provide the full names of employees earning more than the employee with id 163.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY > value AND MANAGER_ID = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the first name and last name and department id for those employees who earn such amount of salary which is the smallest salary of any of the departments.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the name of all the clubs at \"AKW\".",
        "query": "SELECT ClubName FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the name of all the clubs at \"AKW\".",
        "query": "SELECT ClubName FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT clubname FROM club WHERE clublocation  =  \"AKW\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find all members of \"Bootup Baltimore\" whose major is \"600\". Show the first name and last name.",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Ticket_Price > value OR Ticket_Price < value",
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Count the number of exhibitions that have had an attendnance of over 100 or a ticket prices under 10.",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Ticket_Price > value OR Ticket_Price < value",
        "gold_parse": "SELECT count(*) FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  100 OR T2.ticket_price  <  10",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "query": "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT value",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the room name and base price of the room with the lowest base price?",
        "query": "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT value",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.precipitation_inches Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that had the top 5 cloud cover rates? Also tell me the cloud cover rate.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 ORDER BY T2.precipitation_inches Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = value",
        "gold_parse": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs by the artist whose last name is \"Heilo\"?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T2.Lastname = value",
        "gold_parse": "SELECT T3.Title FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T2.Lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "query": "SELECT T1.id FROM station AS T1 EXCEPT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available > value",
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the mean longitude for all stations that have never had more than 10 bikes available?",
        "query": "SELECT T1.id FROM station AS T1 EXCEPT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available > value",
        "gold_parse": "SELECT avg(long) FROM station WHERE id NOT IN (SELECT station_id FROM status GROUP BY station_id HAVING max(bikes_available)  >  10)",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name , T1.last_name ORDER BY Sum ( T2.total ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find out the top 10 customers by total number of orders. List customers' first and last name and the number of total orders.",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id GROUP BY T1.first_name , T1.last_name ORDER BY Sum ( T2.total ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  COUNT(*) FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id GROUP BY T1.id ORDER BY COUNT(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each trip, return its ending station's installation date.",
        "query": "SELECT end_date , start_date FROM trip",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each trip, return its ending station's installation date.",
        "query": "SELECT end_date , start_date FROM trip",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the name and country for the artist with most number of exhibitions?",
        "query": "SELECT Name , Country FROM artist GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name , T2.country FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "query": "SELECT Max ( Age ) FROM artist",
        "gold_parse": "SELECT Age FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "query": "SELECT Max ( Age ) FROM artist",
        "gold_parse": "SELECT Age FROM artist",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the age of the friend of Zach with longest year relationship?",
        "query": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "gold_parse": "SELECT T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name =  'Zach' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "query": "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "gold_parse": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Give the songs included in volumes that have more than 1 week on top.",
        "query": "SELECT Song FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "gold_parse": "SELECT Song FROM volume WHERE Weeks_on_Top  >  1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the three largest cities in terms of regional population?",
        "query": "SELECT City FROM city WHERE Regional_Population = ( SELECT Max ( Regional_Population ) FROM city )",
        "gold_parse": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the three largest cities in terms of regional population?",
        "query": "SELECT City FROM city WHERE Regional_Population = ( SELECT Max ( Regional_Population ) FROM city )",
        "gold_parse": "SELECT city FROM city ORDER BY regional_population DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "query": "SELECT date FROM weather WHERE min_humidity BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "query": "SELECT date FROM weather WHERE min_humidity BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "query": "SELECT T2.Manager_Name , T1.Headquarters FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc",
        "gold_parse": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the names and headquarters of all companies ordered by descending market value?",
        "query": "SELECT T2.Manager_Name , T1.Headquarters FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc",
        "gold_parse": "SELECT company ,  headquarters FROM company ORDER BY market_value DESC",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Where is the club \"Pen and Paper Gaming\" located?",
        "query": "SELECT ClubName FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT clublocation FROM club WHERE clubname  =  \"Pen and Paper Gaming\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that has been at the back position the most?",
        "query": "SELECT T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate GROUP BY T2.StagePosition ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id WHERE stageposition  =  \"back\" GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is Nancy Edwards's address?",
        "query": "SELECT address FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is Nancy Edwards's address?",
        "query": "SELECT address FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT address FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "gold_parse": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the id of each employee and the number of document destruction authorised by that employee?",
        "query": "SELECT Employee_ID , Count ( * ) FROM Employees GROUP BY Employee_ID",
        "gold_parse": "SELECT Destruction_Authorised_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Find the names of the buildings in \"on-hold\" status, and sort them in ascending order of building stories.",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have used the instrument \"drums\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have used the instrument \"drums\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "How many submissions are there?",
        "query": "SELECT Count ( * ) FROM workshop",
        "gold_parse": "SELECT count(*) FROM submission",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "How many submissions are there?",
        "query": "SELECT Count ( * ) FROM workshop",
        "gold_parse": "SELECT count(*) FROM submission",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = value AND T2.LastName = value AND T2.LastName = value",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many adults stay in the room CONRAD SELBIG checked in on Oct 23, 2010?",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = value AND T2.LastName = value AND T2.LastName = value",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "query": "SELECT Title , Studio FROM film WHERE Title LIKE value",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the titles and studios of films that have been produced by a studio whose name contains \"Universal\"?",
        "query": "SELECT Title , Studio FROM film WHERE Title LIKE value",
        "gold_parse": "SELECT title ,  Studio FROM film WHERE Studio LIKE \"%Universal%\"",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Count the number of companies.",
        "query": "SELECT Count ( * ) FROM buildings",
        "gold_parse": "SELECT count(*) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Count the number of companies.",
        "query": "SELECT Count ( * ) FROM buildings",
        "gold_parse": "SELECT count(*) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the first name and last name for the \"CTO\" of the club \"Hopkins Student Enterprises\"?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids and details of all statements?",
        "query": "SELECT Document_ID , Document_Description FROM Documents",
        "gold_parse": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids and details of all statements?",
        "query": "SELECT Document_ID , Document_Description FROM Documents",
        "gold_parse": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "query": "SELECT CName FROM Course WHERE Days = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which kind of part has the least number of faults? List the part name.",
        "query": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.part_name FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id  =  T2.part_id GROUP BY T1.part_name ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the male friend of Alice whose job is a doctor?",
        "query": "SELECT name FROM Person WHERE city = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the male friend of Alice whose job is a doctor?",
        "query": "SELECT name FROM Person WHERE city = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'male' AND T1.job  =  'doctor'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "query": "SELECT LName , Age FROM Student WHERE Sex = value",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the last names and ages of the students who are allergic to milk and cat?",
        "query": "SELECT LName , Age FROM Student WHERE Sex = value",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many musicians play in the song \"Flash\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many musicians play in the song \"Flash\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who have destroyed documents?",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed GROUP BY Destroyed_by_Employee_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "query": "SELECT Denomination FROM school GROUP BY School_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "query": "SELECT Denomination FROM school GROUP BY School_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What si the youngest employee's first and last name?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT value",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What si the youngest employee's first and last name?",
        "query": "SELECT first_name , last_name FROM employees ORDER BY birth_date Asc LIMIT value",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY birth_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Who is the advisor of student with ID 1004?",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Who is the advisor of student with ID 1004?",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT Advisor FROM Student WHERE StuID  =  1004",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of scientists involved for the projects that require more than 300 hours.",
        "query": "SELECT Count ( * ) FROM Projects WHERE Hours > value",
        "gold_parse": "SELECT count(*) ,  T1.name FROM projects AS T1 JOIN assignedto AS T2 ON T1.code  =  T2.project WHERE T1.hours  >  300 GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "List all the scientists' names, their projects' names, and the hours worked by that scientist on each project, in alphabetical order of project name, and then scientist name.",
        "query": "SELECT T2.Name , T2.Hours , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Name Asc",
        "gold_parse": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and sum of checking and savings balances for accounts with savings balances higher than the average savings balance?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T1.name ,  T2.balance + T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  >  (SELECT avg(balance) FROM savings)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "query": "SELECT Avg ( min_temperature_f ) FROM weather",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "query": "SELECT Avg ( min_temperature_f ) FROM weather",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "query": "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value OR T1.Allergy = value",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "query": "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value OR T1.Allergy = value",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many roles are there?",
        "query": "SELECT Count ( DISTINCT Role_Code ) FROM Roles",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many roles are there?",
        "query": "SELECT Count ( DISTINCT Role_Code ) FROM Roles",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are each document's location code, and starting date and ending data in that location?",
        "query": "SELECT T1.Location_Code , T2.Date_in_Location_From , T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code",
        "gold_parse": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value AND T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instruments did the musician with the last name \"Heilo\" play in the song \"Le Pop\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value AND T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the names of departments that are either in division AS or in division EN and in Building NEB.",
        "query": "SELECT DName FROM Department WHERE Division = value INTERSECT SELECT DName FROM Department WHERE Division = value AND Building = value",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many customers does Steve Johnson support?",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many customers does Steve Johnson support?",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the name of the customer that has been involved in the most policies.",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of songs in all the studio albums.",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of songs in all the studio albums.",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available < value",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of stations that have latitude above 37.4 and never had bike availability below 7?",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM status AS T2 WHERE T2.bikes_available < value",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name ) of employee with ID and name of the country presently where (s)he is working.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the customers first and last name of 10 least expensive invoices.",
        "query": "SELECT T1.first_name , T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id JOIN invoice_lines AS T3 ON T2.id = T3.invoice_id ORDER BY T3.unit_price Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customers AS T1 JOIN invoices AS T2 ON T2.customer_id  =  T1.id ORDER BY total LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "query": "SELECT decor FROM Rooms WHERE roomName = value AND roomName = value",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the decor of the room named \"Recluse and defiance\".",
        "query": "SELECT decor FROM Rooms WHERE roomName = value AND roomName = value",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T2.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the ids of documents with the type code CV that do not have expenses.",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T2.Document_ID FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "query": "SELECT billing_country , total FROM invoices WHERE total = ( SELECT Max ( total ) FROM invoices )",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "A list of the top 8 countries by gross/total invoice size. List country name and gross invoice size.",
        "query": "SELECT billing_country , total FROM invoices WHERE total = ( SELECT Max ( total ) FROM invoices )",
        "gold_parse": "SELECT billing_country ,  SUM(total) FROM invoices GROUP BY billing_country ORDER BY SUM(total) DESC LIMIT 8",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the denomination of the school the most players belong to?",
        "query": "SELECT T1.School FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.School_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the denomination of the school the most players belong to?",
        "query": "SELECT T1.School FROM school AS T1 JOIN player AS T2 ON T1.School_ID = T2.School_ID GROUP BY T2.School_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many statements do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many statements do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product with some problems, list the count of problems and the product id.",
        "query": "SELECT product_name , Count ( * ) FROM Product GROUP BY product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Compute the average profits companies make.",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Compute the average profits companies make.",
        "query": "SELECT Avg ( Sales_billion ) FROM Companies",
        "gold_parse": "SELECT avg(Profits_billion) FROM Companies",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?",
        "query": "SELECT T2.Name , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code AND T1.SSN = T3.Scientist GROUP BY T3.Project ORDER BY Sum ( T2.Hours ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What is the name of the project that requires the fewest number of hours, and the names of the scientists assigned to it?",
        "query": "SELECT T2.Name , T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code AND T1.SSN = T3.Scientist GROUP BY T3.Project ORDER BY Sum ( T2.Hours ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT min(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "query": "SELECT T1.name , T1.city , T2.start_date FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT value",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the latitude, longitude, city of the station from which the shortest trip started?",
        "query": "SELECT T1.name , T1.city , T2.start_date FROM station AS T1 JOIN trip AS T2 ORDER BY T2.duration Asc LIMIT value",
        "gold_parse": "SELECT T1.lat ,  T1.long ,  T1.city FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the list of distinct product names sorted by product id?",
        "query": "SELECT DISTINCT product_name FROM Product ORDER BY product_name Asc",
        "gold_parse": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the list of distinct product names sorted by product id?",
        "query": "SELECT DISTINCT product_name FROM Product ORDER BY product_name Asc",
        "gold_parse": "SELECT DISTINCT product_name FROM product ORDER BY product_id",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician who was in the most songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician who was in the most songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Count the number of artists who have had volumes.",
        "query": "SELECT Count ( * ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Count the number of artists who have had volumes.",
        "query": "SELECT Count ( * ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the budget type code with most number of documents.",
        "query": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "query": "SELECT T2.Host_City FROM match AS T1 JOIN hosting_city AS T2 ON T1.Match_ID = T2.Match_ID ORDER BY T1.Date Desc",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the venues of all the matches? Sort them in the descending order of match date.",
        "query": "SELECT T2.Host_City FROM match AS T1 JOIN hosting_city AS T2 ON T1.Match_ID = T2.Match_ID ORDER BY T1.Date Desc",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "query": "SELECT Avg ( duration ) , Avg ( start_date ) FROM trip",
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of the starting points of all trips?",
        "query": "SELECT Avg ( duration ) , Avg ( start_date ) FROM trip",
        "gold_parse": "SELECT avg(T1.lat) ,  avg(T1.long) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, return the highest latitude among its stations.",
        "query": "SELECT city , Max ( long ) FROM station GROUP BY city",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, return the highest latitude among its stations.",
        "query": "SELECT city , Max ( long ) FROM station GROUP BY city",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "query": "SELECT DISTINCT zip_code FROM weather WHERE wind_dir_degrees < value",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different zip codes that have a maximum dew point that was always below 70?",
        "query": "SELECT DISTINCT zip_code FROM weather WHERE wind_dir_degrees < value",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "query": "SELECT Count ( * ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of kids staying in the rooms reserved by a person called ROY SWEAZ.",
        "query": "SELECT Count ( * ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the trip that started from the station with the highest dock count?",
        "query": "SELECT T2.id FROM station AS T1 JOIN trip AS T2 ORDER BY T1.lat Desc LIMIT value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibition are there in year 2005 or after?",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year = value OR Year > value",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibition are there in year 2005 or after?",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year = value OR Year > value",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Badlands\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the first name of the band mate that has performed in most songs.",
        "query": "SELECT Firstname FROM Band GROUP BY Firstname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the first name of the band mate that has performed in most songs.",
        "query": "SELECT Firstname FROM Band GROUP BY Firstname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.firstname FROM Performance AS t1 JOIN Band AS t2 ON t1.bandmate  =  t2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY firstname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs use drums as an instrument?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs use drums as an instrument?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(*) FROM instruments WHERE instrument  =  \"drums\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the total checking balance in all accounts?",
        "query": "SELECT Sum ( balance ) FROM SAVINGS",
        "gold_parse": "SELECT sum(balance) FROM checking",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department name, city, and state province for each department.",
        "query": "SELECT T1.DEPARTMENT_NAME , T2.CITY , T2.STATE_PROVINCE , T2.STATE_PROVINCE FROM departments AS T1 JOIN locations AS T2",
        "gold_parse": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department name, city, and state province for each department.",
        "query": "SELECT T1.DEPARTMENT_NAME , T2.CITY , T2.STATE_PROVINCE , T2.STATE_PROVINCE FROM departments AS T1 JOIN locations AS T2",
        "gold_parse": "SELECT T1.department_name ,  T2.city ,  T2.state_province FROM departments AS T1 JOIN locations AS T2 ON T2.location_id  =  T1.location_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "query": "SELECT name FROM station WHERE long < value",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of stations that have latitude lower than 37.5?",
        "query": "SELECT name FROM station WHERE long < value",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by cat allergies?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the name of scientists who are assigned to some project.",
        "query": "SELECT Name FROM Scientists",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "query": "SELECT Denomination FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "query": "SELECT Denomination FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the minimum salary in each department?",
        "query": "SELECT Min ( T1.MIN_SALARY ) , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the minimum salary in each department?",
        "query": "SELECT Min ( T1.MIN_SALARY ) , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT MIN(salary) ,  department_id FROM employees GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What country does Roberto Almeida live?",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What country does Roberto Almeida live?",
        "query": "SELECT country FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT country FROM customers WHERE first_name = \"Roberto\" AND last_name = \"Almeida\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the dates for the documents with both 'GV' type and 'SF' type expenses?",
        "query": "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = value INTERSECT SELECT T1.Document_Date FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code WHERE T2.Document_Type_Name = value",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "query": "SELECT Issue_Date FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Please show the date of ceremony of the volumes that last more than 2 weeks on top.",
        "query": "SELECT Issue_Date FROM volume GROUP BY Song HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the names of the courses with at least five enrollments.",
        "query": "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the names of the courses with at least five enrollments.",
        "query": "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the student id of the oldest student.",
        "query": "SELECT Major FROM Student ORDER BY Age Desc LIMIT value",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Rate = value",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of rooms whose reservation frequency exceeds 60 times?",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.Rate = value",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room HAVING count(*)  >  60",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many calendar items do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many calendar items do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "query": "SELECT asset_id , asset_details FROM Assets INTERSECT SELECT asset_details FROM Assets WHERE asset_details < value",
        "gold_parse": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which assets have 2 parts and have less than 2 fault logs? List the asset id and detail.",
        "query": "SELECT asset_id , asset_details FROM Assets INTERSECT SELECT asset_details FROM Assets WHERE asset_details < value",
        "gold_parse": "SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Asset_Parts AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  =  2 INTERSECT SELECT T1.asset_id ,  T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id  =  T2.asset_id GROUP BY T1.asset_id HAVING count(*)  <  2",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "query": "SELECT Match_ID FROM match WHERE Score = value AND Competition = value",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the match id of the competition called \"1994 FIFA World Cup qualification\"?",
        "query": "SELECT Match_ID FROM match WHERE Score = value AND Competition = value",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name and checking balance of the account which has the lowest savings balance?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents are with document type code BK for each product id?",
        "query": "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = value GROUP BY Document_Type_Code",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents are with document type code BK for each product id?",
        "query": "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = value GROUP BY Document_Type_Code",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "query": "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the ids of the departments where any manager is managing 4 or more employees.",
        "query": "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "query": "SELECT Count ( * ) FROM trip WHERE start_date ! = value",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Count the number of trips that did not end in San Francisco city.",
        "query": "SELECT Count ( * ) FROM trip WHERE start_date ! = value",
        "gold_parse": "SELECT count(*) FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id WHERE T2.city !=  \"San Francisco\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the number of departments in Division \"AS\"?",
        "query": "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = value",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the number of departments in Division \"AS\"?",
        "query": "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = value",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Asc LIMIT value",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer made the smallest amount of claim in one claim? Return the customer details.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Asc LIMIT value",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_piad  =  (SELECT min(amount_piad) FROM claim_headers)",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the first name and job id for all employees in the Finance department?",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the distinct student first names of all students that have grade point at least 3.8 in one course.",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "query": "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has the lowest GDP? Please list the city name and its GDP.",
        "query": "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "query": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name, age, and job title of persons who are friends with Alice for the longest years.",
        "query": "SELECT T1.name , T1.age , T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "query": "SELECT Name , Count ( * ) FROM Scientists GROUP BY Name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of the scientists, and how many projects are each of them working on?",
        "query": "SELECT Name , Count ( * ) FROM Scientists GROUP BY Name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the phones of departments in Room 268?",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the phones of departments in Room 268?",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "query": "SELECT Document_Description , Document_Name FROM Documents WHERE Other_Details = value",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the details for statements with the details 'Private Project', and what are the names of the corresponding documents?",
        "query": "SELECT Document_Description , Document_Name FROM Documents WHERE Other_Details = value",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many departments are in the division AS?",
        "query": "SELECT Count ( DISTINCT DName ) FROM Department WHERE Division = value",
        "gold_parse": "SELECT count(*) FROM DEPARTMENT WHERE Division  =  \"AS\"",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "query": "SELECT T2.name FROM architect AS T1 JOIN bridge AS T2 ON T2.architect_id = T1.id JOIN mill AS T3 ON T1.id = T3.architect_id WHERE T3.name LIKE value",
        "gold_parse": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "Which of the mill names contains the french word 'Moulin'?",
        "query": "SELECT T2.name FROM architect AS T1 JOIN bridge AS T2 ON T2.architect_id = T1.id JOIN mill AS T3 ON T1.id = T3.architect_id WHERE T3.name LIKE value",
        "gold_parse": "SELECT name FROM mill WHERE name LIKE '%Moulin%'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the count of customers that Steve Johnson supports?",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the count of customers that Steve Johnson supports?",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT count(*) FROM employees AS T1 JOIN customers AS T2 ON T2.support_rep_id = T1.id WHERE T1.first_name = \"Steve\" AND T1.last_name = \"Johnson\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the name of each department and the number of employees in each.",
        "query": "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the name of each department and the number of employees in each.",
        "query": "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT T2.department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY T2.department_name",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments does the musician with the last name \"Heilo\" use?",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the friend of Zach with longest year relationship?",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who is the friend of Zach with longest year relationship?",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name ORDER BY T2.year Desc LIMIT value",
        "gold_parse": "SELECT friend FROM PersonFriend WHERE name =  'Zach' AND YEAR  =  (SELECT max(YEAR) FROM PersonFriend WHERE name =  'Zach')",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers",
        "gold_parse": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which staff have contacted which engineers? List the staff name and the engineer first name and last name.",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers",
        "gold_parse": "SELECT T1.staff_name ,  T3.first_name ,  T3.last_name FROM Staff AS T1 JOIN Engineer_Visits AS T2 ON T1.staff_id  =  T2.contact_staff_id JOIN Maintenance_Engineers AS T3 ON T2.engineer_id  =  T3.engineer_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is employee Nancy Edwards's phone number?",
        "query": "SELECT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is employee Nancy Edwards's phone number?",
        "query": "SELECT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT phone FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the department ID, full name (first and last name), salary for those employees who is highest salary in every department.",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the artist who perfomed the song \"Badlands\"?",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have a food allergy?",
        "query": "SELECT Count ( * ) FROM Allergy_Type WHERE AllergyType = value",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of bands.",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(*) FROM Band",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of bands.",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(*) FROM Band",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the team and the location of school each player belongs to?",
        "query": "SELECT Team , Position FROM player",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the team and the location of school each player belongs to?",
        "query": "SELECT Team , Position FROM player",
        "gold_parse": "SELECT T1.Team ,  T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of people who has no friend living in the city of Austin.",
        "query": "SELECT Count ( * ) FROM Person WHERE city = value",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of people who has no friend living in the city of Austin.",
        "query": "SELECT Count ( * ) FROM Person WHERE city = value",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Lucas Mancini has?",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many orders does Lucas Mancini has?",
        "query": "SELECT Count ( * ) FROM employees WHERE first_name = value",
        "gold_parse": "SELECT count(*) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "query": "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous title of the artists associated with volumes with more than 2 weeks on top?",
        "query": "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT T1.School FROM school AS T1 EXCEPT SELECT T2.Nickname FROM school_details AS T2 WHERE T2.Division = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT T1.School FROM school AS T1 EXCEPT SELECT T2.Nickname FROM school_details AS T2 WHERE T2.Division = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names and gradepoints for all enrollments?",
        "query": "SELECT Fname , LName FROM Student",
        "gold_parse": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names and gradepoints for all enrollments?",
        "query": "SELECT Fname , LName FROM Student",
        "gold_parse": "SELECT T3.Fname ,  T3.LName ,  T2.gradepoint FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the id and name of the stations that have ever had more than 12 bikes available?",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those departments where more than ten employees work who got a commission percentage.",
        "query": "SELECT T1.DEPARTMENT_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT department_id FROM employees GROUP BY department_id HAVING COUNT(commission_pct) > 10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the id for the trips that lasted at least as long as the average duration of trips in zip code 94103.",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE subscription_type = value )",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "query": "SELECT T1.Name FROM artist AS T1 WHERE T1.Artist_ID NOT IN ( SELECT T2.Artist_ID FROM exhibition AS T2 WHERE T2.Year = value )",
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What are the names of artists who did not have an exhibition in 2004?",
        "query": "SELECT T1.Name FROM artist AS T1 WHERE T1.Artist_ID NOT IN ( SELECT T2.Artist_ID FROM exhibition AS T2 WHERE T2.Year = value )",
        "gold_parse": "SELECT name FROM artist EXCEPT SELECT T2.name FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id WHERE T1.year  =  2004",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "query": "SELECT DISTINCT start_date FROM trip WHERE duration < value",
        "gold_parse": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are all the different start station names for a trip that lasted less than 100?",
        "query": "SELECT DISTINCT start_date FROM trip WHERE duration < value",
        "gold_parse": "SELECT DISTINCT start_station_name FROM trip WHERE duration  <  100",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who authorize document destruction?",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Document_ID = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the ids of all the employees who authorize document destruction?",
        "query": "SELECT Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed WHERE Document_ID = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "query": "SELECT Name FROM Scientists",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which employees were hired after September 7th, 1987?",
        "query": "SELECT FIRST_NAME FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which employees were hired after September 7th, 1987?",
        "query": "SELECT FIRST_NAME FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Which employees were hired after September 7th, 1987?",
        "query": "SELECT FIRST_NAME FROM employees WHERE HIRE_DATE > value AND LAST_NAME < value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id WHERE T2.name = value",
        "gold_parse": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "List the name of a building along with the name of a company whose office is in the building.",
        "query": "SELECT T1.name FROM buildings AS T1 JOIN Companies AS T2 JOIN Office_locations AS T3 ON T1.id = T3.building_id AND T3.company_id = T2.id WHERE T2.name = value",
        "gold_parse": "SELECT T3.name ,  T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "query": "SELECT product_name , product_price FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name and price of the product that has been ordered the greatest number of times.",
        "query": "SELECT product_name , product_price FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.product_name ,   t1.product_price FROM products AS t1 JOIN regular_order_products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t2.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of the oldest student?",
        "query": "SELECT name FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of the oldest student?",
        "query": "SELECT name FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT name FROM Person WHERE job  =  'student' AND age  =  (SELECT max(age) FROM person WHERE job  =  'student' )",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the full name of the employee who has the most customers?",
        "query": "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the full name of the employee who has the most customers?",
        "query": "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "query": "SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = value",
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the composer who created the track \"Fast As a Shark\"?",
        "query": "SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = value",
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = value OR T1.Age = value",
        "gold_parse": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the issue dates of volumes associated with the artist aged 23 or younger?",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = value OR T1.Age = value",
        "gold_parse": "SELECT Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  23",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee number and name( first name and last name ) for all employees who work in a department with any employee whose name contains a \u2019T\u2019.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is all the information about all people?",
        "query": "SELECT * FROM candidate",
        "gold_parse": "SELECT * FROM people",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is all the information about all people?",
        "query": "SELECT * FROM candidate",
        "gold_parse": "SELECT * FROM people",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employees without a department number?",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employees without a department number?",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "query": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the saving balance of the account with the highest checking balance.",
        "query": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "query": "SELECT zip_code FROM weather WHERE zip_code NOT IN ( SELECT zip_code FROM weather )",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find all the zip codes in which the max dew point have never reached 70.",
        "query": "SELECT zip_code FROM weather WHERE zip_code NOT IN ( SELECT zip_code FROM weather )",
        "gold_parse": "SELECT DISTINCT zip_code FROM weather EXCEPT SELECT DISTINCT zip_code FROM weather WHERE max_dew_point_f  >=  70",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "What are the first and last name of the president of the club \"Bootup Baltimore\"?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "In which year did the most recent crime happen?",
        "query": "SELECT Year FROM perpetrator GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT max(YEAR) FROM perpetrator",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "In which year did the most recent crime happen?",
        "query": "SELECT Year FROM perpetrator GROUP BY Year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT max(YEAR) FROM perpetrator",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog publishers have substring \"Murray\" in their names?",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find all the catalog publishers whose name contains \"Murray\"",
        "query": "SELECT catalog_publisher FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT distinct(catalog_publisher) FROM catalogs WHERE catalog_publisher LIKE \"%Murray%\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the names of all cities and states?",
        "query": "SELECT town_city , state_province_county FROM Addresses",
        "gold_parse": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the names of all cities and states?",
        "query": "SELECT town_city , state_province_county FROM Addresses",
        "gold_parse": "SELECT town_city FROM addresses UNION SELECT state_province_county FROM addresses",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the highest acc percent score in the competition?",
        "query": "SELECT ACC_Percent FROM basketball_match GROUP BY ACC_Percent ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the highest acc percent score in the competition?",
        "query": "SELECT ACC_Percent FROM basketball_match GROUP BY ACC_Percent ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT acc_percent FROM basketball_match ORDER BY acc_percent DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the countries for appelations with at most 3 wines?",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the countries for appelations with at most 3 wines?",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Which publishers did not publish a book in 1989?",
        "query": "SELECT Publisher FROM book_club WHERE Year ! = value",
        "gold_parse": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Which publishers did not publish a book in 1989?",
        "query": "SELECT Publisher FROM book_club WHERE Year ! = value",
        "gold_parse": "SELECT publisher FROM book_club EXCEPT SELECT publisher FROM book_club WHERE YEAR  =  1989",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many residents does each property have? List property id and resident count.",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many residents does each property have? List property id and resident count.",
        "query": "SELECT resident_id , Count ( * ) FROM Residents GROUP BY resident_id",
        "gold_parse": "SELECT T1.property_id ,  count(*) FROM properties AS T1 JOIN residents AS T2 ON T1.property_id  =  T2.property_id GROUP BY T1.property_id",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Count the number of climbers.",
        "query": "SELECT Count ( * ) FROM mountain",
        "gold_parse": "SELECT count(*) FROM climber",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Count the number of climbers.",
        "query": "SELECT Count ( * ) FROM mountain",
        "gold_parse": "SELECT count(*) FROM climber",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "query": "SELECT T2.Season , T1.Name , T3.Team FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team JOIN player AS T3 ON T1.Team_id = T3.Team",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the team that players belong to.",
        "query": "SELECT T2.Season , T1.Name , T3.Team FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team JOIN player AS T3 ON T1.Team_id = T3.Team",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total number of routes for each country and airline in that country?",
        "query": "SELECT Count ( * ) , country FROM airports GROUP BY country",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total number of routes for each country and airline in that country?",
        "query": "SELECT Count ( * ) , country FROM airports GROUP BY country",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "How many events are there?",
        "query": "SELECT Count ( * ) FROM swimmer",
        "gold_parse": "SELECT count(*) FROM event",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "How many events are there?",
        "query": "SELECT Count ( * ) FROM swimmer",
        "gold_parse": "SELECT count(*) FROM event",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What are the name, origin and owner of each program?",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What are the name, origin and owner of each program?",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the maximum price and score for wines produced in the appelation St. Helena.",
        "query": "SELECT Max ( Price ) , Min ( Score ) FROM wine WHERE Name = value",
        "gold_parse": "SELECT max(Price) ,  max(Score) FROM WINE WHERE Appelation  =  \"St. Helena\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "query": "SELECT T3.catalog_entry_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T1.catalog_name = value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have a product stock number that starts from \"2\"? Show the catalog entry names.",
        "query": "SELECT T3.catalog_entry_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T1.catalog_name = value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is all the customer information for customers in NY state?",
        "query": "SELECT Email FROM Customer WHERE State = value",
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "query": "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total > value )",
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find all the customer last names that do not have invoice totals larger than 20.",
        "query": "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total > value )",
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_details = value",
        "gold_parse": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "How many distinct locations have the things with service detail 'Unsatisfied' been located in?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_details = value",
        "gold_parse": "SELECT count(DISTINCT T2.Location_Code) FROM Things AS T1 JOIN Timed_Locations_of_Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.service_details  =  'Unsatisfied'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the distinct names of nurses on call?",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "gold_parse": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the distinct names of nurses on call?",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "gold_parse": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "query": "SELECT DISTINCT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the distinct reigns of wrestlers whose location is not \"Tokyo,Japan\" ?",
        "query": "SELECT DISTINCT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of teams that have no match season record.",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of teams that have no match season record.",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "For each product, return its id and the number of times it was ordered.",
        "query": "SELECT product_id , Count ( * ) FROM Order_Items GROUP BY product_id ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "For each product, return its id and the number of times it was ordered.",
        "query": "SELECT product_id , Count ( * ) FROM Order_Items GROUP BY product_id ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT count(*) ,  T3.product_id FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of characteristics that the product \"flax\" has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution in a building with at least 20 floors?",
        "query": "SELECT Count ( * ) FROM building WHERE Floors < value",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id JOIN building AS T3 ON T3.building_id  =  T1.building_id WHERE T3.floors  >=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "query": "SELECT T2.Name , T1.ArtistId FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please list the name and id of all artists that have at least 3 albums in alphabetical order.",
        "query": "SELECT T2.Name , T1.ArtistId FROM Album AS T1 JOIN Artist AS T2 ON T1.ArtistId = T2.ArtistId GROUP BY T1.ArtistId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the id of the instructor who advises of all students from History department?",
        "query": "SELECT ID FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the id of the instructor who advises of all students from History department?",
        "query": "SELECT ID FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians prescribe a medication of brand X? Tell me the name and position of those physicians.",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "query": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee that is certified to fly the most planes?",
        "query": "SELECT name , name FROM employee GROUP BY eid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.salary FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the year and semester with the most courses?",
        "query": "SELECT year , Count ( * ) FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the year and semester with the most courses?",
        "query": "SELECT year , Count ( * ) FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of courses without prerequisites.",
        "query": "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM takes AS T2 )",
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of courses without prerequisites.",
        "query": "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM takes AS T2 )",
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many regions do we have?",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(*) FROM region",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many regions do we have?",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(*) FROM region",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of different characteristic names the product 'cumin' has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of different characteristic names the product 'cumin' has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(DISTINCT t3.characteristic_name) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the medication used for the patient staying in room 111?",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = value",
        "gold_parse": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the most common full name among all actors.",
        "query": "SELECT first_name , last_name FROM actor GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the most common full name among all actors.",
        "query": "SELECT first_name , last_name FROM actor GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the maximum and minimum number of cows across all farms.",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the student who most recently registered course 301?",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Desc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the student who most recently registered course 301?",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Desc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Count the number of stores the chain South has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Count the number of stores the chain South has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "query": "SELECT EmployeeID , SSN FROM Physician",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are each physician's employee id and department id primarily affiliated.",
        "query": "SELECT EmployeeID , SSN FROM Physician",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the id of the patient who stayed in room 111 most recently?",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which department has the largest number of employees?",
        "query": "SELECT Department FROM Affiliated_With GROUP BY Department ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which department has the largest number of employees?",
        "query": "SELECT Department FROM Affiliated_With GROUP BY Department ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name FROM department GROUP BY departmentID ORDER BY count(departmentID) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which wineries produce at least four wines?",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.Appelation HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which wineries produce at least four wines?",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation GROUP BY T1.Appelation HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Winery FROM WINE GROUP BY Winery HAVING count(*)  >=  4",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first and last name of students who are not in the largest major.",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first and last name of students who are not in the largest major.",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "query": "SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value INTERSECT SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the first names of all customers that live in Brazil and have an invoice.",
        "query": "SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value INTERSECT SELECT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog content has the smallest capacity? Return the catalog entry name.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "query": "SELECT card_id , card_type_code , card_number , other_card_details FROM Customers_Cards",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are card ids, customer ids, card types, and card numbers for each customer card?",
        "query": "SELECT card_id , card_type_code , card_number , other_card_details FROM Customers_Cards",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "query": "SELECT T1.booking_id , T1.amount_payable FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "query": "SELECT T1.booking_id , T1.amount_payable FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "query": "SELECT address FROM address WHERE address = value",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "query": "SELECT address FROM address WHERE address = value",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Give me all the phone numbers and email addresses of the workshop groups where services are performed.",
        "query": "SELECT Store_Phone , Store_Email_Address FROM Stores",
        "gold_parse": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the card numbers of members from Kentucky?",
        "query": "SELECT Card_Number FROM member WHERE Name = value",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the card numbers of members from Kentucky?",
        "query": "SELECT Card_Number FROM member WHERE Name = value",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "How many products are there in the records?",
        "query": "SELECT Count ( * ) FROM Attribute_Definitions",
        "gold_parse": "SELECT count(*) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "How many products are there in the records?",
        "query": "SELECT Count ( * ) FROM Attribute_Definitions",
        "gold_parse": "SELECT count(*) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "query": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the first and last name of all the German drivers?",
        "query": "SELECT T2.positionText , T1.url FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId",
        "gold_parse": "SELECT forename ,  surname FROM drivers WHERE nationality = \"German\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids and names of department stores with both marketing and managing departments?",
        "query": "SELECT T3.department_name , T3.dept_store_id FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value",
        "gold_parse": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "query": "SELECT Avg ( payment_method ) FROM Customers",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
        "query": "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < value",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct ids of customers who made an order after any order that was Cancelled?",
        "query": "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < value",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "query": "SELECT name , Count ( * ) FROM user_profiles GROUP BY name",
        "gold_parse": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name of each user and number of tweets tweeted by each of them.",
        "query": "SELECT name , Count ( * ) FROM user_profiles GROUP BY name",
        "gold_parse": "SELECT T1.name ,  count(*) FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of teams that do no have match season record?",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of teams that do no have match season record?",
        "query": "SELECT T1.Name FROM team AS T1 WHERE T1.Team_id NOT IN ( SELECT T2.Team FROM player AS T2 )",
        "gold_parse": "SELECT Name FROM team WHERE Team_id NOT IN (SELECT Team FROM match_season)",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who is the delegate of district 1 in the elections?",
        "query": "SELECT Delegate FROM election WHERE Committee = value",
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who is the delegate of district 1 in the elections?",
        "query": "SELECT Delegate FROM election WHERE Committee = value",
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T2.resident_id , T1.service_type_code FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id JOIN Timed_Status_of_Things AS T3 ON T1.thing_id = T3.thing_id WHERE T3.Status_of_Thing_Code = value OR T3.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T2.resident_id , T1.service_type_code FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id JOIN Timed_Status_of_Things AS T3 ON T1.thing_id = T3.thing_id WHERE T3.Status_of_Thing_Code = value OR T3.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many followers does each user have?",
        "query": "SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name",
        "gold_parse": "SELECT count(*) FROM follows",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many followers does each user have?",
        "query": "SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name",
        "gold_parse": "SELECT count(*) FROM follows",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "query": "SELECT Count ( * ) FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id WHERE T3.amount > value OR T2.Year < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many different card types are there?",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many different card types are there?",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout.",
        "query": "SELECT state FROM College GROUP BY state HAVING Count ( * ) = value",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout.",
        "query": "SELECT state FROM College GROUP BY state HAVING Count ( * ) = value",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measurement of product named \"cumin\"?",
        "query": "SELECT characteristic_data_type FROM Characteristics WHERE characteristic_name = value",
        "gold_parse": "SELECT t2.unit_of_measure FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code WHERE t1.product_name  =  \"cumin\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made an order most recently.",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made an order most recently.",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "How many entrepreneurs are there?",
        "query": "SELECT Count ( DISTINCT Investor ) FROM entrepreneur",
        "gold_parse": "SELECT count(*) FROM entrepreneur",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "How many entrepreneurs are there?",
        "query": "SELECT Count ( DISTINCT Investor ) FROM entrepreneur",
        "gold_parse": "SELECT count(*) FROM entrepreneur",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of different languages in these films.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of different languages in these films.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "query": "SELECT Award , Count ( * ) FROM musical GROUP BY Award",
        "gold_parse": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show different nominees and the number of musicals they have been nominated.",
        "query": "SELECT Award , Count ( * ) FROM musical GROUP BY Award",
        "gold_parse": "SELECT Nominee ,  COUNT(*) FROM musical GROUP BY Nominee",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the photos for mountains?",
        "query": "SELECT T1.id , T2.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the photos for mountains?",
        "query": "SELECT T1.id , T2.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.height  >  4000",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of actors whose age is not 20.",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of actors whose age is not 20.",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names and types of the dorms that have a capacity greater than 300 or less than 100?",
        "query": "SELECT dorm_name , dorm_name FROM Dorm WHERE student_capacity > value OR student_capacity < value",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "query": "SELECT * FROM results WHERE milliseconds > value",
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of Japanese constructors that have once earned more than 5 points?",
        "query": "SELECT * FROM results WHERE milliseconds > value",
        "gold_parse": "SELECT T1.name FROM constructors AS T1 JOIN constructorstandings AS T2 ON T1.constructorid = T2.constructorid WHERE T1.nationality = \"Japanese\" AND T2.points > 5",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email of the user followed by the least number of people.",
        "query": "SELECT T2.name , T2.email FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.text ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT name ,  email FROM user_profiles ORDER BY followers LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players and how many years has each played?",
        "query": "SELECT Player , Count ( * ) FROM player GROUP BY Player",
        "gold_parse": "SELECT Player ,  Years_Played FROM player",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players and how many years has each played?",
        "query": "SELECT Player , Count ( * ) FROM player GROUP BY Player",
        "gold_parse": "SELECT Player ,  Years_Played FROM player",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms have amenities?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms have amenities?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "query": "SELECT Fname FROM Student WHERE city_code = value INTERSECT SELECT Fname FROM Student WHERE Age < value",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the first name of the students who are in age 20 to 25 and living in PHL city?",
        "query": "SELECT Fname FROM Student WHERE city_code = value INTERSECT SELECT Fname FROM Student WHERE Age < value",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "query": "SELECT product_details FROM Products WHERE product_details = value OR product_details = value",
        "gold_parse": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product's detail contains the word \"Latte\" or \"Americano\"? Return the full detail.",
        "query": "SELECT product_details FROM Products WHERE product_details = value OR product_details = value",
        "gold_parse": "SELECT product_details FROM products WHERE product_details LIKE \"%Latte%\" OR product_details LIKE \"%Americano%\"",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "SELECT meter_600 , meter_400 FROM swimmer WHERE Nationality = value",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "SELECT meter_600 , meter_400 FROM swimmer WHERE Nationality = value",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different cities that have more than 100 memberships?",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different cities that have more than 100 memberships?",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT T1.staff_id FROM Staff_Department_Assignments AS T1 WHERE T1.date_assigned_to < ( SELECT T2.department_name FROM Departments AS T2 )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who never made an order.",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who never made an order.",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "query": "SELECT Name , Location FROM station ORDER BY Total_Passengers Asc",
        "gold_parse": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "List the names and locations of all stations ordered by their yearly entry exit and interchange amounts.",
        "query": "SELECT Name , Location FROM station ORDER BY Total_Passengers Asc",
        "gold_parse": "SELECT name ,  LOCATION FROM station ORDER BY Annual_entry_exit ,  Annual_interchanges",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "query": "SELECT Count ( * ) FROM team WHERE Name = value",
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different colleges that players who play for Columbus Crew are from.",
        "query": "SELECT Count ( * ) FROM team WHERE Name = value",
        "gold_parse": "SELECT count(DISTINCT T1.College) FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id WHERE T2.Name  =  \"Columbus Crew\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "query": "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the name, phone number and email address for the customer with the most orders.",
        "query": "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "How many books fall into each category?",
        "query": "SELECT Count ( * ) , Type FROM culture_company GROUP BY Type",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "How many books fall into each category?",
        "query": "SELECT Count ( * ) , Type FROM culture_company GROUP BY Type",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What college has a student who successfully made the team in the role of a goalie?",
        "query": "SELECT T1.enr FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What college has a student who successfully made the team in the role of a goalie?",
        "query": "SELECT T1.enr FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the total quantity of products bought by the customer called \"Rodrick Heaney\".",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT sum(t3.order_quantity) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G > value INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G < value",
        "gold_parse": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the carriers that have both phones with memory smaller than 32 and phones with memory bigger than 64.",
        "query": "SELECT Carrier FROM phone WHERE Memory_in_G > value INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G < value",
        "gold_parse": "SELECT Carrier FROM phone WHERE Memory_in_G  <  32 INTERSECT SELECT Carrier FROM phone WHERE Memory_in_G  >  64",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many different genders are there in the dorms?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT gender) FROM dorm",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many different genders are there in the dorms?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT gender) FROM dorm",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "Which organizations are not a parent organization of others? List the organization id.",
        "query": "SELECT organization_id FROM Organizations EXCEPT SELECT organization_id FROM Organizations",
        "gold_parse": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "Which organizations are not a parent organization of others? List the organization id.",
        "query": "SELECT organization_id FROM Organizations EXCEPT SELECT organization_id FROM Organizations",
        "gold_parse": "SELECT organization_id FROM organizations EXCEPT SELECT parent_organization_id FROM organizations",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of regions with two or more storms?",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of regions with two or more storms?",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.region_name FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.length > value OR T3.height < value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of the products with length smaller than 3 or height greater than 5.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.length > value OR T3.height < value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of the instructors who taught C Programming course before.",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name WHERE T2.title = value",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of the instructors who taught C Programming course before.",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN instructor AS T3 ON T1.dept_name = T3.dept_name WHERE T2.title = value",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "gold_parse": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who has the most recent undergoing treatment?",
        "query": "SELECT Physician FROM Undergoes ORDER BY DateUndergoes Desc LIMIT value",
        "gold_parse": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "query": "SELECT product_details FROM Products GROUP BY product_details ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the most frequently ordered product? Tell me the detail of the product",
        "query": "SELECT product_details FROM Products GROUP BY product_details ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the products that have a color description of 'red' and the 'fast' characteristic?",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names of all courses ordered by their titles and credits.",
        "query": "SELECT title FROM course ORDER BY credits Asc",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names of all courses ordered by their titles and credits.",
        "query": "SELECT title FROM course ORDER BY credits Asc",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE length BETWEEN value AND value",
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the name and level of catalog structure with level number between 5 and 10",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE length BETWEEN value AND value",
        "gold_parse": "SELECT catalog_level_name ,  catalog_level_number FROM Catalog_Structure WHERE catalog_level_number BETWEEN 5 AND 10",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the workshop groups that have bookings with status code \"stop\"?",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of each manufacturer?",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of each manufacturer?",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "query": "SELECT Country FROM stadium WHERE Opening_year > value",
        "gold_parse": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Which countries do not have a stadium that was opened after 2006?",
        "query": "SELECT Country FROM stadium WHERE Opening_year > value",
        "gold_parse": "SELECT country FROM stadium EXCEPT SELECT country FROM stadium WHERE opening_year  >  2006",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the characteristic named \"hot\"?",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the characteristic named \"hot\"?",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which colleges does each player with a name that starts with the letter D  who tried out go to?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE value",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "query": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the origin and destination for all flights whose price is higher than 300?",
        "query": "SELECT T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.price > value",
        "gold_parse": "SELECT origin ,  destination FROM Flight WHERE price  >  300",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names and years of all races that had a driver with the last name Lewis?",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held between 2009 and 2011?",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held between 2009 and 2011?",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the code of the product type with an average price higher than the average price of all products?",
        "query": "SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )",
        "gold_parse": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many diffrent dorm amenities are there?",
        "query": "SELECT Count ( DISTINCT dorm_name ) FROM Dorm",
        "gold_parse": "SELECT count(*) FROM dorm_amenity",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many diffrent dorm amenities are there?",
        "query": "SELECT Count ( DISTINCT dorm_name ) FROM Dorm",
        "gold_parse": "SELECT count(*) FROM dorm_amenity",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of states that have some college students playing in the mid position but not in the goalie position.",
        "query": "SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "query": "SELECT name FROM user_profiles WHERE email = value OR email = value",
        "gold_parse": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of users whose emails contain \u2018superstar\u2019 or \u2018edu\u2019.",
        "query": "SELECT name FROM user_profiles WHERE email = value OR email = value",
        "gold_parse": "SELECT name FROM user_profiles WHERE email LIKE '%superstar%' OR email LIKE '%edu%'",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are part of the rock genre.",
        "query": "SELECT Count ( * ) FROM Genre WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are part of the rock genre.",
        "query": "SELECT Count ( * ) FROM Genre WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the department with the fewest staff assignments.",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the department with the fewest staff assignments.",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "query": "SELECT College FROM match_season WHERE Position = value",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the colleges that have players who play the Midfielder position, as well as players who play the Defender position.",
        "query": "SELECT College FROM match_season WHERE Position = value",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "query": "SELECT Name , Winery , Year FROM wine WHERE Price > value ORDER BY Price Desc",
        "gold_parse": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the grape, winery and year of the wines whose price is bigger than 100 ordered by year.",
        "query": "SELECT Name , Winery , Year FROM wine WHERE Price > value ORDER BY Price Desc",
        "gold_parse": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT T2.product_name , T2.typical_buying_price FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T1.product_category_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT T2.product_name , T2.typical_buying_price FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T1.product_category_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the description of the color for most products?",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the description of the color for most products?",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who were the governors of the parties associated with delegates from district 1?",
        "query": "SELECT T2.Comptroller FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID WHERE T1.Population = value",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as governor most frequently?",
        "query": "SELECT Attorney_General FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as governor most frequently?",
        "query": "SELECT Attorney_General FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "query": "SELECT employee_name , Count ( * ) FROM Employees GROUP BY employee_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which employee has showed up in most circulation history documents. List the employee's name and the number of drafts and copies.",
        "query": "SELECT employee_name , Count ( * ) FROM Employees GROUP BY employee_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Employees.employee_name , count(*) FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id GROUP BY Circulation_History.document_id , Circulation_History.draft_number , Circulation_History.copy_number ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "query": "SELECT College FROM match_season GROUP BY College HAVING Count ( * ) < = value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the name of colleges that have at least two players in descending alphabetical order.",
        "query": "SELECT College FROM match_season GROUP BY College HAVING Count ( * ) < = value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the average and total capacity of dorms for the students with gender X.",
        "query": "SELECT Avg ( student_capacity ) , Avg ( student_capacity ) FROM Dorm WHERE gender = value",
        "gold_parse": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find number of products which Sony does not make.",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find number of products which Sony does not make.",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value INTERSECT SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with both Surgery and Psychiatry departments.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value INTERSECT SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students attend course English?",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students attend course English?",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the order ids and customer ids for orders that have been Cancelled, sorted by their order dates?",
        "query": "SELECT order_id , customer_id FROM Customer_Orders ORDER BY order_date Asc",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of customers who are active.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of customers who are active.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM customer WHERE active = '1'",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "query": "SELECT T1.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T2.date_of_attendance Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended  statistics courses in the order of attendance date.",
        "query": "SELECT T1.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T2.date_of_attendance Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "query": "SELECT Fname FROM Student WHERE city_code = value",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the dorm that has most number of amenities.",
        "query": "SELECT Fname FROM Student WHERE city_code = value",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Who is the founder of Sony?",
        "query": "SELECT Founder FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Who is the founder of Sony?",
        "query": "SELECT Founder FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the all games score and location of the school called Clemson?",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the all games score and location of the school called Clemson?",
        "query": "SELECT Enrollment , Location FROM university WHERE School = value",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "What is the name of the youngest editor?",
        "query": "SELECT Name FROM editor ORDER BY Age Desc LIMIT value",
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "What is the name of the youngest editor?",
        "query": "SELECT Name FROM editor ORDER BY Age Desc LIMIT value",
        "gold_parse": "SELECT Name FROM editor ORDER BY Age ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many debit cards do we have?",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many debit cards do we have?",
        "query": "SELECT Count ( DISTINCT card_number ) FROM Customers_Cards",
        "gold_parse": "SELECT count(*) FROM Customers_cards WHERE card_type_code  =  \"Debit\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "query": "SELECT Days_held FROM wrestler WHERE Name = value OR Name = value",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for any instances in which the elimination was done by Punk or Orton?",
        "query": "SELECT Days_held FROM wrestler WHERE Name = value OR Name = value",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators?",
        "query": "SELECT Name FROM people",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators?",
        "query": "SELECT Name FROM people",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different courses offered by Physics department?",
        "query": "SELECT Count ( * ) FROM course WHERE dept_name = value",
        "gold_parse": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different courses offered by Physics department?",
        "query": "SELECT Count ( * ) FROM course WHERE dept_name = value",
        "gold_parse": "SELECT count(DISTINCT course_id) FROM course WHERE dept_name  =  'Physics'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "query": "SELECT Name FROM channel ORDER BY Rating_in_percent Asc",
        "gold_parse": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all channel names ordered by their rating in percent from big to small.",
        "query": "SELECT Name FROM channel ORDER BY Rating_in_percent Asc",
        "gold_parse": "SELECT name FROM channel ORDER BY rating_in_percent DESC",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > value UNION SELECT product_id FROM Product_Suppliers WHERE total_value_purchased < value",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of all products that were either ordered more than 3 times or have a cumulative amount purchased of above 80000?",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > value UNION SELECT product_id FROM Product_Suppliers WHERE total_value_purchased < value",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "query": "SELECT cName FROM College WHERE enr > value INTERSECT SELECT cName FROM College WHERE enr < value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of colleges in LA that have more than 15,000 students and of colleges in AZ with less than 13,000 students?",
        "query": "SELECT cName FROM College WHERE enr > value INTERSECT SELECT cName FROM College WHERE enr < value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the titles of films that include 'Deleted Scenes' in their special feature section.",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Origin ! = value",
        "gold_parse": "SELECT name FROM program WHERE origin != 'Beijing'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which programs' origins are not \"Beijing\"? Give me the program names.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Origin ! = value",
        "gold_parse": "SELECT name FROM program WHERE origin != 'Beijing'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of medications prescribed for each brand.",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of medications prescribed for each brand.",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which attribute definitions have attribute value 0? Give me the attribute name and attribute ID.",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "query": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held after 12:00:00 or before 09:00:00?",
        "query": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name and address of the customers who have both New and Pending orders.",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "query": "SELECT T2.dept_name FROM department AS T1 JOIN course AS T2 ON T1.dept_name = T2.dept_name ORDER BY T1.budget Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of the top 3 departments that provide the largest amount of courses?",
        "query": "SELECT T2.dept_name FROM department AS T1 JOIN course AS T2 ON T1.dept_name = T2.dept_name ORDER BY T1.budget Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "query": "SELECT Count ( * ) FROM budget WHERE Invested > value",
        "gold_parse": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the number of schools that have more than one donator whose donation amount is less than 8.5.",
        "query": "SELECT Count ( * ) FROM budget WHERE Invested > value",
        "gold_parse": "SELECT count(*) FROM (SELECT * FROM endowment WHERE amount  >  8.5 GROUP BY school_id HAVING count(*)  >  1)",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the name of the most common genre in all tracks?",
        "query": "SELECT Name FROM Genre GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the name of the most common genre in all tracks?",
        "query": "SELECT Name FROM Genre GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Name FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId GROUP BY T2.GenreId ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the state and country of all cities with post code starting with 4.",
        "query": "SELECT state_province_county , country FROM Addresses WHERE zip_postcode = value",
        "gold_parse": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the state and country of all cities with post code starting with 4.",
        "query": "SELECT state_province_county , country FROM Addresses WHERE zip_postcode = value",
        "gold_parse": "SELECT state_province_county ,  country FROM addresses WHERE zip_postcode LIKE \"4%\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the names, color descriptions and product descriptions of products with category \"Herbs\".",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T2.product_description FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "For each manufacturer name, what are the names and prices of their most expensive product?",
        "query": "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "For each manufacturer name, what are the names and prices of their most expensive product?",
        "query": "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "query": "SELECT Fname FROM Student WHERE city_code = value",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students who are living in the Smith Hall.",
        "query": "SELECT Fname FROM Student WHERE city_code = value",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees have certificate.",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees have certificate.",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "query": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "query": "SELECT Avg ( distance ) , Avg ( price ) FROM flight",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "query": "SELECT customer_id , other_customer_details FROM Customers ORDER BY date_became_customer Asc LIMIT value",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the channel code and contact number of the customer contact channel that was active for the longest time?",
        "query": "SELECT customer_id , other_customer_details FROM Customers ORDER BY date_became_customer Asc LIMIT value",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many languages are in these films?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many languages are in these films?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT language_id) FROM film",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT student_id FROM Students",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT student_id FROM Students",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the description and code of the type of service that is performed the most often?",
        "query": "SELECT Service_Type_Description , Service_Type_Code FROM Ref_Service_Types GROUP BY Service_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the description and code of the type of service that is performed the most often?",
        "query": "SELECT Service_Type_Description , Service_Type_Code FROM Ref_Service_Types GROUP BY Service_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Service_Type_Description , T1.Service_Type_Code FROM Ref_Service_Types AS T1 JOIN Services AS T2 ON T1.Service_Type_Code  =  T2.Service_Type_Code GROUP BY T1.Service_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name of the product that has the smallest capacity.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name of the product that has the smallest capacity.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number ORDER BY T3.height Asc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY capacity ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of the top three products that were purchased in the largest amount?",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which party has the largest number of delegates?",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which party has the largest number of delegates?",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Program_ID NOT IN ( SELECT T2.Program_ID FROM broadcast_share AS T2 )",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which programs are never broadcasted in the morning? Give me the names of the programs.",
        "query": "SELECT T1.Name FROM program AS T1 WHERE T1.Program_ID NOT IN ( SELECT T2.Program_ID FROM broadcast_share AS T2 )",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 EXCEPT SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name = value",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "query": "SELECT DISTINCT customer_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased a keyboard?",
        "query": "SELECT DISTINCT customer_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "query": "SELECT Major , Count ( * ) FROM Student GROUP BY Major",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many different majors are there and how many different city codes are there for each student?",
        "query": "SELECT Major , Count ( * ) FROM Student GROUP BY Major",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the color description of the product with name \"catnip\"?",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the color description of the product with name \"catnip\"?",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t1.product_name  =  \"catnip\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "query": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id WHERE T1.supplier_name = value",
        "gold_parse": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the product type, name, and price for products supplied by supplier 3.",
        "query": "SELECT T2.product_type_code , T2.product_name , T2.product_price FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id WHERE T1.supplier_name = value",
        "gold_parse": "SELECT T2.product_type_code ,  T2.product_name ,  T2.product_price FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  3",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the names of customers who have purchased both products Latte and Americano?",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "query": "SELECT Avg ( student_capacity ) , Min ( student_capacity ) FROM Dorm WHERE gender = value",
        "gold_parse": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average and total capacity for all dorms who are of gender X?",
        "query": "SELECT Avg ( student_capacity ) , Min ( student_capacity ) FROM Dorm WHERE gender = value",
        "gold_parse": "SELECT avg(student_capacity) ,  sum(student_capacity) FROM dorm WHERE gender  =  'X'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the characteristic name used by most number of the products?",
        "query": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_data_type ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics.",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics.",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of the party that has the most delegates.",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of the party that has the most delegates.",
        "query": "SELECT Party FROM party GROUP BY Party ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the park of the roller coaster with the highest speed.",
        "query": "SELECT Park FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "gold_parse": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the park of the roller coaster with the highest speed.",
        "query": "SELECT Park FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "gold_parse": "SELECT Park FROM roller_coaster ORDER BY Speed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Which reign is the most common among wrestlers?",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Which reign is the most common among wrestlers?",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the name of the student in the History department with the most credits.",
        "query": "SELECT name FROM student ORDER BY tot_cred Desc LIMIT value",
        "gold_parse": "SELECT name FROM student WHERE dept_name  =  'History' ORDER BY tot_cred DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of the products that have their color described as \"red\" and have a characteristic named \"slow\".",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the names of the top 10 airlines that operate the most number of routes.",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the names of the top 10 airlines that operate the most number of routes.",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the names of tracks that contain the the word you in them?",
        "query": "SELECT T3.Name FROM Playlist AS T1 JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name LIKE value",
        "gold_parse": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the names of tracks that contain the the word you in them?",
        "query": "SELECT T3.Name FROM Playlist AS T1 JOIN PlaylistTrack AS T2 ON T1.PlaylistId = T2.PlaylistId JOIN Track AS T3 ON T2.TrackId = T3.TrackId WHERE T1.Name LIKE value",
        "gold_parse": "SELECT Name FROM TRACK WHERE Name LIKE '%you%'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different instructors have taught some course?",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many different instructors have taught some course?",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many storms had death records?",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many storms had death records?",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show aircraft names and number of flights for each aircraft.",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "What is the location of the party with the most hosts?",
        "query": "SELECT T1.Location FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "What is the location of the party with the most hosts?",
        "query": "SELECT T1.Location FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT LOCATION FROM party ORDER BY Number_of_hosts DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of the head of the department with the least employees.",
        "query": "SELECT T2.Name , T2.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of the head of the department with the least employees.",
        "query": "SELECT T2.Name , T2.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "query": "SELECT T1.name FROM student AS T1 EXCEPT SELECT T1.name FROM department AS T2 JOIN course AS T3 ON T3.dept_name = T2.dept_name JOIN student AS T1 ON T2.dept_name = T1.dept_name WHERE T3.dept_name = value",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who didn't take any course from Biology department.",
        "query": "SELECT T1.name FROM student AS T1 EXCEPT SELECT T1.name FROM department AS T2 JOIN course AS T3 ON T3.dept_name = T2.dept_name JOIN student AS T1 ON T2.dept_name = T1.dept_name WHERE T3.dept_name = value",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "query": "SELECT T1.semester FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 but not in Spring 2010.",
        "query": "SELECT T1.semester FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "query": "SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as comptroller most frequently? Give me the name of the person and the frequency count.",
        "query": "SELECT Governor , Count ( * ) FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "query": "SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "What are the mission codes, fates, and names of the ships involved?",
        "query": "SELECT T1.Code , T2.Name , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of rooms for different block code?",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of rooms for different block code?",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of departments where some physicians are primarily affiliated with.",
        "query": "SELECT DISTINCT Name FROM Nurse",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the product ids and color descriptions for products with two or more characteristics?",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the product ids and color descriptions for products with two or more characteristics?",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "query": "SELECT Comptroller , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "query": "SELECT Comptroller , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_name = value",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the name of the products that have the color description \"red\" and have the characteristic name \"fast\".",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_name = value",
        "gold_parse": "SELECT product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"fast\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the county that produces the most wines scoring higher than 90?",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show ids for the faculty members who don't advise any student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show ids for the faculty members who don't advise any student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "query": "SELECT Count ( * ) FROM MediaType WHERE Name = value AND Name = value",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Count the number of tracks that are of the media type \"AAC audio file\".",
        "query": "SELECT Count ( * ) FROM MediaType WHERE Name = value AND Name = value",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "query": "SELECT Count ( * ) FROM people WHERE Height > value",
        "gold_parse": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the total kills of the perpetrators with height more than 1.84.",
        "query": "SELECT Count ( * ) FROM people WHERE Height > value",
        "gold_parse": "SELECT sum(T2.Killed) FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Height  >  1.84",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of all students who were in the tryout sorted in alphabetic order.",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many cards are there of each?",
        "query": "SELECT T1.card_type_code , Count ( * ) FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type",
        "gold_parse": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many cards are there of each?",
        "query": "SELECT T1.card_type_code , Count ( * ) FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type",
        "gold_parse": "SELECT card_type_code ,  count(*) FROM Customers_cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE parent_entry_id > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the catalog entry names of the products with next entry ID above 8?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE parent_entry_id > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members that have never registered at any branch?",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members that have never registered at any branch?",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the description of the most popular role among users that have logged in?",
        "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the description of the most popular role among users that have logged in?",
        "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Count the number of distinct channel owners.",
        "query": "SELECT Count ( * ) FROM program",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Count the number of distinct channel owners.",
        "query": "SELECT Count ( * ) FROM program",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "query": "SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )",
        "gold_parse": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the product type whose average price is higher than the average price of all products.",
        "query": "SELECT product_type_code FROM Products WHERE product_price > ( SELECT Avg ( product_price ) FROM Products )",
        "gold_parse": "SELECT product_type_code FROM products GROUP BY product_type_code HAVING avg(product_price)  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and salary of Mark Young.",
        "query": "SELECT eid , salary FROM employee",
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and salary of Mark Young.",
        "query": "SELECT eid , salary FROM employee",
        "gold_parse": "SELECT eid ,  salary FROM Employee WHERE name  =  'Mark Young'",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "query": "SELECT City FROM branch WHERE Open_year = value INTERSECT SELECT City FROM branch WHERE membership_amount > value",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show all city with a branch opened in 2001 and a branch with more than 100 membership.",
        "query": "SELECT City FROM branch WHERE Open_year = value INTERSECT SELECT City FROM branch WHERE membership_amount > value",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "query": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id ORDER BY T2.product_name Asc",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the name and phone number of all suppliers in the alphabetical order of their addresses.",
        "query": "SELECT T1.supplier_name , T1.supplier_phone FROM Suppliers AS T1 JOIN Products AS T2 JOIN Product_Suppliers AS T3 ON T1.supplier_id = T3.supplier_id AND T3.product_id = T2.product_id ORDER BY T2.product_name Asc",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "SELECT name FROM enzyme WHERE Chromosome ! = value",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "SELECT name FROM enzyme WHERE Chromosome ! = value",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physicians who are trained in a procedure that costs more than 5000.",
        "query": "SELECT * FROM Procedures WHERE Cost > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "query": "SELECT email , last_update FROM customer WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Where does the customer with the first name Linda live? And what is her email?",
        "query": "SELECT email , last_update FROM customer WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT T2.address ,  T1.email FROM customer AS T1 JOIN address AS T2 ON T2.address_id  =  T1.address_id WHERE T1.first_name  =  'LINDA'",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "List the time of elimination of the wrestlers with largest days held.",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the category code and typical price of 'cumin'.",
        "query": "SELECT product_category_code , typical_selling_price FROM Products WHERE typical_buying_price = value",
        "gold_parse": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the category code and typical price of 'cumin'.",
        "query": "SELECT product_category_code , typical_selling_price FROM Products WHERE typical_buying_price = value",
        "gold_parse": "SELECT product_category_code ,  typical_buying_price FROM products WHERE product_name  =  \"cumin\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
        "query": "SELECT characteristic_name FROM Characteristics WHERE characteristic_type_code = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of the characteristics of the product 'sesame' that have the characteristic type code 'Grade'?",
        "query": "SELECT characteristic_name FROM Characteristics WHERE characteristic_type_code = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "How many parties are there?",
        "query": "SELECT Count ( DISTINCT Party_Theme ) FROM party",
        "gold_parse": "SELECT count(*) FROM party",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "How many parties are there?",
        "query": "SELECT Count ( DISTINCT Party_Theme ) FROM party",
        "gold_parse": "SELECT count(*) FROM party",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all the physicians who prescribe Thesisin as medication.",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all the physicians who prescribe Thesisin as medication.",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show member names without any registered branch.",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show member names without any registered branch.",
        "query": "SELECT Name FROM member EXCEPT SELECT Name FROM member",
        "gold_parse": "SELECT name FROM member WHERE member_id NOT IN (SELECT member_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the season, home team, away team of all the games.",
        "query": "SELECT Season , Competition , Home_team FROM game",
        "gold_parse": "SELECT season ,  home_team ,  away_team FROM game",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the season, home team, away team of all the games.",
        "query": "SELECT Season , Competition , Home_team FROM game",
        "gold_parse": "SELECT season ,  home_team ,  away_team FROM game",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.inventory_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the film title and inventory id of the item in the inventory which was rented most frequently?",
        "query": "SELECT T1.title , T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.inventory_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the number of accounts that the customer with the first name Art and last name Turcotte has.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.County = value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.County = value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the official native languages of countries who have players from Maryland or Duke colleges.",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "query": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name and distance of the aircrafts with more than 5000 distance and which at least 5 people have its certificate.",
        "query": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "query": "SELECT Player_name , Sponsor_name FROM player ORDER BY Votes Desc",
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players and names of their coaches in descending order of the votes of players.",
        "query": "SELECT Player_name , Sponsor_name FROM player ORDER BY Votes Desc",
        "gold_parse": "SELECT T3.Player_name ,  T2.coach_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID ORDER BY T3.Votes DESC",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "query": "SELECT first_name , last_name FROM customer ORDER BY create_date Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the first name and the last name of the customer who made the earliest rental?",
        "query": "SELECT first_name , last_name FROM customer ORDER BY create_date Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "query": "SELECT T1.Name FROM track AS T1 WHERE T1.Track_ID NOT IN ( SELECT T2.Track_ID FROM race AS T2 WHERE T2.Class = value )",
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Give the names of tracks that do not have a race in the class 'GT'.",
        "query": "SELECT T1.Name FROM track AS T1 WHERE T1.Track_ID NOT IN ( SELECT T2.Track_ID FROM race AS T2 WHERE T2.Class = value )",
        "gold_parse": "SELECT name FROM track EXCEPT SELECT T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id WHERE T1.class  =  'GT'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids for all the students who participate in an activity and are under 20.",
        "query": "SELECT StuID FROM Student WHERE Age = value INTERSECT SELECT StuID FROM Student WHERE Age = value",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "how many ships are there?",
        "query": "SELECT Count ( * ) FROM captain",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "how many ships are there?",
        "query": "SELECT Count ( * ) FROM captain",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the total number of catalog contents.",
        "query": "SELECT Count ( * ) FROM Attribute_Definitions",
        "gold_parse": "SELECT count(*) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the total number of catalog contents.",
        "query": "SELECT Count ( * ) FROM Attribute_Definitions",
        "gold_parse": "SELECT count(*) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "query": "SELECT Avg ( Price ) FROM wine WHERE State ! = value",
        "gold_parse": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the average price of wines that are not produced from Sonoma county.",
        "query": "SELECT Avg ( Price ) FROM wine WHERE State ! = value",
        "gold_parse": "SELECT avg(price) FROM wine WHERE Appelation NOT IN (SELECT T1.Appelation FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  'Sonoma')",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "query": "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the name and publication date of the catalogs with catalog level number above 5?",
        "query": "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names affecting region \"Denmark\".",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names affecting region \"Denmark\".",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the title of course whose prerequisite is course Differential Geometry.",
        "query": "SELECT title FROM course",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "query": "SELECT Count ( * ) FROM Addresses WHERE city = value",
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are living in city \"Lake Geovannyton\"?",
        "query": "SELECT Count ( * ) FROM Addresses WHERE city = value",
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
        "query": "SELECT T1.supplier_name , Avg ( T2.total_value_purchased ) FROM Suppliers AS T1 JOIN Product_Suppliers AS T2 ON T1.supplier_id = T2.supplier_id GROUP BY T1.supplier_name ORDER BY Avg ( T2.total_value_purchased ) Desc LIMIT value",
        "gold_parse": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the average total amount purchased and total value purchased for the supplier who supplies the greatest number of products.",
        "query": "SELECT T1.supplier_name , Avg ( T2.total_value_purchased ) FROM Suppliers AS T1 JOIN Product_Suppliers AS T2 ON T1.supplier_id = T2.supplier_id GROUP BY T1.supplier_name ORDER BY Avg ( T2.total_value_purchased ) Desc LIMIT value",
        "gold_parse": "SELECT avg(total_amount_purchased) ,  avg(total_value_purchased) FROM Product_Suppliers WHERE supplier_id  =  (SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "query": "SELECT Count ( * ) FROM Physician WHERE Name = value",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients' prescriptions physician John Dorian made.",
        "query": "SELECT Count ( * ) FROM Physician WHERE Name = value",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most copies in the inventory? List both title and id.",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.title ,  T1.film_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id GROUP BY T1.film_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the number of orders with \"Second time\" as order detail.",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the cities no customers live in?",
        "query": "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the cities no customers live in?",
        "query": "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the country names, area and population which has both roller coasters with speed higher",
        "query": "SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed > value INTERSECT SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed = value",
        "gold_parse": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the country names, area and population which has both roller coasters with speed higher",
        "query": "SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed > value INTERSECT SELECT T2.Name , T2.Area , T2.Population FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID WHERE T1.Speed = value",
        "gold_parse": "SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  >  60 INTERSECT SELECT T1.name ,  T1.area ,  T1.population FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID WHERE T2.speed  <  55",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many kinds of different ratings are listed?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many kinds of different ratings are listed?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) , Avg ( Order_Quantity ) FROM Invoice_Items",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the minimum, average, and maximum quantities ordered? Check all the invoices.",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) , Avg ( Order_Quantity ) FROM Invoice_Items",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "query": "SELECT Avg ( strength ) FROM Player_Attributes",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "query": "SELECT Avg ( strength ) FROM Player_Attributes",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "query": "SELECT Sum ( Budgeted ) FROM budget WHERE Year = value",
        "gold_parse": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "What is the total budget amount for school \"Glenn\" in all years?",
        "query": "SELECT Sum ( Budgeted ) FROM budget WHERE Year = value",
        "gold_parse": "SELECT sum(T1.budgeted) FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  'Glenn'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.flno LIKE value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "query": "SELECT DISTINCT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "query": "SELECT DISTINCT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T2.Team ! = value",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many cities are in Australia?",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many cities are in Australia?",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts exist in the database?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = value AND T1.Porphyria = value",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the interaction type of the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = value AND T1.Porphyria = value",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < value INTERSECT SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < value",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names of all left-footed players who have overall rating between 85 and 90.",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < value INTERSECT SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating < value",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.preferred_foot  =  \"left\" AND T2.overall_rating  >=  85 AND T2.overall_rating  <=  90",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the name of physicians who took some appointment.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the name of physicians who took some appointment.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "query": "SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = value ORDER BY T1.title Asc",
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the building, room number, semester and year of courses in the Psychology department, sorted using course title?",
        "query": "SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = value ORDER BY T1.title Asc",
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "query": "SELECT Draft_Class , Season FROM match_season WHERE Position = value",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the draft pick numbers and draft classes of players whose positions are defenders.",
        "query": "SELECT Draft_Class , Season FROM match_season WHERE Position = value",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of all the physicians who took appointments.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of all the physicians who took appointments.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT T2.name FROM appointment AS T1 JOIN physician AS T2 ON T1.Physician  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the entry names of the catalog with the attribute that have the most entries.",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE state = value UNION SELECT cName FROM College WHERE enr > value AND state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE state = value UNION SELECT cName FROM College WHERE enr > value AND state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course with Differential Geometry as a prerequisite?",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course with Differential Geometry as a prerequisite?",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T2.semester = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.course_id FROM prereq AS T1 JOIN course AS T2 ON T1.prereq_id  =  T2.course_id WHERE T2.title  =  'Differential Geometry')",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the positions of players whose average number of points scored by that position is larger than 20?",
        "query": "SELECT Position FROM player WHERE Points > value",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the positions of players whose average number of points scored by that position is larger than 20?",
        "query": "SELECT Position FROM player WHERE Points > value",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "query": "SELECT Count ( * ) FROM Dorm WHERE gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes and with prices above 50?",
        "query": "SELECT Name FROM wine WHERE Grape = value INTERSECT SELECT Name FROM wine WHERE Price > value",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes and with prices above 50?",
        "query": "SELECT Name FROM wine WHERE Grape = value INTERSECT SELECT Name FROM wine WHERE Price > value",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue for each manufacturer.",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue for each manufacturer.",
        "query": "SELECT Sum ( T1.Revenue ) , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T2.Manufacturer",
        "gold_parse": "SELECT sum(revenue) ,  name FROM manufacturers GROUP BY name",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the average number of followers for the users who had some tweets.",
        "query": "SELECT Avg ( followers ) FROM user_profiles",
        "gold_parse": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the average number of followers for the users who had some tweets.",
        "query": "SELECT Avg ( followers ) FROM user_profiles",
        "gold_parse": "SELECT avg(followers) FROM user_profiles WHERE UID IN (SELECT UID FROM tweets)",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Count the number of different statuses.",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(DISTINCT Status) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Count the number of different statuses.",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(DISTINCT Status) FROM city",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the title and inventory id of the film that is rented most often.",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the title and inventory id of the film that is rented most often.",
        "query": "SELECT title , film_id FROM film GROUP BY film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.title ,  T2.inventory_id FROM film AS T1 JOIN inventory AS T2 ON T1.film_id  =  T2.film_id JOIN rental AS T3 ON T2.inventory_id  =  T3.inventory_id GROUP BY T2.inventory_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "query": "SELECT Name FROM Physician GROUP BY Name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are in charge of more than one patient.",
        "query": "SELECT Name FROM Physician GROUP BY Name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?",
        "query": "SELECT product_name , typical_selling_price , product_description FROM Products WHERE product_category_code = value",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, color descriptions, and product descriptions for products in the 'Herbs' category?",
        "query": "SELECT product_name , typical_selling_price , product_description FROM Products WHERE product_category_code = value",
        "gold_parse": "SELECT T1.product_name ,  T2.color_description ,  T1.product_description FROM products AS T1 JOIN Ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id and name of the staff who has been assigned for the shortest period.",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and market share of the browser Safari?",
        "query": "SELECT id , market_share FROM browser ORDER BY market_share Asc LIMIT value",
        "gold_parse": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and market share of the browser Safari?",
        "query": "SELECT id , market_share FROM browser ORDER BY market_share Asc LIMIT value",
        "gold_parse": "SELECT id ,  market_share FROM browser WHERE name  =  'Safari'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of teams from universities that have a below average enrollment?",
        "query": "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of teams from universities that have a below average enrollment?",
        "query": "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
        "query": "SELECT City FROM branch WHERE Open_year > value INTERSECT SELECT City FROM branch WHERE Open_year < value",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that have a branch that opened in 2001 and a branch with more than 100 members?",
        "query": "SELECT City FROM branch WHERE Open_year > value INTERSECT SELECT City FROM branch WHERE Open_year < value",
        "gold_parse": "SELECT city FROM branch WHERE open_year  =  2001 AND membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID ORDER BY T2.Time_of_day Asc",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program names, sorted by the order of launch date?",
        "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID ORDER BY T2.Time_of_day Asc",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for all the clubs?",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the staff who has been assigned for the least amount of time?",
        "query": "SELECT staff_id , staff_name FROM Staff GROUP BY staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_name FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id ORDER BY date_assigned_to - date_assigned_from LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count how many appointments have been made in total.",
        "query": "SELECT Count ( * ) FROM Physician",
        "gold_parse": "SELECT count(*) FROM appointment",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count how many appointments have been made in total.",
        "query": "SELECT Count ( * ) FROM Physician",
        "gold_parse": "SELECT count(*) FROM appointment",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "query": "SELECT Avg ( T2.Order_Quantity ) FROM Invoices AS T1 JOIN Invoice_Items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T1.payment_method_code = value",
        "gold_parse": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the average quantities ordered with payment method code \"MasterCard\" on invoices?",
        "query": "SELECT Avg ( T2.Order_Quantity ) FROM Invoices AS T1 JOIN Invoice_Items AS T2 ON T1.Invoice_ID = T2.Invoice_ID WHERE T1.payment_method_code = value",
        "gold_parse": "SELECT avg(Order_Quantity) FROM Invoices WHERE payment_method_code  =  \"MasterCard\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value OR T1.characteristic_type_description = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name = value OR T1.characteristic_type_description = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "query": "SELECT Name FROM Products WHERE Price > value OR Manufacturer < value",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the names of manufacturer whose products have an average price higher than or equal to $150.",
        "query": "SELECT Name FROM Products WHERE Price > value OR Manufacturer < value",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name HAVING avg(T1.price) >= 150",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of address of students?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of address of students?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are nursing an undergoing treatment.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all the players who received a yes during tryouts, and also what are the names of their colleges?",
        "query": "SELECT T2.pName , T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of all aircrafts that John Williams have certificates to be able to fly?",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY Porphyria Desc",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names and FDA approval status of medicines in descending order of the number of enzymes that it can interact with.",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY Porphyria Desc",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "query": "SELECT staff_name FROM Staff",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names of staff who have been assigned multiple jobs?",
        "query": "SELECT staff_name FROM Staff",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "query": "SELECT Count ( * ) FROM Artist WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the number of albums by the artist \"Metallica\".",
        "query": "SELECT Count ( * ) FROM Artist WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "On which days more than one revisions were made on catalogs.",
        "query": "SELECT date_of_publication FROM Catalogs GROUP BY catalog_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "On which days more than one revisions were made on catalogs.",
        "query": "SELECT date_of_publication FROM Catalogs GROUP BY catalog_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "Find the id and name of the stadium where the largest number of injury accidents occurred.",
        "query": "SELECT T1.id , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id GROUP BY T2.stadium_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "query": "SELECT Count ( * ) FROM Institution WHERE Type = value OR Founded > value",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "How many proteins are associated with an institution founded after 1880 or an institution with type \"Private\"?",
        "query": "SELECT Count ( * ) FROM Institution WHERE Type = value OR Founded > value",
        "gold_parse": "SELECT count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id WHERE T1.founded  >  1880 OR T1.type  =  'Private'",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT protein_name , common_name FROM protein",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT protein_name , common_name FROM protein",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "query": "SELECT id , Trade_Name FROM medicine GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and trade names of the medicine that can interact with at least 3 enzymes?",
        "query": "SELECT id , Trade_Name FROM medicine GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING COUNT(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "query": "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the salaray and name of the employee with the most certificates to fly planes more than 5000?",
        "query": "SELECT name , name FROM employee WHERE salary > value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.distance  >  5000 GROUP BY T1.eid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many appointments are there?",
        "query": "SELECT Count ( * ) FROM Physician",
        "gold_parse": "SELECT count(*) FROM appointment",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many appointments are there?",
        "query": "SELECT Count ( * ) FROM Physician",
        "gold_parse": "SELECT count(*) FROM appointment",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast AS T2 )",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the names of programs that are never broadcasted in the morning.",
        "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast AS T2 )",
        "gold_parse": "SELECT name FROM program EXCEPT SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "query": "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names and publication dates of all catalogs that have catalog level number greater than 5.",
        "query": "SELECT T1.catalog_name , T1.date_of_publication FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT t1.catalog_name ,  t1.date_of_publication FROM catalogs AS t1 JOIN catalog_structure AS t2 ON t1.catalog_id  =  t2.catalog_id WHERE catalog_level_number  >  5",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.total_budget_percent_budgeted > value OR T1.Enrollment > value",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.total_budget_percent_budgeted > value OR T1.Enrollment > value",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "query": "SELECT Count ( * ) FROM flight WHERE distance > value",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights that can cover a distance of more than 2000?",
        "query": "SELECT Count ( * ) FROM flight WHERE distance > value",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who taught in the Fall of 2009 but not in the Spring of 2010?",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "query": "SELECT Winery , Name , Score FROM wine WHERE Score > value ORDER BY Score Asc",
        "gold_parse": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the grape, appelation and name of wines whose score is higher than 93 ordered by Name.",
        "query": "SELECT Winery , Name , Score FROM wine WHERE Score > value ORDER BY Score Asc",
        "gold_parse": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many instructors teach a course in the Spring of 2010?",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many instructors teach a course in the Spring of 2010?",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the number of courses provided in each semester and year.",
        "query": "SELECT Count ( * ) , year FROM takes GROUP BY year",
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the number of courses provided in each semester and year.",
        "query": "SELECT Count ( * ) , year FROM takes GROUP BY year",
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the number of technicians?",
        "query": "SELECT Count ( * ) FROM repair",
        "gold_parse": "SELECT count(*) FROM technician",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the number of technicians?",
        "query": "SELECT Count ( * ) FROM repair",
        "gold_parse": "SELECT count(*) FROM technician",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the average age and number of male students (with sex M) from each city.",
        "query": "SELECT Avg ( Age ) , city_code FROM Student WHERE Sex = value GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "query": "SELECT name FROM stadium WHERE Country = value",
        "gold_parse": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that some Australian swimmers have been to.",
        "query": "SELECT name FROM stadium WHERE Country = value",
        "gold_parse": "SELECT t4.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id JOIN event AS t3 ON t2.event_id  =  t3.id JOIN stadium AS t4 ON t4.id  =  t3.stadium_id WHERE t1.nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "query": "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the name, phone number and email address of the customer who made the largest number of orders?",
        "query": "SELECT customer_name , customer_phone , customer_email FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone ,  T1.customer_email FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T2.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "query": "SELECT T1.Attorney_General , Count ( * ) FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the people that have been comptroller the most times and the corresponding number of times.",
        "query": "SELECT T1.Attorney_General , Count ( * ) FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Comptroller ,  COUNT(*) FROM party GROUP BY Comptroller ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of card types.",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of card types.",
        "query": "SELECT Count ( DISTINCT transaction_type ) FROM Financial_Transactions",
        "gold_parse": "SELECT count(DISTINCT card_type_code) FROM Customers_Cards",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "query": "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate who most recently accessed the course?",
        "query": "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and salaries of instructors who advise students in the Math department?",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "query": "SELECT T1.shipping_agent_name , Count ( * ) FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code GROUP BY T2.shipping_agent_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "Which shipping agent shipped the most documents? List the shipping agent name and the number of documents.",
        "query": "SELECT T1.shipping_agent_name , Count ( * ) FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code GROUP BY T2.shipping_agent_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name , count(Documents.document_id) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code GROUP BY Ref_Shipping_Agents.shipping_agent_code ORDER BY count(Documents.document_id) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "query": "SELECT Name FROM member WHERE Hometown = value INTERSECT SELECT Name FROM member WHERE Hometown = value",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Find the name of branches where have some members whose hometown is in Louisville, Kentucky and some in Hiram, Georgia.",
        "query": "SELECT Name FROM member WHERE Hometown = value INTERSECT SELECT Name FROM member WHERE Hometown = value",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name and capacity of products with price greater than 700 (in USD).",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the employee id of the head whose department has the least number of employees?",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "What is the number of ships?",
        "query": "SELECT Count ( * ) FROM mission",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "What is the number of ships?",
        "query": "SELECT Count ( * ) FROM mission",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the ids of the three products purchased in the largest amounts.",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM product_suppliers ORDER BY total_amount_purchased DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the name, location, mascot for all schools.",
        "query": "SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id",
        "gold_parse": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the name, location, mascot for all schools.",
        "query": "SELECT T1.School_name , T1.Location , T2.donator_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id",
        "gold_parse": "SELECT school_name ,  LOCATION ,  mascot FROM school",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "query": "SELECT id FROM Player WHERE height BETWEEN value AND value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the ids for left-footed players with a height between 180cm and 190cm.",
        "query": "SELECT id FROM Player WHERE height BETWEEN value AND value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 AND height  <=  190 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE preferred_foot  =  \"left\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the nominees that have been nominated more than two musicals.",
        "query": "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the nominees that have been nominated more than two musicals.",
        "query": "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are there for each manufacturer?",
        "query": "SELECT Count ( * ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are there for each manufacturer?",
        "query": "SELECT Count ( * ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria ! = value",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria ! = value",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "query": "SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value",
        "gold_parse": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id and name of the department store that has both marketing and managing department?",
        "query": "SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value INTERSECT SELECT T3.department_name , T2.store_name FROM Department_Store_Chain AS T1 JOIN Department_Stores AS T2 ON T1.dept_store_chain_id = T2.dept_store_chain_id AND T1.dept_store_chain_id = T2.dept_store_chain_id JOIN Departments AS T3 ON T2.dept_store_id = T3.dept_store_id WHERE T1.dept_store_chain_name = value",
        "gold_parse": "SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"marketing\" INTERSECT SELECT T2.dept_store_id ,  T2.store_name FROM departments AS T1 JOIN department_stores AS T2 ON T1.dept_store_id  =  T2.dept_store_id WHERE T1.department_name  =  \"managing\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "query": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the average fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "query": "SELECT Avg ( T3.lap ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN lapTimes AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value AND T1.country = value",
        "gold_parse": "SELECT avg(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Return the names of products that have had complaints filed by the customer who has filed the fewest complaints.",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List total amount of  invoice from Chicago, IL.",
        "query": "SELECT Sum ( total ) FROM invoices WHERE billing_city = value",
        "gold_parse": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List total amount of  invoice from Chicago, IL.",
        "query": "SELECT Sum ( total ) FROM invoices WHERE billing_city = value",
        "gold_parse": "SELECT sum(total) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by each allergy type?",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by each allergy type?",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show the company name with the number of gas station.",
        "query": "SELECT Count ( * ) FROM company",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show the company name with the number of gas station.",
        "query": "SELECT Count ( * ) FROM company",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest savings balance.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers who have no policies associated.",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers who have no policies associated.",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 EXCEPT SELECT T2.Customer_ID FROM Policies AS T2",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the top 5 genres by number of tracks. List genres name and total tracks.",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  COUNT(*) FROM genres AS T1 JOIN tracks AS T2 ON T2.genre_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the customer who has made the largest amount of claim in a single claim?",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_ID ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How much is the track Fast As a Shark?",
        "query": "SELECT milliseconds FROM tracks",
        "gold_parse": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How much is the track Fast As a Shark?",
        "query": "SELECT milliseconds FROM tracks",
        "gold_parse": "SELECT unit_price FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the titles of all albums that start with A in alphabetical order?",
        "query": "SELECT title FROM albums ORDER BY title Asc",
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the titles of all albums that start with A in alphabetical order?",
        "query": "SELECT title FROM albums ORDER BY title Asc",
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "query": "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = value",
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the total and maximum duration for all trips with the bike id 636?",
        "query": "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = value",
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude of stations located in San Jose city?",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergy type with number of students affected.",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergy type with number of students affected.",
        "query": "SELECT AllergyType , Count ( * ) FROM Allergy_Type GROUP BY AllergyType",
        "gold_parse": "SELECT T2.allergytype ,  count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy GROUP BY T2.allergytype",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "query": "SELECT Rank , Market_Value , Profits_billion FROM company WHERE Sales_billion = value ORDER BY Sales_billion Asc",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "find the rank, company names, market values of the companies in the banking industry order by their sales and profits in billion.",
        "query": "SELECT Rank , Market_Value , Profits_billion FROM company WHERE Sales_billion = value ORDER BY Sales_billion Asc",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "find the full name of employees who report to Nancy Edwards?",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "find the full name of employees who report to Nancy Edwards?",
        "query": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT T2.first_name , T2.last_name FROM employees AS T1 JOIN employees AS T2 ON T1.id = T2.reports_to WHERE T1.first_name = \"Nancy\" AND T1.last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the average ages for male and female students?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the average ages for male and female students?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show the names of pilots and the number of records they have.",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show the names of pilots and the number of records they have.",
        "query": "SELECT Pilot_name , Count ( * ) FROM pilot GROUP BY Pilot_name",
        "gold_parse": "SELECT T2.Pilot_name ,  COUNT(*) FROM pilot_record AS T1 JOIN pilot AS T2 ON T1.pilot_ID  =  T2.pilot_ID GROUP BY T2.Pilot_name",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the description of the claim status \"Open\".",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the description of the claim status \"Open\".",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the description of the claim status \"Open\".",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day has it neither been foggy nor rained in the zip code of 94107?",
        "query": "SELECT start_date FROM trip EXCEPT SELECT start_date FROM trip WHERE zip_code = value",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "On which day has it neither been foggy nor rained in the zip code of 94107?",
        "query": "SELECT start_date FROM trip EXCEPT SELECT start_date FROM trip WHERE zip_code = value",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "How many pilots are there?",
        "query": "SELECT Count ( * ) FROM aircraft",
        "gold_parse": "SELECT count(*) FROM pilot",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "How many pilots are there?",
        "query": "SELECT Count ( * ) FROM aircraft",
        "gold_parse": "SELECT count(*) FROM pilot",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "query": "SELECT Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city ! = value",
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average bike availablility for stations not in Palo Alto?",
        "query": "SELECT Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 WHERE T1.city ! = value",
        "gold_parse": "SELECT avg(bikes_available) FROM status WHERE station_id NOT IN (SELECT id FROM station WHERE city  =  \"Palo Alto\")",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code that has the lowest average mean sea level pressure?",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY Avg ( min_humidity ) Asc LIMIT value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code that has the lowest average mean sea level pressure?",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY Avg ( min_humidity ) Asc LIMIT value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "query": "SELECT name , city , long FROM station ORDER BY long Asc LIMIT value",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the name, latitude, and city of the station with the lowest latitude?",
        "query": "SELECT name , city , long FROM station ORDER BY long Asc LIMIT value",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "query": "SELECT T1.title , T1.phone , T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the title, phone and hire date of Nancy Edwards?",
        "query": "SELECT T1.title , T1.phone , T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T1.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT title ,  phone ,  hire_date FROM employees WHERE first_name = \"Nancy\" AND last_name = \"Edwards\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "query": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with accounts, and how many checking accounts do each of them have?",
        "query": "SELECT name , Count ( * ) FROM ACCOUNTS GROUP BY custid",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "List all info about all people.",
        "query": "SELECT * FROM candidate",
        "gold_parse": "SELECT * FROM people",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "List all info about all people.",
        "query": "SELECT * FROM candidate",
        "gold_parse": "SELECT * FROM people",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "query": "SELECT T2.start_date FROM status AS T1 JOIN trip AS T2 WHERE T2.zip_code = value AND T1.time ! = value",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "In zip code 94107, on which day neither Fog nor Rain was not observed?",
        "query": "SELECT T2.start_date FROM status AS T1 JOIN trip AS T2 WHERE T2.zip_code = value AND T1.time ! = value",
        "gold_parse": "SELECT date FROM weather WHERE zip_code  =  94107 AND EVENTS != \"Fog\" AND EVENTS != \"Rain\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show company name and main industry without a gas station.",
        "query": "SELECT Company , Main_Industry FROM company EXCEPT SELECT Company , Main_Industry FROM company",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show company name and main industry without a gas station.",
        "query": "SELECT Company , Main_Industry FROM company EXCEPT SELECT Company , Main_Industry FROM company",
        "gold_parse": "SELECT company ,  main_industry FROM company WHERE company_id NOT IN (SELECT company_id FROM station_company)",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List every album whose title starts with A in alphabetical order.",
        "query": "SELECT title FROM albums ORDER BY title Asc",
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List every album whose title starts with A in alphabetical order.",
        "query": "SELECT title FROM albums ORDER BY title Asc",
        "gold_parse": "SELECT title FROM albums WHERE title LIKE 'A%' ORDER BY title",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.",
        "query": "SELECT T1.roomName , T2.LastName , T2.CheckIn FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT value",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the highest rate? List the room's full name, rate, check in and check out date.",
        "query": "SELECT T1.roomName , T2.LastName , T2.CheckIn FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Rate Desc LIMIT value",
        "gold_parse": "SELECT T2.roomName ,  T1.Rate ,  T1.CheckIn ,  T1.CheckOut FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY T1.Rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
        "query": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Avg ( T2.bikes_available ) > value",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names and ids of all stations that have more than 14 bikes available on average or had bikes installed in December?",
        "query": "SELECT T1.name , T1.id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Avg ( T2.bikes_available ) > value",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What is the total number of students?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What is the total number of students?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "query": "SELECT name FROM station WHERE long < value AND city = value UNION SELECT name FROM station WHERE long > value AND city = value",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are names of stations that have average bike availability above 10 and are not located in San Jose city?",
        "query": "SELECT name FROM station WHERE long < value AND city = value UNION SELECT name FROM station WHERE long > value AND city = value",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "query": "SELECT Min ( Company ) , Max ( Market_Value ) , Avg ( Market_Value ) FROM company",
        "gold_parse": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show minimum, maximum, and average market value for all companies.",
        "query": "SELECT Min ( Company ) , Max ( Market_Value ) , Avg ( Market_Value ) FROM company",
        "gold_parse": "SELECT min(market_value) ,  max(market_value) ,  avg(market_value) FROM company",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the start station's name and id for the one that had the most start trips in August?",
        "query": "SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = value GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "query": "SELECT roomName FROM Rooms WHERE basePrice < value INTERSECT SELECT roomName FROM Rooms WHERE basePrice > value",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the names of modern rooms that have a base price lower than $160 and two beds.",
        "query": "SELECT roomName FROM Rooms WHERE basePrice < value INTERSECT SELECT roomName FROM Rooms WHERE basePrice > value",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in Movies playlist but not in music playlist.",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many invoices were billed from Chicago, IL?",
        "query": "SELECT Count ( * ) FROM invoices WHERE billing_city = value",
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many invoices were billed from Chicago, IL?",
        "query": "SELECT Count ( * ) FROM invoices WHERE billing_city = value",
        "gold_parse": "SELECT COUNT(*) FROM invoices WHERE billing_city  =  \"Chicago\" AND billing_state  =  \"IL\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the name and gender of the candidate who got the highest support rate.",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of the customers who have an deputy policy.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = value",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of the customers who have an deputy policy.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = value",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "query": "SELECT first_name , last_name FROM employees",
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of all the employees and how many people report to them?",
        "query": "SELECT first_name , last_name FROM employees",
        "gold_parse": "SELECT T2.first_name , T2.last_name ,  count(T1.reports_to) FROM employees AS T1 JOIN employees AS T2 ON T1.reports_to = T2.id GROUP BY T1.reports_to ORDER BY count(T1.reports_to) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which allergy has most number of students affected?",
        "query": "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which allergy has most number of students affected?",
        "query": "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) < value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) < value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have each different allergy?",
        "query": "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have each different allergy?",
        "query": "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "query": "SELECT start_date , duration FROM trip ORDER BY duration Asc LIMIT value",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the day in which the difference between the max temperature and min temperature was the smallest. Also report the difference.",
        "query": "SELECT start_date , duration FROM trip ORDER BY duration Asc LIMIT value",
        "gold_parse": "SELECT date ,  max_temperature_f - min_temperature_f FROM weather ORDER BY max_temperature_f - min_temperature_f LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the bike that traveled the most in 94002?",
        "query": "SELECT bike_id FROM trip GROUP BY bike_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the bike that traveled the most in 94002?",
        "query": "SELECT bike_id FROM trip GROUP BY bike_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT bike_id FROM trip WHERE zip_code  =  94002 GROUP BY bike_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many albums has Billy Cobam released?",
        "query": "SELECT Count ( * ) FROM sqlite_sequence WHERE seq = value",
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many albums has Billy Cobam released?",
        "query": "SELECT Count ( * ) FROM sqlite_sequence WHERE seq = value",
        "gold_parse": "SELECT count(*) FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Billy Cobham\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids for students over 20 years old?",
        "query": "SELECT Major FROM Student WHERE Age > value",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the average and minimum age of all artists from United States.",
        "query": "SELECT Avg ( Age ) , Max ( Age ) FROM artist WHERE Country = value",
        "gold_parse": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "What is the average and minimum age of all artists from United States.",
        "query": "SELECT Avg ( Age ) , Max ( Age ) FROM artist WHERE Country = value",
        "gold_parse": "SELECT avg(age) ,  min(age) FROM artist WHERE country  =  'United States'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex = value OR Sex = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex = value OR Sex = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with a higher checking balance than savings balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T2.balance  >  T3.balance",
        "correctness": 0
    },
    {
        "db_id": "company_1",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "query": "SELECT Dependent_name FROM dependent",
        "gold_parse": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "correctness": 0
    },
    {
        "db_id": "company_1",
        "question": "find all dependent names who have a spouse relation with some employee.",
        "query": "SELECT Dependent_name FROM dependent",
        "gold_parse": "SELECT Dependent_name FROM dependent WHERE relationship  =  'Spouse'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different ids and names of the stations that have had more than 12 bikes available?",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT T1.id ,  T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  >  12",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What student id corresponds to the oldest student?",
        "query": "SELECT Major FROM Student ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What student id corresponds to the oldest student?",
        "query": "SELECT Major FROM Student ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT StuID FROM Student WHERE age  =  (SELECT max(age) FROM Student)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the balances of checking accounts belonging to people with savings balances greater than the average savings balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance > ( SELECT Avg ( T2.balance ) FROM SAVINGS AS T2 )",
        "gold_parse": "SELECT T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T1.name IN (SELECT T1.name FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  >  (SELECT avg(balance) FROM savings))",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "query": "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < value",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of candidates who have a lower support rate than oppose rate?",
        "query": "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < value",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = value AND T2.LastName = value AND T2.LastName = value",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of adults for the room reserved and checked in by CONRAD SELBIG on Oct 23, 2010.",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.roomName = value AND T2.LastName = value AND T2.LastName = value",
        "gold_parse": "SELECT Adults FROM Reservations WHERE CheckIn  =  \"2010-10-23\" AND FirstName  =  \"CONRAD\" AND LastName  =  \"SELBIG\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "query": "SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = value GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which start station had the most trips starting from August? Give me the name and id of the station.",
        "query": "SELECT T1.name , T2.start_station_id FROM station AS T1 JOIN trip AS T2 WHERE T2.start_date = value GROUP BY T2.start_station_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT start_station_name ,  start_station_id FROM trip WHERE start_date LIKE \"8/%\" GROUP BY start_station_name ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "query": "SELECT T3.Fname , T3.Sex FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.Allergy = value AND T1.AllergyType = value",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the first name and gender of the students who have allergy to milk but can put up with cats?",
        "query": "SELECT T3.Fname , T3.Sex FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T1.Allergy = value AND T1.AllergyType = value",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "query": "SELECT custid , name FROM ACCOUNTS WHERE name < value",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the customer id and name corresponding to accounts with a checking balance less than the largest checking balance?",
        "query": "SELECT custid , name FROM ACCOUNTS WHERE name < value",
        "gold_parse": "SELECT T1.custid ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT max(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List Aerosmith's albums.",
        "query": "SELECT title FROM albums",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List Aerosmith's albums.",
        "query": "SELECT title FROM albums",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the number of checking accounts for each account name.",
        "query": "SELECT Count ( * ) FROM ACCOUNTS",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the number of checking accounts for each account name.",
        "query": "SELECT Count ( * ) FROM ACCOUNTS",
        "gold_parse": "SELECT count(*) ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that belong to the Rock genre and whose media type is MPEG?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "query": "SELECT Count ( * ) , zip_code FROM trip GROUP BY zip_code",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "query": "SELECT Count ( * ) , zip_code FROM trip GROUP BY zip_code",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "query": "SELECT Count ( * ) FROM Reservations WHERE LastName = value",
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of times ROY SWEAZY has reserved a room.",
        "query": "SELECT Count ( * ) FROM Reservations WHERE LastName = value",
        "gold_parse": "SELECT count(*) FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and savings balance of the top 3 accounts with the highest saving balance sorted by savings balance in descending order.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN savings AS T2 ON T1.custid  =  T2.custid ORDER BY T2.balance DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibitions has each artist had?",
        "query": "SELECT Name , Count ( * ) FROM artist GROUP BY Name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "How many exhibitions has each artist had?",
        "query": "SELECT Name , Count ( * ) FROM artist GROUP BY Name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM exhibition AS T1 JOIN artist AS T2 ON T1.artist_id  =  T2.artist_id GROUP BY T1.artist_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "query": "SELECT start_date FROM trip ORDER BY duration Desc LIMIT value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "query": "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < ( SELECT Max ( T1.Oppose_rate ) FROM candidate AS T1 )",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the names of the candidates whose support percentage is lower than their oppose rate.",
        "query": "SELECT T2.Name FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Unsure_rate < ( SELECT Max ( T1.Oppose_rate ) FROM candidate AS T1 )",
        "gold_parse": "SELECT t1.name FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id WHERE t2.support_rate  <  t2.oppose_rate",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "query": "SELECT T2.Name , Count ( * ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID GROUP BY T1.Representative_ID",
        "gold_parse": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "What are the different parties of representative? Show the party name and the number of representatives in each party.",
        "query": "SELECT T2.Name , Count ( * ) FROM election AS T1 JOIN representative AS T2 ON T1.Representative_ID = T2.Representative_ID GROUP BY T1.Representative_ID",
        "gold_parse": "SELECT Party ,  COUNT(*) FROM representative GROUP BY Party",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock or media type is MPEG audio file.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value OR T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" OR T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the name of tracks which are in both Movies and music playlists.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have cat allergies?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students have cat allergies?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "query": "SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T2.genre_id HAVING Sum ( T2.milliseconds ) > value",
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of playlist which has number of tracks greater than 100.",
        "query": "SELECT T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T2.genre_id HAVING Sum ( T2.milliseconds ) > value",
        "gold_parse": "SELECT T2.name FROM playlist_tracks AS T1 JOIN playlists AS T2 ON T2.id = T1.playlist_id GROUP BY T1.playlist_id HAVING count(T1.track_id)  >  100",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name LIKE value",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of albums that are released by aritist whose name has 'Led'",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id WHERE T2.name LIKE value",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "query": "SELECT T1.name FROM station AS T1 EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 WHERE T1.city = value AND T2.duration > value",
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of stations that are located in Palo Alto city but have never been the ending point of trips more than 100 times?",
        "query": "SELECT T1.name FROM station AS T1 EXCEPT SELECT T1.name FROM station AS T1 JOIN trip AS T2 WHERE T1.city = value AND T2.duration > value",
        "gold_parse": "SELECT name FROM station WHERE city  =  \"Palo Alto\" EXCEPT SELECT end_station_name FROM trip GROUP BY end_station_name HAVING count(*)  >  100",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Which themes have had corresponding exhibitions that have had attendance both below 100 and above 500?",
        "query": "SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance > value INTERSECT SELECT T1.Theme FROM exhibition AS T1 JOIN exhibition_record AS T2 ON T1.Exhibition_ID = T2.Exhibition_ID WHERE T2.Attendance < value",
        "gold_parse": "SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  <  100 INTERSECT SELECT T2.theme FROM exhibition_record AS T1 JOIN exhibition AS T2 ON T1.exhibition_id  =  T2.exhibition_id WHERE T1.attendance  >  500",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Oppose_rate > value",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "For each sex, what is the name and sex of the candidate with the oppose rate for their sex?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Oppose_rate > value",
        "gold_parse": "SELECT t1.name ,  t1.sex ,  min(oppose_rate) FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id GROUP BY t1.sex",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "query": "SELECT T1.title FROM albums AS T1 JOIN media_types AS T2 JOIN tracks AS T3 ON T1.id = T3.album_id AND T3.media_type_id = T2.id WHERE T2.name = value",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is title of album which track Balls to the Wall belongs to?",
        "query": "SELECT T1.title FROM albums AS T1 JOIN media_types AS T2 JOIN tracks AS T3 ON T1.id = T3.album_id AND T3.media_type_id = T2.id WHERE T2.name = value",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T2.name = \"Balls to the Wall\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "List the main industry with highest total market value and its number of companies.",
        "query": "SELECT Company , Sales_billion FROM company ORDER BY Sales_billion Desc LIMIT value",
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "List the main industry with highest total market value and its number of companies.",
        "query": "SELECT Company , Sales_billion FROM company ORDER BY Sales_billion Desc LIMIT value",
        "gold_parse": "SELECT main_industry ,  count(*) FROM company GROUP BY main_industry ORDER BY sum(market_value) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all student IDs who have at least two allergies.",
        "query": "SELECT Major FROM Student GROUP BY Major HAVING Count ( * ) > = value",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all student IDs who have at least two allergies.",
        "query": "SELECT Major FROM Student GROUP BY Major HAVING Count ( * ) > = value",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, what is the highest latitude for its stations?",
        "query": "SELECT city , Max ( long ) FROM station GROUP BY city",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each city, what is the highest latitude for its stations?",
        "query": "SELECT city , Max ( long ) FROM station GROUP BY city",
        "gold_parse": "SELECT city ,  max(lat) FROM station GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "query": "SELECT zip_code , Count ( * ) FROM weather GROUP BY zip_code",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, how many times has the maximum wind speed reached 25 mph?",
        "query": "SELECT zip_code , Count ( * ) FROM weather GROUP BY zip_code",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn = value AND T2.LastName = value INTERSECT SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value AND T2.LastName = value",
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Return the number of kids for the room reserved and checked in by DAMIEN TRACHSEL on  Sep 21, 2010.",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.CheckIn = value AND T2.LastName = value INTERSECT SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value AND T2.LastName = value",
        "gold_parse": "SELECT Kids FROM Reservations WHERE CheckIn  =  \"2010-09-21\" AND FirstName  =  \"DAMIEN\" AND LastName  =  \"TRACHSEL\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "query": "SELECT T1.roomName , T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice > value AND T2.Adults > value",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "query": "SELECT T1.roomName , T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.basePrice > value AND T2.Adults > value",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc LIMIT value",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the locations and representatives' names of the gas stations owned by the companies with the 3 largest amounts of assets?",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Market_Value Desc LIMIT value",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "query": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names, checking balances, and savings balances of customers, ordered by the total of checking and savings balances descending?",
        "query": "SELECT T1.name , T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Desc",
        "gold_parse": "SELECT T2.balance ,  T3.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "query": "SELECT Count ( * ) FROM trip WHERE start_date = value AND end_date = value",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many trips started from Mountain View city and ended at Palo Alto city?",
        "query": "SELECT Count ( * ) FROM trip WHERE start_date = value AND end_date = value",
        "gold_parse": "SELECT count(*) FROM station AS T1 JOIN trip AS T2 JOIN station AS T3 JOIN trip AS T4 ON T1.id  =  T2.start_station_id AND T2.id  =  T4.id AND T3.id  =  T4.end_station_id WHERE T1.city  =  \"Mountain View\" AND T3.city  =  \"Palo Alto\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the number of invoices from the US, grouped by state.",
        "query": "SELECT billing_state , Count ( * ) FROM invoices GROUP BY billing_state",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the number of invoices from the US, grouped by state.",
        "query": "SELECT billing_state , Count ( * ) FROM invoices GROUP BY billing_state",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all Rock tracks that are stored on MPEG audio files?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the description of the claim status \"Open\"?",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the description of the claim status \"Open\"?",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the description of the claim status \"Open\"?",
        "query": "SELECT T2.Claim_Status_Description FROM Claim_Headers AS T1 JOIN Claims_Processing_Stages AS T2 WHERE T1.Claim_Status_Code = value",
        "gold_parse": "SELECT claim_status_description FROM claims_processing_stages WHERE claim_status_name  =  \"Open\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "query": "SELECT Claim_Outcome_Code FROM Claims_Processing GROUP BY Claim_Outcome_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What is the name of the claim processing stage that most of the claims are on?",
        "query": "SELECT Claim_Outcome_Code FROM Claims_Processing GROUP BY Claim_Outcome_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.claim_status_name FROM claims_processing AS t1 JOIN claims_processing_stages AS t2 ON t1.claim_stage_id  =  t2.claim_stage_id GROUP BY t1.claim_stage_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.long < value",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all stations that have a latitude above 37.4 and have never had less than 7 bikes available?",
        "query": "SELECT T1.id FROM station AS T1 WHERE T1.long > value INTERSECT SELECT T2.station_id FROM station AS T1 JOIN status AS T2 ON T1.id = T2.station_id WHERE T1.long < value",
        "gold_parse": "SELECT id FROM station WHERE lat  >  37.4 EXCEPT SELECT station_id FROM status GROUP BY station_id HAVING min(bikes_available)  <  7",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the students ids of students who have more than one allergy?",
        "query": "SELECT StuID FROM Student GROUP BY Major HAVING Count ( * ) > value",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the students ids of students who have more than one allergy?",
        "query": "SELECT StuID FROM Student GROUP BY Major HAVING Count ( * ) > value",
        "gold_parse": "SELECT StuID FROM Has_allergy GROUP BY StuID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "query": "SELECT DISTINCT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "query": "SELECT DISTINCT T1.first_name FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.first_name = value AND T2.last_name = value",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all the tracks that are in both the Movies and music playlists?",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' INTERSECT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by food related allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by food related allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Has_allergy AS T1 JOIN Allergy_type AS T2 ON T1.allergy  =  T2.allergy WHERE T2.allergytype  =  \"food\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return the average mean temperature of August there.",
        "query": "SELECT Avg ( duration ) , start_date FROM trip GROUP BY zip_code",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "query": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "query": "SELECT * , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer is associated with the latest policy?",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.End_Date Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer is associated with the latest policy?",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID ORDER BY T2.End_Date Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.start_date  =  (SELECT max(start_date) FROM policies)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "query": "SELECT min_temperature_f FROM weather WHERE zip_code = value ORDER BY min_temperature_f Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the 3 most common cloud cover rates in the region of zip code 94107?",
        "query": "SELECT min_temperature_f FROM weather WHERE zip_code = value ORDER BY min_temperature_f Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value UNION SELECT roomName , decor FROM Rooms WHERE basePrice > value",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the room names and ids of all the rooms that cost more than 160 and can accommodate more than two people.",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value UNION SELECT roomName , decor FROM Rooms WHERE basePrice > value",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "query": "SELECT LName , Age FROM Student WHERE Sex = value INTERSECT SELECT LName , Age FROM Student WHERE Sex = value",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the last name and age of the student who has allergy to both milk and cat.",
        "query": "SELECT LName , Age FROM Student WHERE Sex = value INTERSECT SELECT LName , Age FROM Student WHERE Sex = value",
        "gold_parse": "SELECT lname ,  age FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" INTERSECT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year > value OR Year > value",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "correctness": 0
    },
    {
        "db_id": "theme_gallery",
        "question": "Count the number of exhibitions that happened in or after 2005.",
        "query": "SELECT Count ( * ) FROM exhibition WHERE Year > value OR Year > value",
        "gold_parse": "SELECT count(*) FROM exhibition WHERE YEAR  >=  2005",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "query": "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the full name of employee who supported the most number of customers.",
        "query": "SELECT first_name , last_name FROM employees GROUP BY first_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.first_name , T1.last_name FROM employees AS T1 JOIN customers AS T2 ON T1.id  =  T2.support_rep_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "query": "SELECT Name FROM people WHERE Height > value OR Height > value",
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the names of people who have a height greater than 200 or less than 190?",
        "query": "SELECT Name FROM people WHERE Height > value OR Height > value",
        "gold_parse": "SELECT name FROM people WHERE height  >  200 OR height  <  190",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many king beds are there?",
        "query": "SELECT Count ( * ) FROM Rooms",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many king beds are there?",
        "query": "SELECT Count ( * ) FROM Rooms",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the largest number of reservations?",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T2.Room ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has the largest number of reservations?",
        "query": "SELECT T1.decor FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room GROUP BY T2.Room ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T1.Room ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "query": "SELECT T1.Fname , T1.Sex FROM Student AS T1 EXCEPT SELECT T1.Fname , T1.Sex FROM Allergy_Type AS T2 JOIN Has_Allergy AS T3 ON T2.Allergy = T3.Allergy JOIN Student AS T1 ON T3.StuID = T1.StuID WHERE T2.Allergy = value",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the first name and gender of the student who has allergy to milk but not cat.",
        "query": "SELECT T1.Fname , T1.Sex FROM Student AS T1 EXCEPT SELECT T1.Fname , T1.Sex FROM Allergy_Type AS T2 JOIN Has_Allergy AS T3 ON T2.Allergy = T3.Allergy JOIN Student AS T1 ON T3.StuID = T1.StuID WHERE T2.Allergy = value",
        "gold_parse": "SELECT fname ,  sex FROM Student WHERE StuID IN (SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Milk\" EXCEPT SELECT StuID FROM Has_allergy WHERE Allergy  =  \"Cat\")",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the station station and end station for the trips with the three smallest ids?",
        "query": "SELECT T1.name , T2.start_station_name FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT start_station_name ,  end_station_name FROM trip ORDER BY id LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all main industry for all companies.",
        "query": "SELECT Company FROM company",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all main industry for all companies.",
        "query": "SELECT Company FROM company",
        "gold_parse": "SELECT DISTINCT main_industry FROM company",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are all the distinct participant ids who attended any events?",
        "query": "SELECT DISTINCT Participant_ID FROM Participants_in_Events",
        "gold_parse": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are all the distinct participant ids who attended any events?",
        "query": "SELECT DISTINCT Participant_ID FROM Participants_in_Events",
        "gold_parse": "SELECT count(DISTINCT participant_id) FROM participants_in_Events",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "SELECT * FROM Allergy_Type AS T1 EXCEPT SELECT T2.StuID FROM Student AS T2",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "SELECT * FROM Allergy_Type AS T1 EXCEPT SELECT T2.StuID FROM Student AS T2",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all student ids who are older than 20.",
        "query": "SELECT Major FROM Student WHERE Age > value",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all student ids who are older than 20.",
        "query": "SELECT Major FROM Student WHERE Age > value",
        "gold_parse": "SELECT StuID FROM Student WHERE age  >  20",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the title of the album that was released by the artist whose name has the phrase 'Led'?",
        "query": "SELECT T2.title FROM sqlite_sequence AS T1 JOIN albums AS T2 WHERE T1.seq LIKE value",
        "gold_parse": "SELECT T2.title FROM artists AS T1 JOIN albums AS T2 ON T1.id  =  T2.artist_id WHERE T1.name LIKE '%Led%'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the savings balance of the account belonging to the customer with the highest checking balance?",
        "query": "SELECT balance FROM SAVINGS ORDER BY balance Desc LIMIT value",
        "gold_parse": "SELECT T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the shortest trip?",
        "query": "SELECT start_station_id FROM trip ORDER BY duration Asc LIMIT value",
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the id of the shortest trip?",
        "query": "SELECT start_station_id FROM trip ORDER BY duration Asc LIMIT value",
        "gold_parse": "SELECT id FROM trip ORDER BY duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are there?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are there?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many tracks are in each genre?",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many tracks are in each genre?",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergies with number of students affected.",
        "query": "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show all allergies with number of students affected.",
        "query": "SELECT Sex , Count ( * ) FROM Student GROUP BY Sex",
        "gold_parse": "SELECT Allergy ,  count(*) FROM Has_allergy GROUP BY Allergy",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "How many claim processing stages are there in total?",
        "query": "SELECT Count ( * ) FROM Claim_Headers WHERE Claim_Type_Code = value",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "How many claim processing stages are there in total?",
        "query": "SELECT Count ( * ) FROM Claim_Headers WHERE Claim_Type_Code = value",
        "gold_parse": "SELECT count(*) FROM claims_processing_stages",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the state in the US with the most invoices.",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the state in the US with the most invoices.",
        "query": "SELECT billing_state FROM invoices GROUP BY billing_state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT billing_state ,  COUNT(*) FROM invoices WHERE billing_country  =  \"USA\" GROUP BY billing_state ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "query": "SELECT roomName FROM Rooms WHERE basePrice < value INTERSECT SELECT roomName FROM Rooms WHERE basePrice > value",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the names of all modern rooms with a base price below $160 and two beds.",
        "query": "SELECT roomName FROM Rooms WHERE basePrice < value INTERSECT SELECT roomName FROM Rooms WHERE basePrice > value",
        "gold_parse": "SELECT roomName FROM Rooms WHERE basePrice  <  160 AND beds =  2 AND decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = value OR T3.Claim_Status_Code = value",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Find the names of customers who either have an deputy policy or uniformed policy.",
        "query": "SELECT T1.Customer_ID FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID WHERE T3.Claim_Status_Code = value OR T3.Claim_Status_Code = value",
        "gold_parse": "SELECT DISTINCT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.policy_type_code  =  \"Deputy\" OR t1.policy_type_code  =  \"Uniform\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find number of tracks in each genre?",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find number of tracks in each genre?",
        "query": "SELECT name , Count ( * ) FROM genres GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "query": "SELECT T1.name , Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id",
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each station, return its longitude and the average duration of trips that started from the station.",
        "query": "SELECT T1.name , Avg ( T2.duration ) FROM station AS T1 JOIN trip AS T2 GROUP BY T2.start_station_id",
        "gold_parse": "SELECT T1.name ,  T1.long ,  avg(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.start_station_id GROUP BY T2.start_station_id",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many female students have milk or egg allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value OR T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many female students have milk or egg allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type AS T1 JOIN Has_Allergy AS T2 ON T1.Allergy = T2.Allergy JOIN Student AS T3 ON T2.StuID = T3.StuID WHERE T3.Sex = value OR T1.AllergyType = value",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "query": "SELECT date FROM weather ORDER BY min_humidity Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "query": "SELECT date FROM weather ORDER BY min_humidity Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Who is the composer of track Fast As a Shark?",
        "query": "SELECT T1.seq FROM sqlite_sequence AS T1 JOIN tracks AS T2 WHERE T2.name = value",
        "gold_parse": "SELECT composer FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many distinct allergies are there?",
        "query": "SELECT Count ( DISTINCT Sex ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many distinct allergies are there?",
        "query": "SELECT Count ( DISTINCT Sex ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT allergytype) FROM Allergy_type",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "query": "SELECT city , Count ( * ) FROM employees WHERE city = value GROUP BY city",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Find the number of employees whose title is IT Staff from each city?",
        "query": "SELECT city , Count ( * ) FROM employees WHERE city = value GROUP BY city",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "query": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the name corresponding to the accoung with the lowest sum of checking and savings balances?",
        "query": "SELECT T1.name , T3.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid JOIN CHECKING AS T3 ON T1.custid = T3.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T2.balance + T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "query": "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT value",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Which room has cheapest base price? List the room's name and the base price.",
        "query": "SELECT roomName , decor FROM Rooms ORDER BY basePrice Asc LIMIT value",
        "gold_parse": "SELECT roomName ,  basePrice FROM Rooms ORDER BY basePrice ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the name, latitude, and city of the station that is located the furthest South?",
        "query": "SELECT name , city , long FROM station ORDER BY long Desc LIMIT value",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the name, latitude, and city of the station that is located the furthest South?",
        "query": "SELECT name , city , long FROM station ORDER BY long Desc LIMIT value",
        "gold_parse": "SELECT name ,  lat ,  city FROM station ORDER BY lat LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the titles of all the Aerosmith albums?",
        "query": "SELECT title FROM albums",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the titles of all the Aerosmith albums?",
        "query": "SELECT title FROM albums",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN artists AS T2 ON  T1.artist_id = T2.id WHERE T2.name = \"Aerosmith\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many employees who are IT staff are from each city?",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many employees who are IT staff are from each city?",
        "query": "SELECT city , Count ( * ) FROM employees GROUP BY city",
        "gold_parse": "SELECT count(*) ,  city FROM employees WHERE title  =  'IT Staff' GROUP BY city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Sales_billion Desc LIMIT value",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "find the location and Representative name of the gas stations owned by the companies with top 3 Asset amounts.",
        "query": "SELECT T2.Location , T2.Representative_Name FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID ORDER BY T1.Sales_billion Desc LIMIT value",
        "gold_parse": "SELECT T3.location ,  T3.Representative_Name FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id ORDER BY T2.Assets_billion DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "query": "SELECT T2.Location FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID WHERE T1.Sales_billion > value",
        "gold_parse": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all locations where a gas station for company with market value greater than 100 is located.",
        "query": "SELECT T2.Location FROM company AS T1 JOIN gas_station AS T2 JOIN station_company AS T3 ON T1.Company_ID = T3.Company_ID AND T3.Station_ID = T2.Station_ID WHERE T1.Sales_billion > value",
        "gold_parse": "SELECT T3.location FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id JOIN gas_station AS T3 ON T1.station_id  =  T3.station_id WHERE T2.market_value  >  100",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "query": "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = value",
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the total and maximum duration of trips with bike id 636?",
        "query": "SELECT Sum ( duration ) , Sum ( duration ) FROM trip WHERE bike_id = value",
        "gold_parse": "SELECT sum(duration) ,  max(duration) FROM trip WHERE bike_id  =  636",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "query": "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the different names for each station that has ever had 7 bikes available?",
        "query": "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "query": "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Return the unique name for stations that have ever had 7 bikes available.",
        "query": "SELECT DISTINCT name FROM station EXCEPT SELECT DISTINCT name FROM station",
        "gold_parse": "SELECT DISTINCT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id WHERE T2.bikes_available  =  7",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "query": "SELECT Position FROM pilot WHERE Join_Year > value INTERSECT SELECT Position FROM pilot WHERE Join_Year < value",
        "gold_parse": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "correctness": 0
    },
    {
        "db_id": "pilot_record",
        "question": "Show the pilot positions that have both pilots joining after year 2005 and pilots joining before 2000.",
        "query": "SELECT Position FROM pilot WHERE Join_Year > value INTERSECT SELECT Position FROM pilot WHERE Join_Year < value",
        "gold_parse": "SELECT POSITION FROM pilot WHERE Join_Year\t <  2000 INTERSECT SELECT POSITION FROM pilot WHERE Join_Year\t >  2005",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "query": "SELECT Count ( * ) FROM Student WHERE Age > value AND Sex = value EXCEPT SELECT Sex FROM Student WHERE Age > value",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Find the number of students who are older than 18 and do not have allergy to either food or animal.",
        "query": "SELECT Count ( * ) FROM Student WHERE Age > value AND Sex = value EXCEPT SELECT Sex FROM Student WHERE Age > value",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all playlist.",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT name FROM playlists",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of all playlist.",
        "query": "SELECT name FROM tracks",
        "gold_parse": "SELECT name FROM playlists",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the total number of king beds available.",
        "query": "SELECT Count ( * ) FROM Rooms",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the total number of king beds available.",
        "query": "SELECT Count ( * ) FROM Rooms",
        "gold_parse": "SELECT sum(beds) FROM Rooms WHERE bedtype  =  'King'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List the name of tracks belongs to genre Rock and whose media type is MPEG audio file.",
        "query": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value INTERSECT SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id WHERE T1.name = value",
        "gold_parse": "SELECT T2.name FROM genres AS T1 JOIN tracks AS T2 ON T1.id = T2.genre_id JOIN media_types AS T3 ON T3.id = T2.media_type_id WHERE T1.name = \"Rock\" AND T3.name = \"MPEG audio file\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN trip AS T2 WHERE T2.duration > = value",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids and names of all start stations that were the beginning of at least 200 trips?",
        "query": "SELECT T1.id , T1.name FROM station AS T1 JOIN trip AS T2 WHERE T2.duration > = value",
        "gold_parse": "SELECT start_station_id ,  start_station_name FROM trip GROUP BY start_station_name HAVING COUNT(*)  >=  200",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude in San Jose?",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the average latitude and longitude in San Jose?",
        "query": "SELECT Avg ( long ) , Avg ( long ) FROM station WHERE city = value",
        "gold_parse": "SELECT avg(lat) ,  avg(long) FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer have the most policies? Give me the customer details.",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_Details ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer have the most policies? Give me the customer details.",
        "query": "SELECT Customer_Details FROM Customers GROUP BY Customer_Details ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t2.customer_details ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are the ids and details of events that have more than one participants?",
        "query": "SELECT Event_ID , Event_Details FROM Events GROUP BY Event_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "What are the ids and details of events that have more than one participants?",
        "query": "SELECT Event_ID , Event_Details FROM Events GROUP BY Event_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.event_id ,  T1.event_details FROM EVENTS AS T1 JOIN Participants_in_Events AS T2 ON T1.Event_ID  =  T2.Event_ID GROUP BY T1.Event_ID HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many allergies have type animal?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many allergies have type animal?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Allergy_type WHERE allergytype  =  \"animal\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the number of invoices and total money billed in them from CA?",
        "query": "SELECT Sum ( total ) , Sum ( total ) FROM invoices",
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the number of invoices and total money billed in them from CA?",
        "query": "SELECT Sum ( total ) , Sum ( total ) FROM invoices",
        "gold_parse": "SELECT billing_state ,  COUNT(*) ,  SUM(total) FROM invoices WHERE billing_state  =  \"CA\"",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_Details ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "Which customer made the largest amount of claim in a single claim? Return the customer details.",
        "query": "SELECT T1.Customer_Details FROM Customers AS T1 JOIN Policies AS T2 ON T1.Customer_ID = T2.Customer_ID JOIN Claim_Headers AS T3 ON T2.Policy_ID = T3.Policy_ID GROUP BY T1.Customer_Details ORDER BY Sum ( T3.Amount_Claimed ) Desc LIMIT value",
        "gold_parse": "SELECT t3.customer_details FROM claim_headers AS t1 JOIN policies AS t2 ON t1.policy_id  =  t2.policy_id JOIN customers AS t3 ON t2.customer_id  =  t3.customer_id WHERE t1.amount_claimed  =  (SELECT max(amount_claimed) FROM claim_headers)",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which students are unaffected by allergies?",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Sex = value",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which students are unaffected by allergies?",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Sex = value",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which allergy is the most common?",
        "query": "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Which allergy is the most common?",
        "query": "SELECT Sex FROM Student GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Allergy FROM Has_allergy GROUP BY Allergy ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
        "query": "SELECT start_date FROM trip WHERE duration BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have an average sea level pressure between 30.3 and 31?",
        "query": "SELECT start_date FROM trip WHERE duration BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many advisors are there?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(DISTINCT advisor) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
        "query": "SELECT name FROM station WHERE city = value UNION SELECT name FROM station WHERE city = value",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations that have more than 10 bikes available and are not located in San Jose?",
        "query": "SELECT name FROM station WHERE city = value UNION SELECT name FROM station WHERE city = value",
        "gold_parse": "SELECT T1.name FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(bikes_available)  >  10 EXCEPT SELECT name FROM station WHERE city  =  \"San Jose\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "query": "SELECT Sum ( Adults ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many kids stay in the rooms reserved by ROY SWEAZY?",
        "query": "SELECT Sum ( Adults ) FROM Reservations WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT kids FROM Reservations WHERE FirstName = \"ROY\" AND LastName  =  \"SWEAZY\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
        "query": "SELECT Avg ( duration ) , start_date FROM trip WHERE start_station_name = value GROUP BY start_date",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, what is the average mean temperature for all dates that start with '8'?",
        "query": "SELECT Avg ( duration ) , start_date FROM trip WHERE start_station_name = value GROUP BY start_date",
        "gold_parse": "SELECT zip_code  ,  avg(mean_temperature_f) FROM weather WHERE date LIKE \"8/%\" GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all headquarters without a company in banking industry.",
        "query": "SELECT Headquarters FROM company EXCEPT SELECT Headquarters FROM company WHERE Company = value",
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all headquarters without a company in banking industry.",
        "query": "SELECT Headquarters FROM company EXCEPT SELECT Headquarters FROM company WHERE Company = value",
        "gold_parse": "SELECT headquarters FROM company EXCEPT SELECT headquarters FROM company WHERE main_industry  =  'Banking'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the names of all tracks that are on the Movies playlist but not in the music playlist?",
        "query": "SELECT name FROM tracks EXCEPT SELECT name FROM tracks",
        "gold_parse": "SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Movies' EXCEPT SELECT T1.name FROM tracks AS T1 JOIN playlist_tracks AS T2 ON T1.id  =  T2.track_id JOIN playlists AS T3 ON T2.playlist_id  =  T3.id WHERE T3.name  =  'Music'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "query": "SELECT Count ( * ) FROM Participants WHERE Participant_Details = value",
        "gold_parse": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_in_alabama",
        "question": "How many events had participants whose details had the substring 'Dr.'",
        "query": "SELECT Count ( * ) FROM Participants WHERE Participant_Details = value",
        "gold_parse": "SELECT count(*) FROM participants AS T1 JOIN Participants_in_Events AS T2 ON T1.Participant_ID  =  T2.Participant_ID WHERE T1.participant_details LIKE '%Dr.%'",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "query": "SELECT Company , Count ( * ) FROM company GROUP BY Company_ID",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "For each company id, what are the companies and how many gas stations does each one operate?",
        "query": "SELECT Company , Count ( * ) FROM company GROUP BY Company_ID",
        "gold_parse": "SELECT T2.company ,  count(*) FROM station_company AS T1 JOIN company AS T2 ON T1.company_id  =  T2.company_id GROUP BY T1.company_id",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "query": "SELECT first_name , last_name FROM employees GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What are the first and last names of the top 10 longest-serving employees?",
        "query": "SELECT first_name , last_name FROM employees GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name , last_name FROM employees ORDER BY hire_date ASC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "query": "SELECT Headquarters FROM company WHERE Main_Industry = value INTERSECT SELECT Headquarters FROM company WHERE Company = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show all headquarters with both a company in banking industry and a company in Oil and gas.",
        "query": "SELECT Headquarters FROM company WHERE Main_Industry = value INTERSECT SELECT Headquarters FROM company WHERE Company = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the installation date for each ending station on all the trips?",
        "query": "SELECT start_date FROM trip",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the installation date for each ending station on all the trips?",
        "query": "SELECT start_date FROM trip",
        "gold_parse": "SELECT T1.id ,  T2.installation_date FROM trip AS T1 JOIN station AS T2 ON T1.end_station_id  =  T2.id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many milliseconds long is Fast As a Shark?",
        "query": "SELECT Sum ( milliseconds ) FROM tracks",
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How many milliseconds long is Fast As a Shark?",
        "query": "SELECT Sum ( milliseconds ) FROM tracks",
        "gold_parse": "SELECT milliseconds FROM tracks WHERE name = \"Fast As a Shark\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "query": "SELECT Headquarters FROM company WHERE Company = value INTERSECT SELECT Headquarters FROM company WHERE Company = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What are the headquarters that have both a company in the banking and 'oil and gas' industries?",
        "query": "SELECT Headquarters FROM company WHERE Company = value INTERSECT SELECT Headquarters FROM company WHERE Company = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' INTERSECT SELECT headquarters FROM company WHERE main_industry  =  'Oil and gas'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "query": "SELECT T2.start_station_id , T1.name , T2.subscription_type FROM station AS T1 JOIN trip AS T2",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "query": "SELECT T2.start_station_id , T1.name , T2.subscription_type FROM station AS T1 JOIN trip AS T2",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names and balances of checking accounts belonging to the customer with the lowest savings balance?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How much money did Lucas Mancini spend?",
        "query": "SELECT T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.last_name = value",
        "gold_parse": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "How much money did Lucas Mancini spend?",
        "query": "SELECT T1.hire_date FROM employees AS T1 JOIN customers AS T2 ON T1.id = T2.support_rep_id WHERE T2.last_name = value",
        "gold_parse": "SELECT sum(T2.total) FROM customers AS T1 JOIN invoices AS T2 ON T1.id = T2.customer_id WHERE T1.first_name = \"Lucas\" AND T1.last_name = \"Mancini\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are all the different food allergies?",
        "query": "SELECT DISTINCT AllergyType FROM Allergy_Type",
        "gold_parse": "SELECT DISTINCT allergy FROM Allergy_type WHERE allergytype  =  \"food\"",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "query": "SELECT Rank , Company , Market_Value FROM company WHERE Main_Industry = value ORDER BY Sales_billion Asc",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "What is the rank, company, and market value of every comapny in the banking industry ordered by sales and profits?",
        "query": "SELECT Rank , Company , Market_Value FROM company WHERE Main_Industry = value ORDER BY Sales_billion Asc",
        "gold_parse": "SELECT rank ,  company ,  market_value FROM company WHERE main_industry  =  'Banking' ORDER BY sales_billion ,  profits_billion",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "query": "SELECT name FROM station WHERE long < value",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names of all stations with a latitude smaller than 37.5?",
        "query": "SELECT name FROM station WHERE long < value",
        "gold_parse": "SELECT name FROM station WHERE lat  <  37.5",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "query": "SELECT id , name FROM architect GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the ids and names of the architects who built at least 3 bridges ?",
        "query": "SELECT id , name FROM architect GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of artist who performed \"Le Pop\"?",
        "query": "SELECT Firstname , Lastname FROM Band WHERE Firstname = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many projects are there?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Projects",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many projects are there?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Projects",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.DNO NOT IN ( SELECT T2.Major FROM Student AS T2 )",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "query": "SELECT T1.DName FROM Department AS T1 WHERE T1.DNO NOT IN ( SELECT T2.Major FROM Student AS T2 )",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of the artist \"Triumfall\"?",
        "query": "SELECT Famous_Title FROM artist WHERE Famous_Release_date = value",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date > value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after 1978-06-26.",
        "query": "SELECT problem_id FROM Problem_Log WHERE log_entry_date > value",
        "gold_parse": "SELECT problem_id FROM problems WHERE date_problem_reported > \"1978-06-26\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "List the type of bed and name of all traditional rooms.",
        "query": "SELECT bedType , roomName FROM Rooms",
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "List the type of bed and name of all traditional rooms.",
        "query": "SELECT bedType , roomName FROM Rooms",
        "gold_parse": "SELECT roomName ,  bedType FROM Rooms WHERE decor = \"traditional\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.JOB_TITLE = value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee number, name( first name and last name ) and job title for all employees whose salary is more than any salary of those employees whose job title is PU_MAN.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.JOB_TITLE = value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "query": "SELECT Document_Type_Name , Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "query": "SELECT Document_Type_Name , Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many times the number of adults and kids staying in a room reached the maximum capacity of the room?",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the first and last names of the performer who was in the back stage position for the song \"Badlands\"?",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "query": "SELECT Count ( * ) FROM Product WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems did the product called \"voluptatem\" have in record?",
        "query": "SELECT Count ( * ) FROM Product WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_closed > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.date_problem_closed > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "query": "SELECT Project_ID FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are project ids of projects that have 2 or more corresponding documents?",
        "query": "SELECT Project_ID FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT project_id FROM Documents GROUP BY project_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "query": "SELECT T2.Name , T1.Name , T2.Hours FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T1.Name Asc",
        "gold_parse": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of each scientist, the names of the projects that they work on, and the hours for each of those projects, listed in alphabetical order by project name, then scientist name.",
        "query": "SELECT T2.Name , T1.Name , T2.Hours FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T1.Name Asc",
        "gold_parse": "SELECT T1.Name ,  T3.Name ,  T3.Hours FROM Scientists AS T1 JOIN AssignedTo AS T2 ON T1.SSN = T2.Scientist JOIN Projects AS T3 ON T2.Project = T3.Code ORDER BY T3.Name ,  T1.Name",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the number of vocal types used in song \"Le Pop\"",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(*) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the first and last name of the artist who performed back stage for the song \"Der Kapitan\"?",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID WHERE T2.Competition = value AND T2.Competition = value",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID WHERE T2.Competition = value AND T2.Competition = value",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Which members of \"Bootup Baltimore\" major in \"600\"? Give me their first names and last names.",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.major  =  \"600\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Bob.",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of persons who are friends with Bob.",
        "query": "SELECT name FROM PersonFriend WHERE friend = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Bob'",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the number of customers in total.",
        "query": "SELECT Count ( * ) FROM Products",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the number of customers in total.",
        "query": "SELECT Count ( * ) FROM Products",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the max and min grade point for all letter grade.",
        "query": "SELECT gradepoint , gradepoint FROM Gradeconversion WHERE lettergrade LIKE value",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the max and min grade point for all letter grade.",
        "query": "SELECT gradepoint , gradepoint FROM Gradeconversion WHERE lettergrade LIKE value",
        "gold_parse": "SELECT max(gradepoint) ,  min(gradepoint) FROM GRADECONVERSION",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the female friends of Alice.",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the female friends of Alice.",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all the information for all employees without any department number.",
        "query": "SELECT * FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all the information for all employees without any department number.",
        "query": "SELECT * FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "gold_parse": "SELECT * FROM employees WHERE department_id  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the names of females who are friends with Zach",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the names of females who are friends with Zach",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "query": "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems are reported by the staff with first name \"Christop\"? Show the descriptions of the problems.",
        "query": "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.City_ID > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.City_ID > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many different jobs are listed?",
        "query": "SELECT Count ( DISTINCT city ) FROM Person",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many different jobs are listed?",
        "query": "SELECT Count ( DISTINCT city ) FROM Person",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of locations.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the number of locations.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_locations",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the first and last name, department, city, and state province for each employee.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the first and last name, department, city, and state province for each employee.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T2.STATE_PROVINCE FROM employees AS T1 JOIN locations AS T2",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T2.department_name ,  T3.city ,  T3.state_province FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of rooms with a king bed.",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of rooms with a king bed.",
        "query": "SELECT Count ( * ) FROM Reservations WHERE CheckIn = value",
        "gold_parse": "SELECT count(*) FROM Rooms WHERE bedType  =  \"King\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the temperature of \"Shanghai\" city in January?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many people are older than every engineer?",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many people are older than every engineer?",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  (SELECT max(age) FROM person WHERE job  =  'engineer')",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instruments did the musician with the last name \"Heilo\" play in \"Badlands\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population < value",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have regional population above 8000000 or below 5000000?",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population < value",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Return the low and high estimates for all film markets.",
        "query": "SELECT Type , High_Estimate FROM film_market_estimation",
        "gold_parse": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Return the low and high estimates for all film markets.",
        "query": "SELECT Type , High_Estimate FROM film_market_estimation",
        "gold_parse": "SELECT Low_Estimate ,  High_Estimate FROM film_market_estimation",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "query": "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the unique ids of those departments where any manager is managing 4 or more employees.",
        "query": "SELECT DEPARTMENT_ID FROM departments GROUP BY DEPARTMENT_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the number of students that have at least one grade \"B\".",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the number of students that have at least one grade \"B\".",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first and last names of the instructors who teach the top 3 number of courses?",
        "query": "SELECT Fname , Lname FROM Faculty ORDER BY Rank Desc LIMIT value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with expenses.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with expenses.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "HOw many engineers are older than 30?",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "HOw many engineers are older than 30?",
        "query": "SELECT Count ( * ) FROM Person WHERE age > value",
        "gold_parse": "SELECT count(*) FROM Person WHERE age  >  30 AND job  =  'engineer'",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "How many companies operates airlines in each airport?",
        "query": "SELECT name , Count ( * ) FROM airport GROUP BY name",
        "gold_parse": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "How many companies operates airlines in each airport?",
        "query": "SELECT name , Count ( * ) FROM airport GROUP BY name",
        "gold_parse": "SELECT T3.id ,  count(*) FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id JOIN airport AS T3 ON T2.airport_id  =  T3.id GROUP BY T3.id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the first name and job id for all employees in the Finance department.",
        "query": "SELECT T2.FIRST_NAME , T2.SALARY FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT T1.first_name ,  T1.job_id FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T2.department_name  =  'Finance'",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Badlands\"? Show the first name and the last name.",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the average grade point of student whose last name is Smith.",
        "query": "SELECT Avg ( T2.Grade ) FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID WHERE T1.LName = value",
        "gold_parse": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "query": "SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value UNION SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids, full names, and job ids for employees who make more than the highest earning employee with title PU_MAN?",
        "query": "SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value UNION SELECT T2.EMPLOYEE_ID , T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE = value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name ,  job_id FROM employees WHERE salary  >  ( SELECT max(salary) FROM employees WHERE job_id  =  'PU_MAN' )",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "query": "SELECT T1.Firstname , T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate WHERE T2.StagePosition = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who is performing in the back stage position for the song \"Der Kapitan\"? Show the first name and last name.",
        "query": "SELECT T1.Firstname , T1.Lastname FROM Band AS T1 JOIN Performance AS T2 ON T1.Id = T2.Bandmate WHERE T2.StagePosition = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Der Kapitan\" AND T1.StagePosition  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the asset id, details, make and model for every asset.",
        "query": "SELECT asset_id , asset_details , other_asset_details FROM Assets",
        "gold_parse": "SELECT asset_id ,  asset_details ,  asset_make ,  asset_model FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all of Alice's friends of friends?",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all of Alice's friends of friends?",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_last_name = value AND T2.staff_first_name = value INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the products which have problems reported by both Lacey Bosco and Kenton Champlin?",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_last_name = value AND T2.staff_first_name = value INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of rooms with king bed for each decor type.",
        "query": "SELECT Count ( * ) , bedType FROM Rooms GROUP BY bedType",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the number of rooms with king bed for each decor type.",
        "query": "SELECT Count ( * ) , bedType FROM Rooms GROUP BY bedType",
        "gold_parse": "SELECT decor ,  count(*) FROM Rooms WHERE bedType = \"King\" GROUP BY decor",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date = value",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles of the artist called \"Triumfall\".",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date = value",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist  =  \"Triumfall\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name ! = value",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name ! = value",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees who are managers?",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees who are managers?",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "query": "SELECT Date_of_ceremony FROM music_festival GROUP BY Music_Festival HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony at music festivals corresponding to volumes that lasted more than 2 weeks on top?",
        "query": "SELECT Date_of_ceremony FROM music_festival GROUP BY Music_Festival HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Date_of_ceremony FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "List the clubs having \"Davis Steven\" as a member.",
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = value",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "List the clubs having \"Davis Steven\" as a member.",
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = value",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
        "gold_parse": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of the employees who don't authorize destruction for any document.",
        "query": "SELECT T1.Employee_ID FROM Employees AS T1 EXCEPT SELECT T2.Destroyed_by_Employee_ID FROM Documents_to_be_Destroyed AS T2",
        "gold_parse": "SELECT employee_id FROM Employees EXCEPT SELECT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of the employees whose salary if within the range of smallest salary and 2500.",
        "query": "SELECT * FROM employees ORDER BY SALARY Asc LIMIT value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of all males in order of their age.",
        "query": "SELECT name , age FROM Person ORDER BY gender Asc",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of all males in order of their age.",
        "query": "SELECT name , age FROM Person ORDER BY gender Asc",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all friends who are from New York?",
        "query": "SELECT name FROM Person WHERE city = value",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all friends who are from New York?",
        "query": "SELECT name FROM Person WHERE city = value",
        "gold_parse": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.city  =  'new york city'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the full names of faculties who are members of department with department number 520.",
        "query": "SELECT T1.Fname , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "gold_parse": "SELECT T1.Fname ,  T1.Lname FROM FACULTY AS T1 JOIN MEMBER_OF AS T2 ON T1.FacID  =  T2.FacID WHERE T2.DNO  =  520",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of the 3 instructors who teach the most courses?",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY Rank , Lname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "query": "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT value",
        "gold_parse": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the song in the volume that has spent the most weeks on top?",
        "query": "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT value",
        "gold_parse": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many members of \"Bootup Baltimore\" are older than 18?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND Age > value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.age  >  18",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that have produced the most songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the musician that have produced the most songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of the person who has no student friends.",
        "query": "SELECT name FROM Person EXCEPT SELECT name FROM Person",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of the person who has no student friends.",
        "query": "SELECT name FROM Person EXCEPT SELECT name FROM Person",
        "gold_parse": "SELECT name FROM person EXCEPT SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.job  =  'student'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and cities of employees who have the letter Z in their first names?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE FIRST_NAME LIKE value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and cities of employees who have the letter Z in their first names?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE FIRST_NAME LIKE value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the number of clubs where \"Tracy Kim\" is a member.",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.SALARY FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last name), and salary of those employees who working in any department located in London.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.SALARY FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN  locations AS T3 ON T2.location_id  =  T3.location_id WHERE  T3.city  =  'London'",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "How many distinct artists have volumes?",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "How many distinct artists have volumes?",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "query": "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME ! = value",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "query": "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME ! = value",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the names of departments that have at least one employee.",
        "query": "SELECT DEPARTMENT_NAME FROM departments GROUP BY DEPARTMENT_NAME HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the names of departments that have at least one employee.",
        "query": "SELECT DEPARTMENT_NAME FROM departments GROUP BY DEPARTMENT_NAME HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T2.department_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "query": "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Give me a list of descriptions of the problems that are reported by the staff whose first name is Christop.",
        "query": "SELECT T1.log_entry_description FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T1.problem_description FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Christop\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many documents have document type code CV or BK?",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many documents have document type code CV or BK?",
        "query": "SELECT Count ( * ) FROM All_Documents WHERE Document_Type_Code = value",
        "gold_parse": "SELECT count(*) FROM All_documents WHERE document_type_code  =  \"CV\" OR document_type_code  =  \"BK\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "query": "SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = value AND T1.Building = value",
        "gold_parse": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the rooms of faculties with rank professor who live in building NEB.",
        "query": "SELECT T2.Room FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Rank = value AND T1.Building = value",
        "gold_parse": "SELECT Room FROM FACULTY WHERE Rank  =  \"Professor\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value AND T2.staff_first_name = value INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which products have problems reported by both the staff named Lacey Bosco and the staff named Kenton Champlin?",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value AND T2.staff_first_name = value INTERSECT SELECT T1.product_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T2.staff_first_name = value",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Lacey\" AND T3.staff_last_name = \"Bosco\" INTERSECT SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T3.staff_first_name = \"Kenton\" AND T3.staff_last_name = \"Champlin\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "what is the GDP of the city with the largest population.",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "what is the GDP of the city with the largest population.",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "query": "SELECT Industry FROM Companies ORDER BY Industry Desc",
        "gold_parse": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Please show the industries of companies in descending order of the number of companies.",
        "query": "SELECT Industry FROM Companies ORDER BY Industry Desc",
        "gold_parse": "SELECT Industry FROM Companies GROUP BY Industry ORDER BY COUNT(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids for documents that have the budget description 'Government'.",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "query": "SELECT maintenance_contract_company_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "query": "SELECT maintenance_contract_company_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "query": "SELECT EMAIL FROM employees WHERE SALARY > = value AND SALARY < = value",
        "gold_parse": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the emails of the employees who have no commission percentage and salary within the range 7000 to 12000 and works in that department which number is 50.",
        "query": "SELECT EMAIL FROM employees WHERE SALARY > = value AND SALARY < = value",
        "gold_parse": "SELECT email FROM employees WHERE commission_pct  =  \"null\" AND salary BETWEEN 7000 AND 12000 AND department_id = 50",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me the temperature of Shanghai in January.",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me the temperature of Shanghai in January.",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.City = value AND T2.Year = value",
        "gold_parse": "SELECT T2.Jan FROM city AS T1 JOIN temperature AS T2 ON T1.city_id = T2.city_id WHERE T1.city = \"Shanghai\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value GROUP BY T2.friend HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value GROUP BY T2.friend HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the artist who sang the most songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the last name of the artist who sang the most songs?",
        "query": "SELECT Lastname FROM Band GROUP BY Lastname ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId GROUP BY lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the song with the most vocals?",
        "query": "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What is the song with the most vocals?",
        "query": "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "query": "SELECT COUNTRY_ID , COUNTRY_NAME FROM countries",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are all the employee ids and the names of the countries in which they work?",
        "query": "SELECT COUNTRY_ID , COUNTRY_NAME FROM countries",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "query": "SELECT Author , Scores FROM submission",
        "gold_parse": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the authors of submissions and the acceptance results of their submissions.",
        "query": "SELECT Author , Scores FROM submission",
        "gold_parse": "SELECT T2.Author ,  T1.Result FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the document ids for the budget type code 'SF'?",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Type_Code = value",
        "gold_parse": "SELECT document_id FROM Documents_with_expenses WHERE budget_type_code  =  'SF'",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_end_date Asc LIMIT value",
        "gold_parse": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which company started the earliest the maintenance contract? Show the company name.",
        "query": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id = T2.maintenance_contract_company_id ORDER BY T2.contract_end_date Asc LIMIT value",
        "gold_parse": "SELECT T1.company_name FROM Third_Party_Companies AS T1 JOIN Maintenance_Contracts AS T2 ON T1.company_id  =  T2.maintenance_contract_company_id ORDER BY T2.contract_start_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE LAST_NAME LIKE value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who contain a letter z to their first name and also display their last name, city.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE LAST_NAME LIKE value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T3.city FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id WHERE T1.first_name LIKE '%z%'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents with budget types described as 'Government'.",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Description = value",
        "gold_parse": "SELECT T1.document_id FROM Documents_with_expenses AS T1 JOIN Ref_Budget_Codes AS T2 ON T1.Budget_Type_code  =  T2.Budget_Type_code WHERE T2.budget_type_Description  =  \"Government\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Score = value",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the venue of the competition \"1994 FIFA World Cup qualification\" which was hosted by \"Nanjing ( Jiangsu )\".",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Score = value",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many courses have more than 2 credits?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many courses have more than 2 credits?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM COURSE WHERE Credits  >  2",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Please list the countries and years of film market estimations.",
        "query": "SELECT T2.Country , T3.Year FROM film AS T1 JOIN market AS T2 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID AND T3.Market_ID = T2.Market_ID AND T1.Film_ID = T3.Film_ID WHERE T1.Title = value",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Please list the countries and years of film market estimations.",
        "query": "SELECT T2.Country , T3.Year FROM film AS T1 JOIN market AS T2 JOIN film_market_estimation AS T3 ON T1.Film_ID = T3.Film_ID AND T3.Market_ID = T2.Market_ID AND T1.Film_ID = T3.Film_ID WHERE T1.Title = value",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is \"the date in location from\" and \"the date in location to\" for the document with name \"Robin CV\"?",
        "query": "SELECT T2.Date_in_Locaton_To FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code WHERE T1.Location_Name = value AND T1.Location_Name = value",
        "gold_parse": "SELECT T1.date_in_location_from ,  T1.date_in_locaton_to FROM Document_locations AS T1 JOIN All_documents AS T2 ON T1.document_id  =  T2.document_id WHERE T2.document_name  =  \"Robin CV\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different songs have shared vocals?",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different songs have shared vocals?",
        "query": "SELECT Count ( DISTINCT Title ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "How many distinct artists do the volumes associate to?",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "How many distinct artists do the volumes associate to?",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "query": "SELECT Host_City FROM hosting_city ORDER BY Year Desc",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "List venues of all matches in the order of their dates starting from the most recent one.",
        "query": "SELECT Host_City FROM hosting_city ORDER BY Year Desc",
        "gold_parse": "SELECT venue FROM MATCH ORDER BY date DESC",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the ids and details corresponding to projects for which there are more than two documents.",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value AND T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What instrument did the musician with last name \"Heilo\" use in the song \"Le Pop\"?",
        "query": "SELECT T2.Instrument FROM Band AS T1 JOIN Instruments AS T2 ON T1.Id = T2.BandmateId WHERE T1.Lastname = value AND T1.Lastname = value",
        "gold_parse": "SELECT T4.instrument FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId JOIN Instruments AS T4 ON T4.songid  =  T3.songid AND T4.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\" AND T3.title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers EXCEPT SELECT first_name , last_name FROM Maintenance_Engineers",
        "gold_parse": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which engineers have never visited to maintain the assets? List the engineer first name and last name.",
        "query": "SELECT first_name , last_name FROM Maintenance_Engineers EXCEPT SELECT first_name , last_name FROM Maintenance_Engineers",
        "gold_parse": "SELECT first_name ,  last_name FROM Maintenance_Engineers WHERE engineer_id NOT IN (SELECT engineer_id FROM Engineer_Visits)",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "query": "SELECT name , Count ( * ) FROM Companies GROUP BY Industry",
        "gold_parse": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Whah are the name of each industry and the number of companies in that industry?",
        "query": "SELECT name , Count ( * ) FROM Companies GROUP BY Industry",
        "gold_parse": "SELECT Industry ,  COUNT(*) FROM Companies GROUP BY Industry",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the first and last names of people who payed more than the rooms' base prices.",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find the first and last names of people who payed more than the rooms' base prices.",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the number of employees we have.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Find the number of employees we have.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many people are under 40 for each gender?",
        "query": "SELECT gender , Count ( * ) FROM Person GROUP BY gender",
        "gold_parse": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many people are under 40 for each gender?",
        "query": "SELECT gender , Count ( * ) FROM Person GROUP BY gender",
        "gold_parse": "SELECT count(*) ,  gender FROM Person WHERE age  <  40 GROUP BY gender",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "query": "SELECT id , name , nationality FROM architect GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the id, name and nationality of the architect who built most mills?",
        "query": "SELECT id , name , nationality FROM architect GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first name of students not enrolled in any course.",
        "query": "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student",
        "gold_parse": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first name of students not enrolled in any course.",
        "query": "SELECT Fname FROM Student EXCEPT SELECT Fname FROM Student",
        "gold_parse": "SELECT Fname FROM STUDENT WHERE StuID NOT IN (SELECT StuID FROM ENROLLED_IN)",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the day Number and date of all the documents?",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the day Number and date of all the documents?",
        "query": "SELECT T1.Day_Number , T2.Actual_Destruction_Date FROM Ref_Calendar AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Calendar_Date = T2.Planned_Destruction_Date",
        "gold_parse": "SELECT T2.day_Number ,  T1.Date_Stored FROM All_documents AS T1 JOIN Ref_calendar AS T2 ON T1.date_stored  =  T2.calendar_date",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Show the name of the building that has the most company offices.",
        "query": "SELECT name FROM buildings GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Show the name of the building that has the most company offices.",
        "query": "SELECT name FROM buildings GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids for jobs done more than once for a period of more than 300 days?",
        "query": "SELECT MIN_SALARY FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids for jobs done more than once for a period of more than 300 days?",
        "query": "SELECT MIN_SALARY FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees GROUP BY EMPLOYEE_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the department ids, full names, and salaries for employees who make the most in their departments?",
        "query": "SELECT EMPLOYEE_ID , FIRST_NAME , LAST_NAME FROM employees GROUP BY EMPLOYEE_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name ,   last_name ,   salary ,  department_id ,  MAX(salary) FROM employees GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "query": "SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_feet > value",
        "gold_parse": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the distinct name of the mills built by the architects who have also built a bridge longer than 80 meters?",
        "query": "SELECT DISTINCT T1.name FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T2.length_feet > value",
        "gold_parse": "SELECT DISTINCT T1.name FROM mill AS T1 JOIN architect AS t2 ON T1.architect_id  =  T2.id JOIN bridge AS T3 ON T3.architect_id  =  T2.id WHERE T3.length_meters  >  80",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs without a lead vocal?",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs without a lead vocal?",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Count the number of submissions.",
        "query": "SELECT Count ( * ) FROM workshop",
        "gold_parse": "SELECT count(*) FROM submission",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Count the number of submissions.",
        "query": "SELECT Count ( * ) FROM workshop",
        "gold_parse": "SELECT count(*) FROM submission",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the name of the room that can accommodate the most people?",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Adults Desc LIMIT value",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the name of the room that can accommodate the most people?",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room ORDER BY T2.Adults Desc LIMIT value",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY maxOccupancy DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total number of rooms available in this inn?",
        "query": "SELECT Sum ( Kids ) FROM Reservations",
        "gold_parse": "SELECT count(*) FROM Rooms",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the total number of rooms available in this inn?",
        "query": "SELECT Sum ( Kids ) FROM Reservations",
        "gold_parse": "SELECT count(*) FROM Rooms",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "query": "SELECT T3.EMPLOYEE_ID , T2.JOB_TITLE FROM departments AS T1 JOIN jobs AS T2 JOIN employees AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID AND T3.JOB_ID = T2.JOB_ID AND T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "query": "SELECT T3.EMPLOYEE_ID , T2.JOB_TITLE FROM departments AS T1 JOIN jobs AS T2 JOIN employees AS T3 ON T1.DEPARTMENT_ID = T3.DEPARTMENT_ID AND T3.JOB_ID = T2.JOB_ID AND T1.DEPARTMENT_ID = T3.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs that do not have a back vocal.",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the songs that do not have a back vocal.",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the GDP of the city with the largest regional population.",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the GDP of the city with the largest regional population.",
        "query": "SELECT City FROM city ORDER BY Regional_Population Desc LIMIT value",
        "gold_parse": "SELECT gdp FROM city ORDER BY Regional_Population DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments are used in the song \"Badlands\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "query": "SELECT Count ( * ) FROM flight WHERE Pilot ! = value",
        "gold_parse": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' )",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "How many airports haven't the pilot 'Thompson' driven an aircraft?",
        "query": "SELECT Count ( * ) FROM flight WHERE Pilot ! = value",
        "gold_parse": "SELECT count(*) FROM airport WHERE id NOT IN ( SELECT airport_id FROM flight WHERE pilot  =  'Thompson' )",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "query": "SELECT T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the names of scientists who are not working on the project with the highest hours.",
        "query": "SELECT T1.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT name FROM scientists EXCEPT SELECT T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MIN_SALARY ) FROM jobs AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "query": "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = value AND T2.date_problem_closed > value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the ids of the problems from the product \"voluptatem\" that are reported after 1995?",
        "query": "SELECT T2.problem_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = value AND T2.date_problem_closed > value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T2.product_name = \"voluptatem\" AND T1.date_problem_reported > \"1995\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is id of the city that hosted events in the most recent year?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT value",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is id of the city that hosted events in the most recent year?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT value",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many members does the club \"Tennis Club\" has?",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many members does the club \"Tennis Club\" has?",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Tennis Club\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have higher temperature in Feb than in Jun or have once served as host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Give me the name and description of the document type code RV.",
        "query": "SELECT Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "gold_parse": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Give me the name and description of the document type code RV.",
        "query": "SELECT Document_Type_Name , Document_Type_Description FROM Ref_Document_Types",
        "gold_parse": "SELECT document_type_name ,  document_type_description FROM Ref_document_types WHERE document_type_code  =  \"RV\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has hosted the most events?",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which city has hosted the most events?",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show each author and the number of workshops they submitted to.",
        "query": "SELECT Author , Count ( * ) FROM submission GROUP BY Author",
        "gold_parse": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show each author and the number of workshops they submitted to.",
        "query": "SELECT Author , Count ( * ) FROM submission GROUP BY Author",
        "gold_parse": "SELECT T2.Author ,  COUNT(DISTINCT T1.workshop_id) FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "query": "SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 WHERE T1.id NOT IN ( SELECT T2.architect_id FROM mill AS T2 )",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the distinct names and nationalities of the architects who have ever built a mill?",
        "query": "SELECT DISTINCT T1.name , T1.nationality FROM architect AS T1 WHERE T1.id NOT IN ( SELECT T2.architect_id FROM mill AS T2 )",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.nationality FROM architect AS T1 JOIN mill AS t2 ON T1.id  =  T2.architect_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value AND T1.LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara excluding Clara.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value AND T1.LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes with at least 3 documents.",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes with at least 3 documents.",
        "query": "SELECT T2.Location_Code FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T1.Location_Code HAVING Count ( * ) > = value",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have a shared vocal?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have a shared vocal?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"shared\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "query": "SELECT T2.problem_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value AND T1.staff_last_name = value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which problems were reported before the date of any problem reported by the staff Lysanne Turcotte? Give me the ids of the problems.",
        "query": "SELECT T2.problem_id FROM Staff AS T1 JOIN Problems AS T2 ON T1.staff_id = T2.closure_authorised_by_staff_id WHERE T1.staff_first_name = value AND T1.staff_last_name = value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "List all statement ids and statement details.",
        "query": "SELECT Document_ID , Document_Description FROM Documents",
        "gold_parse": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "List all statement ids and statement details.",
        "query": "SELECT Document_ID , Document_Description FROM Documents",
        "gold_parse": "SELECT STATEMENT_ID ,  statement_details FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who do not have any volumes?",
        "query": "SELECT Famous_Title FROM artist EXCEPT SELECT Famous_Title FROM artist",
        "gold_parse": "SELECT Famous_Title FROM artist WHERE Artist_ID NOT IN(SELECT Artist_ID FROM volume)",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which staff members who reported problems from the product \"rem\" but not \"aut\"? Give me their first and last names.",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the first and last names of people who payed more than the rooms' base prices?",
        "query": "SELECT FirstName , LastName FROM Reservations WHERE Rate > value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T1.Rate - T2.basePrice  >  0",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the distinct asset models?",
        "query": "SELECT DISTINCT company_type FROM Third_Party_Companies",
        "gold_parse": "SELECT DISTINCT asset_model FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What are all the distinct asset models?",
        "query": "SELECT DISTINCT company_type FROM Third_Party_Companies",
        "gold_parse": "SELECT DISTINCT asset_model FROM Assets",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the first names and last names of the students that minor in the department with DNO 140.",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the location code with the most documents?",
        "query": "SELECT Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the location code with the most documents?",
        "query": "SELECT Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT location_code FROM Document_locations GROUP BY location_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the code of the document type that is most common.",
        "query": "SELECT Document_Type_Code FROM Ref_Document_Types GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the code of the document type that is most common.",
        "query": "SELECT Document_Type_Code FROM Ref_Document_Types GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the name of songs that does not have a back vocal.",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find the name of songs that does not have a back vocal.",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the albums in 2012.",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Find all the albums in 2012.",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2012",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the total number of roles listed.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the total number of roles listed.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM ROLES",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year < = value UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities' temperature in March is lower than that in July or higher than that in Oct?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year < = value UNION SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.Regional_Population > value OR T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Feb is higher than that in Jun or cities that were once host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T1.Regional_Population > value OR T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Feb  >  T2.Jun UNION SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job ID for those jobs that were done by two or more for more than 300 days.",
        "query": "SELECT JOB_ID FROM jobs GROUP BY MIN_SALARY HAVING Count ( * ) > = value UNION SELECT JOB_TITLE FROM jobs GROUP BY JOB_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job ID for those jobs that were done by two or more for more than 300 days.",
        "query": "SELECT JOB_ID FROM jobs GROUP BY MIN_SALARY HAVING Count ( * ) > = value UNION SELECT JOB_TITLE FROM jobs GROUP BY JOB_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT job_id FROM job_history WHERE end_date - start_date  > 300 GROUP BY job_id HAVING COUNT(*) >= 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "SELECT T1.Document_Type_Name , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "SELECT T1.Document_Type_Name , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "query": "SELECT Max ( T2.length_feet ) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.name = value",
        "gold_parse": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the maximum length in meters for the bridges and what are the architects' names?",
        "query": "SELECT Max ( T2.length_feet ) FROM architect AS T1 JOIN bridge AS T2 ON T1.id = T2.architect_id WHERE T1.name = value",
        "gold_parse": "SELECT max(T1.length_meters) ,  T2.name FROM bridge AS T1 JOIN architect AS T2 ON T1.architect_id  =  T2.id",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of every person who has a friend over 40 and under 30?",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value INTERSECT SELECT T1.name FROM Person AS T1 WHERE T1.age < value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of every person who has a friend over 40 and under 30?",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age > value INTERSECT SELECT T1.name FROM Person AS T1 WHERE T1.age < value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  >  40) INTERSECT SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend IN (SELECT name FROM Person WHERE age  <  30)",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "SELECT Author , Scores FROM submission ORDER BY Scores Asc",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "SELECT Author , Scores FROM submission ORDER BY Scores Asc",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees hired before June 21, 2002?",
        "query": "SELECT * FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees hired before June 21, 2002?",
        "query": "SELECT * FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  <  '2002-06-21'",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top Desc LIMIT value",
        "gold_parse": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the issue date of the volume that has spent the fewest weeks on top.",
        "query": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top Desc LIMIT value",
        "gold_parse": "SELECT Issue_Date FROM volume ORDER BY Weeks_on_Top ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Hom many musicians performed in the song \"Flash\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(*) FROM performance AS T1 JOIN band AS T2 ON T1.bandmate  =  T2.id JOIN songs AS T3 ON T3.songid  =  T1.songid WHERE T3.Title  =  \"Flash\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "query": "SELECT Venue FROM match WHERE Score = value AND Competition = value",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "query": "SELECT Venue FROM match WHERE Score = value AND Competition = value",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the job ID for those jobs which average salary is above 8000.",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE value",
        "gold_parse": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the ids of documents that have expenses and contain the letter s in their names.",
        "query": "SELECT Document_ID FROM Documents WHERE Document_Name LIKE value",
        "gold_parse": "SELECT T1.document_id FROM Documents AS T1 JOIN Documents_with_expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T1.document_name LIKE '%s%'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the department names and how many employees work in each of them?",
        "query": "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the department names and how many employees work in each of them?",
        "query": "SELECT T1.DEPARTMENT_NAME , Count ( * ) FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT department_name ,  COUNT(*) FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id GROUP BY department_name",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the code of each location and the number of documents in that location?",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the code of each location and the number of documents in that location?",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "query": "SELECT T1.City FROM city AS T1 JOIN temperature AS T2 ON T1.City_ID = T2.City_ID GROUP BY T2.City_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "How many people in total can stay in the modern rooms of this inn?",
        "query": "SELECT Sum ( T2.Adults ) FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T1.bedType = value",
        "gold_parse": "SELECT sum(maxOccupancy) FROM Rooms WHERE decor  =  'modern'",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the authors who have submissions to more than one workshop.",
        "query": "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Show the authors who have submissions to more than one workshop.",
        "query": "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the phones for departments in room 268.",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the phones for departments in room 268.",
        "query": "SELECT DName FROM Department WHERE Building = value",
        "gold_parse": "SELECT DPhone FROM DEPARTMENT WHERE Room  =  268",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT value",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted some events in the most recent year. What is the id of this city?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City ORDER BY T2.Year Desc LIMIT value",
        "gold_parse": "SELECT host_city FROM hosting_city ORDER BY YEAR DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT MAX_SALARY , MIN_SALARY FROM jobs",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT MAX_SALARY , MIN_SALARY FROM jobs",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show ids for all documents in type CV without expense budgets.",
        "query": "SELECT T1.Document_ID FROM Documents AS T1 EXCEPT SELECT T3.Document_ID FROM Ref_Document_Types AS T2 JOIN Documents AS T1 ON T2.Document_Type_Code = T1.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T1.Document_ID = T3.Document_ID WHERE T2.Document_Type_Name = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_type_code  =  \"CV\" EXCEPT SELECT document_id FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the school color of the school with the largest enrollment?",
        "query": "SELECT T2.Colors FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID ORDER BY T1.Enrollment Desc LIMIT value",
        "gold_parse": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What is the school color of the school with the largest enrollment?",
        "query": "SELECT T2.Colors FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID ORDER BY T1.Enrollment Desc LIMIT value",
        "gold_parse": "SELECT School_Colors FROM school ORDER BY Enrollment DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "query": "SELECT T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.name = value INTERSECT SELECT T3.name FROM airport AS T1 JOIN operate_company AS T3 JOIN flight AS T2 ON T1.id = T2.airport_id AND T2.company_id = T3.id WHERE T1.name = value",
        "gold_parse": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "List the name of the pilots who have flied for both a company that mainly provide 'Cargo' services and a company that runs 'Catering services' activities.",
        "query": "SELECT T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id WHERE T1.name = value INTERSECT SELECT T3.name FROM airport AS T1 JOIN operate_company AS T3 JOIN flight AS T2 ON T1.id = T2.airport_id AND T2.company_id = T3.id WHERE T1.name = value",
        "gold_parse": "SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Cargo' INTERSECT SELECT T2.pilot FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T1.principal_activities  =  'Catering services'",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Which team has the oldest player?",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Which team has the oldest player?",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "query": "SELECT T3.problem_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id JOIN Problems AS T3 ON T1.problem_id = T3.problem_id WHERE T2.staff_first_name = value AND T1.log_entry_date > value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the ids of the problems reported before the date of any problem reported by Lysanne Turcotte?",
        "query": "SELECT T3.problem_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id JOIN Problems AS T3 ON T1.problem_id = T3.problem_id WHERE T2.staff_first_name = value AND T1.log_entry_date > value",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  <  ( SELECT min(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Lysanne\" AND T4.staff_last_name = \"Turcotte\" )",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the building that the instructor who teaches the greatest number of courses lives in.",
        "query": "SELECT Building FROM Faculty GROUP BY Building ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Building FROM COURSE AS T1 JOIN FACULTY AS T2 ON T1.Instructor  =  T2.FacID GROUP BY T1.Instructor ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
        "query": "SELECT Denomination FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the denominations used by both schools founded before 1890 and schools founded  after 1900?",
        "query": "SELECT Denomination FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of statements.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of statements.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Statements",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many employees do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems are there for product voluptatem?",
        "query": "SELECT Count ( * ) FROM Product WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems are there for product voluptatem?",
        "query": "SELECT Count ( * ) FROM Product WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id WHERE T1.product_name = \"voluptatem\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "query": "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Which schools have more than 1 player? Give me the school locations.",
        "query": "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "What are the names of the clubs that have \"Davis Steven\" as a member?",
        "query": "SELECT T2.ClubName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T1.Fname = value",
        "gold_parse": "SELECT DISTINCT t1.clubname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Davis\" AND t3.lname  =  \"Steven\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "query": "SELECT T1.Location_Code , Count ( * ) FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "query": "SELECT T1.Location_Code , Count ( * ) FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names and ages of every person who is a friend of both Dan and Alice?",
        "query": "SELECT name , age FROM Person WHERE job = value INTERSECT SELECT name , age FROM Person WHERE job = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names and ages of every person who is a friend of both Dan and Alice?",
        "query": "SELECT name , age FROM Person WHERE job = value INTERSECT SELECT name , age FROM Person WHERE job = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "List the name and assets of each company in ascending order of company name.",
        "query": "SELECT name , Industry FROM Companies ORDER BY name Asc",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "List the name and assets of each company in ascending order of company name.",
        "query": "SELECT name , Industry FROM Companies ORDER BY name Asc",
        "gold_parse": "SELECT name ,  Assets_billion FROM Companies ORDER BY name ASC",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Title = value",
        "gold_parse": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the issue dates of volumes that are by the artist named Gorgoroth.",
        "query": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Title = value",
        "gold_parse": "SELECT T2.Issue_Date FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.Artist  =  \"Gorgoroth\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "List the name of film studio that have the most number of films.",
        "query": "SELECT Title FROM film GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "List the name of film studio that have the most number of films.",
        "query": "SELECT Title FROM film GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the types of vocals that the musician with the last name \"Heilo\" played in \"Der Kapitan\"?",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Lastname = value",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.lastname  =  \"Heilo\" AND T2.title  =  \"Der Kapitan\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the locations of schools that have more than 1 player.",
        "query": "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the locations of schools that have more than 1 player.",
        "query": "SELECT Location FROM school GROUP BY Location HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Location FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Show the names of the buildings that have more than one company offices.",
        "query": "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Show the names of the buildings that have more than one company offices.",
        "query": "SELECT name FROM buildings GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.name FROM Office_locations AS T1 JOIN buildings AS T2 ON T1.building_id  =  T2.id JOIN Companies AS T3 ON T1.company_id  =  T3.id GROUP BY T1.building_id HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Badlands\"? Show the first name and the last name.",
        "query": "SELECT T2.Firstname , T2.Lastname FROM Songs AS T1 JOIN Band AS T2 JOIN Instruments AS T3 ON T1.SongId = T3.SongId AND T3.BandmateId = T2.Id WHERE T1.Title = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Badlands\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find Alice's friends of friends.",
        "query": "SELECT friend FROM PersonFriend",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find Alice's friends of friends.",
        "query": "SELECT friend FROM PersonFriend",
        "gold_parse": "SELECT DISTINCT T4.name FROM PersonFriend AS T1 JOIN Person AS T2 ON T1.name  =  T2.name JOIN PersonFriend AS T3 ON T1.friend  =  T3.name JOIN PersonFriend AS T4 ON T3.friend  =  T4.name WHERE T2.name  =  'Alice' AND T4.name != 'Alice'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return the full names and salaries for employees with first names that end with the letter m.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE LIKE value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE first_name LIKE '%m'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee name ( first name and last name ) and hire date for all employees in the same department as Clara.",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  (SELECT department_id FROM employees WHERE first_name  =  \"Clara\")",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which part has the least chargeable amount? List the part id and amount.",
        "query": "SELECT T1.part_id , T2.part_fault_id FROM Parts AS T1 JOIN Part_Faults AS T2 ON T1.part_id = T2.part_id GROUP BY T1.part_id ORDER BY Sum ( T1.chargeable_amount ) Asc LIMIT value",
        "gold_parse": "SELECT part_id ,  chargeable_amount FROM Parts ORDER BY chargeable_amount ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value AND T1.Regional_Population < value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in July and which have also served as host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value AND T1.Regional_Population < value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the SSN and name of scientists who are assigned to the project with the longest hours.",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "query": "SELECT DISTINCT staff_first_name , staff_last_name FROM Staff WHERE staff_id = value",
        "gold_parse": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "List the first and last names of all distinct staff members who are assigned to the problem whose id is 1.",
        "query": "SELECT DISTINCT staff_first_name , staff_last_name FROM Staff WHERE staff_id = value",
        "gold_parse": "SELECT DISTINCT staff_first_name ,  staff_last_name FROM staff AS T1 JOIN problem_log AS T2 ON T1.staff_id = T2.assigned_to_staff_id WHERE T2.problem_id = 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN value AND value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and salaries for any employees earning less than 6000?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN value AND value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT name FROM Person WHERE gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT name FROM Person WHERE gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in March is lower than that in July or higher than that in Oct?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value OR T1.GDP < value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul OR T2.Mar  >  T2.Oct",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "query": "SELECT EMPLOYEE_ID , HIRE_DATE FROM employees WHERE SALARY = value",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "query": "SELECT EMPLOYEE_ID , HIRE_DATE FROM employees WHERE SALARY = value",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the number of all the calendar items.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Count the number of all the calendar items.",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_calendar",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
        "query": "SELECT EMPLOYEE_ID , LAST_NAME FROM employees WHERE FIRST_NAME LIKE value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the ids and full names for employees who work in a department that has someone with a first name that contains the letter T?",
        "query": "SELECT EMPLOYEE_ID , LAST_NAME FROM employees WHERE FIRST_NAME LIKE value",
        "gold_parse": "SELECT employee_id ,  first_name ,  last_name FROM employees WHERE department_id IN ( SELECT department_id FROM employees WHERE first_name LIKE '%T%' )",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name and code with the least documents.",
        "query": "SELECT Location_Name , Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name and code with the least documents.",
        "query": "SELECT Location_Name , Location_Code FROM Ref_Locations GROUP BY Location_Code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different instruments listed in the database?",
        "query": "SELECT DISTINCT Type FROM Vocals",
        "gold_parse": "SELECT DISTINCT instrument FROM Instruments",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different instruments listed in the database?",
        "query": "SELECT DISTINCT Type FROM Vocals",
        "gold_parse": "SELECT DISTINCT instrument FROM Instruments",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities have lower temperature in March than in July and have been once host cities?",
        "query": "SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Jul INTERSECT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Le Pop\"?",
        "query": "SELECT Lastname FROM Band WHERE Firstname = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Who performed the song named \"Le Pop\"?",
        "query": "SELECT Lastname FROM Band WHERE Firstname = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM Performance AS T1 JOIN Band AS T2 ON T1.bandmate  =  T2.id JOIN Songs AS T3 ON T3.SongId  =  T1.SongId WHERE T3.Title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?",
        "query": "SELECT name , age , city FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names, ages, and jobs of all people who are friends with Alice for the longest amount of time?",
        "query": "SELECT name , age , city FROM Person ORDER BY age Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.age ,  T1.job FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend =  'Alice' AND T2.year  =  (SELECT max(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many type of jobs do they have?",
        "query": "SELECT Count ( * ) FROM Person",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many type of jobs do they have?",
        "query": "SELECT Count ( * ) FROM Person",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How many type of jobs do they have?",
        "query": "SELECT Count ( * ) FROM Person",
        "gold_parse": "SELECT count(DISTINCT job) FROM Person",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
        "query": "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = value INTERSECT SELECT T2.Document_Details FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the dates of creation for documents that have both budget type codes 'GV' and 'SF'.",
        "query": "SELECT T1.Document_Date FROM Documents AS T1 WHERE T1.Document_Type_Code = value INTERSECT SELECT T2.Document_Details FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value",
        "gold_parse": "SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'GV' INTERSECT SELECT T1.document_date FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.document_id  =  T2.document_id WHERE T2.budget_type_code  =  'SF'",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "SELECT City , Hanyu_Pinyin FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "query": "SELECT T2.Location_Code , T2.Date_in_Location_From , T3.Actual_Destruction_Date FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T2.Document_ID = T1.Document_ID JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID",
        "gold_parse": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location code, the starting date and ending data in that location for all the documents.",
        "query": "SELECT T2.Location_Code , T2.Date_in_Location_From , T3.Actual_Destruction_Date FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T2.Document_ID = T1.Document_ID JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID",
        "gold_parse": "SELECT location_code ,  date_in_location_from ,  date_in_locaton_to FROM Document_locations",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department with the most students minoring in it?",
        "query": "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO GROUP BY T1.Major ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO GROUP BY T2.DNO ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents have expenses?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents have expenses?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Documents_with_expenses",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist = value OR Artist = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist = value OR Artist = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find employee with ID and name of the country presently where (s)he is working.",
        "query": "SELECT T2.EMPLOYEE_ID , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2 WHERE T1.COUNTRY_NAME = value",
        "gold_parse": "SELECT T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Which song has the most vocals?",
        "query": "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "Which song has the most vocals?",
        "query": "SELECT Title FROM Songs GROUP BY Title ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT title FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid GROUP BY T1.songid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "query": "SELECT GDP , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > value",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What are the GDP and population of the city that already served as a host more than once?",
        "query": "SELECT GDP , Regional_Population FROM city GROUP BY City HAVING Count ( * ) > value",
        "gold_parse": "SELECT t1.gdp ,  t1.Regional_Population FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY t2.Host_City HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Give me the first name and last name for all the female members of the club \"Bootup Baltimore\".",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID AND T1.StuID = T3.StuID WHERE T2.ClubName = value AND T3.Position = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t3.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the statement ids, statement details, and account details, for all accounts?",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What the full names, ids of each employee and the name of the country they are in?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.COUNTRY_NAME FROM countries AS T1 JOIN employees AS T2",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name , T1.employee_id ,  T4.country_name FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id JOIN locations AS T3 ON T2.location_id  =  T3.location_id JOIN countries AS T4 ON T3.country_id  =  T4.country_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "query": "SELECT Document_Name , Document_Date FROM Documents WHERE Document_Description = value",
        "gold_parse": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the names and dates for documents corresponding to project that has the details 'Graph Database project'?",
        "query": "SELECT Document_Name , Document_Date FROM Documents WHERE Document_Description = value",
        "gold_parse": "SELECT document_name ,  document_date FROM Documents AS T1 JOIN projects AS T2 ON T1.project_id  =  T2.project_id WHERE T2.project_details  =  'Graph Database project'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the least popular kind of decor?",
        "query": "SELECT bedType FROM Rooms GROUP BY bedType ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the least popular kind of decor?",
        "query": "SELECT bedType FROM Rooms GROUP BY bedType ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids for all employees with role name \"Human Resource\" or \"Manager\".",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many budget types do we have?",
        "query": "SELECT Count ( DISTINCT Budget_Type_Code ) FROM Documents_with_Expenses",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many budget types do we have?",
        "query": "SELECT Count ( DISTINCT Budget_Type_Code ) FROM Documents_with_Expenses",
        "gold_parse": "SELECT count(*) FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "list the name, job title of all people ordered by their names.",
        "query": "SELECT name , job , city FROM Person ORDER BY name Asc",
        "gold_parse": "SELECT name ,  job FROM Person ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "list the name, job title of all people ordered by their names.",
        "query": "SELECT name , job , city FROM Person ORDER BY name Asc",
        "gold_parse": "SELECT name ,  job FROM Person ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many people have membership in the club \"Pen and Paper Gaming\"?",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value AND ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many people have membership in the club \"Pen and Paper Gaming\"?",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value AND ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "List the names of the employees who authorized the destruction of documents and the employees who destroyed the corresponding documents.",
        "query": "SELECT T2.Employee_Name , T1.Document_Name FROM All_Documents AS T1 JOIN Employees AS T2 JOIN Documents_to_be_Destroyed AS T3 ON T1.Document_ID = T3.Document_ID AND T3.Destroyed_by_Employee_ID = T2.Employee_ID",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "query": "SELECT T1.Location_Name , T1.Location_Description FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the name and code of the location with the smallest number of documents?",
        "query": "SELECT T1.Location_Name , T1.Location_Description FROM Ref_Locations AS T1 JOIN Document_Locations AS T2 ON T1.Location_Code = T2.Location_Code GROUP BY T2.Location_Code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.location_name ,  T1.location_code FROM Document_locations AS T1 JOIN Ref_locations AS T2 ON T1.location_code  =  T2.location_code GROUP BY T1.location_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "query": "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the full name (first and last), hire date, salary, and department number for those employees whose first name does not containing the letter M.",
        "query": "SELECT T2.FIRST_NAME , T2.HIRE_DATE , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of people who have no friends living in Austin?",
        "query": "SELECT Count ( * ) FROM Person WHERE city = value",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the total number of people who have no friends living in Austin?",
        "query": "SELECT Count ( * ) FROM Person WHERE city = value",
        "gold_parse": "SELECT count(DISTINCT name) FROM PersonFriend WHERE friend NOT IN (SELECT name FROM person WHERE city  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Who is the \"CTO\" of club \"Hopkins Student Enterprises\"? Show the first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Hopkins Student Enterprises\" AND t2.position  =  \"CTO\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = value OR T1.Age = value",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes associated with the artist aged 32 or older?",
        "query": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age = value OR T1.Age = value",
        "gold_parse": "SELECT T2.Song FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  >=  32",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "query": "SELECT T2.part_fault_id , T1.skill_description , T2.part_id FROM Skills AS T1 JOIN Part_Faults AS T2 JOIN Skills_Required_To_Fix AS T3 ON T1.skill_id = T3.skill_id AND T3.part_fault_id = T2.part_fault_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "Which fault log included the most number of faulty parts? List the fault log id, description and record time.",
        "query": "SELECT T2.part_fault_id , T1.skill_description , T2.part_id FROM Skills AS T1 JOIN Part_Faults AS T2 JOIN Skills_Required_To_Fix AS T3 ON T1.skill_id = T3.skill_id AND T3.part_fault_id = T2.part_fault_id GROUP BY T2.part_fault_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.fault_log_entry_id ,  T1.fault_description ,  T1.fault_log_entry_datetime FROM Fault_Log AS T1 JOIN Fault_Log_Parts AS T2 ON T1.fault_log_entry_id  =  T2.fault_log_entry_id GROUP BY T1.fault_log_entry_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Which person whose friends have the oldest average age?",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Which person whose friends have the oldest average age?",
        "query": "SELECT name FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT T2.name ,  avg(T1.age) FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend GROUP BY T2.name ORDER BY avg(T1.age) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "SELECT Count ( * ) , Project_ID FROM Documents WHERE Document_Type_Code = value GROUP BY Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "SELECT Count ( * ) , Project_ID FROM Documents WHERE Document_Type_Code = value GROUP BY Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What is the name of teh studio that created the most films?",
        "query": "SELECT Title FROM film GROUP BY Studio ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What is the name of teh studio that created the most films?",
        "query": "SELECT Title FROM film GROUP BY Studio ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Studio FROM film GROUP BY Studio ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the first and last name of the staff members who reported problems from the product \"rem\" but not \"aut\"?",
        "query": "SELECT T2.staff_first_name , T2.staff_last_name FROM Product AS T1 JOIN Staff AS T2 JOIN Problems AS T3 ON T1.product_id = T3.product_id AND T3.closure_authorised_by_staff_id = T2.staff_id WHERE T1.product_name ! = value",
        "gold_parse": "SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"rem\" EXCEPT SELECT T3.staff_first_name ,  T3.staff_last_name FROM problems AS T1 JOIN product AS T2 JOIN staff AS T3 ON T1.product_id = T2.product_id AND T1.reported_by_staff_id = T3.staff_id WHERE T2.product_name = \"aut\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Please show different denominations and the corresponding number of schools.",
        "query": "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID",
        "gold_parse": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Please show different denominations and the corresponding number of schools.",
        "query": "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID",
        "gold_parse": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "For how many clubs is \"Tracy Kim\" a member?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "For how many clubs is \"Tracy Kim\" a member?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "For how many clubs is \"Tracy Kim\" a member?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Tracy\" AND t3.lname  =  \"Kim\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the account details with the greatest value, as well as those that include the character 5.",
        "query": "SELECT Account_Details , Account_ID FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT Account_Details FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the account details with the greatest value, as well as those that include the character 5.",
        "query": "SELECT Account_Details , Account_ID FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT value INTERSECT SELECT Account_Details FROM Accounts GROUP BY Account_Details ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT max(Account_details) FROM Accounts UNION SELECT Account_details FROM Accounts WHERE Account_details LIKE \"%5%\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many students have had at least one \"B\" grade?",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "How many students have had at least one \"B\" grade?",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "gold_parse": "SELECT COUNT(DISTINCT StuID) FROM ENROLLED_IN WHERE Grade  =  \"B\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" belong to?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" belong to?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "query": "SELECT Destruction_Authorised_by_Employee_ID , Count ( DISTINCT Document_ID ) FROM Documents_to_be_Destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "gold_parse": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the employee ids and the number of documents destroyed by each employee.",
        "query": "SELECT Destruction_Authorised_by_Employee_ID , Count ( DISTINCT Document_ID ) FROM Documents_to_be_Destroyed GROUP BY Destruction_Authorised_by_Employee_ID",
        "gold_parse": "SELECT Destroyed_by_Employee_ID ,  count(*) FROM Documents_to_be_destroyed GROUP BY Destroyed_by_Employee_ID",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "correctness": 0
    },
    {
        "db_id": "company_office",
        "question": "Please show the names of the buildings whose status is \"on-hold\", in ascending order of stories.",
        "query": "SELECT name FROM buildings WHERE Status = value ORDER BY name Asc",
        "gold_parse": "SELECT name FROM buildings WHERE Status  =  \"on-hold\" ORDER BY Stories ASC",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Who is the president of the club \"Bootup Baltimore\"? Give me the first and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Club AS T2 JOIN Member_of_club AS T3 ON T1.StuID = T3.StuID AND T3.ClubID = T2.ClubID WHERE T2.ClubName = value",
        "gold_parse": "SELECT t3.fname ,  t3.lname FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Bootup Baltimore\" AND t2.position  =  \"President\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the log id and entry description of each problem?",
        "query": "SELECT T1.problem_log_id , T2.problem_description FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id",
        "gold_parse": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the log id and entry description of each problem?",
        "query": "SELECT T1.problem_log_id , T2.problem_description FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id",
        "gold_parse": "SELECT problem_log_id ,  log_entry_description FROM problem_log",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "query": "SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < = value",
        "gold_parse": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What are the distinct types of the companies that have operated any flights with velocity less than 200?",
        "query": "SELECT DISTINCT T1.Type FROM operate_company AS T1 JOIN flight AS T2 ON T1.id = T2.company_id WHERE T2.Velocity < = value",
        "gold_parse": "SELECT DISTINCT T1.type FROM operate_company AS T1 JOIN flight AS t2 ON T1.id  =  T2.company_id WHERE T2.velocity  <  200",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "query": "SELECT T2.Document_Description , T2.Document_Name FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE T1.Project_Details = value",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show the statement detail and the corresponding document name for the statement with detail 'Private Project'.",
        "query": "SELECT T2.Document_Description , T2.Document_Name FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID WHERE T1.Project_Details = value",
        "gold_parse": "SELECT T1.statement_details ,  T2.document_name FROM Statements AS T1 JOIN Documents AS T2 ON T1.statement_id  =  T2.document_id WHERE T1.statement_details  =  'Private Project'",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many bands are there?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(*) FROM Band",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many bands are there?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(*) FROM Band",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM artist",
        "gold_parse": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Give the maximum and minimum weeks on top across all volumes.",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM artist",
        "gold_parse": "SELECT max(Weeks_on_Top) ,  min(Weeks_on_Top) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "query": "SELECT roomName FROM Rooms ORDER BY basePrice Desc",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY basePrice",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Sort all the rooms according to the price. Just report the room names.",
        "query": "SELECT roomName FROM Rooms ORDER BY basePrice Desc",
        "gold_parse": "SELECT roomName FROM Rooms ORDER BY basePrice",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instruments does the song \"Le Pop\" use?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many instrument does the musician with last name \"Heilo\" use?",
        "query": "SELECT Count ( * ) FROM Band WHERE Lastname = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN Band AS T2 ON T1.bandmateid  =  T2.id WHERE T2.lastname  =  \"Heilo\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < value",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the songs in album \"A Kiss Before You Go: Live in Hamburg\"?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < value",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "query": "SELECT T2.first_name , T2.last_name , T1.skill_description FROM Skills AS T1 JOIN Maintenance_Engineers AS T2 JOIN Engineer_Skills AS T3 ON T1.skill_id = T3.skill_id AND T3.engineer_id = T2.engineer_id",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List all every engineer's first name, last name, details and coresponding skill description.",
        "query": "SELECT T2.first_name , T2.last_name , T1.skill_description FROM Skills AS T1 JOIN Maintenance_Engineers AS T2 JOIN Engineer_Skills AS T3 ON T1.skill_id = T3.skill_id AND T3.engineer_id = T2.engineer_id",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.other_details ,  T3.skill_description FROM Maintenance_Engineers AS T1 JOIN Engineer_Skills AS T2 ON T1.engineer_id  =  T2.engineer_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value OR T2.staff_first_name = value",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the id of problems reported by the staff named Dameon Frami or Jolie Weber?",
        "query": "SELECT T1.problem_log_id FROM Problem_Log AS T1 JOIN Staff AS T2 ON T1.assigned_to_staff_id = T2.staff_id WHERE T2.staff_first_name = value OR T2.staff_first_name = value",
        "gold_parse": "SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Dameon\" AND T2.staff_last_name = \"Frami\" UNION SELECT product_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE T2.staff_first_name = \"Jolie\" AND T2.staff_last_name = \"Weber\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the three products that have the most problems?s",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What are the three products that have the most problems?s",
        "query": "SELECT T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.product_name FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" have membership for?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does \"Linda Smith\" have membership for?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Linda\" AND t3.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "query": "SELECT DEPARTMENT_ID FROM employees GROUP BY DEPARTMENT_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are department ids for departments with managers managing more than 3 employees?",
        "query": "SELECT DEPARTMENT_ID FROM employees GROUP BY DEPARTMENT_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the name of courses that have at least five enrollments?",
        "query": "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the name of courses that have at least five enrollments?",
        "query": "SELECT CName FROM Course GROUP BY CID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.CName FROM COURSE AS T1 JOIN ENROLLED_IN AS T2 ON T1.CID  =  T2.CID GROUP BY T2.CID HAVING COUNT(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.age = ( SELECT Min ( T2.year ) FROM PersonFriend AS T2 )",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the average salary of employees who have a commission percentage that is not null?",
        "query": "SELECT Avg ( T1.SALARY ) FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the average salary of employees who have a commission percentage that is not null?",
        "query": "SELECT Avg ( T1.SALARY ) FROM employees AS T1 WHERE T1.EMPLOYEE_ID NOT IN ( SELECT T2.EMPLOYEE_ID FROM job_history AS T2 )",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have a lead vocal?",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs have a lead vocal?",
        "query": "SELECT Count ( * ) FROM Vocals WHERE Type = value",
        "gold_parse": "SELECT count(DISTINCT title) FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE TYPE  =  \"lead\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names of employees who with in department 70 or 90?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs does the student named \"Eric Tai\" belong to?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "query": "SELECT EMPLOYEE_ID , LAST_NAME FROM employees ORDER BY SALARY Desc LIMIT value",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID for each employee and the date on which he ended his previous job.",
        "query": "SELECT EMPLOYEE_ID , LAST_NAME FROM employees ORDER BY SALARY Desc LIMIT value",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Count the number of distinct artists who have volumes.",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Count the number of distinct artists who have volumes.",
        "query": "SELECT Count ( DISTINCT Artist ) FROM artist",
        "gold_parse": "SELECT COUNT(DISTINCT Artist_ID) FROM volume",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the name of the department that has no students minored in?",
        "query": "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = value EXCEPT SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = value",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the name of the department that has no students minored in?",
        "query": "SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = value EXCEPT SELECT T2.DName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T1.Major = value",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What kind of decor has the least number of reservations?",
        "query": "SELECT decor FROM Rooms GROUP BY decor ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What kind of decor has the least number of reservations?",
        "query": "SELECT decor FROM Rooms GROUP BY decor ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.decor FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId GROUP BY T2.decor ORDER BY count(T2.decor) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and hire dates for employees in the same department as someone with the first name Clara, not including Clara?",
        "query": "SELECT T1.FIRST_NAME , T1.LAST_NAME , T1.HIRE_DATE FROM employees AS T1 JOIN locations AS T2 WHERE T2.CITY ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date FROM employees WHERE department_id  =  ( SELECT department_id FROM employees WHERE first_name  =  \"Clara\") AND first_name != \"Clara\"",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Which authors have submitted to more than one workshop?",
        "query": "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Which authors have submitted to more than one workshop?",
        "query": "SELECT Author FROM submission GROUP BY Author HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Author FROM acceptance AS T1 JOIN submission AS T2 ON T1.Submission_ID  =  T2.Submission_ID GROUP BY T2.Author HAVING COUNT(DISTINCT T1.workshop_id)  >  1",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs that do not have back vocals?",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the names of the songs that do not have back vocals?",
        "query": "SELECT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Sort the each workshop in alphabetical order of the venue. Return the date and venue of each workshop.",
        "query": "SELECT Date , Venue FROM workshop ORDER BY Date Asc",
        "gold_parse": "SELECT Date ,  Venue FROM workshop ORDER BY Venue",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "query": "SELECT product_details , product_name FROM Product GROUP BY product_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "query": "SELECT product_details , product_name FROM Product GROUP BY product_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "query": "SELECT name , gender , gender FROM architect GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What are the ids, names and genders of the architects who built two bridges or one mill?",
        "query": "SELECT name , gender , gender FROM architect GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN bridge AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  2 UNION SELECT T1.id ,  T1.name ,  T1.gender FROM architect AS T1 JOIN mill AS T2 ON T1.id  =  T2.architect_id GROUP BY T1.id HAVING count(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "query": "SELECT Studio FROM film WHERE Director = value",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "Show the studios that have produced films with director \"Nicholas Meyer\" and \"Walter Hill\".",
        "query": "SELECT Studio FROM film WHERE Director = value",
        "gold_parse": "SELECT Studio FROM film WHERE Director  =  \"Nicholas Meyer\" INTERSECT SELECT Studio FROM film WHERE Director  =  \"Walter Hill\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "query": "SELECT DName FROM Department WHERE Division = value AND Building = value INTERSECT SELECT DName FROM Department WHERE Division = value AND Building = value",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of departments either in division AS, or in division EN and in building NEB?",
        "query": "SELECT DName FROM Department WHERE Division = value AND Building = value INTERSECT SELECT DName FROM Department WHERE Division = value AND Building = value",
        "gold_parse": "SELECT DName FROM DEPARTMENT WHERE Division  =  \"AS\" UNION SELECT DName FROM DEPARTMENT WHERE Division  =  \"EN\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT T1.DEPARTMENT_ID FROM departments AS T1 JOIN job_history AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT T1.DEPARTMENT_ID FROM departments AS T1 JOIN job_history AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID GROUP BY T2.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population > value",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Please give me a list of cities whose regional population is over 8000000 or under 5000000.",
        "query": "SELECT City FROM city WHERE Regional_Population > value OR Regional_Population > value",
        "gold_parse": "SELECT city FROM city WHERE regional_population  >  10000000 UNION SELECT city FROM city WHERE regional_population  <  5000000",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs appear in studio albums?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many songs appear in studio albums?",
        "query": "SELECT Count ( * ) FROM Songs",
        "gold_parse": "SELECT count(DISTINCT T3.title) FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE t1.type  =  \"Studio\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "query": "SELECT T1.Role_Name , T2.Role_Code , T2.Date_of_Birth FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Employee_Name = value",
        "gold_parse": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the name, role code, and date of birth for the employee with name 'Armani'.",
        "query": "SELECT T1.Role_Name , T2.Role_Code , T2.Date_of_Birth FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T2.Employee_Name = value",
        "gold_parse": "SELECT employee_name ,  role_code ,  date_of_birth FROM Employees WHERE employee_Name  =  'Armani'",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Firstname = value",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the types of vocals that the musician with the first name \"Solveig\" played in the song \"A Bar in Amsterdam\"?",
        "query": "SELECT T2.Type FROM Band AS T1 JOIN Vocals AS T2 ON T1.Id = T2.Bandmate WHERE T1.Firstname = value",
        "gold_parse": "SELECT TYPE FROM vocals AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid JOIN band AS T3 ON T1.bandmate  =  T3.id WHERE T3.firstname  =  \"Solveig\" AND T2.title  =  \"A Bar In Amsterdam\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "query": "SELECT staff_name , staff_id FROM Staff EXCEPT SELECT staff_name , staff_id FROM Staff",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "What is the name and id of the staff who recorded the fault log but has not contacted any visiting engineers?",
        "query": "SELECT staff_name , staff_id FROM Staff EXCEPT SELECT staff_name , staff_id FROM Staff",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_id FROM Staff AS T1 JOIN Fault_Log AS T2 ON T1.staff_id  =  T2.recorded_by_staff_id EXCEPT SELECT T3.staff_name ,  T3.staff_id FROM Staff AS T3 JOIN Engineer_Visits AS T4 ON T3.staff_id  =  T4.contact_staff_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MIN_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < value",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the song titles on the album \"A Kiss Before You Go: Live in Hamburg\"?",
        "query": "SELECT T1.Title FROM Songs AS T1 JOIN Albums AS T2 JOIN Tracklists AS T3 ON T1.SongId = T3.SongId AND T3.AlbumId = T2.AId WHERE T2.Year < value",
        "gold_parse": "SELECT T3.title FROM albums AS T1 JOIN tracklists AS T2 ON T1.aid  =  T2.albumid JOIN songs AS T3 ON T2.songid  =  T3.songid WHERE T1.title  =  \"A Kiss Before You Go: Live in Hamburg\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "SELECT JOB_ID FROM jobs GROUP BY JOB_ID HAVING Avg ( MIN_SALARY ) > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "SELECT JOB_ID FROM jobs GROUP BY JOB_ID HAVING Avg ( MIN_SALARY ) > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "SELECT JOB_ID FROM jobs GROUP BY JOB_ID HAVING Avg ( MIN_SALARY ) > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs are there?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM club",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs are there?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM club",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "How many clubs are there?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM club",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "query": "SELECT DISTINCT Fname FROM Student WHERE LName LIKE value",
        "gold_parse": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names of students whose first names contain letter \"a\".",
        "query": "SELECT DISTINCT Fname FROM Student WHERE LName LIKE value",
        "gold_parse": "SELECT DISTINCT Fname FROM STUDENT WHERE Fname LIKE '%a%'",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "query": "SELECT DISTINCT skill_description , skill_description FROM Skills",
        "gold_parse": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "For all the faults of different parts, what are all the decriptions of the skills required to fix them? List the name of the faults and the skill description.",
        "query": "SELECT DISTINCT skill_description , skill_description FROM Skills",
        "gold_parse": "SELECT T1.fault_short_name ,  T3.skill_description FROM Part_Faults AS T1 JOIN Skills_Required_To_Fix AS T2 ON T1.part_fault_id  =  T2.part_fault_id JOIN Skills AS T3 ON T2.skill_id  =  T3.skill_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the employee ID and job name for all those jobs in department 80.",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "query": "SELECT decor FROM Rooms WHERE decor = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "query": "SELECT decor FROM Rooms WHERE decor = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE LName = value",
        "gold_parse": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the average gradepoint for students with the last name Smith?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE LName = value",
        "gold_parse": "SELECT avg(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.LName  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the first and last name for those employees who works either in department 70 or 90?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T1.DEPARTMENT_NAME = value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE department_id  =  70 OR department_id  =  90",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Count the number of clubs for which the student named \"Eric Tai\" is a member.",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(DISTINCT t1.clubname) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t3.fname  =  \"Eric\" AND t3.lname  =  \"Tai\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "query": "SELECT name FROM Person WHERE age > value ORDER BY name Asc",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name of people whose age is greater than any engineer sorted by their age.",
        "query": "SELECT name FROM Person WHERE age > value ORDER BY name Asc",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return the full names and salaries of employees with null commissions.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return the full names and salaries of employees with null commissions.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "query": "SELECT T1.Famous_Title FROM artist AS T1 EXCEPT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < value",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the famous titles of artists who have not only had volumes that spent more than 2 weeks on top but also volumes that spent less than 2 weeks on top?",
        "query": "SELECT T1.Famous_Title FROM artist AS T1 EXCEPT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T2.Weeks_on_Top < value",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2 INTERSECT SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  <  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the budget type code that is most common among documents with expenses.",
        "query": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Give the budget type code that is most common among documents with expenses.",
        "query": "SELECT Document_Type_Code FROM Documents GROUP BY Document_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT budget_type_code FROM Documents_with_expenses GROUP BY budget_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name of route that has the highest number of deliveries.",
        "query": "SELECT route_name FROM Delivery_Routes GROUP BY route_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "Find the name of route that has the highest number of deliveries.",
        "query": "SELECT route_name FROM Delivery_Routes GROUP BY route_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.route_name FROM Delivery_Routes AS t1 JOIN Delivery_Route_Locations AS t2 ON t1.route_id  =  t2.route_id GROUP BY t1.route_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author who achieved the highest score in a submission.",
        "query": "SELECT Author FROM submission ORDER BY Scores Asc LIMIT value",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author who achieved the highest score in a submission.",
        "query": "SELECT Author FROM submission ORDER BY Scores Asc LIMIT value",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the youngest person for each job?",
        "query": "SELECT job FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the youngest person for each job?",
        "query": "SELECT job FROM Person ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT min(age) ,  job FROM Person GROUP BY job",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "List the document type code, document name, and document description for the document with name 'Noel CV' or name 'King Book'.",
        "query": "SELECT T1.Document_Type_Code , T1.Document_Type_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the type name, type description, and date of creation for each document.",
        "query": "SELECT T2.Document_Name , T1.Document_Type_Description , T2.Document_Date FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "gold_parse": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Return the type name, type description, and date of creation for each document.",
        "query": "SELECT T2.Document_Name , T1.Document_Type_Description , T2.Document_Date FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "gold_parse": "SELECT T1.document_type_name ,  T1.document_type_description ,  T2.Document_date FROM Ref_document_types AS T1 JOIN Documents AS T2 ON T1.document_type_code  =  T2.document_type_code",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "How many different instruments are used in the song \"Le Pop\"?",
        "query": "SELECT Count ( * ) FROM Songs WHERE Title = value",
        "gold_parse": "SELECT count(DISTINCT instrument) FROM instruments AS T1 JOIN songs AS T2 ON T1.songid  =  T2.songid WHERE title  =  \"Le Pop\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different names of all songs without back vocals?",
        "query": "SELECT DISTINCT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT DISTINCT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What are the different names of all songs without back vocals?",
        "query": "SELECT DISTINCT T1.Title FROM Songs AS T1 WHERE T1.SongId NOT IN ( SELECT DISTINCT T2.SongId FROM Tracklists AS T2 )",
        "gold_parse": "SELECT DISTINCT title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid EXCEPT SELECT t2.title FROM vocals AS t1 JOIN songs AS t2 ON t1.songid  =  t2.songid WHERE TYPE  =  \"back\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all females who are friends with Zach?",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all females who are friends with Zach?",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Zach' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and department ids for the lowest paid employees across all departments.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full names and department ids for the lowest paid employees across all departments.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees ORDER BY SALARY Asc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name ,  department_id FROM employees WHERE salary IN (SELECT MIN(salary) FROM employees GROUP BY department_id)",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the maximum and minimum gradepoints for students living in NYC?",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = value",
        "gold_parse": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Give the maximum and minimum gradepoints for students living in NYC?",
        "query": "SELECT Max ( Age ) , Min ( Age ) FROM Student WHERE city_code = value",
        "gold_parse": "SELECT max(T2.gradepoint) ,  min(T2.gradepoint) FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T3.city_code  =  \"NYC\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "query": "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the famous titles for artists that have volumes that lasted more than 2 weeks on top.",
        "query": "SELECT Famous_Title FROM artist GROUP BY Famous_Title HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.Famous_Title FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T2.Weeks_on_Top  >  2",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the age of the doctor named Zach?",
        "query": "SELECT age FROM Person WHERE name = value",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the age of the doctor named Zach?",
        "query": "SELECT age FROM Person WHERE name = value",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "query": "SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = value",
        "gold_parse": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many fault status codes are recorded in the fault log parts table?",
        "query": "SELECT Count ( * ) FROM Engineer_Visits WHERE fault_status = value",
        "gold_parse": "SELECT DISTINCT fault_status FROM Fault_Log_Parts",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "query": "SELECT Count ( * ) FROM Scientists",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "Find the number of projects which each scientist is working on and scientist's name.",
        "query": "SELECT Count ( * ) FROM Scientists",
        "gold_parse": "SELECT count(*) ,  T1.name FROM scientists AS T1 JOIN assignedto AS T2 ON T1.ssn  =  T2.scientist GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has friends that are older than the average age? Print their friends and their ages as well",
        "query": "SELECT name , age FROM Person WHERE age > ( SELECT Avg ( age ) FROM Person )",
        "gold_parse": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Who has friends that are older than the average age? Print their friends and their ages as well",
        "query": "SELECT name , age FROM Person WHERE age > ( SELECT Avg ( age ) FROM Person )",
        "gold_parse": "SELECT DISTINCT T2.name ,  T2.friend ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T1.age  >  (SELECT avg(age) FROM person)",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "List how many times the number of people in the room reached the maximum occupancy of the room. The number of people include adults and kids.",
        "query": "SELECT Max ( Adults ) , Sum ( Kids ) FROM Reservations",
        "gold_parse": "SELECT count(*) FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE T2.maxOccupancy  =  T1.Adults + T1.Kids",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the doctor named Zach?",
        "query": "SELECT name FROM Person WHERE job = value",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the doctor named Zach?",
        "query": "SELECT name FROM Person WHERE job = value",
        "gold_parse": "SELECT age FROM Person WHERE job  =  'doctor' AND name  =  'Zach'",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "query": "SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Category = value",
        "gold_parse": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the songs in volumes that have resulted in a nomination at music festivals?",
        "query": "SELECT T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume WHERE T2.Category = value",
        "gold_parse": "SELECT T2.Song FROM music_festival AS T1 JOIN volume AS T2 ON T1.Volume  =  T2.Volume_ID WHERE T1.Result  =  \"Nominated\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the number of members of club \"Pen and Paper Gaming\".",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value AND ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "correctness": 0
    },
    {
        "db_id": "club_1",
        "question": "Find the number of members of club \"Pen and Paper Gaming\".",
        "query": "SELECT Count ( * ) FROM Club WHERE ClubName = value AND ClubName = value",
        "gold_parse": "SELECT count(*) FROM club AS t1 JOIN member_of_club AS t2 ON t1.clubid  =  t2.clubid JOIN student AS t3 ON t2.stuid  =  t3.stuid WHERE t1.clubname  =  \"Pen and Paper Gaming\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many document types are there?",
        "query": "SELECT Count ( DISTINCT Document_Type_Code ) FROM All_Documents",
        "gold_parse": "SELECT count(*) FROM Ref_document_types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "How many document types are there?",
        "query": "SELECT Count ( DISTINCT Document_Type_Code ) FROM All_Documents",
        "gold_parse": "SELECT count(*) FROM Ref_document_types",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Department AS T2 JOIN Minor_in AS T3 ON T1.StuID = T3.StuID AND T3.DNO = T2.DNO WHERE T2.DName = value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the SSN and names of scientists working on the project with the most hours?",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the SSN and names of scientists working on the project with the most hours?",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the SSN and names of scientists working on the project with the most hours?",
        "query": "SELECT T1.Name , T2.Name FROM Scientists AS T1 JOIN Projects AS T2 JOIN AssignedTo AS T3 ON T1.SSN = T3.Scientist AND T3.Project = T2.Code ORDER BY T2.Hours Desc LIMIT value",
        "gold_parse": "SELECT T3.ssn ,  T3.name FROM assignedto AS T1 JOIN projects AS T2 ON T1.project  =  T2.code JOIN scientists AS T3 ON T1.scientist  =  T3.SSN WHERE T2.hours  =  (SELECT max(hours) FROM projects)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE JOB_ID = value AND SALARY > value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is the full name ( first name and last name ) for those employees who gets more salary than the employee whose id is 163?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE JOB_ID = value AND SALARY > value",
        "gold_parse": "SELECT first_name ,  last_name FROM employees WHERE salary  >  (SELECT salary FROM employees WHERE employee_id = 163 )",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "List the state names and the number of customers living in each state.",
        "query": "SELECT state_province_county , Count ( * ) FROM Addresses GROUP BY state_province_county",
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "correctness": 0
    },
    {
        "db_id": "customer_deliveries",
        "question": "List the state names and the number of customers living in each state.",
        "query": "SELECT state_province_county , Count ( * ) FROM Addresses GROUP BY state_province_county",
        "gold_parse": "SELECT t2.state_province_county ,  count(*) FROM customer_addresses AS t1 JOIN addresses AS t2 ON t1.address_id  =  t2.address_id GROUP BY t2.state_province_county",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name and age of every male? Order the results by age.",
        "query": "SELECT name , age FROM Person ORDER BY age Asc",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name and age of every male? Order the results by age.",
        "query": "SELECT name , age FROM Person ORDER BY age Asc",
        "gold_parse": "SELECT name FROM Person WHERE gender  =  'male' ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What are the name of rooms booked by customers whose first name has \"ROY\" in part?",
        "query": "SELECT T1.roomName FROM Rooms AS T1 JOIN Reservations AS T2 ON T1.RoomId = T2.Room WHERE T2.FirstName = value",
        "gold_parse": "SELECT T2.roomName FROM Reservations AS T1 JOIN Rooms AS T2 ON T1.Room  =  T2.RoomId WHERE firstname LIKE '%ROY%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "query": "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for employees who have held two or more jobs?",
        "query": "SELECT EMPLOYEE_ID FROM employees GROUP BY EMPLOYEE_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT employee_id FROM job_history GROUP BY employee_id HAVING COUNT(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "query": "SELECT Project_ID , Project_Details FROM Projects GROUP BY Project_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade WHERE T1.Major = value OR T3.gradepoint > value",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the distinct first names for students with a grade point of 3.8 or above in at least one course?",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Enrolled_in AS T2 ON T1.StuID = T2.StuID JOIN Gradeconversion AS T3 ON T2.Grade = T3.lettergrade WHERE T1.Major = value OR T3.gradepoint > value",
        "gold_parse": "SELECT DISTINCT T3.Fname FROM ENROLLED_IN AS T1 JOIN GRADECONVERSION AS T2 JOIN STUDENT AS T3 ON T1.Grade  =  T2.lettergrade AND T1.StuID  =  T3.StuID WHERE T2.gradepoint  >=  3.8",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of followers for each user.",
        "query": "SELECT Sum ( followers ) , name FROM user_profiles GROUP BY name",
        "gold_parse": "SELECT count(*) FROM follows GROUP BY f1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id of the department with the least number of staff?",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT department_id FROM staff_department_assignments GROUP BY department_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T1.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show all flight number from Los Angeles.",
        "query": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of the shortest flights?",
        "query": "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of the shortest flights?",
        "query": "SELECT distance FROM flight ORDER BY distance Asc LIMIT value",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct governors are there?",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct governors are there?",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct governors are there?",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct governors are there?",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "query": "SELECT DISTINCT T2.Position FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team WHERE T1.Name = value OR T1.Name = value",
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the distinct position of players from college UCLA or Duke.",
        "query": "SELECT DISTINCT T2.Position FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team WHERE T1.Name = value OR T1.Name = value",
        "gold_parse": "SELECT DISTINCT POSITION FROM match_season WHERE College  =  \"UCLA\" OR College  =  \"Duke\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many stores are there?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM store",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many stores are there?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM store",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many stores are there?",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM store",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "query": "SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient",
        "gold_parse": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of patients who are not using the medication of Procrastin-X.",
        "query": "SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient",
        "gold_parse": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id of suppliers whose average amount purchased for each product is above 50000 or below 30000.",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY product_id HAVING Avg ( total_value_purchased ) > value",
        "gold_parse": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT School_name FROM School WHERE Enrollment > value OR Enrollment < value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Show the teams that have both wrestlers eliminated by \"Orton\" and wrestlers eliminated by \"Benjamin\".",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which countries have at least 3 cities?",
        "query": "SELECT country FROM country GROUP BY country HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which countries have at least 3 cities?",
        "query": "SELECT country FROM country GROUP BY country HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.country FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id GROUP BY T2.country_id HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "How many leagues are there in England?",
        "query": "SELECT Count ( * ) FROM Player_Attributes",
        "gold_parse": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "How many leagues are there in England?",
        "query": "SELECT Count ( * ) FROM Player_Attributes",
        "gold_parse": "SELECT count(*) FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id WHERE T1.name  =  \"England\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of the two department store chains with the largest number of department stores?",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "query": "SELECT Population FROM city WHERE Status ! = value",
        "gold_parse": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the census rankings of cities that do not have the status \"Village\"?",
        "query": "SELECT Population FROM city WHERE Status ! = value",
        "gold_parse": "SELECT Census_Ranking FROM city WHERE Status !=  \"Village\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the id and name of the employee with maximum salary.",
        "query": "SELECT eid , name FROM employee",
        "gold_parse": "SELECT eid ,  name FROM Employee ORDER BY salary DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the ids of all products that were ordered more than three times or supplied more than 80000.",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT product_id FROM Order_Items GROUP BY product_id HAVING count(*)  >  3 UNION SELECT product_id FROM Product_Suppliers GROUP BY product_id HAVING sum(total_amount_purchased)  >  80000",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many distinct official languages are there among countries of players whose positions are defenders.",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "How many department stores does the store chain South have?",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "How many department stores does the store chain South have?",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM department_stores AS T1 JOIN department_store_chain AS T2 ON T1.dept_store_chain_id  =  T2.dept_store_chain_id WHERE T2.dept_store_chain_name  =  \"South\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "SELECT order_id , customer_id , customer_id FROM Customer_Orders WHERE order_status_code = value ORDER BY order_date Asc",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "SELECT order_id , customer_id , customer_id FROM Customer_Orders WHERE order_status_code = value ORDER BY order_date Asc",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of users who posted some tweets.",
        "query": "SELECT Count ( * ) FROM follows",
        "gold_parse": "SELECT count(DISTINCT UID) FROM tweets",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of users who posted some tweets.",
        "query": "SELECT Count ( * ) FROM follows",
        "gold_parse": "SELECT count(DISTINCT UID) FROM tweets",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "query": "SELECT Name , Count ( * ) FROM Physician GROUP BY Name",
        "gold_parse": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Position = value",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Position = value",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "query": "SELECT Name FROM wrestler WHERE Days_held = value",
        "gold_parse": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Return the names of wrestlers with fewer than 100 days held.",
        "query": "SELECT Name FROM wrestler WHERE Days_held = value",
        "gold_parse": "SELECT Name FROM wrestler WHERE Days_held  <  100",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the distinct block codes where some rooms are available.",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "query": "SELECT Name FROM channel EXCEPT SELECT Name FROM channel",
        "gold_parse": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which channels are not owned by CCTV? Give me the channel names.",
        "query": "SELECT Name FROM channel EXCEPT SELECT Name FROM channel",
        "gold_parse": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which nurses are in charge of patients undergoing treatments?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T1.Name = value",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN nurse AS T2 ON T1.AssistingNurse  =  T2.EmployeeID",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "query": "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN value AND value",
        "gold_parse": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are id and name of the products whose price is lower than 600 or higher than 900?",
        "query": "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN value AND value",
        "gold_parse": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "query": "SELECT Avg ( Num_Employees ) FROM department WHERE Ranking < value OR Ranking < value",
        "gold_parse": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What is the average number of employees of the departments whose rank is between 10 and 15?",
        "query": "SELECT Avg ( Num_Employees ) FROM department WHERE Ranking < value OR Ranking < value",
        "gold_parse": "SELECT avg(num_employees) FROM department WHERE ranking BETWEEN 10 AND 15",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "query": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all employees who do not have certificate of Boeing 737-800.",
        "query": "SELECT name FROM employee EXCEPT SELECT name FROM employee",
        "gold_parse": "SELECT name FROM Employee EXCEPT SELECT T1.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T3.name  =  \"Boeing 737-800\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of items store 1 has in stock.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of items store 1 has in stock.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "query": "SELECT id , name FROM mountain GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the id and name of the mountains that have at least 2 photos?",
        "query": "SELECT id , name FROM mountain GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "query": "SELECT Position FROM player WHERE Points > value",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "List the position of players with average number of points scored by players of that position bigger than 20.",
        "query": "SELECT Position FROM player WHERE Points > value",
        "gold_parse": "SELECT POSITION FROM player GROUP BY name HAVING avg(Points)  >=  20",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the name and gender of the staff who was assigned in 2016.",
        "query": "SELECT staff_name , staff_gender FROM Staff WHERE staff_name = value",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the name and gender of the staff who was assigned in 2016.",
        "query": "SELECT staff_name , staff_gender FROM Staff WHERE staff_name = value",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the product id for the product that was ordered most frequently.",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the product id for the product that was ordered most frequently.",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "query": "SELECT Name FROM building WHERE Height_feet BETWEEN value AND value",
        "gold_parse": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "List the names of buildings with at least 200 feet of height and with at least 20 floors.",
        "query": "SELECT Name FROM building WHERE Height_feet BETWEEN value AND value",
        "gold_parse": "SELECT name FROM building WHERE height_feet  >=  200 AND floors  >=  20",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > value",
        "gold_parse": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Find the names of schools that have more than one donator with donation amount above 8.5.",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > value",
        "gold_parse": "SELECT T2.School_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.amount  >  8.5 GROUP BY T1.school_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "query": "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "How many distinct delegates are from counties with population larger than 50000?",
        "query": "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers who have purchased at least three different products?",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the maximum and minimum number of cows across all farms.",
        "query": "SELECT Max ( Sheep_and_Goats ) , Min ( Sheep_and_Goats ) FROM farm",
        "gold_parse": "SELECT max(Cows) ,  min(Cows) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "query": "SELECT Max ( Silver ) , Min ( Gold ) FROM club_rank",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "query": "SELECT DISTINCT Status FROM city ORDER BY Area_km_2 Asc",
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Return the different statuses of cities, ascending by frequency.",
        "query": "SELECT DISTINCT Status FROM city ORDER BY Area_km_2 Asc",
        "gold_parse": "SELECT Status FROM city GROUP BY Status ORDER BY COUNT(*) ASC",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the delegates and the names of the party they belong to.",
        "query": "SELECT Governor , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the delegates and the names of the party they belong to.",
        "query": "SELECT Governor , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "query": "SELECT T1.Comptroller FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = value OR T2.Committee = value",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who were the comptrollers of the parties associated with the delegates from district 1 or district 2?",
        "query": "SELECT T1.Comptroller FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = value OR T2.Committee = value",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Return the text of tweets about the topic 'intern'.",
        "query": "SELECT text FROM tweets WHERE text = value",
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Return the text of tweets about the topic 'intern'.",
        "query": "SELECT text FROM tweets WHERE text = value",
        "gold_parse": "SELECT text FROM tweets WHERE text LIKE '%intern%'",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the teams that have both wrestlers eliminated by Orton and wrestlers eliminated by Benjamin?",
        "query": "SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value INTERSECT SELECT T2.Team FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value",
        "gold_parse": "SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Orton\" INTERSECT SELECT Team FROM Elimination WHERE Eliminated_By  =  \"Benjamin\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are names of patients who made an appointment?",
        "query": "SELECT DISTINCT Name FROM Physician",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are names of patients who made an appointment?",
        "query": "SELECT DISTINCT Name FROM Physician",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of tweets in record.",
        "query": "SELECT Count ( * ) FROM follows",
        "gold_parse": "SELECT count(*) FROM tweets",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the number of tweets in record.",
        "query": "SELECT Count ( * ) FROM follows",
        "gold_parse": "SELECT count(*) FROM tweets",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the delegate from district 1 in election.",
        "query": "SELECT Delegate FROM election WHERE Committee = value",
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the delegate from district 1 in election.",
        "query": "SELECT Delegate FROM election WHERE Committee = value",
        "gold_parse": "SELECT Delegate FROM election WHERE District  =  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the most popular first name of the actors?",
        "query": "SELECT T1.first_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the most popular first name of the actors?",
        "query": "SELECT T1.first_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name FROM actor GROUP BY first_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the full name of the customer who made the first rental.",
        "query": "SELECT first_name , last_name FROM customer ORDER BY first_name Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the full name of the customer who made the first rental.",
        "query": "SELECT first_name , last_name FROM customer ORDER BY first_name Asc LIMIT value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id  =  T2.customer_id ORDER BY T2.rental_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "what is the name and position of the head whose department has least number of employees?",
        "query": "SELECT T2.Name , T1.Position FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Position ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.position FROM department AS T1 JOIN physician AS T2 ON T1.head  =  T2.EmployeeID GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the distinct name of customers whose order status is Pending, in the order of customer id.",
        "query": "SELECT DISTINCT customer_name FROM Customers ORDER BY customer_id Asc",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = value INTERSECT SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are affiliated with both Surgery and Psychiatry departments? Tell me their names.",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = value INTERSECT SELECT T2.Name FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T1.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' INTERSECT SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircraft with at least two flights.",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from LA to Honolulu?",
        "query": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from LA to Honolulu?",
        "query": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value OR T2.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of physicians who are affiliated with Surgery or Psychiatry department.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Department AS T2 ON T1.EmployeeID = T2.Head WHERE T2.Name = value OR T2.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "gold_parse": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "Of all players with an overall rating greater than 80, how many are right-footed and left-footed?",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "gold_parse": "SELECT preferred_foot ,  count(*) FROM Player_Attributes WHERE overall_rating  >  80 GROUP BY preferred_foot",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show institution names along with the number of proteins for each institution.",
        "query": "SELECT Institution , Count ( * ) FROM Institution GROUP BY Institution",
        "gold_parse": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show institution names along with the number of proteins for each institution.",
        "query": "SELECT Institution , Count ( * ) FROM Institution GROUP BY Institution",
        "gold_parse": "SELECT T1.institution ,  count(*) FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id GROUP BY T1.institution_id",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the entry names of catalog with the attribute possessed by most entries.",
        "query": "SELECT catalog_name FROM Catalogs GROUP BY catalog_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.attribute_value  =  (SELECT attribute_value FROM Catalog_Contents_Additional_Attributes GROUP BY attribute_value ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each party, return the name of the party and the number of delegates from that party.",
        "query": "SELECT Party , Count ( * ) FROM party GROUP BY Party",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each party, return the name of the party and the number of delegates from that party.",
        "query": "SELECT Party , Count ( * ) FROM party GROUP BY Party",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "query": "SELECT Count ( * ) FROM channel WHERE Name = value",
        "gold_parse": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "How many distinct programs are broadcast at \"Night\" time?",
        "query": "SELECT Count ( * ) FROM channel WHERE Name = value",
        "gold_parse": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each county, find the name of the county and the number of delegates from that county.",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "query": "SELECT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "query": "SELECT T1.Event FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of cities in Australia.",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of cities in Australia.",
        "query": "SELECT Count ( * ) FROM country WHERE country = value",
        "gold_parse": "SELECT count(*) FROM city AS T1 JOIN country AS T2 ON T1.country_id  =  T2.country_id WHERE T2.country  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the names of all the clubs starting with the oldest?",
        "query": "SELECT name FROM club ORDER BY Start_year Desc LIMIT value",
        "gold_parse": "SELECT name FROM club ORDER BY Start_year ASC",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the names of all the clubs starting with the oldest?",
        "query": "SELECT name FROM club ORDER BY Start_year Desc LIMIT value",
        "gold_parse": "SELECT name FROM club ORDER BY Start_year ASC",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the time of elimination for the wrestler with the most days held?",
        "query": "SELECT Days_held FROM wrestler GROUP BY Days_held ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID ORDER BY T2.Days_held DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the name of staff who has been assigned multiple jobs.",
        "query": "SELECT staff_name FROM Staff",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the name of staff who has been assigned multiple jobs.",
        "query": "SELECT staff_name FROM Staff",
        "gold_parse": "SELECT T1.staff_name FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id GROUP BY T2.staff_id HAVING COUNT (*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the name of the wrestler with the fewest days held?",
        "query": "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What is the name of the wrestler with the fewest days held?",
        "query": "SELECT T1.Name FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID GROUP BY T2.Wrestler_ID ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT Name FROM wrestler ORDER BY Days_held ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "query": "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM channel AS T3 JOIN broadcast AS T2 ON T3.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Who are the owners of the programs that broadcast both in the morning and at night?",
        "query": "SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T2 ON T1.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM channel AS T3 JOIN broadcast AS T2 ON T3.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Which destination has least number of flights?",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Which destination has least number of flights?",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid GROUP BY T1.destination ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT destination FROM Flight GROUP BY destination ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions WHERE attribute_data_type = value",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the name and attribute ID of the attribute definitions with attribute value 0.",
        "query": "SELECT attribute_name , attribute_id FROM Attribute_Definitions WHERE attribute_data_type = value",
        "gold_parse": "SELECT t1.attribute_name ,  t1.attribute_id FROM Attribute_Definitions AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.attribute_id  =  t2.attribute_id WHERE t2.attribute_value  =  0",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Return all the information for each election record.",
        "query": "SELECT * FROM county",
        "gold_parse": "SELECT * FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Return all the information for each election record.",
        "query": "SELECT * FROM county",
        "gold_parse": "SELECT * FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Return all the information for each election record.",
        "query": "SELECT * FROM county",
        "gold_parse": "SELECT * FROM election",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physician was trained in the procedure that costs the most.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment ORDER BY T3.cost DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of colleges that have two or more players, listed in descending alphabetical order?",
        "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2 ORDER BY College DESC",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients stay in room 112?",
        "query": "SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = value",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of the users whose number of followers is greater than that of the user named \"Tyler Swift\".",
        "query": "SELECT name FROM user_profiles WHERE followers > ( SELECT Max ( followers ) FROM user_profiles WHERE name = value )",
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  (SELECT count(*) FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 WHERE T1.name  =  'Tyler Swift')",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the genre name of the film HUNGER ROOF?",
        "query": "SELECT name FROM category",
        "gold_parse": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the genre name of the film HUNGER ROOF?",
        "query": "SELECT name FROM category",
        "gold_parse": "SELECT T1.name FROM category AS T1 JOIN film_category AS T2 ON T1.category_id  =  T2.category_id JOIN film AS T3 ON T2.film_id  =  T3.film_id WHERE T3.title  =  'HUNGER ROOF'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which patients made more than one appointment? Tell me the name and phone number of these patients.",
        "query": "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > value",
        "gold_parse": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show me the departure date and arrival date for all flights from Los Angeles to Honolulu.",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct governors.",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct governors.",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct governors.",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct governors.",
        "query": "SELECT Count ( DISTINCT Comptroller ) FROM party",
        "gold_parse": "SELECT count(DISTINCT Governor) FROM party",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the number of patients who are not using the medication of Procrastin-X.",
        "query": "SELECT Count ( * ) FROM Patient AS T1 WHERE T1.SSN NOT IN ( SELECT T2.Medication FROM Prescribes AS T2 )",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of all the catalog entries.",
        "query": "SELECT catalog_name FROM Catalogs",
        "gold_parse": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of all the catalog entries.",
        "query": "SELECT catalog_name FROM Catalogs",
        "gold_parse": "SELECT distinct(catalog_entry_name) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "query": "SELECT Party FROM party WHERE Comptroller = value OR Comptroller = value",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1 or 2. Who served as comptrollers of the parties?",
        "query": "SELECT Party FROM party WHERE Comptroller = value OR Comptroller = value",
        "gold_parse": "SELECT T2.Comptroller FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1 OR T1.District  =  2",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names of catalog entries with level number 8?",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the names of catalog entries with level number 8?",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "query": "SELECT Type FROM Institution WHERE Enrollment > value INTERSECT SELECT Type FROM Institution WHERE Enrollment < value",
        "gold_parse": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the institution type with an institution founded after 1990 and an institution with at least 1000 enrollment.",
        "query": "SELECT Type FROM Institution WHERE Enrollment > value INTERSECT SELECT Type FROM Institution WHERE Enrollment < value",
        "gold_parse": "SELECT TYPE FROM institution WHERE founded  >  1990 AND enrollment  >=  1000",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "query": "SELECT EmployeeID FROM Nurse",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the physicians' employee ids together with their primary affiliation departments' ids.",
        "query": "SELECT EmployeeID FROM Nurse",
        "gold_parse": "SELECT physician ,  department FROM affiliated_with WHERE primaryaffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the people that have been governor the most times.",
        "query": "SELECT T1.Attorney_General FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the people that have been governor the most times.",
        "query": "SELECT T1.Attorney_General FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party GROUP BY T2.District ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "query": "SELECT T2.name , T1.uid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "query": "SELECT T2.name , T1.uid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id of the product that was ordered the most often?",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the id of the product that was ordered the most often?",
        "query": "SELECT product_id FROM Product_Suppliers GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT product_id FROM order_items GROUP BY product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "query": "SELECT T1.Name , T2.born_state , T1.Num_Employees FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "query": "SELECT T1.Name , T2.born_state , T1.Num_Employees FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the name and primarily affiliated department name of each physician?",
        "query": "SELECT T2.Name , T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code",
        "gold_parse": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the name and primarily affiliated department name of each physician?",
        "query": "SELECT T2.Name , T1.Name FROM Physician AS T1 JOIN Medication AS T2 JOIN Prescribes AS T3 ON T1.EmployeeID = T3.Physician AND T3.Medication = T2.Code",
        "gold_parse": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "query": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number and its distance for the one with the maximum price?",
        "query": "SELECT price , distance FROM flight ORDER BY price Desc LIMIT value",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Prescribes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Tell me the employee id of the head of the department with the least employees.",
        "query": "SELECT T1.SSN FROM Physician AS T1 JOIN Prescribes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT head FROM department GROUP BY departmentID ORDER BY count(departmentID) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of stores.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM store",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of stores.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM store",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of stores.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(*) FROM store",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Silver ) , Avg ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Silver ) , Avg ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the names of products that were bought by at least two distinct customers.",
        "query": "SELECT supplier_name FROM Suppliers GROUP BY supplier_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses are not used in taking any photos?",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses are not used in taking any photos?",
        "query": "SELECT Count ( * ) FROM mountain AS T1 WHERE T1.id NOT IN ( SELECT T2.mountain_id FROM photos AS T2 )",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE id NOT IN ( SELECT camera_lens_id FROM photos )",
        "correctness": 0
    },
    {
        "db_id": "performance_attendance",
        "question": "How many performances are there?",
        "query": "SELECT Count ( * ) FROM member",
        "gold_parse": "SELECT count(*) FROM performance",
        "correctness": 0
    },
    {
        "db_id": "performance_attendance",
        "question": "How many performances are there?",
        "query": "SELECT Count ( * ) FROM member",
        "gold_parse": "SELECT count(*) FROM performance",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT * FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT * FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT DISTINCT T2.Season , T1.Name , T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT DISTINCT T2.Season , T1.Name , T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "query": "SELECT aid , name FROM aircraft",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id and name of the aircraft that can cover the maximum distance?",
        "query": "SELECT aid , name FROM aircraft",
        "gold_parse": "SELECT aid ,  name FROM Aircraft ORDER BY distance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the most popular full name of the actors?",
        "query": "SELECT T1.first_name , T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What is the most popular full name of the actors?",
        "query": "SELECT T1.first_name , T1.last_name FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT first_name ,  last_name FROM actor GROUP BY first_name ,  last_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the numbers of all flights coming from Los Angeles?",
        "query": "SELECT Count ( * ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT flno FROM Flight WHERE origin  =  \"Los Angeles\"",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "query": "SELECT name , Count ( * ) FROM photos GROUP BY camera_lens_id ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What is the name of each camera lens and the number of photos taken by it? Order the result by the count of photos.",
        "query": "SELECT name , Count ( * ) FROM photos GROUP BY camera_lens_id ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT T1.name ,  count(*) FROM camera_lens AS T1 JOIN photos AS T2 ON T1.id  =  T2.camera_lens_id GROUP BY T1.id ORDER BY count(*)",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "query": "SELECT T1.Party FROM party AS T1 WHERE T1.Comptroller = value INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = value",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which parties have delegates in both the \"Appropriations\" committee and the \"Economic Matters\" committee?",
        "query": "SELECT T1.Party FROM party AS T1 WHERE T1.Comptroller = value INTERSECT SELECT T1.Party FROM party AS T1 JOIN election AS T2 ON T1.Party_ID = T2.Party WHERE T2.Committee = value",
        "gold_parse": "SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Appropriations\" INTERSECT SELECT T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.Committee  =  \"Economic Matters\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents have length below 3 or above 5? Find the catalog entry names.",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents WHERE length > value OR length < value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE LENGTH  <  3 OR width  >  5",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "query": "SELECT Count ( * ) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value AND T1.Name = value",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients' prescriptions are made by physician John Dorian?",
        "query": "SELECT Count ( * ) FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value AND T1.Name = value",
        "gold_parse": "SELECT count(T1.SSN) FROM patient AS T1 JOIN prescribes AS T2 ON T1.SSN  =  T2.patient JOIN physician AS T3 ON T2.physician  =  T3.employeeid WHERE T3.name = \"John Dorian\"",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the maximum and total number of followers of all users.",
        "query": "SELECT Max ( followers ) , Avg ( followers ) FROM user_profiles",
        "gold_parse": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the maximum and total number of followers of all users.",
        "query": "SELECT Max ( followers ) , Avg ( followers ) FROM user_profiles",
        "gold_parse": "SELECT max(followers) ,  sum(followers) FROM user_profiles",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program was launched most recently? Return the program name.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program was launched most recently? Return the program name.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program was launched most recently? Return the program name.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program was launched most recently? Return the program name.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many players are from each country?",
        "query": "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "How many players are from each country?",
        "query": "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the delegates who are from counties with population below 100000.",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the delegates who are from counties with population below 100000.",
        "query": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official languages of the countries of players from Maryland or Duke college?",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.College = value OR T2.College = value",
        "gold_parse": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.College  =  \"Maryland\" OR T2.College  =  \"Duke\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the count of distinct employees with certificates?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(DISTINCT eid) FROM Certificate",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "List the camera lens names containing substring \"Digital\".",
        "query": "SELECT name FROM photos WHERE name LIKE value",
        "gold_parse": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "List the camera lens names containing substring \"Digital\".",
        "query": "SELECT name FROM photos WHERE name LIKE value",
        "gold_parse": "SELECT name FROM camera_lens WHERE name LIKE \"%Digital%\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name and position of physicians who prescribe some medication whose brand is X?",
        "query": "SELECT T1.Name , T1.Position FROM Physician AS T1 JOIN Patient AS T2 ON T1.EmployeeID = T2.PCP WHERE T2.Name = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.position FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.Brand  =  \"X\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the level name of the cheapest catalog (in USD)?",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are in charge of more than one patient? Give me their names.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many users are there?",
        "query": "SELECT Count ( * ) FROM follows",
        "gold_parse": "SELECT count(*) FROM user_profiles",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "How many users are there?",
        "query": "SELECT Count ( * ) FROM follows",
        "gold_parse": "SELECT count(*) FROM user_profiles",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Registered Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physician who prescribed the highest dose?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Registered Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Party = value AND Comptroller = value",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Party = value AND Comptroller = value",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Give the ids and names of products with price lower than 600 or higher than 900.",
        "query": "SELECT product_id , product_name FROM Products WHERE product_price BETWEEN value AND value",
        "gold_parse": "SELECT product_id ,  product_name FROM products WHERE product_price  <  600 OR product_price  >  900",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING Avg ( T1.product_price ) > value",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return ids of all the products that are supplied by supplier id 2 and are more expensive than the average price of all products.",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id HAVING Avg ( T1.product_price ) > value",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "query": "SELECT donator_name FROM endowment WHERE amount < value",
        "gold_parse": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of all the donors except those whose donation amount less than 9.",
        "query": "SELECT donator_name FROM endowment WHERE amount < value",
        "gold_parse": "SELECT donator_name FROM endowment EXCEPT SELECT donator_name FROM endowment WHERE amount  <  9",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "query": "SELECT T1.rating , Max ( T1.rental_rate ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the highest rental rate? And what is the rate?",
        "query": "SELECT T1.rating , Max ( T1.rental_rate ) FROM film AS T1 JOIN inventory AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT title ,  rental_rate FROM film ORDER BY rental_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "query": "SELECT T1.Code , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "Show codes and fates of missions, and names of ships involved.",
        "query": "SELECT T1.Code , T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID = T2.Ship_ID",
        "gold_parse": "SELECT T1.Code ,  T1.Fate ,  T2.Name FROM mission AS T1 JOIN ship AS T2 ON T1.Ship_ID  =  T2.Ship_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "query": "SELECT Governor FROM party WHERE Party = value",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the lieutenant governor and comptroller from the democratic party.",
        "query": "SELECT Governor FROM party WHERE Party = value",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Where is store 1 located?",
        "query": "SELECT district FROM address WHERE address = value",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Where is store 1 located?",
        "query": "SELECT district FROM address WHERE address = value",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "SELECT Pigs , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "SELECT Pigs , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all country and league names.",
        "query": "SELECT name , name FROM Country",
        "gold_parse": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all country and league names.",
        "query": "SELECT name , name FROM Country",
        "gold_parse": "SELECT T1.name ,  T2.name FROM Country AS T1 JOIN League AS T2 ON T1.id  =  T2.country_id",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many items in inventory does store 1 have?",
        "query": "SELECT Count ( * ) FROM payment WHERE amount = value",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "How many items in inventory does store 1 have?",
        "query": "SELECT Count ( * ) FROM payment WHERE amount = value",
        "gold_parse": "SELECT count(*) FROM inventory WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "query": "SELECT T3.Player FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team ORDER BY T2.Season Asc",
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are all the players who played in match season, sorted by college in ascending alphabetical order?",
        "query": "SELECT T3.Player FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team ORDER BY T2.Season Asc",
        "gold_parse": "SELECT player FROM match_season ORDER BY College ASC",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the names of counties that have at least two delegates.",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the names of counties that have at least two delegates.",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the dates on which more than one revisions were made.",
        "query": "SELECT date_of_publication FROM Catalogs GROUP BY date_of_publication HAVING Count ( * ) > value",
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the dates on which more than one revisions were made.",
        "query": "SELECT date_of_publication FROM Catalogs GROUP BY date_of_publication HAVING Count ( * ) > value",
        "gold_parse": "SELECT date_of_latest_revision FROM Catalogs GROUP BY date_of_latest_revision HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the staff ids and genders for any staff with the title Department Manager.",
        "query": "SELECT T1.staff_id , T1.staff_gender FROM Staff AS T1 JOIN Departments AS T2 JOIN Staff_Department_Assignments AS T3 ON T1.staff_id = T3.staff_id AND T3.department_id = T2.department_id WHERE T2.department_name = value",
        "gold_parse": "SELECT T1.staff_id ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Department Manager\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "query": "SELECT Sum ( Share_in_percent ) FROM channel",
        "gold_parse": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the total percentage share of all channels owned by CCTV.",
        "query": "SELECT Sum ( Share_in_percent ) FROM channel",
        "gold_parse": "SELECT sum(Share_in_percent) FROM channel WHERE OWNER  =  'CCTV'",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of all colleges that have two or more players?",
        "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the names of all colleges that have two or more players?",
        "query": "SELECT T1.Name FROM team AS T1 JOIN match_season AS T2 ON T1.Team_id = T2.Team GROUP BY T2.College HAVING Count ( * ) > = value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the distinct districts for elections.",
        "query": "SELECT DISTINCT Committee FROM election",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the distinct districts for elections.",
        "query": "SELECT DISTINCT Committee FROM election",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names of the aircraft that the least people are certified to fly?",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "When did the first payment happen?",
        "query": "SELECT payment_date FROM payment",
        "gold_parse": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "When did the first payment happen?",
        "query": "SELECT payment_date FROM payment",
        "gold_parse": "SELECT payment_date FROM payment ORDER BY payment_date ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "query": "SELECT Reign FROM wrestler WHERE Days_held > value",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the times of elimination for wrestlers with over 50 days held?",
        "query": "SELECT Reign FROM wrestler WHERE Days_held > value",
        "gold_parse": "SELECT T1.Time FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID WHERE T2.Days_held  >  50",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms are located for each block code?",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms are located for each block code?",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many rooms are located for each block code?",
        "query": "SELECT BlockCode , Count ( * ) FROM Room GROUP BY BlockCode",
        "gold_parse": "SELECT count(*) ,  T1.blockcode FROM BLOCK AS T1 JOIN room AS T2 ON T1.blockfloor  =  T2.blockfloor AND T1.blockcode  =  T2.blockcode GROUP BY T1.blockcode",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct creation years of the departments managed by a secretary born in state 'Alabama'?",
        "query": "SELECT DISTINCT T1.Creation FROM department AS T1 JOIN management AS T2 ON T1.Department_ID = T2.department_ID WHERE T2.temporary_acting = value",
        "gold_parse": "SELECT DISTINCT T1.creation FROM department AS T1 JOIN management AS T2 ON T1.department_id  =  T2.department_id JOIN head AS T3 ON T2.head_id  =  T3.head_id WHERE T3.born_state  =  'Alabama'",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "query": "SELECT name FROM photos GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "What are the names of the cameras that have taken picture of the most mountains?",
        "query": "SELECT name FROM photos GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM photos AS T1 JOIN camera_lens AS T2 ON T1.camera_lens_id  =  T2.id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of catalog entries with level number 8.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of catalog entries with level number 8.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds = value",
        "gold_parse": "SELECT t1.catalog_entry_name FROM Catalog_Contents AS t1 JOIN Catalog_Contents_Additional_Attributes AS t2 ON t1.catalog_entry_id  =  t2.catalog_entry_id WHERE t2.catalog_level_number  =  \"8\"",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "How many ships are there?",
        "query": "SELECT Count ( * ) FROM mission",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "ship_mission",
        "question": "How many ships are there?",
        "query": "SELECT Count ( * ) FROM mission",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "query": "SELECT name FROM language WHERE name = value",
        "gold_parse": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which language does the film AIRPORT POLLOCK use? List the language name.",
        "query": "SELECT name FROM language WHERE name = value",
        "gold_parse": "SELECT T2.name FROM film AS T1 JOIN LANGUAGE AS T2 ON T1.language_id  =  T2.language_id WHERE T1.title  =  'AIRPORT POLLOCK'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who most recently stayed in room 111.",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the patient who most recently stayed in room 111.",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "gold_parse": "SELECT patient FROM stay WHERE room  =  111 ORDER BY staystart DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "query": "SELECT Count ( * ) FROM aircraft WHERE distance > value",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number for all flights with more than 2000 distance.",
        "query": "SELECT Count ( * ) FROM aircraft WHERE distance > value",
        "gold_parse": "SELECT flno FROM Flight WHERE distance  >  2000",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average rating for right-footed players and left-footed players?",
        "query": "SELECT Avg ( overall_rating ) FROM Player_Attributes",
        "gold_parse": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average rating for right-footed players and left-footed players?",
        "query": "SELECT Avg ( overall_rating ) FROM Player_Attributes",
        "gold_parse": "SELECT preferred_foot ,  avg(overall_rating) FROM Player_Attributes GROUP BY preferred_foot",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the ids of all distinct customers who made order after some orders that were Cancelled.",
        "query": "SELECT DISTINCT T1.customer_id FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_date < value",
        "gold_parse": "SELECT DISTINCT customer_id FROM Customer_Orders WHERE order_date  >  (SELECT min(order_date) FROM Customer_Orders WHERE order_status_code  =  \"Cancelled\")",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all physicians and their primary affiliated departments' names.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT T1.name ,  T3.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T2.PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "query": "SELECT Party , Count ( * ) FROM party GROUP BY Party",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each party and the corresponding number of delegates from that party.",
        "query": "SELECT Party , Count ( * ) FROM party GROUP BY Party",
        "gold_parse": "SELECT T2.Party ,  COUNT(*) FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID GROUP BY T1.Party",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the draft pick numbers and draft classes for players who play the Defender position?",
        "query": "SELECT Draft_Pick_Number , Season FROM match_season WHERE Position = value",
        "gold_parse": "SELECT Draft_Pick_Number ,  Draft_Class FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the flight number, origin, and destination for all flights in alphabetical order by departure cities?",
        "query": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > ( SELECT Avg ( T1.product_price ) FROM Products AS T1 )",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of products from the supplier with id 2, which are more expensive than the average price across all products?",
        "query": "SELECT T2.product_id FROM Products AS T1 JOIN Product_Suppliers AS T2 ON T1.product_id = T2.product_id WHERE T1.product_price > ( SELECT Avg ( T1.product_price ) FROM Products AS T1 )",
        "gold_parse": "SELECT T1.product_id FROM product_suppliers AS T1 JOIN products AS T2 ON T1.product_id  =  T2.product_id WHERE T1.supplier_id  =  2 AND T2.product_price  >  (SELECT avg(product_price) FROM products)",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of different film ratings.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Count the number of different film ratings.",
        "query": "SELECT Count ( * ) FROM actor",
        "gold_parse": "SELECT count(DISTINCT rating) FROM film",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "query": "SELECT Count ( * ) FROM Room WHERE RoomType = value",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "query": "SELECT Count ( * ) FROM Room WHERE RoomType = value",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are affiliated with either Surgery or Psychiatry department? Give me their names.",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID WHERE T2.Name = value OR T2.Name = value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN affiliated_with AS T2 ON T1.EmployeeID  =  T2.physician JOIN department AS T3 ON T2.department  =  T3.DepartmentID WHERE T3.name  =  'Surgery' OR T3.name  =  'Psychiatry'",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "query": "SELECT Enrollment FROM School WHERE Mascot = value",
        "gold_parse": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many donors have endowment for school named \"Glenn\"?",
        "query": "SELECT Enrollment FROM School WHERE Mascot = value",
        "gold_parse": "SELECT count(DISTINCT T1.donator_name) FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T2.school_name  =  \"Glenn\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the name and distance of every aircraft that can cover a distance of more than 5000 and which at least 5 people can fly?",
        "query": "SELECT name , distance FROM aircraft WHERE distance BETWEEN value AND value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid WHERE T2.distance  >  5000 GROUP BY T1.aid ORDER BY count(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the heads who are born outside the California state?",
        "query": "SELECT T1.Name FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID WHERE T2.born_state ! = value",
        "gold_parse": "SELECT name FROM head WHERE born_state != 'California'",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the names of the heads who are born outside the California state?",
        "query": "SELECT T1.Name FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID WHERE T2.born_state ! = value",
        "gold_parse": "SELECT name FROM head WHERE born_state != 'California'",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Year FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Year FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "query": "SELECT Party FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the parties associated with the delegates from district 1. Who served as governors of the parties?",
        "query": "SELECT Party FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT T2.Governor FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID WHERE T1.District  =  1",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "query": "SELECT first_name , last_name , customer_id FROM customer GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which customer, who has made at least one payment, has spent the least money? List his or her first name, last name, and the id.",
        "query": "SELECT first_name , last_name , customer_id FROM customer GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.first_name ,  T1.last_name ,  T1.customer_id FROM customer AS T1 JOIN payment AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY sum(amount) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
        "query": "SELECT * FROM Prescribes AS T1 WHERE T1.Physician = value EXCEPT SELECT T3.Name FROM Procedures AS T2 JOIN Nurse AS T3 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures AND T4.AssistingNurse = T3.EmployeeID WHERE T2.Cost > value",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Among the procedures that cost more than 1000, which were not specialized in by physician John Wen?",
        "query": "SELECT * FROM Prescribes AS T1 WHERE T1.Physician = value EXCEPT SELECT T3.Name FROM Procedures AS T2 JOIN Nurse AS T3 JOIN Undergoes AS T4 ON T2.Code = T4.Procedures AND T4.AssistingNurse = T3.EmployeeID WHERE T2.Cost > value",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "query": "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Count the number of distinct delegates who are from counties with population above 50000.",
        "query": "SELECT Count ( DISTINCT T2.Committee ) FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population > value",
        "gold_parse": "SELECT count(DISTINCT T2.Delegate) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  >  50000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show flight number, origin, destination of all flights in the alphabetical order of the departure cities.",
        "query": "SELECT T1.flno , T1.origin , T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.destination Asc",
        "gold_parse": "SELECT flno ,  origin ,  destination FROM Flight ORDER BY origin",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the names of wrestlers and the elimination moves?",
        "query": "SELECT Name , Event FROM wrestler",
        "gold_parse": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "What are the names of wrestlers and the elimination moves?",
        "query": "SELECT Name , Event FROM wrestler",
        "gold_parse": "SELECT T2.Name ,  T1.Elimination_Move FROM elimination AS T1 JOIN wrestler AS T2 ON T1.Wrestler_ID  =  T2.Wrestler_ID",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the maximum and minimum customer codes.",
        "query": "SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the maximum and minimum customer codes.",
        "query": "SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "query": "SELECT Name FROM channel",
        "gold_parse": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which channels are broadcast in the morning? Give me the channel names.",
        "query": "SELECT Name FROM channel",
        "gold_parse": "SELECT t1.name FROM channel AS t1 JOIN broadcast AS t2 ON t1.channel_id  =  t2.channel_id WHERE t2.time_of_day  =  'Morning'",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "query": "SELECT County_name FROM county GROUP BY County_name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names and birthdays of the top five players in terms of potential.",
        "query": "SELECT player_name , birthday FROM Player GROUP BY birthday ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names and birthdays of the top five players in terms of potential.",
        "query": "SELECT player_name , birthday FROM Player GROUP BY birthday ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT DISTINCT T1.player_name ,  T1.birthday FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id  =  T2.player_api_id ORDER BY potential DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What are the names of players who have the best dribbling?",
        "query": "SELECT player_name FROM Player ORDER BY height Desc LIMIT value",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What are the names of players who have the best dribbling?",
        "query": "SELECT player_name FROM Player ORDER BY height Desc LIMIT value",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.dribbling  =  ( SELECT max(overall_rating) FROM Player_Attributes)",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Room AS T2 JOIN Stay AS T3 ON T1.SSN = T3.Patient AND T3.Room = T2.RoomNumber WHERE T2.BlockFloor = value",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all patients who have an undergoing treatment and are staying in room 111.",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Room AS T2 JOIN Stay AS T3 ON T1.SSN = T3.Patient AND T3.Room = T2.RoomNumber WHERE T2.BlockFloor = value",
        "gold_parse": "SELECT DISTINCT T2.name FROM undergoes AS T1 JOIN patient AS T2 ON T1.patient = T2.SSN JOIN stay AS T3 ON T1.Stay  =  T3.StayID WHERE T3.room  =  111",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts do we have?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many aircrafts do we have?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Aircraft",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the ids of the two department store chains with the most department stores.",
        "query": "SELECT dept_store_id FROM Departments GROUP BY dept_store_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT dept_store_chain_id FROM department_stores GROUP BY dept_store_chain_id ORDER BY count(*) DESC LIMIT 2",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "How many acting statuses are there?",
        "query": "SELECT Count ( * ) FROM department",
        "gold_parse": "SELECT count(DISTINCT temporary_acting) FROM management",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "How many acting statuses are there?",
        "query": "SELECT Count ( * ) FROM department",
        "gold_parse": "SELECT count(DISTINCT temporary_acting) FROM management",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "query": "SELECT T1.first_name FROM customer AS T1 EXCEPT SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.return_date > value",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the first names of customers who have not rented any films after '2005-08-23 02:06:01'?",
        "query": "SELECT T1.first_name FROM customer AS T1 EXCEPT SELECT T1.first_name FROM customer AS T1 JOIN rental AS T2 ON T1.customer_id = T2.customer_id WHERE T2.return_date > value",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid ORDER BY T1.price Desc LIMIT value",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the country names and the corresponding number of players.",
        "query": "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the country names and the corresponding number of players.",
        "query": "SELECT Country_name , Count ( * ) FROM country GROUP BY Country_name",
        "gold_parse": "SELECT Country_name ,  COUNT(*) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country GROUP BY T1.Country_name",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List the names of all players who have a crossing score higher than 90 and prefer their right foot.",
        "query": "SELECT T2.player_name FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T1.overall_rating > value",
        "gold_parse": "SELECT DISTINCT T1.player_name FROM Player AS T1 JOIN Player_Attributes AS T2 ON T1.player_api_id = T2.player_api_id WHERE T2.crossing  >  90 AND T2.preferred_foot  =  \"right\"",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "query": "SELECT DISTINCT age FROM head",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "What are the distinct ages of the heads who are acting?",
        "query": "SELECT DISTINCT age FROM head",
        "gold_parse": "SELECT DISTINCT T1.age FROM management AS T2 JOIN head AS T1 ON T1.head_id  =  T2.head_id WHERE T2.temporary_acting  =  'Yes'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = value",
        "gold_parse": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of medication used on the patient who stays in room 111?",
        "query": "SELECT T1.Name FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient WHERE T2.ExaminationRoom = value",
        "gold_parse": "SELECT T4.name FROM stay AS T1 JOIN patient AS T2 ON T1.Patient  =  T2.SSN JOIN Prescribes AS T3 ON T3.Patient  =  T2.SSN JOIN Medication AS T4 ON T3.Medication  =  T4.Code WHERE room  =  111",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average price for flights from Los Angeles to Honolulu.",
        "query": "SELECT Avg ( price ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT avg(price) FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "In which distinct years was the governor \"Eliot Spitzer\"?",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the unique block codes that have available rooms?",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the unique block codes that have available rooms?",
        "query": "SELECT DISTINCT BlockCode FROM Room",
        "gold_parse": "SELECT DISTINCT blockcode FROM room WHERE unavailable  =  0",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who were assigned in 2016?",
        "query": "SELECT staff_name , staff_gender FROM Staff",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who were assigned in 2016?",
        "query": "SELECT staff_name , staff_gender FROM Staff",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN staff_department_assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.date_assigned_from LIKE \"2016%\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "query": "SELECT DISTINCT product_name FROM Products",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "query": "SELECT DISTINCT product_name FROM Products",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the number of different programs that are broadcast during night time.",
        "query": "SELECT Count ( DISTINCT Program_ID ) FROM broadcast",
        "gold_parse": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the number of different programs that are broadcast during night time.",
        "query": "SELECT Count ( DISTINCT Program_ID ) FROM broadcast",
        "gold_parse": "SELECT count(DISTINCT program_id) FROM broadcast WHERE time_of_day  =  'Night'",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the aircrafts with top 3 shortest lengthes? List their names.",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "List the names of editors that are not on any journal committee.",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "List the names of editors that are not on any journal committee.",
        "query": "SELECT T1.Name FROM editor AS T1 WHERE T1.Editor_ID NOT IN ( SELECT T2.Editor_ID FROM journal_committee AS T2 WHERE T2.Journal_ID = value )",
        "gold_parse": "SELECT Name FROM editor WHERE editor_id NOT IN (SELECT editor_id FROM journal_committee)",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the names and ids of customers who have TN in their address.",
        "query": "SELECT customer_name , customer_id FROM Customers WHERE customer_address = value",
        "gold_parse": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the names and ids of customers who have TN in their address.",
        "query": "SELECT customer_name , customer_id FROM Customers WHERE customer_address = value",
        "gold_parse": "SELECT customer_name ,  customer_id FROM customers WHERE customer_address LIKE \"%TN%\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many medications are prescribed for each brand?",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many medications are prescribed for each brand?",
        "query": "SELECT Count ( * ) , Brand FROM Medication GROUP BY Brand",
        "gold_parse": "SELECT count(*) ,  T1.name FROM medication AS T1 JOIN prescribes AS T2 ON T1.code = T2.medication GROUP BY T1.brand",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "query": "SELECT first_name , last_name FROM actor WHERE last_update > value",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the full names of actors who had roles in more than 30 films?",
        "query": "SELECT first_name , last_name FROM actor WHERE last_update > value",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM film_actor AS T1 JOIN actor AS T2 ON T1.actor_id  =  T2.actor_id GROUP BY T2.actor_id HAVING count(*)  >  30",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "query": "SELECT T1.title , T2.actor_id , T1.description FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the title, id, and description of the movie with the greatest number of actors?",
        "query": "SELECT T1.title , T2.actor_id , T1.description FROM film AS T1 JOIN film_actor AS T2 ON T1.film_id = T2.film_id GROUP BY T2.film_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the names of programs whose origin is not in Beijing.",
        "query": "SELECT Name FROM channel WHERE Owner ! = value",
        "gold_parse": "SELECT name FROM program WHERE origin != 'Beijing'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the names of programs whose origin is not in Beijing.",
        "query": "SELECT Name FROM channel WHERE Owner ! = value",
        "gold_parse": "SELECT name FROM program WHERE origin != 'Beijing'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all program origins in the alphabetical order.",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List all program origins in the alphabetical order.",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "How many editors are there?",
        "query": "SELECT Count ( * ) FROM journal",
        "gold_parse": "SELECT count(*) FROM editor",
        "correctness": 0
    },
    {
        "db_id": "journal_committee",
        "question": "How many editors are there?",
        "query": "SELECT Count ( * ) FROM journal",
        "gold_parse": "SELECT count(*) FROM editor",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the patient who made the most recent appointment?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician ORDER BY T2.End Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the patient who made the most recent appointment?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician ORDER BY T2.End Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM patient AS T1 JOIN appointment AS T2 ON T1.ssn = T2.patient ORDER BY T2.start DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Procedures AS T2 JOIN Trained_In AS T3 ON T1.EmployeeID = T3.Physician AND T3.Treatment = T2.Code WHERE T1.Name = value EXCEPT SELECT T2.Name FROM Procedures AS T2 WHERE T2.Cost > value",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of all procedures which cost more than 1000 but which physician John Wen was not trained in?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Procedures AS T2 JOIN Trained_In AS T3 ON T1.EmployeeID = T3.Physician AND T3.Treatment = T2.Code WHERE T1.Name = value EXCEPT SELECT T2.Name FROM Procedures AS T2 WHERE T2.Cost > value",
        "gold_parse": "SELECT name FROM procedures WHERE cost  >  1000 EXCEPT SELECT T3.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T1.name  =  \"John Wen\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the names of users who have more than one tweet.",
        "query": "SELECT name FROM user_profiles GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "query": "SELECT T1.first_name , T2.actor_id , T2.actor_id FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which film has the most number of actors or actresses? List the film name, film id and description.",
        "query": "SELECT T1.first_name , T2.actor_id , T2.actor_id FROM actor AS T1 JOIN film_actor AS T2 ON T1.actor_id = T2.actor_id GROUP BY T2.actor_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.title ,  T2.film_id ,  T2.description FROM film_actor AS T1 JOIN film AS T2 ON T1.film_id  =  T2.film_id GROUP BY T2.film_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Employee",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Employee",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "How many employees do we have?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Employee",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "query": "SELECT DISTINCT Name FROM Department",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of departments that have primarily affiliated physicians.",
        "query": "SELECT DISTINCT Name FROM Department",
        "gold_parse": "SELECT DISTINCT T2.name FROM affiliated_with AS T1 JOIN department AS T2 ON T1.department = T2.departmentid WHERE PrimaryAffiliation  =  1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Employee",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Employee",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the number of employees?",
        "query": "SELECT Count ( * ) FROM flight",
        "gold_parse": "SELECT count(*) FROM Employee",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which movies have 'Deleted Scenes' as a substring in the special feature?",
        "query": "SELECT title FROM film WHERE title LIKE value",
        "gold_parse": "SELECT title FROM film WHERE special_features LIKE '%Deleted Scenes%'",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "query": "SELECT Count ( DISTINCT T2.color ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Country = value",
        "gold_parse": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many distinct kinds of camera lenses are used to take photos of mountains in the country 'Ethiopia'?",
        "query": "SELECT Count ( DISTINCT T2.color ) FROM mountain AS T1 JOIN photos AS T2 ON T1.id = T2.mountain_id WHERE T1.Country = value",
        "gold_parse": "SELECT count(DISTINCT T2.camera_lens_id) FROM mountain AS T1 JOIN photos AS T2 ON T1.id  =  T2.mountain_id WHERE T1.country  =  'Ethiopia'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "query": "SELECT Name FROM Physician",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many farms are there?",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(*) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many farms are there?",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(*) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the entry name of the catalog with the highest price (in USD).",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_pounds Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "query": "SELECT T1.Name , T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T2.Founded > value GROUP BY T2.Institution HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the names and heights of buildings with at least two institutions founded after 1880.",
        "query": "SELECT T1.Name , T1.Height_feet FROM building AS T1 JOIN Institution AS T2 ON T1.building_id = T2.building_id WHERE T2.Founded > value GROUP BY T2.Institution HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.name ,  T1.height_feet FROM building AS T1 JOIN institution AS T2 ON T1.building_id  =  T2.building_id WHERE T2.founded  >  1880 GROUP BY T1.building_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are on call.",
        "query": "SELECT Name FROM Nurse",
        "gold_parse": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the names of nurses who are on call.",
        "query": "SELECT Name FROM Nurse",
        "gold_parse": "SELECT DISTINCT T1.name FROM nurse AS T1 JOIN on_call AS T2 ON T1.EmployeeID  =  T2.nurse",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the statuses and average populations of each city?",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What are the statuses and average populations of each city?",
        "query": "SELECT City_ID , Avg ( Population ) FROM city GROUP BY City_ID",
        "gold_parse": "SELECT Status ,  avg(Population) FROM city GROUP BY Status",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the names of channels that are not owned by CCTV.",
        "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast_share AS T2 )",
        "gold_parse": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the names of channels that are not owned by CCTV.",
        "query": "SELECT T1.Name FROM channel AS T1 WHERE T1.Channel_ID NOT IN ( SELECT T2.Channel_ID FROM broadcast_share AS T2 )",
        "gold_parse": "SELECT name FROM channel WHERE OWNER != 'CCTV'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < value",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is id of the staff who had a Staff Department Assignment earlier than any Clerical Staff?",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < value",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "query": "SELECT DISTINCT customer_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the names of all the distinct customers who bought a keyboard.",
        "query": "SELECT DISTINCT customer_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id JOIN products AS T4 ON T3.product_id  =  T4.product_id WHERE T4.product_name  =  \"keyboard\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.parent_entry_id > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.parent_entry_id > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What place has the most flights coming from there?",
        "query": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What place has the most flights coming from there?",
        "query": "SELECT destination FROM flight GROUP BY destination ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT origin FROM Flight GROUP BY origin ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and phone numbers for all suppliers, sorted in alphabetical order of their addressed?",
        "query": "SELECT supplier_name , supplier_phone FROM Suppliers ORDER BY supplier_name Asc",
        "gold_parse": "SELECT T1.supplier_name ,  T1.supplier_phone FROM Suppliers AS T1 JOIN supplier_addresses AS T2 ON T1.supplier_id  =  T2.supplier_id JOIN addresses AS T3 ON T2.address_id  =  T3.address_id ORDER BY T3.address_details",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show the name of each county along with the corresponding number of delegates from that county.",
        "query": "SELECT County_name , Count ( * ) FROM county GROUP BY County_name",
        "gold_parse": "SELECT T1.County_name ,  COUNT(*) FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "query": "SELECT T2.Time FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value OR T1.Name = value",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Show the times of elimination by \"Punk\" or \"Orton\".",
        "query": "SELECT T2.Time FROM wrestler AS T1 JOIN Elimination AS T2 ON T1.Wrestler_ID = T2.Wrestler_ID WHERE T1.Name = value OR T1.Name = value",
        "gold_parse": "SELECT TIME FROM elimination WHERE Eliminated_By  =  \"Punk\" OR Eliminated_By  =  \"Orton\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "query": "SELECT DISTINCT Name FROM Patient ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM medication ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all distinct medications?",
        "query": "SELECT DISTINCT Name FROM Patient ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM medication ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the name of the program that was launched most recently.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the name of the program that was launched most recently.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the name of the program that was launched most recently.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the name of the program that was launched most recently.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Desc LIMIT value",
        "gold_parse": "SELECT name FROM program ORDER BY launch DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids of suppliers which have an average amount purchased of above 50000 or below 30000?",
        "query": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING Avg ( total_value_purchased ) > value",
        "gold_parse": "SELECT supplier_id FROM Product_Suppliers GROUP BY supplier_id HAVING avg(total_amount_purchased)  >  50000 OR avg(total_amount_purchased)  <  30000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircraft which fewest people have its certificate.",
        "query": "SELECT name FROM aircraft GROUP BY name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T2.name FROM Certificate AS T1 JOIN Aircraft AS T2 ON T2.aid  =  T1.aid GROUP BY T1.aid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of patients who are not taking the medication of Procrastin-X.",
        "query": "SELECT Name FROM Patient EXCEPT SELECT Name FROM Patient",
        "gold_parse": "SELECT name FROM patient EXCEPT SELECT T1.name FROM patient AS T1 JOIN Prescribes AS T2 ON T2.Patient  =  T1.SSN JOIN Medication AS T3 ON T2.Medication  =  T3.Code WHERE T3.name  =  'Procrastin-X'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the largest and smallest customer codes?",
        "query": "SELECT Max ( customer_phone ) , Min ( customer_phone ) FROM Customers",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the names of customers who have bought by at least three distinct products.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id JOIN order_items AS T3 ON T2.order_id  =  T3.order_id GROUP BY T1.customer_id HAVING COUNT (DISTINCT T3.product_id)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the names for all aircrafts with at least 2 flights?",
        "query": "SELECT name FROM aircraft GROUP BY name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the total number of clubs that have less than 10 medals in total?",
        "query": "SELECT Count ( * ) FROM club_rank WHERE Gold < value",
        "gold_parse": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the total number of clubs that have less than 10 medals in total?",
        "query": "SELECT Count ( * ) FROM club_rank WHERE Gold < value",
        "gold_parse": "SELECT count(*) FROM club_rank WHERE Total  <  10",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Count the number of different official languages corresponding to countries that players who play Defender are from.",
        "query": "SELECT Count ( DISTINCT Official_native_language ) FROM country",
        "gold_parse": "SELECT count(DISTINCT T1.Official_native_language) FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email for the users who have more than one follower.",
        "query": "SELECT name , email FROM user_profiles GROUP BY email HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email for the users who have more than one follower.",
        "query": "SELECT name , email FROM user_profiles GROUP BY email HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.total_budget_percent_budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are all the movies rated as R? List the titles.",
        "query": "SELECT title FROM film",
        "gold_parse": "SELECT title FROM film WHERE rating  =  'R'",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are all the movies rated as R? List the titles.",
        "query": "SELECT title FROM film",
        "gold_parse": "SELECT title FROM film WHERE rating  =  'R'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program origins ordered alphabetically?",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "What is the list of program origins ordered alphabetically?",
        "query": "SELECT Name FROM channel ORDER BY Name Asc",
        "gold_parse": "SELECT origin FROM program ORDER BY origin",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What are the departure and arrival dates of all flights from LA to Honolulu?",
        "query": "SELECT T1.arrival_date , T1.departure_date FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T2.name = value",
        "gold_parse": "SELECT departure_date ,  arrival_date FROM Flight WHERE origin  =  \"Los Angeles\" AND destination  =  \"Honolulu\"",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many different statuses do cities have?",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(DISTINCT Status) FROM city",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "How many different statuses do cities have?",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(DISTINCT Status) FROM city",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients are not using Procrastin-X as medication?",
        "query": "SELECT Count ( * ) FROM Patient WHERE SSN NOT IN ( SELECT SSN FROM Patient WHERE Name = value )",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "How many patients are not using Procrastin-X as medication?",
        "query": "SELECT Count ( * ) FROM Patient WHERE SSN NOT IN ( SELECT SSN FROM Patient WHERE Name = value )",
        "gold_parse": "SELECT count(*) FROM patient WHERE SSN NOT IN ( SELECT T1.patient FROM Prescribes AS T1 JOIN Medication AS T2 ON T1.Medication  =  T2.Code WHERE T2.name  =  'Procrastin-X' )",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the name of each aircraft and how many flights does each one complete?",
        "query": "SELECT name , Count ( * ) FROM aircraft GROUP BY name",
        "gold_parse": "SELECT T2.name ,  count(*) FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid GROUP BY T1.aid",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "what is the number of different channel owners?",
        "query": "SELECT Count ( * ) FROM program",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "what is the number of different channel owners?",
        "query": "SELECT Count ( * ) FROM program",
        "gold_parse": "SELECT count(DISTINCT OWNER) FROM channel",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which patient is undergoing the most recent treatment?",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "gold_parse": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which patient is undergoing the most recent treatment?",
        "query": "SELECT Physician FROM Trained_In ORDER BY CertificationDate Desc LIMIT value",
        "gold_parse": "SELECT patient FROM undergoes ORDER BY dateundergoes LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
        "query": "SELECT first_name FROM customer WHERE create_date > value",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the first names of customers who did not rented a film after the date '2005-08-23 02:06:01'.",
        "query": "SELECT first_name FROM customer WHERE create_date > value",
        "gold_parse": "SELECT first_name FROM customer WHERE customer_id NOT IN( SELECT customer_id FROM rental WHERE rental_date  >  '2005-08-23 02:06:01' )",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the names of all the products whose stock number starts with \"2\".",
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_name LIKE value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE product_stock_number LIKE \"2%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "For each player, what are their name, season, and country that they belong to?",
        "query": "SELECT T2.Name , T3.Season , T1.Country_name FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id AND T1.Country_id = T3.Country",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "For each player, what are their name, season, and country that they belong to?",
        "query": "SELECT T2.Name , T3.Season , T1.Country_name FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id AND T1.Country_id = T3.Country",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T2.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the name of the nurse who has the largest number of appointments.",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "query": "SELECT Count ( * ) FROM mountain WHERE Height > value",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "query": "SELECT Count ( * ) FROM mountain WHERE Height > value",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show names for all aircrafts of which John Williams has certificates.",
        "query": "SELECT T2.name FROM flight AS T1 JOIN aircraft AS T2 ON T1.aid = T2.aid WHERE T1.origin = value",
        "gold_parse": "SELECT T3.name FROM Employee AS T1 JOIN Certificate AS T2 ON T1.eid  =  T2.eid JOIN Aircraft AS T3 ON T3.aid  =  T2.aid WHERE T1.name  =  \"John Williams\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "list all the names of programs, ordering by launch time.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Asc",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "list all the names of programs, ordering by launch time.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Asc",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "list all the names of programs, ordering by launch time.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Asc",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "list all the names of programs, ordering by launch time.",
        "query": "SELECT T2.Name FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID ORDER BY T1.Launch Asc",
        "gold_parse": "SELECT name FROM program ORDER BY launch",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "query": "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > value",
        "gold_parse": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "what are name and phone number of patients who had more than one appointment?",
        "query": "SELECT T1.Name , T1.Phone FROM Patient AS T1 JOIN Appointment AS T2 ON T1.SSN = T2.Patient GROUP BY T2.Physician HAVING Count ( * ) > value",
        "gold_parse": "SELECT name ,  phone FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn GROUP BY T1.patient HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the name of the program that is broadcast most frequently.",
        "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Find the name of the program that is broadcast most frequently.",
        "query": "SELECT T1.Name FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID GROUP BY T2.Channel_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the information about election.",
        "query": "SELECT * FROM county",
        "gold_parse": "SELECT * FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the information about election.",
        "query": "SELECT * FROM county",
        "gold_parse": "SELECT * FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Show all the information about election.",
        "query": "SELECT * FROM county",
        "gold_parse": "SELECT * FROM election",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Count the number of farms.",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(*) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Count the number of farms.",
        "query": "SELECT Count ( * ) FROM city",
        "gold_parse": "SELECT count(*) FROM farm",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T1.Owner FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM program AS T3 JOIN broadcast AS T2 ON T3.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T1.Owner FROM channel AS T1 JOIN broadcast AS T2 ON T1.Channel_ID = T2.Channel_ID WHERE T2.Time_of_day = value INTERSECT SELECT T3.Owner FROM program AS T3 JOIN broadcast AS T2 ON T3.Program_ID = T2.Program_ID WHERE T2.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_pounds Asc LIMIT value",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_pounds Asc LIMIT value",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "query": "SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value INTERSECT SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Which college have both players with position midfielder and players with position defender?",
        "query": "SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value INTERSECT SELECT T2.College FROM team AS T1 JOIN match_season AS T2 ON T2.Team = T1.Team_id JOIN player AS T3 ON T1.Team_id = T3.Team WHERE T3.Player = value",
        "gold_parse": "SELECT College FROM match_season WHERE POSITION  =  \"Midfielder\" INTERSECT SELECT College FROM match_season WHERE POSITION  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "query": "SELECT Name FROM channel GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "Which program is broadcast most frequently? Give me the program name.",
        "query": "SELECT Name FROM channel GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id GROUP BY t2.program_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List all the product names with the color description \"white\".",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List all the product names with the color description \"white\".",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the name of the customer that made the order with the largest quantity?",
        "query": "SELECT customer_name FROM Customers ORDER BY payment_method Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the name of the customer that made the order with the largest quantity?",
        "query": "SELECT customer_name FROM Customers ORDER BY payment_method Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "query": "SELECT Name , Main_Services FROM station GROUP BY Station_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the names and main services for train stations that have the top three total number of passengers.",
        "query": "SELECT Name , Main_Services FROM station GROUP BY Station_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name ,  main_services FROM station ORDER BY total_passengers DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "query": "SELECT DISTINCT Name FROM wine WHERE Price > ( SELECT Max ( Price ) FROM wine WHERE Winery = value )",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of all wines that have prices higher than some wines from John Anthony winery.",
        "query": "SELECT DISTINCT Name FROM wine WHERE Price > ( SELECT Max ( Price ) FROM wine WHERE Winery = value )",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE Price  >  (SELECT min(Price) FROM wine WHERE Winery  =  \"John Anthony\")",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the number of customers who have at least one order with \"Cancelled\" status.",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the most common amenity in the dorms?",
        "query": "SELECT amenity_name FROM Dorm_amenity GROUP BY amenity_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the most common amenity in the dorms?",
        "query": "SELECT amenity_name FROM Dorm_amenity GROUP BY amenity_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T1.amenid  =  T2.amenid GROUP BY T2.amenid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers have at least one order with status \"Cancelled\"?",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM customer_orders WHERE order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students participated in tryouts for each college by descennding count?",
        "query": "SELECT Sum ( T1.enr ) , T2.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName GROUP BY T2.cName",
        "gold_parse": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students participated in tryouts for each college by descennding count?",
        "query": "SELECT Sum ( T1.enr ) , T2.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName GROUP BY T2.cName",
        "gold_parse": "SELECT count(*) ,  cName FROM tryout GROUP BY cName ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
        "query": "SELECT Name , Revenue FROM Manufacturers GROUP BY Headquarter ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names and revenues of the companies with the highest revenues in each headquarter city?",
        "query": "SELECT Name , Revenue FROM Manufacturers GROUP BY Headquarter ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "query": "SELECT * FROM roller_coaster WHERE Height > value OR Height > value",
        "gold_parse": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the statuses of roller coasters longer than 3300 or higher than 100.",
        "query": "SELECT * FROM roller_coaster WHERE Height > value OR Height > value",
        "gold_parse": "SELECT Status FROM roller_coaster WHERE LENGTH  >  3300 OR Height  >  100",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the color description that is most common across all products.",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the color description that is most common across all products.",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code GROUP BY T2.characteristic_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code GROUP BY t2.color_description ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of customers who are living in Colorado?",
        "query": "SELECT T2.customer_name FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T1.city = value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of customers who are living in Colorado?",
        "query": "SELECT T2.customer_name FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T1.city = value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.state_province_county  =  \"Colorado\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name ! = value",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms that do not have amenity TV Lounge.",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name ! = value",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE enr > value OR state = value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE enr > value OR state = value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with at least two trains.",
        "query": "SELECT Name FROM station GROUP BY Station_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with at least two trains.",
        "query": "SELECT Name FROM station GROUP BY Station_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the county where produces the most number of wines with score higher than 90.",
        "query": "SELECT T1.County FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Score > value GROUP BY T2.State ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T2.Score  >  90 GROUP BY T1.County ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
        "query": "SELECT Name FROM wine WHERE Year > value",
        "gold_parse": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the appelations for wines produced after 2008 but not in the Central Coast area?",
        "query": "SELECT Name FROM wine WHERE Year > value",
        "gold_parse": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name LIKE value",
        "gold_parse": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the descriptions of the categories that products with product descriptions that contain the letter t are in?",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_name LIKE value",
        "gold_parse": "SELECT T1.product_category_description FROM ref_product_categories AS T1 JOIN products AS T2 ON T1.product_category_code  =  T2.product_category_code WHERE T2.product_description LIKE '%t%'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies whose revenue is greater than the average revenue of all companies.",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products for each manufacturer?",
        "query": "SELECT Avg ( Price ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products for each manufacturer?",
        "query": "SELECT Avg ( Price ) , Manufacturer FROM Products GROUP BY Manufacturer",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "query": "SELECT T2.pName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T1.enr Desc LIMIT value",
        "gold_parse": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of the tryout players who are from the college with largest size.",
        "query": "SELECT T2.pName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T1.enr Desc LIMIT value",
        "gold_parse": "SELECT T2.pName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T1.cName  =  (SELECT cName FROM college ORDER BY enr DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students whose are playing the role of goalie?",
        "query": "SELECT Count ( * ) FROM Player WHERE pName = value",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "query": "SELECT T2.Name , Avg ( T1.Speed ) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Country_ID",
        "gold_parse": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "Show the names of countries and the average speed of roller coasters from each country.",
        "query": "SELECT T2.Name , Avg ( T1.Speed ) FROM roller_coaster AS T1 JOIN country AS T2 ON T1.Country_ID = T2.Country_ID GROUP BY T1.Country_ID",
        "gold_parse": "SELECT T1.Name ,  avg(T2.Speed) FROM country AS T1 JOIN roller_coaster AS T2 ON T1.Country_ID  =  T2.Country_ID GROUP BY T1.Name",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "query": "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Find the captain rank that has no captain in Third-rate ship of the line class.",
        "query": "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the clients who do not have any booking?",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the clients who do not have any booking?",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "List the names of roller coasters by ascending order of length.",
        "query": "SELECT Name FROM roller_coaster ORDER BY Height Asc",
        "gold_parse": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "List the names of roller coasters by ascending order of length.",
        "query": "SELECT Name FROM roller_coaster ORDER BY Height Asc",
        "gold_parse": "SELECT Name FROM roller_coaster ORDER BY LENGTH ASC",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students got accepted after the tryout?",
        "query": "SELECT Count ( * ) FROM College WHERE enr > value",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is all the product data, as well as  each product's manufacturer?",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is all the product data, as well as  each product's manufacturer?",
        "query": "SELECT Revenue , Revenue FROM Manufacturers",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the payment method of the customer that has purchased the least quantity of items?",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "List the branch name and city without any registered members.",
        "query": "SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "List the branch name and city without any registered members.",
        "query": "SELECT Name , City FROM branch EXCEPT SELECT Name , City FROM branch",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "query": "SELECT Title , Director FROM movie WHERE Gross_worldwide > = value ORDER BY Gross_worldwide Desc LIMIT value",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Return the title and director of the movie released in the year 2000 or earlier that had the highest worldwide gross.",
        "query": "SELECT Title , Director FROM movie WHERE Gross_worldwide > = value ORDER BY Gross_worldwide Desc LIMIT value",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "query": "SELECT T1.pName , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS < value",
        "gold_parse": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and training hours of players whose hours are below 1500.",
        "query": "SELECT T1.pName , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.HS < value",
        "gold_parse": "SELECT pName ,  HS FROM Player WHERE HS  <  1500",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of states that have some college students playing in goalie and mid positions.",
        "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the number of distinct products Rodrick Heaney has bought so far.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the average hours for the students whose tryout decision is no.",
        "query": "SELECT Avg ( T1.HS ) FROM Player AS T1 WHERE T1.pID NOT IN ( SELECT T2.pID FROM Tryout AS T2 )",
        "gold_parse": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the average hours for the students whose tryout decision is no.",
        "query": "SELECT Avg ( T1.HS ) FROM Player AS T1 WHERE T1.pID NOT IN ( SELECT T2.pID FROM Tryout AS T2 )",
        "gold_parse": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the actual delivery dates of orders with quantity 1?",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "query": "SELECT T1.Name , T1.Open_year FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T2.Branch_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and opening year for the branch that registered the most members in 2016?",
        "query": "SELECT T1.Name , T1.Open_year FROM branch AS T1 JOIN membership_register_branch AS T2 ON T1.Branch_ID = T2.Branch_ID GROUP BY T2.Branch_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and hours of the students whose tryout decision is yes.",
        "query": "SELECT pName , HS FROM Player",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products, grouped by manufacturer name?",
        "query": "SELECT Avg ( Price ) , Name FROM Products GROUP BY Name",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average prices of products, grouped by manufacturer name?",
        "query": "SELECT Avg ( Price ) , Name FROM Products GROUP BY Name",
        "gold_parse": "SELECT avg(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "query": "SELECT decision FROM Tryout WHERE pPos = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states of the colleges that have students in the tryout who played in striker position.",
        "query": "SELECT decision FROM Tryout WHERE pPos = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'striker'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Where is the headquarter of the company founded by James?",
        "query": "SELECT T1.Headquarter FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Name = value",
        "gold_parse": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Where is the headquarter of the company founded by James?",
        "query": "SELECT T1.Headquarter FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Name = value",
        "gold_parse": "SELECT headquarter FROM manufacturers WHERE founder  =  'James'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the store names of drama workshop groups?",
        "query": "SELECT Store_Name FROM Stores",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the store names of drama workshop groups?",
        "query": "SELECT Store_Name FROM Stores",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the total number of products that are in orders with status \"Cancelled\"?",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are names of customers who never ordered product Latte.",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are names of customers who never ordered product Latte.",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the average and maximum hours for the students whose tryout decision is yes.",
        "query": "SELECT Avg ( HS ) , Max ( HS ) FROM Player",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the email addresses of the drama workshop groups with address in Alaska state?",
        "query": "SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = value",
        "gold_parse": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many types of products have Rodrick Heaney bought in total?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT count(DISTINCT t3.product_id) FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t1.customer_name  =  \"Rodrick Heaney\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors.",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM ref_colors",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "query": "SELECT T1.Rank FROM captain AS T1 WHERE T1.Class = value INTERSECT SELECT T1.Rank FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Type = value",
        "gold_parse": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Find the captain rank that has some captains in both Cutter and Armed schooner classes.",
        "query": "SELECT T1.Rank FROM captain AS T1 WHERE T1.Class = value INTERSECT SELECT T1.Rank FROM captain AS T1 JOIN Ship AS T2 ON T1.Ship_ID = T2.Ship_ID WHERE T2.Type = value",
        "gold_parse": "SELECT rank FROM captain WHERE CLASS  =  'Cutter' INTERSECT SELECT rank FROM captain WHERE CLASS  =  'Armed schooner'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the first and last name of the students who are not in the largest major?",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the first and last name of the students who are not in the largest major?",
        "query": "SELECT Fname , LName FROM Student EXCEPT SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT fname ,  lname FROM student WHERE major != (SELECT major FROM student GROUP BY major ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the average price of wines produced in appelations in Sonoma County?",
        "query": "SELECT Avg ( T2.Price ) FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T1.State = value",
        "gold_parse": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the average price of wines produced in appelations in Sonoma County?",
        "query": "SELECT Avg ( T2.Price ) FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T1.State = value",
        "gold_parse": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "query": "SELECT Max ( T1.HS ) , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID GROUP BY T2.pPos",
        "gold_parse": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "For each position, what is the maximum number of  hours for students who spent more than 1000 hours training?",
        "query": "SELECT Max ( T1.HS ) , T2.pPos FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID GROUP BY T2.pPos",
        "gold_parse": "SELECT max(T1.HS) ,  pPos FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T1.HS  >  1000 GROUP BY T2.pPos",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "List the object number of railways that do not have any trains.",
        "query": "SELECT Count ( * ) FROM railway AS T1 WHERE T1.Railway_ID NOT IN ( SELECT T2.Railway_ID FROM train AS T2 )",
        "gold_parse": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "List the object number of railways that do not have any trains.",
        "query": "SELECT Count ( * ) FROM railway AS T1 WHERE T1.Railway_ID NOT IN ( SELECT T2.Railway_ID FROM train AS T2 )",
        "gold_parse": "SELECT ObjectNumber FROM railway WHERE Railway_ID NOT IN (SELECT Railway_ID FROM train)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "query": "SELECT T2.customer_name , T1.city , T1.state_province_county FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Address_History AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id",
        "gold_parse": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the customer name, customer address city, date from, and date to for each customer address history.",
        "query": "SELECT T2.customer_name , T1.city , T1.state_province_county FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Address_History AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id",
        "gold_parse": "SELECT T2.customer_name ,  T3.city ,  T1.date_from ,  T1.date_to FROM customer_address_history AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id JOIN addresses AS T3 ON T1.address_id  =  T3.address_id",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members and branches at which they are registered sorted by year of registration?",
        "query": "SELECT Name , Name FROM member ORDER BY Card_Number Asc",
        "gold_parse": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the members and branches at which they are registered sorted by year of registration?",
        "query": "SELECT Name , Name FROM member ORDER BY Card_Number Asc",
        "gold_parse": "SELECT T3.name ,  T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id ORDER BY T1.register_year",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of the students who are in the position of striker and got a yes tryout decision.",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T3.pName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T2.pPos = value",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who made the latest order?",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who made the latest order?",
        "query": "SELECT customer_name FROM Customers ORDER BY date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
        "query": "SELECT T2.channel_code , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the channel code and contact number of the customer contact channel whose active duration was the longest.",
        "query": "SELECT T2.channel_code , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id GROUP BY T1.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT channel_code ,  contact_number FROM customer_contact_channels WHERE active_to_date - active_from_date  =  (SELECT active_to_date - active_from_date FROM customer_contact_channels ORDER BY (active_to_date - active_from_date) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "query": "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "query": "SELECT Name , Price FROM Products ORDER BY Price Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "query": "SELECT T2.Year , T2.Title , T1.Publisher FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id ORDER BY T2.Year Desc",
        "gold_parse": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the years, titles, and publishers for all books, ordered by year descending?",
        "query": "SELECT T2.Year , T2.Title , T1.Publisher FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id ORDER BY T2.Year Desc",
        "gold_parse": "SELECT YEAR ,  book_title ,  publisher FROM book_club ORDER BY YEAR DESC",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
        "query": "SELECT Name , Appelation , Score FROM wine WHERE Score > value ORDER BY Name Asc",
        "gold_parse": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes, appelations, and wines with scores above 93, sorted by Name?",
        "query": "SELECT Name , Appelation , Score FROM wine WHERE Score > value ORDER BY Name Asc",
        "gold_parse": "SELECT Grape ,  Appelation ,  Name FROM WINE WHERE Score  >  93 ORDER BY Name",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "query": "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = value",
        "gold_parse": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Return the the names of the drama workshop groups that are located in Feliciaberg city.",
        "query": "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = value",
        "gold_parse": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "query": "SELECT state FROM College WHERE enr > ( SELECT Max ( enr ) FROM College )",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have the colleges whose enrollments are less than the largest size.",
        "query": "SELECT state FROM College WHERE enr > ( SELECT Max ( enr ) FROM College )",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the member names and hometowns of those who registered at a branch in 2016?",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Name = value",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the member names and hometowns of those who registered at a branch in 2016?",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Name = value",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "query": "SELECT Avg ( Price ) , Avg ( Score ) FROM wine WHERE Year = value",
        "gold_parse": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the average prices and cases of wines produced in the year of 2009 and made of Zinfandel grape?",
        "query": "SELECT Avg ( Price ) , Avg ( Score ) FROM wine WHERE Year = value",
        "gold_parse": "SELECT AVG(Price) ,  AVG(Cases) FROM WINE WHERE YEAR  =  2009 AND Grape  =  \"Zinfandel\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "query": "SELECT T1.Name , T1.City FROM branch AS T1 WHERE T1.Branch_ID NOT IN ( SELECT T2.Name FROM member AS T2 )",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names and cities of the branches that do not have any registered members?",
        "query": "SELECT T1.Name , T1.City FROM branch AS T1 WHERE T1.Branch_ID NOT IN ( SELECT T2.Name FROM member AS T2 )",
        "gold_parse": "SELECT name ,  city FROM branch WHERE branch_id NOT IN (SELECT branch_id FROM membership_register_branch)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the product name and total order quantity for each product.",
        "query": "SELECT product_name , Sum ( product_price ) FROM Products GROUP BY product_id",
        "gold_parse": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the product name and total order quantity for each product.",
        "query": "SELECT product_name , Sum ( product_price ) FROM Products GROUP BY product_id",
        "gold_parse": "SELECT T1.product_name ,  sum(T2.order_quantity) FROM products AS T1 JOIN order_items AS T2 ON T1.product_id  =  T2.product_id GROUP BY T1.product_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products with 'white' as their color description?",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products with 'white' as their color description?",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"white\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of different colleges involved in the tryout in alphabetical order.",
        "query": "SELECT cName FROM College ORDER BY cName Asc",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the name of the product with the color description 'yellow'?",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value",
        "gold_parse": "SELECT T1.product_name FROM products AS T1 JOIN ref_colors AS T2 ON T1.color_code  =  T2.color_code WHERE T2.color_description  =  'yellow'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "query": "SELECT Count ( * ) FROM Products WHERE color_code = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "query": "SELECT Count ( * ) FROM Products WHERE color_code = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "query": "SELECT DISTINCT Appelation FROM wine",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "query": "SELECT DISTINCT Appelation FROM wine",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the city where the most customers live.",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the city where the most customers live.",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are there?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many customers are there?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List the description of all the colors.",
        "query": "SELECT characteristic_type_description FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT color_description FROM ref_colors",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the color description 'red' and the characteristic name 'slow'?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types WHERE characteristic_type_description = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have the color description 'red' and the characteristic name 'slow'?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types WHERE characteristic_type_description = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"red\" AND t3.characteristic_name  =  \"slow\"",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Count the number of ships.",
        "query": "SELECT Count ( * ) FROM captain",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Count the number of ships.",
        "query": "SELECT Count ( * ) FROM captain",
        "gold_parse": "SELECT count(*) FROM ship",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "query": "SELECT Card_Number , Name , Hometown FROM member ORDER BY Card_Number Desc",
        "gold_parse": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the card numbers, names, and hometowns of every member ordered by descending level?",
        "query": "SELECT Card_Number , Name , Hometown FROM member ORDER BY Card_Number Desc",
        "gold_parse": "SELECT card_number ,  name ,  hometown FROM member ORDER BY LEVEL DESC",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number and average age of students living in each city.",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the dates when customers with ids between 10 and 20 became customers?",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "query": "SELECT Count ( * ) FROM member WHERE Hometown LIKE value",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "list the card number of all members whose hometown address includes word \"Kentucky\".",
        "query": "SELECT Count ( * ) FROM member WHERE Hometown LIKE value",
        "gold_parse": "SELECT card_number FROM member WHERE Hometown LIKE \"%Kentucky%\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "query": "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of the dorm that does not have a TV Lounge?",
        "query": "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm",
        "gold_parse": "SELECT dorm_name FROM dorm EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "query": "SELECT T1.cName FROM College AS T1 INTERSECT SELECT T2.cName FROM Tryout AS T2",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which college has any student who is a goalie and succeeded in the tryout.",
        "query": "SELECT T1.cName FROM College AS T1 INTERSECT SELECT T2.cName FROM Tryout AS T2",
        "gold_parse": "SELECT cName FROM  tryout WHERE decision  =  'yes' AND pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the white grape used to produce wines with scores above 90.",
        "query": "SELECT Winery FROM wine WHERE Score > value",
        "gold_parse": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the white grape used to produce wines with scores above 90.",
        "query": "SELECT Winery FROM wine WHERE Score > value",
        "gold_parse": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "query": "SELECT name FROM swimmer GROUP BY name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has at least 2 records.",
        "query": "SELECT name FROM swimmer GROUP BY name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "query": "SELECT Name , Open_year FROM branch GROUP BY Open_year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the name and open year for the branch with most number of memberships registered in 2016?",
        "query": "SELECT Name , Open_year FROM branch GROUP BY Open_year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name ,  T2.open_year FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  =  2016 GROUP BY T2.branch_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "query": "SELECT Fname FROM Student WHERE Age BETWEEN value AND value",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "query": "SELECT T1.address_content FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name LIKE value",
        "gold_parse": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the address content for the customer whose name is \"Maudie Kertzmann\".",
        "query": "SELECT T1.address_content FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name LIKE value",
        "gold_parse": "SELECT t3.address_content FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t1.customer_name  =  \"Maudie Kertzmann\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which city has the most customers living in?",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which city has the most customers living in?",
        "query": "SELECT city FROM Addresses GROUP BY city ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id GROUP BY t3.city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some players in the mid position but not in the goalie position.",
        "query": "SELECT T1.cName FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "query": "SELECT Built , Count ( * ) FROM railway GROUP BY Builder",
        "gold_parse": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show different builders of railways, along with the corresponding number of railways using each builder.",
        "query": "SELECT Built , Count ( * ) FROM railway GROUP BY Builder",
        "gold_parse": "SELECT Builder ,  COUNT(*) FROM railway GROUP BY Builder",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many drama workshop groups are there in each city? Return both the city and the count.",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the name, location, and number of platforms for all stations.",
        "query": "SELECT T1.Name , T1.Location , Count ( * ) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID GROUP BY T2.Station_ID",
        "gold_parse": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the name, location, and number of platforms for all stations.",
        "query": "SELECT T1.Name , T1.Location , Count ( * ) FROM station AS T1 JOIN train_station AS T2 ON T1.Station_ID = T2.Station_ID GROUP BY T2.Station_ID",
        "gold_parse": "SELECT name ,  LOCATION ,  number_of_platforms FROM station",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "query": "SELECT T2.Winery FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape WHERE T2.Price > value AND T1.Color = value",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices higher than 50 and made of Red color grapes?",
        "query": "SELECT T2.Winery FROM grapes AS T1 JOIN wine AS T2 ON T1.Grape = T2.Grape WHERE T2.Price > value AND T1.Color = value",
        "gold_parse": "SELECT T2.Name FROM Grapes AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\" AND T2.price  >  50",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the numbers of different majors and cities.",
        "query": "SELECT Major , Count ( * ) FROM Student GROUP BY Major",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the numbers of different majors and cities.",
        "query": "SELECT Major , Count ( * ) FROM Student GROUP BY Major",
        "gold_parse": "SELECT count(DISTINCT major) ,  count(DISTINCT city_code) FROM student",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the total purchases for members rated at level 6?",
        "query": "SELECT Sum ( T2.Total_pounds ) FROM member AS T1 JOIN purchase AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Level = value",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the total purchases for members rated at level 6?",
        "query": "SELECT Sum ( T2.Total_pounds ) FROM member AS T1 JOIN purchase AS T2 ON T1.Member_ID = T2.Member_ID WHERE T1.Level = value",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the descriptions for each color?",
        "query": "SELECT characteristic_type_description FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT color_description FROM ref_colors",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities along with the number of drama workshop groups in each city.",
        "query": "SELECT City_Town , Count ( * ) FROM Addresses GROUP BY City_Town",
        "gold_parse": "SELECT T1.City_Town ,  count(*) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID GROUP BY T1.City_Town",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T2.active_to_date Desc LIMIT value",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T2.active_to_date Desc LIMIT value",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the \"active to date\" of the latest contact channel used by \"Tillman Ernser\"?",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T2.active_to_date Desc LIMIT value",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "query": "SELECT Count ( * ) FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_category_code = value AND T1.product_category_description > value",
        "gold_parse": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the number of products with category \"Spices\" and typically sold above 1000.",
        "query": "SELECT Count ( * ) FROM Ref_Product_Categories AS T1 JOIN Products AS T2 ON T1.product_category_code = T2.product_category_code WHERE T2.product_category_code = value AND T1.product_category_description > value",
        "gold_parse": "SELECT count(*) FROM products WHERE product_category_code  =  \"Spices\" AND typical_buying_price  >  1000",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics of the product named 'laurel'.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which 3 wineries produce the most wines made from white grapes?",
        "query": "SELECT Winery FROM wine WHERE Appelation = value GROUP BY Appelation ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Which 3 wineries produce the most wines made from white grapes?",
        "query": "SELECT Winery FROM wine WHERE Appelation = value GROUP BY Appelation ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Winery FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.GRAPE  =  T2.GRAPE WHERE T1.Color  =  \"White\" GROUP BY T2.Winery ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T1.date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T1.date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the the \"active to date\" of the latest contact channel used by the customer named \"Tillman Ernser\".",
        "query": "SELECT T2.active_from_date FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = value ORDER BY T1.date_became_customer Desc LIMIT value",
        "gold_parse": "SELECT max(t2.active_to_date) FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many students live in each city and what are their average ages?",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many students live in each city and what are their average ages?",
        "query": "SELECT city_code , Avg ( Age ) FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Return the average, maximum, and total revenues across all manufacturers.",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Return the average, maximum, and total revenues across all manufacturers.",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the order details of the products with price higher than 2000?",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the order details of the products with price higher than 2000?",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name and active date of the customer that use email as the contact channel.",
        "query": "SELECT customer_name , date_became_customer FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name and active date of the customer that use email as the contact channel.",
        "query": "SELECT customer_name , date_became_customer FROM Customers WHERE customer_name = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all the states with college students playing in the mid position but no goalies?",
        "query": "SELECT T1.state FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value EXCEPT SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the product names that are colored 'white' but do not have unit of measurement \"Handful\".",
        "query": "SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value EXCEPT SELECT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "query": "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.yCard FROM Player AS T2 )",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the total number of enrollment of schools that do not have any goalie player?",
        "query": "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.yCard FROM Player AS T2 )",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the total number of students enrolled in schools without any goalies?",
        "query": "SELECT Sum ( T1.enr ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 )",
        "gold_parse": "SELECT sum(enr) FROM college WHERE cName NOT IN (SELECT cName FROM tryout WHERE pPos  =  \"goalie\")",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Compute the total order quantities of the product \"photo\".",
        "query": "SELECT Sum ( Product_Price ) FROM Products WHERE Product_Name = value",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Compute the total order quantities of the product \"photo\".",
        "query": "SELECT Sum ( Product_Price ) FROM Products WHERE Product_Name = value",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the list of cities that no customer is living in.",
        "query": "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the list of cities that no customer is living in.",
        "query": "SELECT city FROM Addresses EXCEPT SELECT city FROM Addresses",
        "gold_parse": "SELECT city FROM addresses WHERE city NOT IN ( SELECT DISTINCT t3.city FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id)",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the first names of all students who live in the dorm with the most amenities?",
        "query": "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid ORDER BY T2.room_number Desc LIMIT value",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the first names of all students who live in the dorm with the most amenities?",
        "query": "SELECT T1.Fname FROM Student AS T1 JOIN Lives_in AS T2 ON T1.StuID = T2.stuid ORDER BY T2.room_number Desc LIMIT value",
        "gold_parse": "SELECT T1.fname FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid WHERE T2.dormid IN (SELECT T2.dormid FROM dorm AS T3 JOIN has_amenity AS T4 ON T3.dormid  =  T4.dormid JOIN dorm_amenity AS T5 ON T4.amenid  =  T5.amenid GROUP BY T3.dormid ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors that are not used in any products.",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of colors that are not used in any products.",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which colleges do the tryout players whose name starts with letter D go to?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE value",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Which colleges do the tryout players whose name starts with letter D go to?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName LIKE value",
        "gold_parse": "SELECT T1.cName FROM  tryout AS T1 JOIN player AS T2 ON T1.pID  =  T2.pID WHERE T2.pName LIKE 'D%'",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "query": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM branch AS T1 JOIN purchase AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Total_pounds > value",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "query": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM branch AS T1 JOIN purchase AS T2 ON T1.Branch_ID = T2.Branch_ID WHERE T2.Total_pounds > value",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the colleges that are larger than at least one college in Florida?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the colleges that are larger than at least one college in Florida?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT cName FROM college WHERE enr  >  (SELECT min(enr) FROM college WHERE state  =  'FL')",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "query": "SELECT Avg ( Price ) FROM wine WHERE State = value",
        "gold_parse": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give me the average prices of wines that are produced by appelations in Sonoma County.",
        "query": "SELECT Avg ( Price ) FROM wine WHERE State = value",
        "gold_parse": "SELECT AVG(T2.Price) FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Sonoma\"",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the event that happened in the most recent year?",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the event that happened in the most recent year?",
        "query": "SELECT T2.Name FROM stadium AS T1 JOIN event AS T2 ON T1.ID = T2.Stadium_ID ORDER BY T1.Opening_year Desc LIMIT value",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with greatest number of trains.",
        "query": "SELECT Name FROM station ORDER BY Number_of_Platforms Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with greatest number of trains.",
        "query": "SELECT Name FROM station ORDER BY Number_of_Platforms Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name with greatest number of trains.",
        "query": "SELECT Name FROM station ORDER BY Number_of_Platforms Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "query": "SELECT cName FROM Tryout WHERE pPos = value",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who successfully tried out for the position of striker?",
        "query": "SELECT cName FROM Tryout WHERE pPos = value",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes' AND T2.pPos  =  'striker'",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the number of trains",
        "query": "SELECT Count ( * ) FROM station",
        "gold_parse": "SELECT count(*) FROM train",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the number of trains",
        "query": "SELECT Count ( * ) FROM station",
        "gold_parse": "SELECT count(*) FROM train",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which marketing region has the most drama workshop groups? Give me the region code.",
        "query": "SELECT Marketing_Region_Name FROM Marketing_Regions GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the resident details containing the substring 'Miss'?",
        "query": "SELECT customer_details FROM Customers WHERE customer_details LIKE value",
        "gold_parse": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the resident details containing the substring 'Miss'?",
        "query": "SELECT customer_details FROM Customers WHERE customer_details LIKE value",
        "gold_parse": "SELECT other_details FROM Residents WHERE other_details LIKE '%Miss%'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many customers do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(*) FROM CUSTOMERS",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Compute the average active time span of contact channels.",
        "query": "SELECT Avg ( active_from_date ) FROM Customer_Contact_Channels",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Compute the average active time span of contact channels.",
        "query": "SELECT Avg ( active_from_date ) FROM Customer_Contact_Channels",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "query": "SELECT Count ( DISTINCT Headquarter ) FROM Manufacturers",
        "gold_parse": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the number of different products that are produced by companies at different headquarter cities.",
        "query": "SELECT Count ( DISTINCT Headquarter ) FROM Manufacturers",
        "gold_parse": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "query": "SELECT name , Nationality FROM swimmer WHERE meter_100 > value",
        "gold_parse": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name and nationality of the swimmer who has won (i.e., has a result of \"win\") more than 1 time.",
        "query": "SELECT name , Nationality FROM swimmer WHERE meter_100 > value",
        "gold_parse": "SELECT t1.name ,  t1.nationality FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id WHERE RESULT  =  'Win' GROUP BY t2.swimmer_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics are there?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics are there?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM CHARACTERISTICS",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the total revenue of companies whose revenue is larger than the revenue of some companies based in Austin.",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of female students (with F sex) living in Smith Hall",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the last name of every student who is either female or living in a city with the code BAL or male and under 20?",
        "query": "SELECT LName FROM Student WHERE city_code = value OR Age < value",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the average prices of all products from each manufacture, and list each company's name.",
        "query": "SELECT Avg ( T2.Price ) , T1.Founder FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T1.Founder",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the average prices of all products from each manufacture, and list each company's name.",
        "query": "SELECT Avg ( T2.Price ) , T1.Founder FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer GROUP BY T1.Founder",
        "gold_parse": "SELECT avg(T1.price) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who never ordered product Latte.",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who never ordered product Latte.",
        "query": "SELECT customer_name FROM Customers EXCEPT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT customer_name FROM customers EXCEPT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of companies started by founder?",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of companies started by founder?",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT sum(revenue) ,  founder FROM manufacturers GROUP BY founder",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "query": "SELECT state FROM College WHERE enr < ( SELECT Avg ( enr ) FROM College )",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "query": "SELECT state FROM College WHERE enr < ( SELECT Avg ( enr ) FROM College )",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE country = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE country = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products have their color described as 'white' or have a characteristic with the name 'hot'?",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value OR characteristic_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Give me the name of the customer who ordered the most items in total.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Give me the name of the customer who ordered the most items in total.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "query": "SELECT Railway_ID , Builder FROM railway GROUP BY Railway_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the id and builder of the railway that are associated with the most trains.",
        "query": "SELECT Railway_ID , Builder FROM railway GROUP BY Railway_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Builder FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the average price of all product clothes.",
        "query": "SELECT Avg ( product_price ) FROM Products",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "query": "SELECT Count ( DISTINCT T1.state ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many states that have some college students playing in the mid position but not in the goalie position.",
        "query": "SELECT Count ( DISTINCT T1.state ) FROM College AS T1 WHERE T1.state NOT IN ( SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value )",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid' EXCEPT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie')",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products produced by both Creative Labs and Sony?",
        "query": "SELECT Name FROM Manufacturers WHERE Founder = value INTERSECT SELECT Name FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products produced by both Creative Labs and Sony?",
        "query": "SELECT Name FROM Manufacturers WHERE Founder = value INTERSECT SELECT Name FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names of characteristics that are in two or more products?",
        "query": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_type_code HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names of characteristics that are in two or more products?",
        "query": "SELECT characteristic_name FROM Characteristics GROUP BY characteristic_type_code HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Count the total number of bookings made.",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(*) FROM BOOKINGS",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the planned delivery date and actual delivery date for each booking?",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show id and location of railways that are associated with more than one train.",
        "query": "SELECT Railway_ID , Location FROM railway GROUP BY Railway_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show id and location of railways that are associated with more than one train.",
        "query": "SELECT Railway_ID , Location FROM railway GROUP BY Railway_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Railway_ID ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID GROUP BY T2.Railway_ID HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T2 ON T1.product_id = T2.product_id WHERE T2.product_characteristic_value = value EXCEPT SELECT T1.product_name FROM Characteristics AS T3 JOIN Products AS T1 JOIN Product_Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id AND T2.product_id = T1.product_id WHERE T3.characteristic_data_type = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names of products that are not 'white' in color and are not measured by the unit 'Handful'?",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Product_Characteristics AS T2 ON T1.product_id = T2.product_id WHERE T2.product_characteristic_value = value EXCEPT SELECT T1.product_name FROM Characteristics AS T3 JOIN Products AS T1 JOIN Product_Characteristics AS T2 ON T3.characteristic_id = T2.characteristic_id AND T2.product_id = T1.product_id WHERE T3.characteristic_data_type = value",
        "gold_parse": "SELECT t1.product_name FROM products AS t1 JOIN ref_product_categories AS t2 ON t1.product_category_code  =  t2.product_category_code JOIN ref_colors AS t3 ON t1.color_code  =  t3.color_code WHERE t3.color_description  =  \"white\" AND t2.unit_of_measure != \"Handful\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the name of the players who received a card in descending order of the hours of training?",
        "query": "SELECT pName FROM Player ORDER BY HS Desc",
        "gold_parse": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products are there?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM products",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many products are there?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM products",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "query": "SELECT LName FROM Student WHERE city_code = value OR Age < value",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the last name of students who is either female (sex is F) and living in the city of code BAL or male (sex is M) and in age of below 20.",
        "query": "SELECT LName FROM Student WHERE city_code = value OR Age < value",
        "gold_parse": "SELECT lname FROM student WHERE sex  =  'F' AND city_code  =  'BAL' UNION SELECT lname FROM student WHERE sex  =  'M' AND age  <  20",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the average time span of contact channels in the database?",
        "query": "SELECT Avg ( active_to_date ) FROM Customer_Contact_Channels",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the average time span of contact channels in the database?",
        "query": "SELECT Avg ( active_to_date ) FROM Customer_Contact_Channels",
        "gold_parse": "SELECT avg(active_to_date - active_from_date) FROM customer_contact_channels",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the speeds of the longest roller coaster?",
        "query": "SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "gold_parse": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the speeds of the longest roller coaster?",
        "query": "SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "gold_parse": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "What are the speeds of the longest roller coaster?",
        "query": "SELECT Speed FROM roller_coaster ORDER BY Height Desc LIMIT value",
        "gold_parse": "SELECT Speed FROM roller_coaster ORDER BY LENGTH DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the distinct payment method codes with the number of orders made",
        "query": "SELECT DISTINCT payment_method_code FROM Invoices",
        "gold_parse": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the distinct payment method codes with the number of orders made",
        "query": "SELECT DISTINCT payment_method_code FROM Invoices",
        "gold_parse": "SELECT payment_method_code ,  count(*) FROM INVOICES GROUP BY payment_method_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "query": "SELECT T2.dorm_name FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.LName = value",
        "gold_parse": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of amenities of the dorm where the student with last name Smith is living in.",
        "query": "SELECT T2.dorm_name FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.LName = value",
        "gold_parse": "SELECT T3.amenity_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid JOIN lives_in AS T4 ON T4.dormid  =  T1.dormid JOIN student AS T5 ON T5.stuid  =  T4.stuid WHERE T5.lname  =  'Smith'",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the distinct names of wines produced before the year of 2000 or after the year of 2010.",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Year > = value",
        "gold_parse": "SELECT DISTINCT Name FROM WINE WHERE YEAR  <  2000 OR YEAR  >  2010",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the total order quantities of photo products?",
        "query": "SELECT Sum ( Product_Price ) FROM Products",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the total order quantities of photo products?",
        "query": "SELECT Sum ( Product_Price ) FROM Products",
        "gold_parse": "SELECT sum(T1.Order_Quantity) FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_Name  =  \"photo\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "query": "SELECT T1.state FROM College AS T1 INTERSECT SELECT T2.decision FROM Tryout AS T2",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the states where have some college students in tryout and their decisions are yes.",
        "query": "SELECT T1.state FROM College AS T1 INTERSECT SELECT T2.decision FROM Tryout AS T2",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "query": "SELECT Count ( * ) FROM appellations WHERE Appelation = value",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "query": "SELECT Count ( * ) FROM appellations WHERE Appelation = value",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "query": "SELECT Name FROM wine WHERE Score > value",
        "gold_parse": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the the grape whose white color grapes are used to produce wines with scores higher than 90.",
        "query": "SELECT Name FROM wine WHERE Score > value",
        "gold_parse": "SELECT DISTINCT T1.Grape FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\" AND T2.score  >  90",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the name of the characteristic that is most common across all products.",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made the order of the largest amount of goods.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the name of the customer who made the order of the largest amount of goods.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id WHERE t3.order_quantity  =  ( SELECT max(order_quantity) FROM order_items)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students received a yes from tryouts?",
        "query": "SELECT Count ( * ) FROM Player WHERE pName = value",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students received a yes from tryouts?",
        "query": "SELECT Count ( * ) FROM Player WHERE pName = value",
        "gold_parse": "SELECT count(*) FROM tryout WHERE decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes?",
        "query": "SELECT Name FROM wine WHERE Grape = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines made from red grapes?",
        "query": "SELECT Name FROM wine WHERE Grape = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_type_code = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "List all characteristics of product named \"sesame\" with type code \"Grade\".",
        "query": "SELECT T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code WHERE T2.characteristic_type_code = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"sesame\" AND t3.characteristic_type_code  =  \"Grade\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T2.gender = value AND T1.Sex = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T2.gender = value AND T1.Sex = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the average price of clothes?",
        "query": "SELECT Avg ( product_price ) FROM Products",
        "gold_parse": "SELECT avg(product_price) FROM products WHERE product_type_code  =  'Clothes'",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles of movies and books corresponding to companies incorporated in China?",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show all distinct city where branches with at least 100 memberships are located.",
        "query": "SELECT DISTINCT City FROM branch GROUP BY City HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT city FROM branch WHERE membership_amount  >=  100",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the planned delivery dates and actual delivery dates of bookings.",
        "query": "SELECT Planned_Delivery_Date , Order_Date FROM Bookings",
        "gold_parse": "SELECT Planned_Delivery_Date ,  Actual_Delivery_Date FROM BOOKINGS",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are names for top three branches with most number of membership?",
        "query": "SELECT Name FROM member GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are names for top three branches with most number of membership?",
        "query": "SELECT Name FROM member GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE country = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE country = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the country of all appelations who have at most three wines.",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the country of all appelations who have at most three wines.",
        "query": "SELECT Appelation FROM wine GROUP BY Appelation HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.County FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING count(*)  <=  3",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "How many stadiums are there?",
        "query": "SELECT Count ( * ) FROM swimmer",
        "gold_parse": "SELECT count(*) FROM stadium",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "How many stadiums are there?",
        "query": "SELECT Count ( * ) FROM swimmer",
        "gold_parse": "SELECT count(*) FROM stadium",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Product_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Product_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "query": "SELECT Count ( * ) FROM Products WHERE Price > value OR Price < value",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Compute the number of products with a price larger than or equal to $180.",
        "query": "SELECT Count ( * ) FROM Products WHERE Price > value OR Price < value",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "query": "SELECT product_id FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "query": "SELECT product_id FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name and number of trains in each station.",
        "query": "SELECT Name , Count ( * ) FROM station GROUP BY Station_ID",
        "gold_parse": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show the station name and number of trains in each station.",
        "query": "SELECT Name , Count ( * ) FROM station GROUP BY Station_ID",
        "gold_parse": "SELECT T2.name ,  count(*) FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id GROUP BY T1.station_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the marketing region code that has the most drama workshop groups?",
        "query": "SELECT Marketing_Region_Code FROM Stores GROUP BY Marketing_Region_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Marketing_Region_Code FROM Drama_Workshop_Groups GROUP BY Marketing_Region_Code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "query": "SELECT customer_name FROM Customers WHERE payment_method_code = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method_code > value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the names of customers who use Credit Card payment method and have more than 2 orders.",
        "query": "SELECT customer_name FROM Customers WHERE payment_method_code = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method_code > value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.payment_method_code  =  'Credit Card' GROUP BY T1.customer_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "query": "SELECT Store_Phone , Store_Email_Address FROM Stores",
        "gold_parse": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the phones and emails of workshop groups in which services are performed?",
        "query": "SELECT Store_Phone , Store_Email_Address FROM Stores",
        "gold_parse": "SELECT T1.Store_Phone ,  T1.Store_Email_Address FROM Drama_Workshop_Groups AS T1 JOIN Services AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students are enrolled in college?",
        "query": "SELECT Count ( * ) FROM College",
        "gold_parse": "SELECT sum(enr) FROM College",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many students are enrolled in college?",
        "query": "SELECT Count ( * ) FROM College",
        "gold_parse": "SELECT sum(enr) FROM College",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T2.Year > value",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T2.Year > value",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name and college of students whose decisions are yes in the tryout.",
        "query": "SELECT T1.cName , T1.enr FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.pName = value",
        "gold_parse": "SELECT T1.pName ,  T2.cName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the total number of distinct customers.",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Return the total number of distinct customers.",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "In which state is the college that Charles attends?",
        "query": "SELECT state FROM College WHERE cName = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "In which state is the college that Charles attends?",
        "query": "SELECT state FROM College WHERE cName = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName JOIN player AS T3 ON T2.pID  =  T3.pID WHERE T3.pName  =  'Charles'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all schools that have students trying out for the position of goal and 'mid'-field.",
        "query": "SELECT cName FROM Tryout WHERE pPos = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name of the most expensive hardware product.",
        "query": "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT value",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the names of stadiums that the most swimmers have been to.",
        "query": "SELECT name FROM stadium GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t3.name FROM record AS t1 JOIN event AS t2 ON t1.event_id  =  t2.id JOIN stadium AS t3 ON t3.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many bookings do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(*) FROM BOOKINGS",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T2.HS Desc LIMIT value",
        "gold_parse": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the schools with the top 3 largest class sizes?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID ORDER BY T2.HS Desc LIMIT value",
        "gold_parse": "SELECT cName FROM college ORDER BY enr DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the area for the appelation which produced the most wines prior to 2010?",
        "query": "SELECT T1.Area FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Year < value GROUP BY T1.Area ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What is the area for the appelation which produced the most wines prior to 2010?",
        "query": "SELECT T1.Area FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Year < value GROUP BY T1.Area ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Area FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation GROUP BY T2.Appelation HAVING T2.year  <  2010 ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all details for each swimmer.",
        "query": "SELECT name FROM swimmer",
        "gold_parse": "SELECT * FROM swimmer",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all details for each swimmer.",
        "query": "SELECT name FROM swimmer",
        "gold_parse": "SELECT * FROM swimmer",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the states or counties where the stores with marketing region code \"CA\" are located.",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are in the database?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM dorm",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are in the database?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM dorm",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics does the product named \"sesame\" have?",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics does the product named \"sesame\" have?",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID JOIN Invoice_Items AS T3 ON T2.Invoice_ID = T3.Invoice_ID WHERE T3.Order_Quantity = value",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Return the founder of Sony.",
        "query": "SELECT Founder FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Return the founder of Sony.",
        "query": "SELECT Founder FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT founder FROM manufacturers WHERE name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "For which countries are there more than four distinct addresses listed?",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "For which countries are there more than four distinct addresses listed?",
        "query": "SELECT country FROM Addresses GROUP BY country HAVING Count ( * ) > value",
        "gold_parse": "SELECT country FROM addresses GROUP BY country HAVING count(address_id)  >  4",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name, enrollment of the colleges whose size is bigger than 10000 and location is in state LA.",
        "query": "SELECT T1.cName , T1.enr , T1.state FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T2.HS > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines produced before any wine from the Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < value",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines produced before any wine from the Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < value",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "query": "SELECT dorm_name , student_capacity FROM Dorm ORDER BY dorm_name Asc LIMIT value",
        "gold_parse": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name and capacity of the dorm with least number of amenities.",
        "query": "SELECT dorm_name , student_capacity FROM Dorm ORDER BY dorm_name Asc LIMIT value",
        "gold_parse": "SELECT T1.dorm_name ,  T1.student_capacity FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid GROUP BY T2.dormid ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the customer name and date of the orders that have the status \"Delivered\".",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics does the product named \"laurel\" have?",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many characteristics does the product named \"laurel\" have?",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"laurel\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "How many different levels do members have?",
        "query": "SELECT Count ( * ) FROM member",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "How many different levels do members have?",
        "query": "SELECT Count ( * ) FROM member",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of students whose age is older than the average age for each gender.",
        "query": "SELECT Sex , Count ( * ) FROM Student WHERE Sex = value GROUP BY Sex",
        "gold_parse": "SELECT count(*) ,  sex FROM student WHERE age  >  (SELECT avg(age) FROM student) GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the name and active date of the customers whose contact channel code is email?",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the name and active date of the customers whose contact channel code is email?",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id WHERE T2.channel_code = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.active_from_date FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t2.channel_code  =  'Email'",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "query": "SELECT Name , Time FROM train ORDER BY Time Desc",
        "gold_parse": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all train names and times in stations in London in descending order by train time.",
        "query": "SELECT Name , Time FROM train ORDER BY Time Desc",
        "gold_parse": "SELECT T3.name ,  T3.time FROM train_station AS T1 JOIN station AS T2 ON T1.station_id  =  T2.station_id JOIN train AS T3 ON T3.train_id  =  T1.train_id WHERE T2.location  =  'London' ORDER BY T3.time DESC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select all the data from the products and each product's manufacturer.",
        "query": "SELECT T1.Revenue , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select all the data from the products and each product's manufacturer.",
        "query": "SELECT T1.Revenue , T2.Manufacturer FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer",
        "gold_parse": "SELECT * FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are all the company names that have a book published by Alyson?",
        "query": "SELECT DISTINCT Company_name FROM culture_company WHERE Type = value",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are all the company names that have a book published by Alyson?",
        "query": "SELECT DISTINCT Company_name FROM culture_company WHERE Type = value",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the name of the hardware product with the greatest price?",
        "query": "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT value",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What is the name of the hardware product with the greatest price?",
        "query": "SELECT product_name FROM Products ORDER BY product_price Desc LIMIT value",
        "gold_parse": "SELECT product_name FROM products WHERE product_type_code  =  'Hardware' ORDER BY product_price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the number of students playing as a goalie?",
        "query": "SELECT Count ( * ) FROM College",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the number of students playing as a goalie?",
        "query": "SELECT Count ( * ) FROM College",
        "gold_parse": "SELECT count(*) FROM tryout WHERE pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
        "query": "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "What are the ranks of captains that have no captain that are in the Third-rate ship of the line class?",
        "query": "SELECT Rank FROM captain EXCEPT SELECT Rank FROM captain",
        "gold_parse": "SELECT rank FROM captain EXCEPT SELECT rank FROM captain WHERE CLASS  =  'Third-rate ship of the line'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What are the customer name and date of the orders whose status is \"Delivered\".",
        "query": "SELECT T1.customer_name , T1.date_became_customer FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status = value",
        "gold_parse": "SELECT t1.customer_name ,  t2.order_date FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id WHERE order_status  =  \"Delivered\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "query": "SELECT Name FROM branch GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names for the 3 branches that have the most memberships?",
        "query": "SELECT Name FROM branch GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT name FROM branch ORDER BY membership_amount DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many schools have some students playing in goalie and mid positions.",
        "query": "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = value AND T2.pPos = value",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many schools have some students playing in goalie and mid positions.",
        "query": "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = value AND T2.pPos = value",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Tell me the payment method used by the customer who ordered the least amount of goods in total.",
        "query": "SELECT payment_method FROM Customers GROUP BY payment_method ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t1.payment_method FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the name of each dorm that has a TV Lounge but no study rooms?",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 WHERE T1.dormid NOT IN ( SELECT T2.dormid FROM Has_amenity AS T2 )",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the name of each dorm that has a TV Lounge but no study rooms?",
        "query": "SELECT T1.dorm_name FROM Dorm AS T1 WHERE T1.dormid NOT IN ( SELECT T2.dormid FROM Has_amenity AS T2 )",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the names of all the clients with no booking.",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the names of all the clients with no booking.",
        "query": "SELECT Customer_Name FROM Clients EXCEPT SELECT Customer_Name FROM Clients",
        "gold_parse": "SELECT Customer_Name FROM Clients EXCEPT SELECT T2.Customer_Name FROM Bookings AS T1 JOIN Clients AS T2 ON T1.Customer_ID  =  T2.Client_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the states or counties of the address of the stores with marketing region code \"CA\"?",
        "query": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID = T2.Address_ID WHERE T2.Marketing_Region_Code = value OR T2.Marketing_Region_Code = value",
        "gold_parse": "SELECT T1.State_County FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Marketing_Region_Code  =  \"CA\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average, maximum and total revenues of all companies?",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the average, maximum and total revenues of all companies?",
        "query": "SELECT Avg ( Revenue ) , Min ( Revenue ) , Max ( Revenue ) FROM Manufacturers",
        "gold_parse": "SELECT avg(revenue) ,  max(revenue) ,  sum(revenue) FROM manufacturers",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "Show the member name and hometown who registered a branch in 2016.",
        "query": "SELECT T1.Name , T1.Hometown FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID WHERE T2.Open_year = value",
        "gold_parse": "SELECT T2.name ,  T2.hometown FROM membership_register_branch AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T1.register_year  =  2016",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different names of the colleges involved in the tryout in alphabetical order?",
        "query": "SELECT DISTINCT cName FROM College ORDER BY cName Asc",
        "gold_parse": "SELECT DISTINCT cName FROM tryout ORDER BY cName",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are not made by Sony?",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products are not made by Sony?",
        "query": "SELECT Count ( * ) FROM Manufacturers AS T1 WHERE T1.Code NOT IN ( SELECT T2.Manufacturer FROM Products AS T2 )",
        "gold_parse": "SELECT count(DISTINCT name) FROM products WHERE name NOT IN (SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony')",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) FROM Invoice_Items",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "query": "SELECT Min ( Order_Quantity ) , Max ( Order_Quantity ) FROM Invoice_Items",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
        "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the states that have some college students playing in the positions of goalie and mid-field?",
        "query": "SELECT T1.state FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Tryout AS T2 WHERE T2.pPos = value",
        "gold_parse": "SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'goalie' INTERSECT SELECT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "query": "SELECT customer_id , customer_details FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the id and details of the customers who have at least 3 events?",
        "query": "SELECT customer_id , customer_details FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.customer_id ,  T1.customer_details FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are there?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM dorm",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many dorms are there?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM dorm",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products have prices of at least 180?",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many products have prices of at least 180?",
        "query": "SELECT Count ( * ) FROM Products WHERE Price < value",
        "gold_parse": "SELECT count(*) FROM products WHERE price >= 180",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT Customer_Event_ID , date_moved_in , date_moved_in FROM Customer_Events",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT Customer_Event_ID , date_moved_in , date_moved_in FROM Customer_Events",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the different product names for products that have the 'warm' characteristic:?",
        "query": "SELECT DISTINCT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type LIKE value",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the different product names for products that have the 'warm' characteristic:?",
        "query": "SELECT DISTINCT T2.product_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T1.characteristic_data_type LIKE value",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"warm\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "When is the last day any resident moved in?",
        "query": "SELECT date_moved_in FROM Residents ORDER BY date_moved_out Asc LIMIT value",
        "gold_parse": "SELECT max(date_moved_in) FROM Residents",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "When is the last day any resident moved in?",
        "query": "SELECT date_moved_in FROM Residents ORDER BY date_moved_out Asc LIMIT value",
        "gold_parse": "SELECT max(date_moved_in) FROM Residents",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "query": "SELECT Location FROM station EXCEPT SELECT Location FROM station GROUP BY Location HAVING Count ( * ) > = value",
        "gold_parse": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "correctness": 0
    },
    {
        "db_id": "train_station",
        "question": "Show all locations which don't have a train station with at least 15 platforms.",
        "query": "SELECT Location FROM station EXCEPT SELECT Location FROM station GROUP BY Location HAVING Count ( * ) > = value",
        "gold_parse": "SELECT LOCATION FROM station EXCEPT SELECT LOCATION FROM station WHERE number_of_platforms  >=  15",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes and appelations of each wine?",
        "query": "SELECT Winery , Name FROM wine",
        "gold_parse": "SELECT Grape ,  Appelation FROM WINE",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes and appelations of each wine?",
        "query": "SELECT Winery , Name FROM wine",
        "gold_parse": "SELECT Grape ,  Appelation FROM WINE",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Find the id and color description of the products with at least 2 characteristics.",
        "query": "SELECT product_id , product_description FROM Products GROUP BY product_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t1.product_id ,  t2.color_description FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code JOIN product_characteristics AS t3 ON t1.product_id  =  t3.product_id GROUP BY t1.product_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the id and name of customers whose address contains WY state and do not use credit card for payment.",
        "query": "SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value EXCEPT SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value",
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the \"date became customers\" of the customers whose ID is between 10 and 20.",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_id = value OR customer_id = value",
        "gold_parse": "SELECT date_became_customer FROM customers WHERE customer_id BETWEEN 10 AND 20",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "query": "SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name Asc",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "List name of all amenities which Anonymous Donor Hall has, and sort the results in alphabetic order.",
        "query": "SELECT amenity_name FROM Dorm_amenity ORDER BY amenity_name Asc",
        "gold_parse": "SELECT T1.amenity_name FROM dorm_amenity AS T1 JOIN has_amenity AS T2 ON T2.amenid  =  T1.amenid JOIN dorm AS T3 ON T2.dormid  =  T3.dormid WHERE T3.dorm_name  =  'Anonymous Donor Hall' ORDER BY T1.amenity_name",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the ids and names of customers with addressed that contain WY and who do not use a credit card for payment?",
        "query": "SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value EXCEPT SELECT customer_id , customer_name FROM Customers WHERE payment_method_code = value",
        "gold_parse": "SELECT customer_id ,  customer_name FROM customers WHERE customer_address LIKE \"%WY%\" AND payment_method_code != \"Credit Card\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
        "query": "SELECT Name FROM member WHERE Hometown = value INTERSECT SELECT Name FROM member WHERE Hometown = value",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the names of the branches that have some members with a hometown in Louisville, Kentucky and also those from Hiram, Goergia?",
        "query": "SELECT Name FROM member WHERE Hometown = value INTERSECT SELECT Name FROM member WHERE Hometown = value",
        "gold_parse": "SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Louisville ,  Kentucky' INTERSECT SELECT T2.name FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id JOIN member AS T3 ON T1.member_id  =  T3.member_id WHERE T3.Hometown  =  'Hiram ,  Georgia'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are characteristic names used at least twice across all products?",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT t3.characteristic_name FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id GROUP BY t3.characteristic_name HAVING count(*)  >= 2",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics the product 'sesame' has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics the product 'sesame' has.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id WHERE t1.product_name  =  \"sesame\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many orders have detail \"Second time\"?",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "How many orders have detail \"Second time\"?",
        "query": "SELECT Count ( * ) FROM Customers WHERE other_customer_details = value",
        "gold_parse": "SELECT count(*) FROM customer_orders WHERE order_details  =  \"Second time\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the average and maximum number of hours students who made the team practiced?",
        "query": "SELECT Avg ( HS ) , Max ( HS ) FROM Player",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the average and maximum number of hours students who made the team practiced?",
        "query": "SELECT Avg ( HS ) , Max ( HS ) FROM Player",
        "gold_parse": "SELECT avg(T1.HS) ,  max(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
        "query": "SELECT Name FROM Manufacturers WHERE Founder = value INTERSECT SELECT Name FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of product that is produced by both companies Creative Labs and Sony.",
        "query": "SELECT Name FROM Manufacturers WHERE Founder = value INTERSECT SELECT Name FROM Manufacturers WHERE Founder = value",
        "gold_parse": "SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Creative Labs' INTERSECT SELECT T1.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T2.name  =  'Sony'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the name of the customer that has purchased the most items?",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "What is the name of the customer that has purchased the most items?",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id GROUP BY t1.customer_name ORDER BY sum(t3.order_quantity) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the names of trains and locations of railways they are in.",
        "query": "SELECT Built , Location FROM railway",
        "gold_parse": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the names of trains and locations of railways they are in.",
        "query": "SELECT Built , Location FROM railway",
        "gold_parse": "SELECT T2.Name ,  T1.Location FROM railway AS T1 JOIN train AS T2 ON T1.Railway_ID  =  T2.Railway_ID",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the name of every college in alphabetical order that has more than 18000 students enrolled?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T1.enr > value GROUP BY T2.cName ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT cName FROM College WHERE enr  >  18000 ORDER BY cName",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Sort all captain names by their ages from old to young.",
        "query": "SELECT Name FROM captain ORDER BY age Asc",
        "gold_parse": "SELECT name FROM captain ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "ship_1",
        "question": "Sort all captain names by their ages from old to young.",
        "query": "SELECT Name FROM captain ORDER BY age Asc",
        "gold_parse": "SELECT name FROM captain ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "query": "SELECT Title , Director FROM movie WHERE Gross_worldwide > = value ORDER BY Gross_worldwide Desc LIMIT value",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What is the title and director for the movie with highest worldwide gross in the year 2000 or before?",
        "query": "SELECT Title , Director FROM movie WHERE Gross_worldwide > = value ORDER BY Gross_worldwide Desc LIMIT value",
        "gold_parse": "SELECT title ,  director FROM movie WHERE YEAR  <=  2000 ORDER BY gross_worldwide DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the names and scores of wines made from white grapes.",
        "query": "SELECT Name , Score FROM wine WHERE Appelation = value",
        "gold_parse": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the names and scores of wines made from white grapes.",
        "query": "SELECT Name , Score FROM wine WHERE Appelation = value",
        "gold_parse": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that have students trying out?",
        "query": "SELECT DISTINCT state FROM College",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that have students trying out?",
        "query": "SELECT DISTINCT state FROM College",
        "gold_parse": "SELECT DISTINCT state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_name LIKE value",
        "gold_parse": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_name LIKE value",
        "gold_parse": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which contact channel has been used by the customer with name \"Tillman Ernser\"?",
        "query": "SELECT date_became_customer FROM Customers WHERE customer_name LIKE value",
        "gold_parse": "SELECT DISTINCT channel_code FROM customers AS t1 JOIN customer_contact_channels AS t2 ON t1.customer_id  =  t2.customer_id WHERE t1.customer_name  =  \"Tillman Ernser\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the name of the school with smallest enrollment size per state?",
        "query": "SELECT cName FROM College ORDER BY enr Asc LIMIT value",
        "gold_parse": "SELECT cName ,  state ,  min(enr) FROM college GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "query": "SELECT Store_Name FROM Stores",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all the Store_Name of drama workshop groups.",
        "query": "SELECT Store_Name FROM Stores",
        "gold_parse": "SELECT Store_Name FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "For each branch id, what are the names of the branches that were registered after 2015?",
        "query": "SELECT T2.Name , T1.Name FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID AND T1.Member_ID = T3.Member_ID WHERE T3.Register_Year > value",
        "gold_parse": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "For each branch id, what are the names of the branches that were registered after 2015?",
        "query": "SELECT T2.Name , T1.Name FROM member AS T1 JOIN branch AS T2 JOIN membership_register_branch AS T3 ON T1.Member_ID = T3.Member_ID AND T3.Branch_ID = T2.Branch_ID AND T1.Member_ID = T3.Member_ID WHERE T3.Register_Year > value",
        "gold_parse": "SELECT T2.name ,  count(*) FROM membership_register_branch AS T1 JOIN branch AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.register_year  >  2015 GROUP BY T2.branch_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which cities have at least one customer but no performer?",
        "query": "SELECT City_Town FROM Addresses GROUP BY City_Town HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which cities have at least one customer but no performer?",
        "query": "SELECT City_Town FROM Addresses GROUP BY City_Town HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "List all company names with a book published by Alyson.",
        "query": "SELECT Company_name FROM culture_company WHERE Type = value",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "List all company names with a book published by Alyson.",
        "query": "SELECT Company_name FROM culture_company WHERE Type = value",
        "gold_parse": "SELECT T1.company_name FROM culture_company AS T1 JOIN book_club AS T2 ON T1.book_club_id  =  T2.book_club_id WHERE T2.publisher  =  'Alyson'",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "query": "SELECT Name FROM wine WHERE Year > value",
        "gold_parse": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Find the appelations that produce wines after the year of 2008 but not in Central Coast area.",
        "query": "SELECT Name FROM wine WHERE Year > value",
        "gold_parse": "SELECT Appelation FROM WINE WHERE YEAR  >  2008 EXCEPT SELECT Appelation FROM APPELLATIONS WHERE Area  =  \"Central Coast\"",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the total number of purchases for members with level 6?",
        "query": "SELECT Count ( * ) FROM member WHERE Level = value",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What is the total number of purchases for members with level 6?",
        "query": "SELECT Count ( * ) FROM member WHERE Level = value",
        "gold_parse": "SELECT count(*) FROM purchase AS T1 JOIN member AS T2 ON T1.member_id  =  T2.member_id WHERE T2.level  =  6",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What is the total revenue of companies with revenue greater than the lowest revenue of any manufacturer in Austin?",
        "query": "SELECT Sum ( Revenue ) FROM Manufacturers WHERE Headquarter = value",
        "gold_parse": "SELECT sum(revenue) FROM manufacturers WHERE revenue  >  (SELECT min(revenue) FROM manufacturers WHERE headquarter  =  'Austin')",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "query": "SELECT Name FROM Products WHERE Price > value OR Price < value",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "query": "SELECT Name FROM Products WHERE Price > value OR Price < value",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show the movie titles and book titles for all companies in China.",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show the movie titles and book titles for all companies in China.",
        "query": "SELECT T1.Title , T2.Company_name FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id = T2.movie_id WHERE T2.Company_name = value",
        "gold_parse": "SELECT T1.title ,  T3.book_title FROM movie AS T1 JOIN culture_company AS T2 ON T1.movie_id  =  T2.movie_id JOIN book_club AS T3 ON T3.book_club_id  =  T2.book_club_id WHERE T2.incorporated_in  =  'China'",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has the most records.",
        "query": "SELECT name FROM swimmer GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find the name of the swimmer who has the most records.",
        "query": "SELECT name FROM swimmer GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM swimmer AS t1 JOIN record AS t2 ON t1.id  =  t2.swimmer_id GROUP BY t2.swimmer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of companies that do not make DVD drives?",
        "query": "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of companies that do not make DVD drives?",
        "query": "SELECT Name FROM Manufacturers EXCEPT SELECT Name FROM Manufacturers",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many different colleges are there?",
        "query": "SELECT Count ( DISTINCT state ) FROM College",
        "gold_parse": "SELECT count(*) FROM College",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many different colleges are there?",
        "query": "SELECT Count ( DISTINCT state ) FROM College",
        "gold_parse": "SELECT count(*) FROM College",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "query": "SELECT Count ( * ) FROM Addresses WHERE city = value",
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the number of customers who live in the city called Lake Geovannyton.",
        "query": "SELECT Count ( * ) FROM Addresses WHERE city = value",
        "gold_parse": "SELECT count(*) FROM customers AS t1 JOIN customer_addresses AS t2 ON t1.customer_id  =  t2.customer_id JOIN addresses AS t3 ON t2.address_id  =  t3.address_id WHERE t3.city  =  \"Lake Geovannyton\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the product names with average product price smaller than 1000000?",
        "query": "SELECT Product_Name FROM Products WHERE Product_Price < value",
        "gold_parse": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the product names with average product price smaller than 1000000?",
        "query": "SELECT Product_Name FROM Products WHERE Product_Price < value",
        "gold_parse": "SELECT Product_Name FROM PRODUCTS GROUP BY Product_Name HAVING avg(Product_Price)  <  1000000",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are there?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM ref_colors",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are there?",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM ref_colors",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "query": "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code ! = value",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Find the name and gender of the staff who has been assigned the job of Sales Person but never Clerical Staff.",
        "query": "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id = T2.staff_id WHERE T2.job_title_code ! = value",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
        "query": "SELECT Grape , Winery , Year FROM wine WHERE Price > value ORDER BY Price Desc",
        "gold_parse": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the grapes, wineries and years for wines with price higher than 100, sorted by year?",
        "query": "SELECT Grape , Winery , Year FROM wine WHERE Price > value ORDER BY Price Desc",
        "gold_parse": "SELECT Grape ,  Winery ,  YEAR FROM WINE WHERE Price  >   100 ORDER BY YEAR",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the names of customers who ordered both products Latte and Americano.",
        "query": "SELECT customer_name FROM Customers WHERE payment_method = value INTERSECT SELECT customer_name FROM Customers WHERE payment_method = value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Latte' INTERSECT SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id JOIN order_items AS t3 ON t2.order_id  =  t3.order_id JOIN products AS t4 ON t3.product_id  =  t4.product_id WHERE t4.product_details  =  'Americano'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "query": "SELECT Name , Headquarter FROM Manufacturers ORDER BY Revenue Asc",
        "gold_parse": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find all manufacturers' names and their headquarters, sorted by the ones with highest revenue first.",
        "query": "SELECT Name , Headquarter FROM Manufacturers ORDER BY Revenue Asc",
        "gold_parse": "SELECT name ,  headquarter FROM manufacturers ORDER BY revenue DESC",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "For each dorm, how many amenities does it have?",
        "query": "SELECT dorm_name , Count ( * ) FROM Dorm GROUP BY dorm_name",
        "gold_parse": "SELECT count(*) ,  T1.dormid FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid WHERE T1.student_capacity  >  100 GROUP BY T1.dormid",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names and buying prices of all the products?",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names and buying prices of all the products?",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "query": "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 WHERE T1.staff_id NOT IN ( SELECT T2.staff_id FROM Staff_Department_Assignments AS T2 )",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and genders of staff who have held the title Sales Person, but never Clerical Staff?",
        "query": "SELECT T1.staff_name , T1.staff_gender FROM Staff AS T1 WHERE T1.staff_id NOT IN ( SELECT T2.staff_id FROM Staff_Department_Assignments AS T2 )",
        "gold_parse": "SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Sales Person\" EXCEPT SELECT T1.staff_name ,  T1.staff_gender FROM staff AS T1 JOIN Staff_Department_Assignments AS T2 ON T1.staff_id  =  T2.staff_id WHERE T2.job_title_code  =  \"Clerical Staff\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Which workshop groups have bookings with status code \"stop\"? Give me the names.",
        "query": "SELECT T1.Customer_Name FROM Performers AS T1 JOIN Bookings AS T2 JOIN Performers_in_Bookings AS T3 ON T1.Performer_ID = T3.Performer_ID AND T3.Order_ID = T2.Booking_ID WHERE T2.Status_Code = value",
        "gold_parse": "SELECT T2.Store_Name FROM Bookings AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Workshop_Group_ID  =  T2.Workshop_Group_ID WHERE T1.Status_Code  =  \"stop\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Count the number of customers recorded.",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(*) FROM CUSTOMERS",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the stadium which held the most events?",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "What is the name of the stadium which held the most events?",
        "query": "SELECT name FROM stadium GROUP BY ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.name FROM stadium AS t1 JOIN event AS t2 ON t1.id  =  t2.stadium_id GROUP BY t2.stadium_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "query": "SELECT Count ( * ) , Founder FROM Manufacturers GROUP BY Founder",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the number of products for each manufacturer, showing the name of each company.",
        "query": "SELECT Count ( * ) , Founder FROM Manufacturers GROUP BY Founder",
        "gold_parse": "SELECT count(*) ,  T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products with price at most 200?",
        "query": "SELECT Name FROM Products WHERE Price > value",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of products with price at most 200?",
        "query": "SELECT Name FROM Products WHERE Price > value",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "query": "SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > value )",
        "gold_parse": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "query": "SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > value )",
        "gold_parse": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "correctness": 0
    },
    {
        "db_id": "roller_coaster",
        "question": "How many countries do not have an roller coaster longer than 3000?",
        "query": "SELECT Count ( * ) FROM country AS T1 WHERE T1.Country_ID NOT IN ( SELECT T2.Country_ID FROM roller_coaster AS T2 WHERE T2.Height > value )",
        "gold_parse": "SELECT count(*) FROM country WHERE country_id NOT IN ( SELECT country_id FROM roller_coaster WHERE LENGTH  >  3000 )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "query": "SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = value",
        "gold_parse": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the email addresses of the drama workshop groups located in Alaska state.",
        "query": "SELECT T2.Customer_Email_Address FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.State_County = value",
        "gold_parse": "SELECT T2.Store_Email_Address FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.State_County  =  \"Alaska\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the name of the customer who has the most orders.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_products_contacts",
        "question": "Show the name of the customer who has the most orders.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that had students successfully try out?",
        "query": "SELECT DISTINCT state FROM College",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the different states that had students successfully try out?",
        "query": "SELECT DISTINCT state FROM College",
        "gold_parse": "SELECT DISTINCT T1.state FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "query": "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = value",
        "gold_parse": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What are the names of the drama workshop groups with address in Feliciaberg city?",
        "query": "SELECT T2.Customer_Name FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID = T2.Address_ID WHERE T1.City_Town = value",
        "gold_parse": "SELECT T2.Store_Name FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T1.City_Town  =  \"Feliciaberg\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the average number of hours spent practicing for students who got rejected?",
        "query": "SELECT Avg ( T2.HS ) FROM College AS T1 JOIN Player AS T2 JOIN Tryout AS T3 ON T1.cName = T3.cName AND T3.pID = T2.pID WHERE T1.state = value",
        "gold_parse": "SELECT avg(T1.HS) FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'no'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics of the 'flax' product.",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_data_type = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of characteristics of the 'flax' product.",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_data_type = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t1.product_name  =  \"flax\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "What are the names of manufacturers with revenue greater than the average of all revenues?",
        "query": "SELECT T2.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > ( SELECT Avg ( T1.Revenue ) FROM Manufacturers AS T1 )",
        "gold_parse": "SELECT name FROM manufacturers WHERE revenue  >  (SELECT avg(revenue) FROM manufacturers)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "query": "SELECT T1.Name , T1.Revenue FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer ORDER BY T2.Price Asc LIMIT value",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name and revenue of the company that earns the highest revenue in each city.",
        "query": "SELECT T1.Name , T1.Revenue FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer ORDER BY T2.Price Asc LIMIT value",
        "gold_parse": "SELECT name ,  max(revenue) ,  Headquarter FROM manufacturers GROUP BY Headquarter",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the order detail for the products with price above 2000.",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the order detail for the products with price above 2000.",
        "query": "SELECT Other_Product_Service_Details FROM Products WHERE Product_Price > value",
        "gold_parse": "SELECT T1.Other_Item_Details FROM ORDER_ITEMS AS T1 JOIN Products AS T2 ON T1.Product_ID  =  T2.Product_ID WHERE T2.Product_price  >  2000",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "How many schools have students playing in goalie and mid-field positions?",
        "query": "SELECT Count ( DISTINCT T2.cName ) FROM Player AS T1 JOIN Tryout AS T2 ON T1.pID = T2.pID WHERE T1.pName = value AND T2.pPos = value",
        "gold_parse": "SELECT COUNT(*) FROM (SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid')",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "How many movie directors are there?",
        "query": "SELECT Count ( * ) FROM book_club",
        "gold_parse": "SELECT COUNT (DISTINCT director) FROM movie",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "How many movie directors are there?",
        "query": "SELECT Count ( * ) FROM book_club",
        "gold_parse": "SELECT COUNT (DISTINCT director) FROM movie",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many different products are produced in each headquarter city?",
        "query": "SELECT Count ( * ) , Headquarter FROM Manufacturers GROUP BY Headquarter",
        "gold_parse": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "How many different products are produced in each headquarter city?",
        "query": "SELECT Count ( * ) , Headquarter FROM Manufacturers GROUP BY Headquarter",
        "gold_parse": "SELECT count(DISTINCT T1.name) ,  T2.Headquarter FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code GROUP BY T2.Headquarter",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are never used by any product?",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "How many colors are never used by any product?",
        "query": "SELECT Count ( * ) FROM Products AS T1 WHERE T1.product_id NOT IN ( SELECT T2.product_id FROM Product_Characteristics AS T2 )",
        "gold_parse": "SELECT count(*) FROM Ref_colors WHERE color_code NOT IN ( SELECT color_code FROM products )",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the name of players whose card is yes in the descending order of training hours.",
        "query": "SELECT pName FROM Player ORDER BY HS Desc",
        "gold_parse": "SELECT pName FROM Player WHERE yCard  =  'yes' ORDER BY HS DESC",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "List the wheels and locations of the railways.",
        "query": "SELECT Built , Location FROM railway",
        "gold_parse": "SELECT Wheels ,  LOCATION FROM railway",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "List the wheels and locations of the railways.",
        "query": "SELECT Built , Location FROM railway",
        "gold_parse": "SELECT Wheels ,  LOCATION FROM railway",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show all book categories and the number of books in each category.",
        "query": "SELECT Type , Count ( * ) FROM culture_company GROUP BY Type",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "Show all book categories and the number of books in each category.",
        "query": "SELECT Type , Count ( * ) FROM culture_company GROUP BY Type",
        "gold_parse": "SELECT category ,  count(*) FROM book_club GROUP BY category",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products.",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM products",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products.",
        "query": "SELECT Count ( * ) FROM Ref_Characteristic_Types",
        "gold_parse": "SELECT count(*) FROM products",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of dorms that have some amenity.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the number of dorms that have some amenity.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT dormid) FROM has_amenity",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many female students live in Smith Hall?",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many female students live in Smith Hall?",
        "query": "SELECT Count ( * ) FROM Student AS T1 JOIN Dorm AS T2 JOIN Lives_in AS T3 ON T1.StuID = T3.stuid AND T3.dormid = T2.dormid WHERE T1.Sex = value AND T2.gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.dorm_name  =  'Smith Hall' AND T1.sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "List all the event names by year from the most recent to the oldest.",
        "query": "SELECT Name FROM event ORDER BY Year Desc LIMIT value",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "List all the event names by year from the most recent to the oldest.",
        "query": "SELECT Name FROM event ORDER BY Year Desc LIMIT value",
        "gold_parse": "SELECT name FROM event ORDER BY YEAR DESC",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many girl students who are younger than 25?",
        "query": "SELECT Count ( * ) FROM Student WHERE Age < value",
        "gold_parse": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "How many girl students who are younger than 25?",
        "query": "SELECT Count ( * ) FROM Student WHERE Age < value",
        "gold_parse": "SELECT count(*) FROM student WHERE sex  =  'F' AND age  <  25",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different membership levels?",
        "query": "SELECT DISTINCT membership_amount FROM branch",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the different membership levels?",
        "query": "SELECT DISTINCT membership_amount FROM branch",
        "gold_parse": "SELECT count(DISTINCT LEVEL) FROM member",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "SELECT T1.pName , T1.HS FROM Player AS T1 WHERE T1.pID IN ( SELECT T2.cName FROM Tryout AS T2 )",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "SELECT T1.pName , T1.HS FROM Player AS T1 WHERE T1.pID IN ( SELECT T2.cName FROM Tryout AS T2 )",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
        "query": "SELECT Starting_Year FROM technician WHERE Team = value OR Team = value",
        "gold_parse": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What are the starting years shared by the technicians from the team \"CLE\" or \"CWS\"?",
        "query": "SELECT Starting_Year FROM technician WHERE Team = value OR Team = value",
        "gold_parse": "SELECT Starting_Year FROM technician WHERE Team  =  \"CLE\" INTERSECT SELECT Starting_Year FROM technician WHERE Team  =  \"CWS\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the document status description of the document with id 1?",
        "query": "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "gold_parse": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the document status description of the document with id 1?",
        "query": "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "gold_parse": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the document status description of the document with id 1?",
        "query": "SELECT T1.document_status_description FROM Ref_Document_Status AS T1 JOIN Documents AS T2 ON T1.document_status_code = T2.document_status_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "gold_parse": "SELECT Ref_Document_Status.document_status_description FROM Ref_Document_Status JOIN Documents ON Documents.document_status_code = Ref_Document_Status.document_status_code WHERE Documents.document_id = 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "query": "SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "query": "SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the name of the shipping agent of the document with id 2?",
        "query": "SELECT T1.shipping_agent_name FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code JOIN Documents_Mailed AS T3 ON T2.document_id = T3.document_id WHERE T3.document_id = value",
        "gold_parse": "SELECT Ref_Shipping_Agents.shipping_agent_name FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Documents.document_id = 2",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of addresses of people?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find distinct cities of addresses of people?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "query": "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "List name, dates active, and number of deaths for all storms with at least 1 death.",
        "query": "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of the candidate who most recently accessed the course?",
        "query": "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of the candidate who most recently accessed the course?",
        "query": "SELECT candidate_id FROM Candidate_Assessments GROUP BY candidate_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments ORDER BY assessment_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the nominees that have nominated musicals for both \"Tony Award\" and \"Drama Desk Award\".",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value INTERSECT SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T2.Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers have an account?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers have an account?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers have an account?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "query": "SELECT name , dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Asc",
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students and their respective departments, ordered by number of credits from least to greatest?",
        "query": "SELECT name , dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Asc",
        "gold_parse": "SELECT name ,  dept_name FROM student ORDER BY tot_cred",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of the department that offers the highest total credits?",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of the department that offers the highest total credits?",
        "query": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY Sum ( tot_cred ) Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY sum(credits) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers who hold an account.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers who hold an account.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of customers who hold an account.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(DISTINCT customer_id) FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where people live?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where people live?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "query": "SELECT Max ( Milliseconds ) , Min ( Milliseconds ) FROM Track",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the maximum and minimum millisecond lengths of pop tracks.",
        "query": "SELECT Max ( Milliseconds ) , Min ( Milliseconds ) FROM Track",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "query": "SELECT employee_id , Count ( * ) FROM Circulation_History GROUP BY employee_id",
        "gold_parse": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "For each document, list the number of employees who have showed up in the circulation history of that document. List the document ids and number of employees.",
        "query": "SELECT employee_id , Count ( * ) FROM Circulation_History GROUP BY employee_id",
        "gold_parse": "SELECT document_id ,  count(DISTINCT employee_id) FROM Circulation_History GROUP BY document_id",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List names of all teams in the basketball competition, ordered by all home scores in descending order.",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = value INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = value",
        "gold_parse": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the coupon amount of the coupons owned by both good and bad customers?",
        "query": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = value INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN Customers AS T2 ON T1.coupon_id = T2.coupon_id WHERE T2.first_name = value",
        "gold_parse": "SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'good' INTERSECT SELECT T1.coupon_amount FROM Discount_Coupons AS T1 JOIN customers AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.good_or_bad_customer  =  'bad'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "query": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the maximum fastest lap speed in race named 'Monaco Grand Prix' in 2008 ?",
        "query": "SELECT Max ( T3.positionText ) FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T1.country = value",
        "gold_parse": "SELECT max(T2.fastestlapspeed) FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid WHERE T1.year = 2008 AND T1.name = \"Monaco Grand Prix\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "query": "SELECT country FROM circuits ORDER BY country Asc",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "query": "SELECT country FROM circuits ORDER BY country Asc",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 EXCEPT SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 EXCEPT SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T2.Name = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the average millisecond length of Latin and Pop tracks.",
        "query": "SELECT Avg ( Milliseconds ) , Avg ( Milliseconds ) FROM Track",
        "gold_parse": "SELECT AVG(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Latin\" OR T1.Name  =  \"Pop\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "query": "SELECT Name , Count ( * ) FROM actor GROUP BY Name",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals and the number of actors who have appeared in the musicals.",
        "query": "SELECT Name , Count ( * ) FROM actor GROUP BY Name",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "what are the first name and last name of all candidates?",
        "query": "SELECT first_name , last_name FROM People",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "what are the first name and last name of all candidates?",
        "query": "SELECT first_name , last_name FROM People",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "query": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and last name of the driver with the longest laptime?",
        "query": "SELECT constructorStandingsId , constructorId FROM constructorStandings ORDER BY constructorId Desc LIMIT value",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the id and name of the browser that is compatible with the most web accelerators?",
        "query": "SELECT id , name FROM browser GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the schools that were either founded before 1850 or are public?",
        "query": "SELECT School FROM university WHERE Founded = value OR Founded < value",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the schools that were either founded before 1850 or are public?",
        "query": "SELECT School FROM university WHERE Founded = value OR Founded < value",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "query": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the distinct names of all races held between 2014 and 2017?",
        "query": "SELECT DISTINCT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "How many climbers are there?",
        "query": "SELECT Count ( * ) FROM mountain",
        "gold_parse": "SELECT count(*) FROM climber",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "How many climbers are there?",
        "query": "SELECT Count ( * ) FROM mountain",
        "gold_parse": "SELECT count(*) FROM climber",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "query": "SELECT DISTINCT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the different first names for customers from Brazil who have also had an invoice?",
        "query": "SELECT DISTINCT T1.FirstName FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "gold_parse": "SELECT DISTINCT T1.FirstName FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Brazil\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Rent_Arrears AS T2",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Rent_Arrears AS T2",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the average and maximum damage in millions for storms that had a max speed over 1000?",
        "query": "SELECT Avg ( Damage_millions_USD ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > = value",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races that were held after 2017 and the circuits were in the country of Spain?",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of actors and names of musicals they are in.",
        "query": "SELECT Character , Name FROM actor",
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of actors and names of musicals they are in.",
        "query": "SELECT Character , Name FROM actor",
        "gold_parse": "SELECT T1.Name ,  T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of different affected regions.",
        "query": "SELECT Count ( DISTINCT Region_code ) FROM region",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of different affected regions.",
        "query": "SELECT Count ( DISTINCT Region_code ) FROM region",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the building, room number, semester and year of all courses offered by Psychology department sorted by course titles.",
        "query": "SELECT T2.building , T2.room_number , T2.year FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id WHERE T1.dept_name = value ORDER BY T1.title Asc",
        "gold_parse": "SELECT T2.building ,  T2.room_number ,  T2.semester ,  T2.year FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE T1.dept_name  =  'Psychology' ORDER BY T1.title",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "query": "SELECT Investor FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the weights of entrepreneurs in descending order of money requested?",
        "query": "SELECT Investor FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "query": "SELECT product_description FROM Products_for_Hire WHERE product_name = value",
        "gold_parse": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the product description of the product booked with an amount of 102.76?",
        "query": "SELECT product_description FROM Products_for_Hire WHERE product_name = value",
        "gold_parse": "SELECT T2.product_description FROM products_booked AS T1 JOIN products_for_hire AS T2 ON T1.product_id  =  T2.product_id WHERE T1.booked_amount  =  102.76",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "query": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
        "gold_parse": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "What is the membership card held by both members living in Hartford and ones living in Waterbury address?",
        "query": "SELECT T1.Membership_card FROM member AS T1 WHERE T1.Address = value INTERSECT SELECT T1.Membership_card FROM shop AS T2 JOIN member AS T1 WHERE T2.Address = value",
        "gold_parse": "SELECT membership_card FROM member WHERE address  =  'Hartford' INTERSECT SELECT membership_card FROM member WHERE address  =  'Waterbury'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
        "query": "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T2.time = value AND T1.country ! = value",
        "gold_parse": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first and last names of all drivers who participated in the Australian Grand Prix but not the Chinese Grand Prix?",
        "query": "SELECT T3.positionText , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId AND T1.circuitId = T2.circuitId JOIN constructorStandings AS T3 ON T2.raceId = T3.raceId WHERE T2.time = value AND T1.country ! = value",
        "gold_parse": "SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Australian Grand Prix\" EXCEPT SELECT T3.forename ,  T3.surname FROM races AS T1 JOIN results AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T2.driverid = T3.driverid WHERE T1.name = \"Chinese Grand Prix\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "query": "SELECT name , Location , Product FROM enzyme WHERE name LIKE value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the different names, locations, and products of the enzymes that are capable inhibitor interactions?",
        "query": "SELECT name , Location , Product FROM enzyme WHERE name LIKE value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "query": "SELECT Enrollment , School FROM university ORDER BY Enrollment Desc LIMIT value",
        "gold_parse": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Show the enrollment and primary_conference of the oldest college.",
        "query": "SELECT Enrollment , School FROM university ORDER BY Enrollment Desc LIMIT value",
        "gold_parse": "SELECT enrollment ,  primary_conference FROM university ORDER BY founded LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "How many tracks belong to rock genre?",
        "query": "SELECT Count ( * ) FROM Genre WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "How many tracks belong to rock genre?",
        "query": "SELECT Count ( * ) FROM Genre WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach?",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach?",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are all info of students who registered courses but not attended courses?",
        "query": "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are all info of students who registered courses but not attended courses?",
        "query": "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the numbers of races for each constructor id?",
        "query": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the numbers of races for each constructor id?",
        "query": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "query": "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of all race held between 2014 and 2017?",
        "query": "SELECT country FROM circuits WHERE circuitRef BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT name FROM races WHERE YEAR BETWEEN 2014 AND 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "For each nationality, how many different constructors are there?",
        "query": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "For each nationality, how many different constructors are there?",
        "query": "SELECT driverRef , Count ( * ) FROM drivers GROUP BY driverRef",
        "gold_parse": "SELECT count(*) ,  nationality FROM constructors GROUP BY nationality",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race that occurred most recently?",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race that occurred most recently?",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID GROUP BY T2.ResID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "Which student visited restaurant most often? List student's first name and last name.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID GROUP BY T2.ResID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Student.Fname , Student.Lname FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID GROUP BY Student.StuID ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "List all female students age is older than 18 who is not majoring in 600. List students' first name and last name.",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value AND Age > value",
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Age  >  18 AND Major != 600 AND Sex = 'F'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "query": "SELECT T1.Competition , T1.stadium_id FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Injury = value OR T2.Injury = value",
        "gold_parse": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "In which season and which stadium did any player have an injury of 'Foot injury' or 'Knee problem'?",
        "query": "SELECT T1.Competition , T1.stadium_id FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id WHERE T2.Injury = value OR T2.Injury = value",
        "gold_parse": "SELECT T1.season ,  T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.injury  =  'Foot injury' OR T3.injury  =  'Knee problem'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = value AND T1.Porphyria = value",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the type of interaction for the enzyme named 'ALA synthase' and the medicine named 'Aripiprazole'?",
        "query": "SELECT T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.name = value AND T1.Porphyria = value",
        "gold_parse": "SELECT T1.interaction_type FROM medicine_enzyme_interaction AS T1 JOIN medicine AS T2 ON T1.medicine_id  =  T2.id JOIN enzyme AS T3 ON T1.enzyme_id  =  T3.id WHERE T3.name  =  'ALA synthase' AND T2.name  =  'Aripiprazole'",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "query": "SELECT DISTINCT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value",
        "gold_parse": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "List the distinct carriers of phones with memories bigger than 32.",
        "query": "SELECT DISTINCT T1.Carrier FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value",
        "gold_parse": "SELECT DISTINCT Carrier FROM phone WHERE Memory_in_G  >  32",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 and in Spring 2010.",
        "query": "SELECT course_id FROM takes WHERE year = value AND semester = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the role of the employee named Koby?",
        "query": "SELECT role_code FROM Employees WHERE employee_name = value",
        "gold_parse": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the role of the employee named Koby?",
        "query": "SELECT role_code FROM Employees WHERE employee_name = value",
        "gold_parse": "SELECT T1.role_description FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code WHERE T2.employee_name = \"Koby\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = value INTERSECT SELECT T2.course_id FROM takes AS T2 WHERE T2.year = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids for courses that were offered in both Fall of 2009 and Spring of 2010?",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = value INTERSECT SELECT T2.course_id FROM takes AS T2 WHERE T2.year = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 INTERSECT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers were in the Australian Grand Prix held in 2009?",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the storm name and max speed which affected the greatest number of regions?",
        "query": "SELECT Name , Max_speed FROM storm GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What is the storm name and max speed which affected the greatest number of regions?",
        "query": "SELECT Name , Max_speed FROM storm GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What is the party of the youngest people?",
        "query": "SELECT Party FROM people ORDER BY Age Desc LIMIT value",
        "gold_parse": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "What is the party of the youngest people?",
        "query": "SELECT Party FROM people ORDER BY Age Desc LIMIT value",
        "gold_parse": "SELECT Party FROM people ORDER BY Age ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "query": "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value ORDER BY T1.Name Desc",
        "gold_parse": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "Show the names of phones that have total number of stocks bigger than 2000, in descending order of the total number of stocks.",
        "query": "SELECT T1.Name FROM phone AS T1 JOIN phone_market AS T2 ON T1.Phone_ID = T2.Phone_ID WHERE T2.Num_of_stock > value ORDER BY T1.Name Desc",
        "gold_parse": "SELECT T2.Name FROM phone_market AS T1 JOIN phone AS T2 ON T1.Phone_ID  =  T2.Phone_ID GROUP BY T2.Name HAVING sum(T1.Num_of_stock)  >=  2000 ORDER BY sum(T1.Num_of_stock) DESC",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "query": "SELECT Sponsor_name FROM player WHERE Residence = value OR Sponsor_name = value",
        "gold_parse": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of sponsors of players whose residence is either \"Brandon\" or \"Birtle\".",
        "query": "SELECT Sponsor_name FROM player WHERE Residence = value OR Sponsor_name = value",
        "gold_parse": "SELECT Sponsor_name FROM player WHERE Residence  =  \"Brandon\" OR Residence  =  \"Birtle\"",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "query": "SELECT Name FROM people EXCEPT SELECT Name FROM people",
        "gold_parse": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "List the names of people that have not been on the affirmative side of debates.",
        "query": "SELECT Name FROM people EXCEPT SELECT Name FROM people",
        "gold_parse": "SELECT Name FROM people WHERE People_id NOT IN (SELECT Affirmative FROM debate_people)",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "query": "SELECT Avg ( transaction_amount ) FROM Financial_Transactions",
        "gold_parse": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the average transaction amount, as well as the total amount of all transactions.",
        "query": "SELECT Avg ( transaction_amount ) FROM Financial_Transactions",
        "gold_parse": "SELECT avg(transaction_amount) ,  sum(transaction_amount) FROM Financial_transactions",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection ! = value",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection ! = value",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of department has the highest amount of students?",
        "query": "SELECT T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name ORDER BY Sum ( T1.budget ) Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "query": "SELECT T1.Connection , T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id ORDER BY T2.compatible_since_year Desc",
        "gold_parse": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "give me names of all compatible browsers and accelerators in the descending order of compatible year",
        "query": "SELECT T1.Connection , T1.name FROM Web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.accelerator_id ORDER BY T2.compatible_since_year Desc",
        "gold_parse": "SELECT T2.name ,  T3.name FROM accelerator_compatible_browser AS T1 JOIN browser AS T2 ON T1.browser_id  =  T2.id JOIN web_client_accelerator AS T3 ON T1.accelerator_id  =  T3.id ORDER BY T1.compatible_since_year DESC",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where students live?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the different cities where students live?",
        "query": "SELECT DISTINCT city FROM Addresses",
        "gold_parse": "SELECT DISTINCT T1.city FROM addresses AS T1 JOIN people_addresses AS T2 ON T1.address_id = T2.address_id JOIN students AS T3 ON T2.person_id = T3.student_id",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do not have an account?",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do not have an account?",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "query": "SELECT Count ( * ) , budget FROM department GROUP BY building",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "query": "SELECT Count ( * ) , budget FROM department GROUP BY building",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "query": "SELECT T1.Address FROM Customer AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Address FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the address of all customers that live in Germany and have invoice.",
        "query": "SELECT T1.Address FROM Customer AS T1 WHERE T1.Country = value INTERSECT SELECT T1.Address FROM Customer AS T1 JOIN Invoice AS T2 ON T1.CustomerId = T2.CustomerId WHERE T2.BillingCountry = value",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the names of all races held in 2017.",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the name of browsers in descending order by market share.",
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id ORDER BY T2.market_share Desc",
        "gold_parse": "SELECT name FROM browser ORDER BY market_share DESC",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the name of browsers in descending order by market share.",
        "query": "SELECT T1.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id ORDER BY T2.market_share Desc",
        "gold_parse": "SELECT name FROM browser ORDER BY market_share DESC",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "query": "SELECT Name FROM people ORDER BY Weight Desc LIMIT value",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the name of the perpetrator with the biggest weight.",
        "query": "SELECT Name FROM people ORDER BY Weight Desc LIMIT value",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "query": "SELECT T1.customer_id , T1.customer_first_name FROM Customers AS T1 JOIN Customers_Cards AS T2 WHERE T2.card_number ! = value",
        "gold_parse": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and first names of customers who do not hold a credit card?",
        "query": "SELECT T1.customer_id , T1.customer_first_name FROM Customers AS T1 JOIN Customers_Cards AS T2 WHERE T2.card_number ! = value",
        "gold_parse": "SELECT customer_id ,  customer_first_name FROM Customers EXCEPT SELECT T1.customer_id ,  T2.customer_first_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE card_type_code  =  \"Credit\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "query": "SELECT Name FROM actor WHERE Character = value INTERSECT SELECT Name FROM actor WHERE Character = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated for both a Tony Award and a Drama Desk Award?",
        "query": "SELECT Name FROM actor WHERE Character = value INTERSECT SELECT Name FROM actor WHERE Character = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" INTERSECT SELECT Nominee FROM musical WHERE Award  =  \"Drama Desk Award\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who didnt' teach?",
        "query": "SELECT ID FROM instructor",
        "gold_parse": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of instructors who didnt' teach?",
        "query": "SELECT ID FROM instructor",
        "gold_parse": "SELECT id FROM instructor EXCEPT SELECT id FROM teaches",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "query": "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the title, credit, and department name of courses that have more than one prerequisites?",
        "query": "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the weight of the shortest person?",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the weight of the shortest person?",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "query": "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "query": "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the ids and full names of customers who hold two or more cards?",
        "query": "SELECT customer_id , customer_first_name , customer_last_name FROM Customers GROUP BY customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = value AND T3.semester = value",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the course offered in Chandler during the Fall of 2010.",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = value AND T3.semester = value",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "How many technicians are there?",
        "query": "SELECT Count ( * ) FROM repair",
        "gold_parse": "SELECT count(*) FROM technician",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "How many technicians are there?",
        "query": "SELECT Count ( * ) FROM repair",
        "gold_parse": "SELECT count(*) FROM technician",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students and instructors are in each department?",
        "query": "SELECT Count ( * ) , dept_name FROM instructor GROUP BY dept_name",
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Which membership card has more than 5 members?",
        "query": "SELECT Membership_card FROM member WHERE Membership_card > value",
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Which membership card has more than 5 members?",
        "query": "SELECT Membership_card FROM member WHERE Membership_card > value",
        "gold_parse": "SELECT Membership_card FROM member GROUP BY Membership_card HAVING count(*)  >  5",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who are advising more than one student.",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who are advising more than one student.",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "query": "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title, credit value, and department name for courses with more than one prerequisite?",
        "query": "SELECT title , credits , dept_name FROM course GROUP BY dept_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.title ,  T1.credits , T1.dept_name FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is draft detail of the document with id 7?",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id = value",
        "gold_parse": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is draft detail of the document with id 7?",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Documents_Mailed AS T2 ON T1.address_id = T2.mailed_to_address_id WHERE T2.document_id = value",
        "gold_parse": "SELECT draft_details FROM Document_Drafts WHERE document_id = 7",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "query": "SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = value INTERSECT SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who took any class in the years of 2009 and 2010.",
        "query": "SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = value INTERSECT SELECT T1.name FROM student AS T1 JOIN time_slot AS T2 WHERE T2.day = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE YEAR  =  2009 OR YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
        "query": "SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T2 ON T1.person_id = T2.candidate_id JOIN Candidate_Assessments AS T3 ON T2.candidate_id = T3.candidate_id WHERE T3.qualification = value",
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the cell phone numbers of the candidates that received an assessment code of \"Fail\"?",
        "query": "SELECT T1.cell_mobile_number FROM People AS T1 JOIN Candidates AS T2 ON T1.person_id = T2.candidate_id JOIN Candidate_Assessments AS T3 ON T2.candidate_id = T3.candidate_id WHERE T3.qualification = value",
        "gold_parse": "SELECT T3.cell_mobile_number FROM candidates AS T1 JOIN candidate_assessments AS T2 ON T1.candidate_id = T2.candidate_id JOIN people AS T3 ON T1.candidate_id = T3.person_id WHERE T2.asessment_outcome_code = \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated more than two times?",
        "query": "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who have been nominated more than two times?",
        "query": "SELECT Award FROM musical GROUP BY Award HAVING Count ( * ) > value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee HAVING COUNT(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the names of countains that no climber has climbed?",
        "query": "SELECT Name FROM mountain EXCEPT SELECT Name FROM mountain WHERE Prominence = value",
        "gold_parse": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the names of countains that no climber has climbed?",
        "query": "SELECT Name FROM mountain EXCEPT SELECT Name FROM mountain WHERE Prominence = value",
        "gold_parse": "SELECT Name FROM mountain WHERE Mountain_ID NOT IN (SELECT Mountain_ID FROM climber)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "query": "SELECT title , title , credits FROM course ORDER BY title Asc",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "query": "SELECT title , title , credits FROM course ORDER BY title Asc",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Count the number of actors.",
        "query": "SELECT Count ( * ) FROM musical",
        "gold_parse": "SELECT count(*) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Count the number of actors.",
        "query": "SELECT Count ( * ) FROM musical",
        "gold_parse": "SELECT count(*) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "query": "SELECT T1.name , T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year = value ORDER BY T1.name Asc",
        "gold_parse": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "list in alphabetic order all course names and their instructors' names in year 2008.",
        "query": "SELECT T1.name , T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year = value ORDER BY T1.name Asc",
        "gold_parse": "SELECT T1.title ,  T3.name FROM course AS T1 JOIN teaches AS T2 ON T1.course_id  =  T2.course_id JOIN instructor AS T3 ON T2.id  =  T3.id WHERE YEAR  =  2008 ORDER BY T1.title",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Count the number of tracks.",
        "query": "SELECT Count ( * ) FROM race",
        "gold_parse": "SELECT count(*) FROM track",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Count the number of tracks.",
        "query": "SELECT Count ( * ) FROM race",
        "gold_parse": "SELECT count(*) FROM track",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who took some course offered by Statistics department.",
        "query": "SELECT name FROM student",
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who took some course offered by Statistics department.",
        "query": "SELECT name FROM student",
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "query": "SELECT candidate_id FROM Candidates WHERE candidate_details = value",
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What is the id of the candidate whose email is stanley.monahan@example.org?",
        "query": "SELECT candidate_id FROM Candidates WHERE candidate_details = value",
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of instructors who didn't each any courses in any Spring semester.",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY name Desc",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids, names, and FDA approval status for medicines ordered by descending number of possible enzyme interactions?",
        "query": "SELECT id , name , Porphyria FROM enzyme ORDER BY name Desc",
        "gold_parse": "SELECT T1.id ,  T1.Name ,  T1.FDA_approved FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show the name and date for each race and its track name.",
        "query": "SELECT Name , Date FROM race",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show the name and date for each race and its track name.",
        "query": "SELECT Name , Date FROM race",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "query": "SELECT name FROM instructor",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who have taught C Programming courses?",
        "query": "SELECT name FROM instructor",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN teaches AS T2 ON T1.id  =  T2.id JOIN course AS T3 ON T2.course_id  =  T3.course_id WHERE T3.title  =  'C Programming'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show storm name with at least two regions and 10 cities affected.",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the characters of actors in descending order of age?",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the characters of actors in descending order of age?",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the characters of actors in descending order of age?",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the primary conference of the school that has the lowest acc percent score in the competition?",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers participated in the race Australian Grand Prix held in 2009?",
        "query": "SELECT Count ( * ) FROM circuits WHERE circuitRef = value AND circuitRef = value",
        "gold_parse": "SELECT count(*) FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid WHERE T2.name = \"Australian Grand Prix\" AND YEAR = 2009",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the name of the entrepreneur with the greatest weight?",
        "query": "SELECT T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T2.Weight Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the primary conference of the school with the lowest acc percentage score.",
        "query": "SELECT Primary_conference FROM university ORDER BY Enrollment Asc LIMIT value",
        "gold_parse": "SELECT t1.Primary_conference FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t2.acc_percent LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "query": "SELECT source_system_code , master_customer_id FROM CMI_Cross_References",
        "gold_parse": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Wat is the tax source system code and master customer id of the taxes related to each parking fine id?",
        "query": "SELECT source_system_code , master_customer_id FROM CMI_Cross_References",
        "gold_parse": "SELECT T1.source_system_code ,  T1.master_customer_id ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Parking_Fines AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the first and last names of all the candidates?",
        "query": "SELECT first_name , last_name FROM People",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the first and last names of all the candidates?",
        "query": "SELECT first_name , last_name FROM People",
        "gold_parse": "SELECT T2.first_name ,  T2.last_name FROM candidates AS T1 JOIN people AS T2 ON T1.candidate_id = T2.person_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "query": "SELECT candidate_id FROM Candidates WHERE candidate_details = value",
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of the candidate whose email is stanley.monahan@example.org?",
        "query": "SELECT candidate_id FROM Candidates WHERE candidate_details = value",
        "gold_parse": "SELECT T2.candidate_id FROM people AS T1 JOIN candidates AS T2 ON T1.person_id = T2.candidate_id WHERE T1.email_address = \"stanley.monahan@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the full names of customers who have accounts?",
        "query": "SELECT customer_first_name , customer_last_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the full names of customers who have accounts?",
        "query": "SELECT customer_first_name , customer_last_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "query": "SELECT name FROM instructor ORDER BY salary Asc LIMIT value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the name of the lowest earning instructor in the Statistics department.",
        "query": "SELECT name FROM instructor ORDER BY salary Asc LIMIT value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find all the forenames of distinct drivers who won in position 1 as driver standing and had more than 20 points?",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T1.position = value AND T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the prerequisite class of International Finance course?",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the prerequisite class of International Finance course?",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "query": "SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value INTERSECT SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List document id of documents status is done and document type is Paper and the document is shipped by shipping agent named USPS.",
        "query": "SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value INTERSECT SELECT T2.document_id , T2.document_type_code FROM Ref_Shipping_Agents AS T1 JOIN Documents AS T2 ON T1.shipping_agent_code = T2.shipping_agent_code WHERE T1.shipping_agent_name = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" INTERSECT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the unique names of races that held after 2000 and the circuits were in Spain?",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "query": "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names, dates active, and number of deaths for storms that had 1 or more death?",
        "query": "SELECT Name , Dates_active , Number_Deaths FROM storm GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name ,  dates_active ,  number_deaths FROM storm WHERE number_deaths  >=  1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students are attending English courses?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "How many students are attending English courses?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"English\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "query": "SELECT Count ( * ) FROM Artist WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Hom many albums does the artist \"Metallica\" have?",
        "query": "SELECT Count ( * ) FROM Artist WHERE Name = value",
        "gold_parse": "SELECT COUNT(*) FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId WHERE T2.Name  =  \"Metallica\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "How many different source system code for the cmi cross references are there?",
        "query": "SELECT Count ( DISTINCT source_system_code ) FROM CMI_Cross_References WHERE source_system_code = value",
        "gold_parse": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "How many different source system code for the cmi cross references are there?",
        "query": "SELECT Count ( DISTINCT source_system_code ) FROM CMI_Cross_References WHERE source_system_code = value",
        "gold_parse": "SELECT count(DISTINCT source_system_code) FROM CMI_cross_references",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which year had the greatest number of courses?",
        "query": "SELECT year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which year had the greatest number of courses?",
        "query": "SELECT year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT YEAR FROM SECTION GROUP BY YEAR ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines are offered by each trade name?",
        "query": "SELECT Count ( * ) , name FROM enzyme GROUP BY name",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines are offered by each trade name?",
        "query": "SELECT Count ( * ) , name FROM enzyme GROUP BY name",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "query": "SELECT T2.semester , T1.year FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year GROUP BY T2.semester ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the semester and year which has the least number of student taking any class.",
        "query": "SELECT T2.semester , T1.year FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year GROUP BY T2.semester ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "query": "SELECT id , Score , Date FROM game GROUP BY stadium_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the ids, scores, and dates of the games which caused at least two injury accidents?",
        "query": "SELECT id , Score , Date FROM game GROUP BY stadium_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.score ,  T1.date FROM game AS T1 JOIN injury_accident AS T2 ON T2.game_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "query": "SELECT T1.Team_Name , T2.Founded FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Desc LIMIT value",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the team name and acc regular season score of the school that was founded for the longest time?",
        "query": "SELECT T1.Team_Name , T2.Founded FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Desc LIMIT value",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of cards the customer with the first name Art and last name Turcotte has.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students have advisors?",
        "query": "SELECT Count ( * ) FROM classroom",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students have advisors?",
        "query": "SELECT Count ( * ) FROM classroom",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find the id of courses which are registered or attended by student whose id is 121?",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "query": "SELECT name FROM medicine GROUP BY id HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "For every medicine id, what are the names of the medicines that can interact with more than one enzyme?",
        "query": "SELECT name FROM medicine GROUP BY id HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all the races that occurred in the year 2017?",
        "query": "SELECT country FROM circuits WHERE circuitRef = value",
        "gold_parse": "SELECT name FROM races WHERE YEAR = 2017",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who advise more than one student?",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who advise more than one student?",
        "query": "SELECT name FROM instructor GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name FROM instructor AS T1 JOIN advisor AS T2 ON T1.id  =  T2.i_id GROUP BY T2.i_id HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the courses that are registered or attended by the student whose id is 121?",
        "query": "SELECT course_id FROM Student_Course_Attendance WHERE student_id = value OR student_id = value",
        "gold_parse": "SELECT course_id FROM student_course_registrations WHERE student_id = 121 UNION SELECT course_id FROM student_course_attendance WHERE student_id = 121",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Count the number of parties.",
        "query": "SELECT Count ( DISTINCT Party_Theme ) FROM party",
        "gold_parse": "SELECT count(*) FROM party",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Count the number of parties.",
        "query": "SELECT Count ( DISTINCT Party_Theme ) FROM party",
        "gold_parse": "SELECT count(*) FROM party",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "what is id of students who registered some courses but the least number of courses in these students?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "query": "SELECT FirstName , EmployeeId FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee first names and ids of employees who serve at least 10 customers.",
        "query": "SELECT FirstName , EmployeeId FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "query": "SELECT T1.Party_Theme , T1.Location FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID ORDER BY T2.Age Asc",
        "gold_parse": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "For each party, find its location and the name of its host. Sort the result in ascending order of the age of the host.",
        "query": "SELECT T1.Party_Theme , T1.Location FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID ORDER BY T2.Age Asc",
        "gold_parse": "SELECT T3.Location ,  T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID ORDER BY T2.Age",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "query": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the forename and surname of all distinct drivers who once had laptime less than 93000 milliseconds?",
        "query": "SELECT T2.positionText , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId JOIN lapTimes AS T3 ON T1.raceId = T3.raceId WHERE T3.milliseconds < value",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "which course has most number of registered students?",
        "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id JOIN Student_Course_Attendance AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "which course has most number of registered students?",
        "query": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id JOIN Student_Course_Attendance AS T3 ON T2.course_id = T3.course_id GROUP BY T3.course_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.course_name FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_Id GROUP BY T1.course_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "query": "SELECT account_id , customer_id , account_name , account_name FROM Accounts",
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the account ids, customer ids, and account names for all the accounts?",
        "query": "SELECT account_id , customer_id , account_name , account_name FROM Accounts",
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "How many debates are there?",
        "query": "SELECT Count ( * ) FROM people",
        "gold_parse": "SELECT count(*) FROM debate",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "How many debates are there?",
        "query": "SELECT Count ( * ) FROM people",
        "gold_parse": "SELECT count(*) FROM debate",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "query": "SELECT Count ( * ) FROM game WHERE Season > value",
        "gold_parse": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "How many distinct kinds of injuries happened after season 2010?",
        "query": "SELECT Count ( * ) FROM game WHERE Season > value",
        "gold_parse": "SELECT count(DISTINCT T1.injury) FROM injury_accident AS T1 JOIN game AS T2 ON T1.game_id  =  T2.id WHERE T2.season  >  2010",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for some courses but had the least number of courses for all students?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_registrations GROUP BY student_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "query": "SELECT Year_Opened FROM track WHERE Seating > value OR Seating > value",
        "gold_parse": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show year where a track with a seating at least 5000 opened and a track with seating no more than 4000 opened.",
        "query": "SELECT Year_Opened FROM track WHERE Seating > value OR Seating > value",
        "gold_parse": "SELECT year_opened FROM track WHERE seating BETWEEN 4000 AND 5000",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "query": "SELECT Count ( * ) FROM Type_Of_Restaurant WHERE ResTypeID = value",
        "gold_parse": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "How many restaurant is the Sandwich type restaurant?",
        "query": "SELECT Count ( * ) FROM Type_Of_Restaurant WHERE ResTypeID = value",
        "gold_parse": "SELECT count(*) FROM Restaurant JOIN Type_Of_Restaurant ON Restaurant.ResID =  Type_Of_Restaurant.ResID JOIN Restaurant_Type ON Type_Of_Restaurant.ResTypeID = Restaurant_Type.ResTypeID GROUP BY Type_Of_Restaurant.ResTypeID HAVING Restaurant_Type.ResTypeName = 'Sandwich'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "query": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different driver ids and nationalities of all drivers who had a laptime of more than 100000 milliseconds?",
        "query": "SELECT T1.url , T1.time FROM races AS T1 JOIN lapTimes AS T2 ON T1.raceId = T2.raceId WHERE T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "For each constructor id, how many races are there?",
        "query": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "For each constructor id, how many races are there?",
        "query": "SELECT qualifyId , Count ( * ) FROM qualifying GROUP BY qualifyId",
        "gold_parse": "SELECT count(*) ,  constructorid FROM constructorStandings GROUP BY constructorid",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name GROUP BY T2.name ORDER BY Sum ( T3.tot_cred ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructor who is the advisor of the student who has the highest number of total credits.",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name GROUP BY T2.name ORDER BY Sum ( T3.tot_cred ) Desc LIMIT value",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id ORDER BY T3.tot_cred DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = value OR T2.semester = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids for courses in the Fall of 2009 or the Spring of 2010?",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year = value OR T2.semester = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the different names of mountains ascended by climbers from the country of West Germany?",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "query": "SELECT DISTINCT name , Location , Product FROM enzyme WHERE name LIKE value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the distinct name, location and products of the enzymes which has any 'inhibitor' interaction?",
        "query": "SELECT DISTINCT name , Location , Product FROM enzyme WHERE name LIKE value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.location ,  T1.product FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.enzyme_id  =  T1.id WHERE T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many cards does customer Art Turcotte have?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many cards does customer Art Turcotte have?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "query": "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the team names of the universities whose enrollments are smaller than the average enrollment size.",
        "query": "SELECT Nickname FROM university WHERE Enrollment < ( SELECT Avg ( Enrollment ) FROM university )",
        "gold_parse": "SELECT t2.team_name FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE enrollment  <  (SELECT avg(enrollment) FROM university)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "query": "SELECT Sum ( budget ) FROM department WHERE dept_name = value",
        "gold_parse": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the sum of budgets of the Marketing and Finance departments?",
        "query": "SELECT Sum ( budget ) FROM department WHERE dept_name = value",
        "gold_parse": "SELECT sum(budget) FROM department WHERE dept_name  =  'Marketing' OR dept_name  =  'Finance'",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "When did Linda Smith visit Subway?",
        "query": "SELECT T2.Time FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.LName = value",
        "gold_parse": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "When did Linda Smith visit Subway?",
        "query": "SELECT T2.Time FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.LName = value",
        "gold_parse": "SELECT TIME FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the average unit price of rock tracks?",
        "query": "SELECT Avg ( UnitPrice ) FROM Track",
        "gold_parse": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What is the average unit price of rock tracks?",
        "query": "SELECT Avg ( UnitPrice ) FROM Track",
        "gold_parse": "SELECT AVG(T2.UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Rock\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "query": "SELECT id , name FROM medicine GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the ids and names of the medicine that can interact with two or more enzymes?",
        "query": "SELECT id , name FROM medicine GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "query": "SELECT Count ( * ) , Name FROM actor GROUP BY Character",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "query": "SELECT Count ( * ) , Name FROM actor GROUP BY Character",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles for courses with two prerequisites?",
        "query": "SELECT title FROM course",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles for courses with two prerequisites?",
        "query": "SELECT title FROM course",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id  =  T2.course_id GROUP BY T2.course_id HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "query": "SELECT Name , Date , Date FROM race",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "What are the names and dates of races, and the names of the tracks where they are held?",
        "query": "SELECT Name , Date , Date FROM race",
        "gold_parse": "SELECT T1.name ,  T1.date ,  T2.name FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many accounts does the customer with first name Art and last name Turcotte have?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Accounts AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Art\" AND T2.customer_last_name  =  \"Turcotte\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered courses or attended courses?",
        "query": "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name > = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered courses or attended courses?",
        "query": "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name > = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customer cards are there?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customer cards are there?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customer cards are there?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered course statistics in the order of registration date.",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "query": "SELECT T2.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T1.registration_date Desc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301 most recently?",
        "query": "SELECT T2.student_id FROM Student_Course_Registrations AS T1 JOIN Student_Course_Attendance AS T2 ON T1.course_id = T2.course_id ORDER BY T1.registration_date Desc LIMIT value",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id = 301 ORDER BY date_of_attendance DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "query": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name and date of the race that occurred most recently?",
        "query": "SELECT T1.country , T1.lat FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId JOIN pitStops AS T3 ON T2.raceId = T3.raceId ORDER BY T3.milliseconds Desc LIMIT value",
        "gold_parse": "SELECT name ,  date FROM races ORDER BY date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "List all students' first names and last names who majored in 600.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Visits_Restaurant AS T2 ON T1.StuID = T2.StuID WHERE T2.Spent = value",
        "gold_parse": "SELECT Fname , Lname FROM Student WHERE Major  =  600",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the codes of card types that have 5 or more cards?",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type HAVING Count ( * ) > = value",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the codes of card types that have 5 or more cards?",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type HAVING Count ( * ) > = value",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code HAVING count(*)  >=  5",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the public schools and what are their locations?",
        "query": "SELECT Location , Location FROM university",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the public schools and what are their locations?",
        "query": "SELECT Location , Location FROM university",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "query": "SELECT cmi_cross_ref_id , source_system_code FROM CMI_Cross_References GROUP BY cmi_cross_ref_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What is the cmi cross reference id that is related to at least one council tax entry? List the cross reference id and source system code.",
        "query": "SELECT cmi_cross_ref_id , source_system_code FROM CMI_Cross_References GROUP BY cmi_cross_ref_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.cmi_cross_ref_id ,  T1.source_system_code FROM CMI_Cross_References AS T1 JOIN Council_Tax AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id GROUP BY T1.cmi_cross_ref_id HAVING count(*)  >=  1",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "Show the distinct names of mountains climbed by climbers from country \"West Germany\".",
        "query": "SELECT DISTINCT Name FROM mountain WHERE Country = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T1.Country  =  \"West Germany\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses offered in Fall of 2009 but not in Spring of 2010?",
        "query": "SELECT T1.sec_id FROM section AS T1 JOIN takes AS T2 ON T1.year = T2.year WHERE T2.year ! = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "query": "SELECT T1.booking_start_date , T1.booking_start_date FROM Bookings AS T1 JOIN Products_for_Hire AS T2 JOIN Products_Booked AS T3 ON T1.booking_id = T3.booking_id AND T3.product_id = T2.product_id WHERE T2.product_name = value",
        "gold_parse": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the start date and end date of the booking that has booked the product named 'Book collection A'?",
        "query": "SELECT T1.booking_start_date , T1.booking_start_date FROM Bookings AS T1 JOIN Products_for_Hire AS T2 JOIN Products_Booked AS T3 ON T1.booking_id = T3.booking_id AND T3.product_id = T2.product_id WHERE T2.product_name = value",
        "gold_parse": "SELECT T3.booking_start_date ,   T3.booking_end_date FROM Products_for_hire AS T1 JOIN products_booked AS T2 ON T1.product_id  =  T2.product_id JOIN bookings AS T3 ON T2.booking_id  =  T3.booking_id WHERE T1.product_name  =  'Book collection A'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Chromosome FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Chromosome FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "query": "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the ids and locations of all circuits in France or Belgium?",
        "query": "SELECT qualifyId , constructorId FROM qualifying WHERE number = value OR number = value",
        "gold_parse": "SELECT circuitid ,  LOCATION FROM circuits WHERE country = \"France\" OR country = \"Belgium\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "query": "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value AND T1.name LIKE value",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes in the medicine named 'Amisulpride' that can serve as an 'inhibitor'?",
        "query": "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value AND T1.name LIKE value",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held between 2009 and 2011?",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of races held between 2009 and 2011?",
        "query": "SELECT country FROM circuits WHERE lat BETWEEN value AND value",
        "gold_parse": "SELECT name FROM races WHERE YEAR BETWEEN 2009 AND 2011",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "query": "SELECT Avg ( Max_speed ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > value",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show the average and maximum damage for all storms with max speed higher than 1000.",
        "query": "SELECT Avg ( Max_speed ) , Max ( Damage_millions_USD ) FROM storm WHERE Max_speed > value",
        "gold_parse": "SELECT avg(damage_millions_USD) ,  max(damage_millions_USD) FROM storm WHERE max_speed  >  1000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who have taken the prerequisite for the course International Finance?",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines were not approved by the FDA?",
        "query": "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT T2.id FROM medicine AS T2 WHERE T2.FDA_approved = value )",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines were not approved by the FDA?",
        "query": "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT T2.id FROM medicine AS T2 WHERE T2.FDA_approved = value )",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "query": "SELECT name FROM enzyme WHERE Porphyria LIKE value",
        "gold_parse": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes that include the string 'ALA'?",
        "query": "SELECT name FROM enzyme WHERE Porphyria LIKE value",
        "gold_parse": "SELECT name FROM enzyme WHERE name LIKE \"%ALA%\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "query": "SELECT country FROM circuits ORDER BY country Asc",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the names of all distinct races in reversed  lexicographic order?",
        "query": "SELECT country FROM circuits ORDER BY country Asc",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID NOT IN ( SELECT T2.ID FROM takes AS T2 )",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who haven't taken any Biology courses?",
        "query": "SELECT T1.name FROM student AS T1 WHERE T1.ID NOT IN ( SELECT T2.ID FROM takes AS T2 )",
        "gold_parse": "SELECT name FROM student WHERE id NOT IN (SELECT T1.id FROM takes AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.dept_name  =  'Biology')",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "For each course id, how many students are registered and what are the course names?",
        "query": "SELECT T1.course_id , T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "gold_parse": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "For each course id, how many students are registered and what are the course names?",
        "query": "SELECT T1.course_id , T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "gold_parse": "SELECT T3.course_name ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id JOIN courses AS T3 ON T2.course_id = T3.course_id GROUP BY T2.course_id",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "query": "SELECT name FROM races ORDER BY name Asc",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of all the different drivers in alphabetical order?",
        "query": "SELECT name FROM races ORDER BY name Asc",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Show the nations that have both hosts older than 45 and hosts younger than 35.",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "query": "SELECT dept_name , building FROM department ORDER BY budget Asc",
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "List the names and buildings of all departments sorted by the budget from large to small.",
        "query": "SELECT dept_name , building FROM department ORDER BY budget Asc",
        "gold_parse": "SELECT dept_name ,  building FROM department ORDER BY budget DESC",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do we have?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many customers do we have?",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course that was offered at building Chandler during the fall semester in the year of 2010?",
        "query": "SELECT T1.title FROM course AS T1 JOIN section AS T2 ON T1.course_id = T2.course_id AND T1.course_id = T2.course_id JOIN takes AS T3 ON T2.year = T3.year WHERE T3.year = value AND T2.building = value",
        "gold_parse": "SELECT T1.title FROM course AS T1 JOIN SECTION AS T2 ON T1.course_id  =  T2.course_id WHERE building  =  'Chandler' AND semester  =  'Fall' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Company = value OR T1.Company = value",
        "gold_parse": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the dates of birth of entrepreneurs with investor \"Simon Woodroffe\" or \"Peter Jones\"?",
        "query": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Company = value OR T1.Company = value",
        "gold_parse": "SELECT T2.Date_of_Birth FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor  =  \"Simon Woodroffe\" OR T1.Investor  =  \"Peter Jones\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers did not participate in the races held in 2009?",
        "query": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "How many drivers did not participate in the races held in 2009?",
        "query": "SELECT Count ( * ) FROM circuits WHERE * NOT IN ( SELECT * FROM circuits WHERE circuitRef = value )",
        "gold_parse": "SELECT count(DISTINCT driverId) FROM results WHERE raceId NOT IN( SELECT raceId FROM races WHERE YEAR != 2009 )",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "query": "SELECT T2.Season FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What is the season of the game which causes the player 'Walter Samuel' to get injured?",
        "query": "SELECT T2.Season FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id WHERE T1.name = value",
        "gold_parse": "SELECT T1.season FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id WHERE T2.player  =  'Walter Samuel'",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "query": "SELECT T1.Name , Count ( * ) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative GROUP BY T2.Affirmative",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people and the number of times they have been on the affirmative side of debates.",
        "query": "SELECT T1.Name , Count ( * ) FROM people AS T1 JOIN debate_people AS T2 ON T1.People_ID = T2.Affirmative GROUP BY T2.Affirmative",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM debate_people AS T1 JOIN people AS T2 ON T1.Affirmative  =  T2.People_ID GROUP BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs whose investor is not \"Rachel Elnaugh\"?",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered course 301?",
        "query": "SELECT student_id FROM Students",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered course 301?",
        "query": "SELECT student_id FROM Students",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the duration of the longest and shortest pop tracks in milliseconds?",
        "query": "SELECT Milliseconds , Milliseconds FROM Track ORDER BY Milliseconds Asc LIMIT value",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Pop\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors are there?",
        "query": "SELECT Count ( * ) FROM musical",
        "gold_parse": "SELECT count(*) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors are there?",
        "query": "SELECT Count ( * ) FROM musical",
        "gold_parse": "SELECT count(*) FROM actor",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "query": "SELECT document_id FROM Documents WHERE document_type_code = value EXCEPT SELECT document_id FROM Documents WHERE document_type_code = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List the document ids of documents with the status done and type Paper, which not shipped by the shipping agent named USPS.",
        "query": "SELECT document_id FROM Documents WHERE document_type_code = value EXCEPT SELECT document_id FROM Documents WHERE document_type_code = value",
        "gold_parse": "SELECT document_id FROM Documents WHERE document_status_code  =  \"done\" AND document_type_code = \"Paper\" EXCEPT SELECT document_id FROM Documents JOIN Ref_Shipping_Agents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Give me a list of names and years of races that had any driver whose forename is Lewis?",
        "query": "SELECT T1.country , T1.circuitRef FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId WHERE T2.name = value",
        "gold_parse": "SELECT T2.name ,  T2.year FROM results AS T1 JOIN races AS T2 ON T1.raceid = T2.raceid JOIN drivers AS T3 ON T1.driverid = T3.driverid WHERE T3.forename = \"Lewis\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investors who have invested in two or more entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show distinct first and last names for all customers with an account.",
        "query": "SELECT DISTINCT customer_first_name , customer_last_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show distinct first and last names for all customers with an account.",
        "query": "SELECT DISTINCT customer_first_name , customer_last_name FROM Customers",
        "gold_parse": "SELECT DISTINCT T1.customer_first_name ,  T1.customer_last_name FROM Customers AS T1 JOIN Accounts AS T2 ON T1.customer_id  =  T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find all the customer information in state NY.",
        "query": "SELECT Email FROM Customer WHERE City = value",
        "gold_parse": "SELECT * FROM CUSTOMER WHERE State  =  \"NY\"",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "query": "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "Show names of technicians and the number of machines they are assigned to repair.",
        "query": "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "query": "SELECT FirstName , ReportsTo FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the first names and support rep ids for employees serving 10 or more customers?",
        "query": "SELECT FirstName , ReportsTo FROM Employee GROUP BY EmployeeId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.FirstName ,  T1.SupportRepId FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "query": "SELECT Milliseconds , TrackId FROM Track ORDER BY Milliseconds Asc LIMIT value",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the durations of the longest and the shortest tracks in milliseconds?",
        "query": "SELECT Milliseconds , TrackId FROM Track ORDER BY Milliseconds Asc LIMIT value",
        "gold_parse": "SELECT max(Milliseconds) ,  min(Milliseconds) FROM TRACK",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "How many tracks do we have?",
        "query": "SELECT Count ( * ) FROM race",
        "gold_parse": "SELECT count(*) FROM track",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "How many tracks do we have?",
        "query": "SELECT Count ( * ) FROM race",
        "gold_parse": "SELECT count(*) FROM track",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "query": "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total < value )",
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of customers without invoice totals exceeding 20?",
        "query": "SELECT T1.LastName FROM Customer AS T1 WHERE T1.CustomerId NOT IN ( SELECT T2.CustomerId FROM Invoice AS T2 WHERE T2.Total < value )",
        "gold_parse": "SELECT LastName FROM CUSTOMER EXCEPT SELECT T1.LastName FROM CUSTOMER AS T1 JOIN Invoice AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T2.total  >  20",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "How many customers are there?",
        "query": "SELECT Count ( * ) FROM bank",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "How many customers are there?",
        "query": "SELECT Count ( * ) FROM bank",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who didn't teach any courses?",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who didn't teach any courses?",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who have taken Statistics courses?",
        "query": "SELECT name FROM student",
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who have taken Statistics courses?",
        "query": "SELECT name FROM student",
        "gold_parse": "SELECT T3.name FROM course AS T1 JOIN takes AS T2 ON T1.course_id  =  T2.course_id JOIN student AS T3 ON T2.id  =  T3.id WHERE T1.dept_name  =  'Statistics'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the name and max speed of the storm that affected the most regions.",
        "query": "SELECT Name , Max_speed FROM storm ORDER BY Max_speed Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the name and max speed of the storm that affected the most regions.",
        "query": "SELECT Name , Max_speed FROM storm ORDER BY Max_speed Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T1.max_speed FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the investors that have invested in at least two entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor HAVING Count ( * ) > = value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "query": "SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id AND T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T2.Away_team = value AND T3.Player = value",
        "gold_parse": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the name of the stadium where both the player 'Walter Samuel' and the player 'Thiago Motta' got injured.",
        "query": "SELECT T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id AND T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T2.Away_team = value AND T3.Player = value",
        "gold_parse": "SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Walter Samuel' INTERSECT SELECT T2.name FROM game AS T1 JOIN stadium AS T2 ON T1.stadium_id  =  T2.id JOIN injury_accident AS T3 ON T1.id  =  T3.game_id WHERE T3.player  =  'Thiago Motta'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race held most recently?",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the name of the race held most recently?",
        "query": "SELECT country FROM circuits ORDER BY lat Desc LIMIT value",
        "gold_parse": "SELECT name FROM races ORDER BY date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "query": "SELECT candidate_id FROM Candidate_Assessments WHERE qualification = value",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "Find id of candidates whose assessment code is \"Pass\"?",
        "query": "SELECT candidate_id FROM Candidate_Assessments WHERE qualification = value",
        "gold_parse": "SELECT candidate_id FROM candidate_assessments WHERE asessment_outcome_code = \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card types, and how many transactions have been made with each?",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "query": "SELECT T1.sec_id FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )",
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the id of the courses that do not have any prerequisite?",
        "query": "SELECT T1.sec_id FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )",
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names except for those with at least two affected regions.",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show all storm names except for those with at least two affected regions.",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students are in each department?",
        "query": "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many students are in each department?",
        "query": "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the id of instructors who taught a class in Fall 2009 but not in Spring 2010.",
        "query": "SELECT T1.ID FROM instructor AS T1 JOIN teaches AS T2 ON T1.ID = T2.ID WHERE T2.year ! = value",
        "gold_parse": "SELECT id FROM teaches WHERE semester  =  'Fall' AND YEAR  =  2009 EXCEPT SELECT id FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "query": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find all the distinct id and nationality of drivers who have had laptime more than 100000 milliseconds?",
        "query": "SELECT DISTINCT T1.driverId , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.driverid ,  T1.nationality FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds >  100000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "query": "SELECT title FROM course WHERE title = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "query": "SELECT title FROM course WHERE title = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "query": "SELECT Name , ArtistId FROM Artist GROUP BY ArtistId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the names and ids of artists with 3 or more albums, listed in alphabetical order?",
        "query": "SELECT Name , ArtistId FROM Artist GROUP BY ArtistId HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name ,  T1.ArtistId FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistID GROUP BY T1.ArtistId HAVING COUNT(*)  >=  3 ORDER BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "query": "SELECT T2.name , T1.Trade_Name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = value",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and trade names of the medcines that are FDA approved?",
        "query": "SELECT T2.name , T1.Trade_Name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = value",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weights of entrepreneurs, ordered descending by amount of money requested.",
        "query": "SELECT Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Weight FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested DESC",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the starting year of the oldest technicians?",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the starting year of the oldest technicians?",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many regions are affected?",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many regions are affected?",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(DISTINCT region_id) FROM affected_region",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "query": "SELECT employee_name FROM Employees EXCEPT SELECT employee_name FROM Employees",
        "gold_parse": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "List the employees who have not showed up in any circulation history of documents. List the employee's name.",
        "query": "SELECT employee_name FROM Employees EXCEPT SELECT employee_name FROM Employees",
        "gold_parse": "SELECT employee_name FROM Employees EXCEPT SELECT Employees.employee_name FROM Employees JOIN Circulation_History ON Circulation_History.employee_id = Employees.employee_id",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show the name for regions and the number of storms for each region.",
        "query": "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show the name for regions and the number of storms for each region.",
        "query": "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the names of artists that do not have any albums.",
        "query": "SELECT T1.Name FROM Artist AS T1 WHERE T1.ArtistId NOT IN ( SELECT T2.ArtistId FROM Album AS T2 )",
        "gold_parse": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the names of artists that do not have any albums.",
        "query": "SELECT T1.Name FROM Artist AS T1 WHERE T1.ArtistId NOT IN ( SELECT T2.ArtistId FROM Album AS T2 )",
        "gold_parse": "SELECT Name FROM ARTIST EXCEPT SELECT T2.Name FROM ALBUM AS T1 JOIN ARTIST AS T2 ON T1.ArtistId  =  T2.ArtistId",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "query": "SELECT shipping_agent_code FROM Documents WHERE receipt_number = value",
        "gold_parse": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the shipping agent code of shipping agent UPS?",
        "query": "SELECT shipping_agent_code FROM Documents WHERE receipt_number = value",
        "gold_parse": "SELECT shipping_agent_code FROM Ref_Shipping_Agents WHERE shipping_agent_name = \"UPS\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "query": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forename and surname of the driver who has the smallest laptime?",
        "query": "SELECT circuitId , name FROM races GROUP BY url ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "query": "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Class = value",
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "What are the names and locations of tracks that have had exactly 1 race?",
        "query": "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Class = value",
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "List the name and residence for players whose occupation is not \"Researcher\".",
        "query": "SELECT Player_name , Sponsor_name FROM player WHERE Occupation ! = value",
        "gold_parse": "SELECT Player_name ,  residence FROM player WHERE Occupation != \"Researcher\"",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "query": "SELECT id , name FROM stadium GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the id and name of the stadium where the most injury accidents happened?",
        "query": "SELECT id , name FROM stadium GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id  =  T2.stadium_id JOIN injury_accident AS T3 ON T2.id  =  T3.game_id GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many storms occured in each region?",
        "query": "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "How many storms occured in each region?",
        "query": "SELECT Region_code , Count ( * ) FROM region GROUP BY Region_code",
        "gold_parse": "SELECT T1.region_name ,  count(*) FROM region AS T1 JOIN affected_region AS T2 ON T1.region_id = T2.region_id GROUP BY T1.region_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "query": "SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = value EXCEPT SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = value",
        "gold_parse": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What are the renting arrears tax ids related to the customer master index whose detail is not 'Schmidt, Kertzmann and Lubowitz'?",
        "query": "SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = value EXCEPT SELECT T3.council_tax_id FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id JOIN Parking_Fines AS T3 ON T2.cmi_cross_ref_id = T3.cmi_cross_ref_id WHERE T1.cmi_details = value",
        "gold_parse": "SELECT T1.council_tax_id FROM Rent_Arrears AS T1 JOIN CMI_Cross_References AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id JOIN Customer_Master_Index AS T3 ON T3.master_customer_id  =  T2.master_customer_id WHERE T3.cmi_details != 'Schmidt ,  Kertzmann and Lubowitz'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the founded year of the newest non public school.",
        "query": "SELECT Founded FROM university ORDER BY Enrollment Desc LIMIT value",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the founded year of the newest non public school.",
        "query": "SELECT Founded FROM university ORDER BY Enrollment Desc LIMIT value",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "query": "SELECT T1.role_description , T2.employee_id , Count ( * ) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "gold_parse": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many employees does each role have? List role description, id and number of employees.",
        "query": "SELECT T1.role_description , T2.employee_id , Count ( * ) FROM Roles AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "gold_parse": "SELECT T1.role_description ,  T2.role_code ,  count(*) FROM ROLES AS T1 JOIN Employees AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the location of the perpetrator with the largest kills.",
        "query": "SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT value",
        "gold_parse": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the location of the perpetrator with the largest kills.",
        "query": "SELECT Location FROM perpetrator ORDER BY Injured Desc LIMIT value",
        "gold_parse": "SELECT LOCATION FROM perpetrator ORDER BY Killed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of students who have advisors.",
        "query": "SELECT Count ( * ) FROM classroom",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of students who have advisors.",
        "query": "SELECT Count ( * ) FROM classroom",
        "gold_parse": "SELECT count(DISTINCT s_id) FROM advisor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles of courses that are in the Statistics department but not the Psychology department?",
        "query": "SELECT title FROM course WHERE dept_name = value AND dept_name ! = value",
        "gold_parse": "SELECT title FROM course WHERE dept_name  =  'Statistics' EXCEPT SELECT title FROM course WHERE dept_name  =  'Psychology'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "query": "SELECT T2.i_ID FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID WHERE T1.dept_name = value",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "query": "SELECT T2.i_ID FROM instructor AS T1 JOIN advisor AS T2 ON T1.ID = T2.i_ID WHERE T1.dept_name = value",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show names for all regions except for Denmark.",
        "query": "SELECT Region_name FROM region WHERE Region_code ! = value",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Show names for all regions except for Denmark.",
        "query": "SELECT Region_name FROM region WHERE Region_code ! = value",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "query": "SELECT T1.Party_Theme FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which parties have more than 20 hosts? Give me the host names for these parties.",
        "query": "SELECT T1.Party_Theme FROM party AS T1 JOIN party_host AS T2 ON T1.Party_ID = T2.Party_ID GROUP BY T2.Party_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT T2.Name FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T3.Number_of_hosts  >  20",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List all public schools and their locations.",
        "query": "SELECT School , Location FROM university",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "List all public schools and their locations.",
        "query": "SELECT School , Location FROM university",
        "gold_parse": "SELECT school ,  LOCATION FROM university WHERE affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Count the number of credit cards that the customer with first name Blanche and last name Huels has.",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "Advisor 1121 has how many students?",
        "query": "SELECT Count ( DISTINCT Advisor ) FROM Student",
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "Advisor 1121 has how many students?",
        "query": "SELECT Count ( DISTINCT Advisor ) FROM Student",
        "gold_parse": "SELECT count(*) FROM Student WHERE Advisor =  1121",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "query": "SELECT T2.Height FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Desc",
        "gold_parse": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the heights of perpetrators in descending order of the number of people they injured?",
        "query": "SELECT T2.Height FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Desc",
        "gold_parse": "SELECT T1.Height FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Injured DESC",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses without prerequisites?",
        "query": "SELECT T1.sec_id FROM section AS T1 EXCEPT SELECT T2.course_id FROM takes AS T2",
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the ids of courses without prerequisites?",
        "query": "SELECT T1.sec_id FROM section AS T1 EXCEPT SELECT T2.course_id FROM takes AS T2",
        "gold_parse": "SELECT course_id FROM course EXCEPT SELECT course_id FROM prereq",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "How many universities have a location that contains NY?",
        "query": "SELECT Count ( * ) FROM university WHERE Location = value",
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "How many universities have a location that contains NY?",
        "query": "SELECT Count ( * ) FROM university WHERE Location = value",
        "gold_parse": "SELECT count(*) FROM university WHERE LOCATION LIKE \"%NY%\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of instructors who are advisors of the students from the Math department, and sort the results by students' total credit.",
        "query": "SELECT name FROM instructor WHERE dept_name = value ORDER BY salary Asc",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "How many times has the student Linda Smith visited Subway?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "How many times has the student Linda Smith visited Subway?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM Student JOIN Visits_Restaurant ON Student.StuID = Visits_Restaurant.StuID JOIN Restaurant ON Visits_Restaurant.ResID = Restaurant.ResID WHERE Student.Fname = \"Linda\" AND Student.Lname = \"Smith\" AND Restaurant.ResName = \"Subway\"",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that both affected two or more regions and affected a total of 10 or more cities?",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2 INTERSECT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING sum(T2.number_city_affected)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show all card type codes and the number of customers holding cards in each type.",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What is the customer id, first and last name with least number of accounts.",
        "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 GROUP BY T1.customer_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What is the customer id, first and last name with least number of accounts.",
        "query": "SELECT T1.customer_id , T2.customer_first_name , T2.customer_last_name FROM Accounts AS T1 JOIN Customers AS T2 GROUP BY T1.customer_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.customer_id ,  T2.customer_first_name ,  T2.customer_last_name FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What are the names of perpetrators in country \"China\" or \"Japan\"?",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID WHERE T1.Country = value OR T1.Location = value",
        "gold_parse": "SELECT T1.Name FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID WHERE T2.Country  =  \"China\" OR T2.Country  =  \"Japan\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held after 2000 in Spain?",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races held after 2000 in Spain?",
        "query": "SELECT country FROM circuits WHERE lat > value AND circuitRef > value",
        "gold_parse": "SELECT DISTINCT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2000",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters for actors, ordered by age descending.",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters for actors, ordered by age descending.",
        "query": "SELECT Name FROM actor ORDER BY age Desc",
        "gold_parse": "SELECT Character FROM actor ORDER BY age DESC",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have no actors?",
        "query": "SELECT Name FROM actor EXCEPT SELECT Name FROM actor",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have no actors?",
        "query": "SELECT Name FROM actor EXCEPT SELECT Name FROM actor",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "query": "SELECT Count ( * ) FROM classroom AS T1 JOIN time_slot AS T2 WHERE T2.end_hr > value AND T1.building = value",
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of instructors who didn't teach courses in the Spring?",
        "query": "SELECT name FROM instructor EXCEPT SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE id NOT IN (SELECT id FROM teaches WHERE semester  =  'Spring')",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "query": "SELECT T1.Product , T1.Chromosome , T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.Location = value",
        "gold_parse": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the product, chromosome and porphyria related to the enzymes which take effect at the location 'Cytosol'?",
        "query": "SELECT T1.Product , T1.Chromosome , T2.interaction_type FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id = T2.enzyme_id WHERE T1.Location = value",
        "gold_parse": "SELECT product ,  chromosome ,  porphyria FROM enzyme WHERE LOCATION  =  'Cytosol'",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who are not 20 years old?",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of actors who are not 20 years old?",
        "query": "SELECT Name FROM actor WHERE age < = value",
        "gold_parse": "SELECT Name FROM actor WHERE Age != 20",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the title of the course that is a prerequisite for Mobile Computing?",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY Team_Name Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of customer cards.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of customer cards.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of customer cards.",
        "query": "SELECT Count ( * ) FROM Accounts",
        "gold_parse": "SELECT count(*) FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "query": "SELECT student_id , Count ( * ) FROM Student_Course_Attendance GROUP BY student_id",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who registered some courses and the number of their registered courses?",
        "query": "SELECT student_id , Count ( * ) FROM Student_Course_Attendance GROUP BY student_id",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of the storms that affected Denmark?",
        "query": "SELECT Name FROM storm WHERE Dates_active = value",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of the storms that affected Denmark?",
        "query": "SELECT Name FROM storm WHERE Dates_active = value",
        "gold_parse": "SELECT T3.name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.region_name  =  'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "query": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of all races that occurred after 12:00:00 or before 09:00:00?",
        "query": "SELECT country FROM circuits WHERE lat > value OR lat < value",
        "gold_parse": "SELECT name FROM races WHERE TIME > \"12:00:00\" OR TIME < \"09:00:00\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "query": "SELECT source_system_code , cmi_cross_ref_id FROM CMI_Cross_References ORDER BY source_system_code Asc",
        "gold_parse": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What is the tax source system code related to the benefits and overpayments? List the code and the benifit id, order by benifit id.",
        "query": "SELECT source_system_code , cmi_cross_ref_id FROM CMI_Cross_References ORDER BY source_system_code Asc",
        "gold_parse": "SELECT T1.source_system_code ,  T2.council_tax_id FROM CMI_Cross_References AS T1 JOIN Benefits_Overpayments AS T2 ON T1.cmi_cross_ref_id  =  T2.cmi_cross_ref_id ORDER BY T2.council_tax_id",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the code of the card type that is most common.",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Return the code of the card type that is most common.",
        "query": "SELECT T1.card_type_code FROM Customers_Cards AS T1 JOIN Financial_Transactions AS T2 ON T1.card_id = T2.card_id GROUP BY T2.transaction_type ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT card_type_code FROM Customers_cards GROUP BY card_type_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many draft copies does the document with id 2 have?",
        "query": "SELECT Count ( * ) FROM Documents_Mailed WHERE document_id = value",
        "gold_parse": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many draft copies does the document with id 2 have?",
        "query": "SELECT Count ( * ) FROM Documents_Mailed WHERE document_id = value",
        "gold_parse": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many draft copies does the document with id 2 have?",
        "query": "SELECT Count ( * ) FROM Documents_Mailed WHERE document_id = value",
        "gold_parse": "SELECT count(*) FROM Draft_Copies WHERE document_id = 2",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "query": "SELECT T2.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id WHERE T1.Connection = value AND T1.name = value",
        "gold_parse": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "List the names of the browser that are compatible with both 'CACHEbox' and 'Fasterfox'.",
        "query": "SELECT T2.name FROM Web_client_accelerator AS T1 JOIN browser AS T2 JOIN accelerator_compatible_browser AS T3 ON T1.id = T3.accelerator_id AND T3.browser_id = T2.id WHERE T1.Connection = value AND T1.name = value",
        "gold_parse": "SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'CACHEbox' INTERSECT SELECT T3.name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id JOIN browser AS T3 ON T2.browser_id  =  T3.id WHERE T1.name  =  'Fasterfox'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of rooms in Lamberton with capacity lower than 50.",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND capacity < value",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "query": "SELECT course_id FROM takes WHERE year = value OR year = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find courses that ran in Fall 2009 or in Spring 2010.",
        "query": "SELECT course_id FROM takes WHERE year = value OR year = value",
        "gold_parse": "SELECT course_id FROM SECTION WHERE semester  =  'Fall' AND YEAR  =  2009 UNION SELECT course_id FROM SECTION WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many courses are provided in each semester and year?",
        "query": "SELECT Count ( * ) , year FROM takes GROUP BY year",
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many courses are provided in each semester and year?",
        "query": "SELECT Count ( * ) , year FROM takes GROUP BY year",
        "gold_parse": "SELECT count(*) ,  semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "query": "SELECT Name FROM musical WHERE Award = value",
        "gold_parse": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals with nominee \"Bob Fosse\"?",
        "query": "SELECT Name FROM musical WHERE Award = value",
        "gold_parse": "SELECT Name FROM musical WHERE Nominee  =  \"Bob Fosse\"",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "query": "SELECT id , name FROM Web_client_accelerator GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the ids and names of the web accelerators that are compatible with two or more browsers?",
        "query": "SELECT id , name FROM Web_client_accelerator GROUP BY id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.id ,  T1.Name FROM web_client_accelerator AS T1 JOIN accelerator_compatible_browser AS T2 ON T2.accelerator_id  =  T1.id GROUP BY T1.id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "query": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the id and family name of the driver who has the longest laptime?",
        "query": "SELECT T2.constructorStandingsId , T1.name FROM races AS T1 JOIN constructorStandings AS T2 ON T1.raceId = T2.raceId ORDER BY T2.constructorId Desc LIMIT value",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "query": "SELECT T2.Region_name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T1.Number_Deaths < value",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "query": "SELECT T2.Region_name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T1.Number_Deaths < value",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the region names affected by the storm with a number of deaths of least 10?",
        "query": "SELECT T2.Region_name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T1.Number_Deaths < value",
        "gold_parse": "SELECT T2.region_name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T3.number_deaths  >=  10",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "query": "SELECT id , name FROM enzyme GROUP BY id , name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and name of the enzyme that can interact with the most medicines as an activator?",
        "query": "SELECT id , name FROM enzyme GROUP BY id , name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show the name and location of track with 1 race.",
        "query": "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Race_ID = value",
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show the name and location of track with 1 race.",
        "query": "SELECT T2.Name , T2.Location FROM race AS T1 JOIN track AS T2 ON T1.Track_ID = T2.Track_ID WHERE T1.Race_ID = value",
        "gold_parse": "SELECT T2.name ,  T2.location FROM race AS T1 JOIN track AS T2 ON T1.track_id  =  T2.track_id GROUP BY T1.track_id HAVING count(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "query": "SELECT name FROM instructor WHERE salary > value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of the instructors in the Comp. Sci. department who earn more than 80000?",
        "query": "SELECT name FROM instructor WHERE salary > value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which semeseter and year had the fewest students?",
        "query": "SELECT year , year FROM section GROUP BY year ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Which semeseter and year had the fewest students?",
        "query": "SELECT year , year FROM section GROUP BY year ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM takes GROUP BY semester ,  YEAR ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "query": "SELECT Time FROM climber WHERE Country = value",
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "correctness": 0
    },
    {
        "db_id": "climbing",
        "question": "What are the times used by climbers who climbed mountains in the country of Uganda?",
        "query": "SELECT Time FROM climber WHERE Country = value",
        "gold_parse": "SELECT T1.Time FROM climber AS T1 JOIN mountain AS T2 ON T1.Mountain_ID  =  T2.Mountain_ID WHERE T2.Country  =  \"Uganda\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many employees do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many employees do we have?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Employees",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name and salary of instructors who are advisors of the students from the Math department.",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "query": "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value AND T1.name = value",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of the enzymes used in the medicine  Amisulpride that acts as inhibitors?",
        "query": "SELECT T2.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value AND T1.name = value",
        "gold_parse": "SELECT T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id JOIN medicine AS T3 ON T2.medicine_id  =  T3.id WHERE T3.name  =  'Amisulpride' AND T2.interaction_type  =  'inhibitor'",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "query": "SELECT Count ( * ) FROM Web_client_accelerator WHERE Connection = value",
        "gold_parse": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "How many different kinds of clients are supported by the web clients accelerators?",
        "query": "SELECT Count ( * ) FROM Web_client_accelerator WHERE Connection = value",
        "gold_parse": "SELECT count(DISTINCT client) FROM web_client_accelerator",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the average unit price of jazz tracks.",
        "query": "SELECT Avg ( UnitPrice ) FROM Track",
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the average unit price of jazz tracks.",
        "query": "SELECT Avg ( UnitPrice ) FROM Track",
        "gold_parse": "SELECT AVG(UnitPrice) FROM GENRE AS T1 JOIN TRACK AS T2 ON T1.GenreId  =  T2.GenreId WHERE T1.Name  =  \"Jazz\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give the title of the prerequisite to the course International Finance.",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "query": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "List the forenames of all distinct drivers in alphabetical order?",
        "query": "SELECT DISTINCT name FROM races ORDER BY name Asc",
        "gold_parse": "SELECT DISTINCT forename FROM drivers ORDER BY forename ASC",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "query": "SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors in the Comp. Sci. department?",
        "query": "SELECT name FROM instructor",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "query": "SELECT Award FROM musical WHERE Name = value OR Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who are the nominees who were nominated for either of the Bob Fosse or Cleavant Derricks awards?",
        "query": "SELECT Award FROM musical WHERE Name = value OR Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "query": "SELECT council_tax_id , council_tax_id FROM Parking_Fines WHERE council_tax_id = value",
        "gold_parse": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "List the council tax ids and their related cmi cross references of all the parking fines.",
        "query": "SELECT council_tax_id , council_tax_id FROM Parking_Fines WHERE council_tax_id = value",
        "gold_parse": "SELECT council_tax_id ,  cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name of students who have taken the prerequisite course of the course with title International Finance.",
        "query": "SELECT T3.name FROM department AS T1 JOIN course AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name WHERE T2.dept_name = value",
        "gold_parse": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.id  =  T2.id WHERE T2.course_id IN (SELECT T4.prereq_id FROM course AS T3 JOIN prereq AS T4 ON T3.course_id  =  T4.course_id WHERE T3.title  =  'International Finance')",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "query": "SELECT T1.Party_Theme FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID WHERE T2.Age > value",
        "gold_parse": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which parties have hosts of age above 50? Give me the party locations.",
        "query": "SELECT T1.Party_Theme FROM party AS T1 JOIN host AS T2 JOIN party_host AS T3 ON T1.Party_ID = T3.Party_ID AND T3.Host_ID = T2.Host_ID WHERE T2.Age > value",
        "gold_parse": "SELECT T3.Location FROM party_host AS T1 JOIN HOST AS T2 ON T1.Host_ID  =  T2.Host_ID JOIN party AS T3 ON T1.Party_ID  =  T3.Party_ID WHERE T2.Age  >  50",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "For every student who is registered for some course, how many courses are they registered for?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT T1.student_id ,  count(*) FROM students AS T1 JOIN student_course_registrations AS T2 ON T1.student_id = T2.student_id GROUP BY T1.student_id",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What is the duration of the oldest actor?",
        "query": "SELECT Duration FROM actor ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What is the duration of the oldest actor?",
        "query": "SELECT Duration FROM actor ORDER BY age Asc LIMIT value",
        "gold_parse": "SELECT Duration FROM actor ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many rooms whose capacity is less than 50 does the Lamberton building have?",
        "query": "SELECT Count ( * ) FROM classroom WHERE capacity > value AND building = value",
        "gold_parse": "SELECT count(*) FROM classroom WHERE building  =  'Lamberton' AND capacity  <  50",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = value OR T2.Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "query": "SELECT T1.Nominee FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = value OR T2.Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "query": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "correctness": 0
    },
    {
        "db_id": "coffee_shop",
        "question": "Find the purchase time, age and address of each member, and show the results in the order of purchase time.",
        "query": "SELECT Membership_card , Age , Address FROM member ORDER BY Time_of_purchase Asc",
        "gold_parse": "SELECT Time_of_purchase ,  age ,  address FROM member ORDER BY Time_of_purchase",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "query": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "query": "SELECT DISTINCT T2.positionText FROM races AS T1 JOIN constructorStandings AS T2 ON T2.raceId = T1.raceId JOIN constructorResults AS T3 ON T1.raceId = T3.raceId WHERE T3.raceId = value",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "query": "SELECT customer_id , card_id , card_number , other_card_details FROM Customers_Cards",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show ids, customer ids, card type codes, card numbers for all cards.",
        "query": "SELECT customer_id , card_id , card_number , other_card_details FROM Customers_Cards",
        "gold_parse": "SELECT card_id ,  customer_id ,  card_type_code ,  card_number FROM Customers_cards",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the first names of the different drivers who won in position 1 as driver standing and had more than 20 points?",
        "query": "SELECT T1.positionText FROM constructorStandings AS T1 JOIN results AS T2 WHERE T2.fastestLap = value AND T2.milliseconds > value",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1 AND T2.points > 20",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the card type codes and the number of transactions.",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the card type codes and the number of transactions.",
        "query": "SELECT transaction_type , Count ( * ) FROM Financial_Transactions GROUP BY transaction_type",
        "gold_parse": "SELECT T2.card_type_code ,  count(*) FROM Financial_transactions AS T1 JOIN Customers_cards AS T2 ON T1.card_id  =  T2.card_id GROUP BY T2.card_type_code",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the total number of students enrolled in the colleges that were founded after the year of 1850 for each affiliation type.",
        "query": "SELECT Count ( * ) , Affiliation FROM university WHERE Founded < value GROUP BY Affiliation",
        "gold_parse": "SELECT sum(Enrollment) ,  affiliation FROM university WHERE founded  >  1850 GROUP BY affiliation",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of students who have taken any course in the fall semester of year 2003.",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = value",
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "How many games are free of injury accidents?",
        "query": "SELECT Count ( * ) FROM stadium",
        "gold_parse": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "How many games are free of injury accidents?",
        "query": "SELECT Count ( * ) FROM stadium",
        "gold_parse": "SELECT count(*) FROM game WHERE id NOT IN ( SELECT game_id FROM injury_accident )",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "How many council taxes are collected for renting arrears ?",
        "query": "SELECT Count ( * ) FROM Customer_Master_Index",
        "gold_parse": "SELECT count(*) FROM rent_arrears",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "How many council taxes are collected for renting arrears ?",
        "query": "SELECT Count ( * ) FROM Customer_Master_Index",
        "gold_parse": "SELECT count(*) FROM rent_arrears",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Show the date of the tallest perpetrator.",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed Desc LIMIT value",
        "gold_parse": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "Show the date of the tallest perpetrator.",
        "query": "SELECT Date FROM perpetrator ORDER BY Killed Desc LIMIT value",
        "gold_parse": "SELECT T2.Date FROM people AS T1 JOIN perpetrator AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Height DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students and total number of instructors for each department.",
        "query": "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name",
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students and total number of instructors for each department.",
        "query": "SELECT Count ( * ) , T1.budget FROM department AS T1 JOIN instructor AS T2 ON T1.dept_name = T2.dept_name GROUP BY T2.dept_name",
        "gold_parse": "SELECT count(DISTINCT T2.id) ,  count(DISTINCT T3.id) ,  T3.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name  =  T2.dept_name JOIN instructor AS T3 ON T1.dept_name  =  T3.dept_name GROUP BY T3.dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the name and salary of the instructors who are advisors of any student from History department?",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Asc",
        "gold_parse": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "List the number of people injured by perpetrators in ascending order.",
        "query": "SELECT T2.Name FROM perpetrator AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Killed Asc",
        "gold_parse": "SELECT Injured FROM perpetrator ORDER BY Injured ASC",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "query": "SELECT * , Player , Source FROM injury_accident WHERE Injury ! = value",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "query": "SELECT * , Player , Source FROM injury_accident WHERE Injury ! = value",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "correctness": 0
    },
    {
        "db_id": "party_host",
        "question": "Which nations have both hosts of age above 45 and hosts of age below 35?",
        "query": "SELECT Nationality FROM host WHERE Age < value INTERSECT SELECT Nationality FROM host WHERE Age > value",
        "gold_parse": "SELECT Nationality FROM HOST WHERE Age  >  45 INTERSECT SELECT Nationality FROM HOST WHERE Age  <  35",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "query": "SELECT DISTINCT T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = value AND T1.cmi_details = value",
        "gold_parse": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "What are the distinct cross reference source system codes which are related to the master customer details 'Gottlieb, Becker and Wyman'?",
        "query": "SELECT DISTINCT T2.source_system_code FROM Customer_Master_Index AS T1 JOIN CMI_Cross_References AS T2 ON T1.master_customer_id = T2.master_customer_id WHERE T1.cmi_details = value AND T1.cmi_details = value",
        "gold_parse": "SELECT DISTINCT T2.source_system_code FROM customer_master_index AS T1 JOIN cmi_cross_references AS T2 ON T1.master_customer_id  =  T2.master_customer_id WHERE T1.cmi_details  =  'Gottlieb ,  Becker and Wyman'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the schools that were either founded after 1850 or public.",
        "query": "SELECT School FROM university WHERE Founded > value OR Founded < value",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the schools that were either founded after 1850 or public.",
        "query": "SELECT School FROM university WHERE Founded > value OR Founded < value",
        "gold_parse": "SELECT school FROM university WHERE founded  >  1850 OR affiliation  =  'Public'",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "query": "SELECT Company , Investor FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the names of entrepreneurs and their corresponding investors, ordered descending by the amount of money requested?",
        "query": "SELECT Company , Investor FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people who have been on the negative side of debates at least twice.",
        "query": "SELECT Name FROM people GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name FROM debate_people AS T1 JOIN people AS T2 ON T1.Negative  =  T2.People_ID GROUP BY T2.Name HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "query": "SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value INTERSECT SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value",
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "List the medicine name and trade name which can both interact as 'inhibitor' and 'activitor' with enzymes.",
        "query": "SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value INTERSECT SELECT T1.Trade_Name , T1.name FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T2.Porphyria = value",
        "gold_parse": "SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'inhibitor' INTERSECT SELECT T1.name ,  T1.trade_name FROM medicine AS T1 JOIN medicine_enzyme_interaction AS T2 ON T2.medicine_id  =  T1.id WHERE interaction_type  =  'activitor'",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "What are the different card type codes, and how many different customers hold each type?",
        "query": "SELECT card_type_code , Count ( * ) FROM Customers_Cards GROUP BY card_type_code",
        "gold_parse": "SELECT card_type_code ,  count(DISTINCT customer_id) FROM Customers_cards GROUP BY card_type_code",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "what is the name of the instructor who is in Statistics department and earns the lowest salary?",
        "query": "SELECT name FROM instructor ORDER BY salary Asc LIMIT value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Statistics' ORDER BY salary LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What is the investor that has invested in the most number of entrepreneurs?",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "query": "SELECT T2.name , T2.Porphyria FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = value",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names and trade names of the medicines which has 'Yes' value in the FDA record?",
        "query": "SELECT T2.name , T2.Porphyria FROM medicine AS T1 JOIN enzyme AS T2 JOIN medicine_enzyme_interaction AS T3 ON T1.id = T3.medicine_id AND T3.enzyme_id = T2.id WHERE T1.FDA_approved = value",
        "gold_parse": "SELECT name ,  trade_name FROM medicine WHERE FDA_approved  =  'Yes'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the total count of enzymes?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the total count of enzymes?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the total count of enzymes?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "query": "SELECT City FROM Customer WHERE PostalCode = value",
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Find the cities corresponding to employees who help customers with the postal code 70174.",
        "query": "SELECT City FROM Customer WHERE PostalCode = value",
        "gold_parse": "SELECT T2.City FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId WHERE T1.PostalCode  =  \"70174\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of all instructors who advise students in the math depart sorted by total credits of the student.",
        "query": "SELECT T2.name FROM department AS T1 JOIN instructor AS T2 ON T2.dept_name = T1.dept_name JOIN student AS T3 ON T1.dept_name = T3.dept_name ORDER BY T3.tot_cred Asc",
        "gold_parse": "SELECT T2.name FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'Math' ORDER BY T3.tot_cred",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "query": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "Find the id and surname of the driver who participated the most number of races?",
        "query": "SELECT T2.url , T1.country FROM circuits AS T1 JOIN races AS T2 ON T1.circuitId = T2.circuitId GROUP BY T1.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.driverid ,  T1.surname FROM drivers AS T1 JOIN results AS T2 ON T1.driverid = T2.driverid JOIN races AS T3 ON T2.raceid = T3.raceid GROUP BY T1.driverid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "query": "SELECT name FROM instructor WHERE salary = value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the names of all instructors in Comp. Sci. department with salary > 80000.",
        "query": "SELECT name FROM instructor WHERE salary = value",
        "gold_parse": "SELECT name FROM instructor WHERE dept_name  =  'Comp. Sci.'  AND salary  >  80000",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "query": "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "What are the names of musicals who have at 3 or more actors?",
        "query": "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many kinds of enzymes are there?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many kinds of enzymes are there?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many kinds of enzymes are there?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "query": "SELECT student_id FROM Student_Course_Attendance ORDER BY date_of_attendance Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who attended courses in the statistics department in order of attendance date.",
        "query": "SELECT student_id FROM Student_Course_Attendance ORDER BY date_of_attendance Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_attendance AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.date_of_attendance",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of instructors who teach a course in the Spring 2010 semester.",
        "query": "SELECT Count ( * ) FROM takes WHERE year = value",
        "gold_parse": "SELECT COUNT (DISTINCT ID) FROM teaches WHERE semester  =  'Spring' AND YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "query": "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What is the forename and surname of the driver with the shortest laptime?",
        "query": "SELECT name , name FROM races ORDER BY url Asc LIMIT value",
        "gold_parse": "SELECT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid ORDER BY T2.milliseconds LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals which have at least three actors.",
        "query": "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show names of musicals which have at least three actors.",
        "query": "SELECT Name FROM actor GROUP BY Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.Name FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID HAVING COUNT(*)  >=  3",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the distinct salaries of all instructors who earned less than the maximum salary?",
        "query": "SELECT DISTINCT name FROM instructor WHERE salary < ( SELECT Max ( salary ) FROM instructor )",
        "gold_parse": "SELECT DISTINCT salary FROM instructor WHERE salary  <  (SELECT max(salary) FROM instructor)",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "query": "SELECT T1.Team_Name , T2.School FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Asc LIMIT value",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Return the name of the team and the acc during the regular season for the school that was founded the earliest.",
        "query": "SELECT T1.Team_Name , T2.School FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID ORDER BY T2.Founded Asc LIMIT value",
        "gold_parse": "SELECT t2.team_name ,  t2.ACC_Regular_Season FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id ORDER BY t1.founded LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show ids, customer ids, names for all accounts.",
        "query": "SELECT account_id , customer_id , account_name , other_account_details FROM Accounts",
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show ids, customer ids, names for all accounts.",
        "query": "SELECT account_id , customer_id , account_name , other_account_details FROM Accounts",
        "gold_parse": "SELECT account_id ,  customer_id ,  account_name FROM Accounts",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "query": "SELECT Founded FROM university ORDER BY Founded Desc LIMIT value",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What is the founded year of the non public school that was founded most recently?",
        "query": "SELECT Founded FROM university ORDER BY Founded Desc LIMIT value",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the dates of games by the home team name in descending order.",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "List the dates of games by the home team name in descending order.",
        "query": "SELECT Date FROM game ORDER BY Date Desc",
        "gold_parse": "SELECT Date FROM game ORDER BY home_team DESC",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "query": "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What are the names of the technicians  and how many machines are they assigned to repair?",
        "query": "SELECT T1.Name , Count ( * ) FROM technician AS T1 JOIN repair_assignment AS T2 ON T1.technician_id = T2.technician_id GROUP BY T2.technician_id",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM repair_assignment AS T1 JOIN technician AS T2 ON T1.technician_ID  =  T2.technician_ID GROUP BY T2.Name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "query": "SELECT id , name FROM enzyme WHERE Chromosome LIKE value GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the id and name of the enzyme with most number of medicines that can interact as 'activator'?",
        "query": "SELECT id , name FROM enzyme WHERE Chromosome LIKE value GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name FROM enzyme AS T1 JOIN medicine_enzyme_interaction AS T2 ON T1.id  =  T2.enzyme_id WHERE T2.interaction_type  =  'activitor' GROUP BY T1.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weight of the shortest person.",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the weight of the shortest person.",
        "query": "SELECT Weight FROM people GROUP BY Weight ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT Weight FROM people ORDER BY Height ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many credit cards does customer Blanche Huels have?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "How many credit cards does customer Blanche Huels have?",
        "query": "SELECT Count ( * ) FROM Customers WHERE customer_first_name = value AND customer_last_name = value",
        "gold_parse": "SELECT count(*) FROM Customers_cards AS T1 JOIN Customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.customer_first_name  =  \"Blanche\" AND T2.customer_last_name  =  \"Huels\" AND T1.card_type_code  =  \"Credit\"",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the first name, last name, and gender of all the good customers? Order by their last name.",
        "query": "SELECT first_name , last_name , gender_mf FROM Customers ORDER BY last_name Asc",
        "gold_parse": "SELECT first_name ,  last_name ,  gender_mf FROM customers WHERE good_or_bad_customer  =  'good' ORDER BY last_name",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "query": "SELECT Count ( * ) FROM Web_client_accelerator WHERE id NOT IN ( SELECT Connection FROM Web_client_accelerator WHERE Connection = value )",
        "gold_parse": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "How many accelerators are not compatible with the browsers listed ?",
        "query": "SELECT Count ( * ) FROM Web_client_accelerator WHERE id NOT IN ( SELECT Connection FROM Web_client_accelerator WHERE Connection = value )",
        "gold_parse": "SELECT count(*) FROM web_client_accelerator WHERE id NOT IN ( SELECT accelerator_id FROM accelerator_compatible_browser )",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered course statistics by order of registration date?",
        "query": "SELECT student_id FROM Student_Course_Registrations ORDER BY registration_date Asc",
        "gold_parse": "SELECT T2.student_id FROM courses AS T1 JOIN student_course_registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = \"statistics\" ORDER BY T2.registration_date",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "query": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the forenames and surnames of all unique drivers who had a lap time of less than 93000 milliseconds?",
        "query": "SELECT T1.driverRef , T1.driverRef FROM drivers AS T1 JOIN lapTimes AS T2 ON T1.driverId = T2.driverId WHERE T2.milliseconds < value",
        "gold_parse": "SELECT DISTINCT T1.forename ,  T1.surname FROM drivers AS T1 JOIN laptimes AS T2 ON T1.driverid = T2.driverid WHERE T2.milliseconds < 93000",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of the races held after 2017 in Spain?",
        "query": "SELECT country FROM circuits WHERE circuitRef > value",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the names of the races held after 2017 in Spain?",
        "query": "SELECT country FROM circuits WHERE circuitRef > value",
        "gold_parse": "SELECT T1.name FROM races AS T1 JOIN circuits AS T2 ON T1.circuitid = T2.circuitid WHERE T2.country = \"Spain\" AND T1.year > 2017",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the mail date of the document with id 7?",
        "query": "SELECT T1.receipt_date FROM Documents AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = value",
        "gold_parse": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What is the mail date of the document with id 7?",
        "query": "SELECT T1.receipt_date FROM Documents AS T1 JOIN Documents_Mailed AS T2 ON T1.document_id = T2.document_id WHERE T2.document_id = value",
        "gold_parse": "SELECT mailing_date FROM Documents_Mailed WHERE document_id = 7",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "query": "SELECT Company , Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "List the names of entrepreneurs and their companies in descending order of money requested?",
        "query": "SELECT Company , Company FROM entrepreneur ORDER BY Money_Requested Desc",
        "gold_parse": "SELECT T2.Name ,  T1.Company FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T1.Money_Requested",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the name of the deparment with the highest enrollment?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the name of the deparment with the highest enrollment?",
        "query": "SELECT dept_name FROM course GROUP BY dept_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT dept_name FROM student GROUP BY dept_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value INTERSECT SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "gold_parse": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Find the name of the storm that affected both Afghanistan and Albania regions.",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value INTERSECT SELECT T1.Name FROM storm AS T1 JOIN region AS T2 JOIN affected_region AS T3 ON T1.Storm_ID = T3.Storm_ID AND T3.Region_id = T2.Region_id WHERE T2.Region_code = value",
        "gold_parse": "SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Afghanistan' INTERSECT SELECT T3.Name FROM affected_region AS T1 JOIN region AS T2 ON T1.region_id  =  T2.region_id JOIN storm AS T3 ON T1.storm_id  =  T3.storm_id WHERE T2.Region_name  =  'Albania'",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the average amount due for all the payments?",
        "query": "SELECT Avg ( amount_paid ) FROM Payments",
        "gold_parse": "SELECT avg(amount_due) FROM payments",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What is the average amount due for all the payments?",
        "query": "SELECT Avg ( amount_paid ) FROM Payments",
        "gold_parse": "SELECT avg(amount_due) FROM payments",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "query": "SELECT Venue FROM debate ORDER BY Venue Asc",
        "gold_parse": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "List the venues of debates in ascending order of the number of audience.",
        "query": "SELECT Venue FROM debate ORDER BY Venue Asc",
        "gold_parse": "SELECT Venue FROM debate ORDER BY Num_of_Audience ASC",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players coached by the rank 1 coach.",
        "query": "SELECT T1.Player_name FROM player AS T1 JOIN coach AS T2 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID AND T3.Coach_ID = T2.Coach_ID WHERE T2.Rank = value AND T1.Rank = value",
        "gold_parse": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1",
        "correctness": 0
    },
    {
        "db_id": "riding_club",
        "question": "Show the names of players coached by the rank 1 coach.",
        "query": "SELECT T1.Player_name FROM player AS T1 JOIN coach AS T2 JOIN player_coach AS T3 ON T1.Player_ID = T3.Player_ID AND T3.Coach_ID = T2.Coach_ID WHERE T2.Rank = value AND T1.Rank = value",
        "gold_parse": "SELECT T3.Player_name FROM player_coach AS T1 JOIN coach AS T2 ON T1.Coach_ID  =  T2.Coach_ID JOIN player AS T3 ON T1.Player_ID  =  T3.Player_ID WHERE T2.Rank  =  1",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "query": "SELECT Address FROM Customer WHERE Country = value",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the addresses of customers living in Germany who have had an invoice?",
        "query": "SELECT Address FROM Customer WHERE Country = value",
        "gold_parse": "SELECT DISTINCT T1.Address FROM CUSTOMER AS T1 JOIN INVOICE AS T2 ON T1.CustomerId  =  T2.CustomerId WHERE T1.country  =  \"Germany\"",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "What are the memories and carriers of phones?",
        "query": "SELECT Name , Carrier FROM phone",
        "gold_parse": "SELECT Memory_in_G ,  Carrier FROM phone",
        "correctness": 0
    },
    {
        "db_id": "phone_market",
        "question": "What are the memories and carriers of phones?",
        "query": "SELECT Name , Carrier FROM phone",
        "gold_parse": "SELECT Memory_in_G ,  Carrier FROM phone",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and salaries of instructors who advises students in the History department?",
        "query": "SELECT name , salary FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT T2.name ,  T2.salary FROM advisor AS T1 JOIN instructor AS T2 ON T1.i_id  =  T2.id JOIN student AS T3 ON T1.s_id  =  T3.id WHERE T3.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "query": "SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > value INTERSECT SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > value",
        "gold_parse": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "correctness": 0
    },
    {
        "db_id": "debate",
        "question": "Show the names of people that are on affirmative side of debates with number of audience bigger than 200.",
        "query": "SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > value INTERSECT SELECT T1.Name FROM people AS T1 JOIN debate AS T2 JOIN debate_people AS T3 ON T1.People_ID = T3.Affirmative AND T3.Debate_ID = T2.Debate_ID WHERE T2.Num_of_Audience > value",
        "gold_parse": "SELECT T3.Name FROM debate_people AS T1 JOIN debate AS T2 ON T1.Debate_ID  =  T2.Debate_ID JOIN people AS T3 ON T1.Affirmative  =  T3.People_ID WHERE T2.Num_of_Audience  >  200",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended some courses?",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "gold_parse": "SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "List the id of students who attended some courses?",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "gold_parse": "SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "What are the last names of employees who serve at most 20 customers?",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) < = value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the names of all regions other than Denmark.",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Return the names of all regions other than Denmark.",
        "query": "SELECT Region_name FROM region GROUP BY Region_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT region_name FROM region WHERE region_name != 'Denmark'",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "Are the customers holding coupons with amount 500 bad or good?",
        "query": "SELECT * FROM Discount_Coupons WHERE coupon_amount > value OR coupon_amount < value",
        "gold_parse": "SELECT T1.good_or_bad_customer FROM customers AS T1 JOIN discount_coupons AS T2 ON T1.coupon_id  =  T2.coupon_id WHERE T2.coupon_amount  =  500",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many documents were shipped by USPS?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "How many documents were shipped by USPS?",
        "query": "SELECT Count ( * ) FROM Ref_Document_Types",
        "gold_parse": "SELECT count(*) FROM Ref_Shipping_Agents JOIN Documents ON Documents.shipping_agent_code = Ref_Shipping_Agents.shipping_agent_code WHERE Ref_Shipping_Agents.shipping_agent_name = \"USPS\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the year and semester when offers the largest number of courses.",
        "query": "SELECT year , year FROM takes GROUP BY year ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT semester ,  YEAR FROM SECTION GROUP BY semester ,  YEAR ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "query": "SELECT Avg ( Killed ) FROM perpetrator",
        "gold_parse": "SELECT avg(Injured) FROM perpetrator",
        "correctness": 0
    },
    {
        "db_id": "perpetrator",
        "question": "What is the average number of people injured by all perpetrators?",
        "query": "SELECT Avg ( Killed ) FROM perpetrator",
        "gold_parse": "SELECT avg(Injured) FROM perpetrator",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of regions.",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(*) FROM region",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of regions.",
        "query": "SELECT Count ( * ) FROM storm",
        "gold_parse": "SELECT count(*) FROM region",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the starting year for the oldest technician?",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "What is the starting year for the oldest technician?",
        "query": "SELECT Starting_Year FROM technician ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Starting_Year FROM technician ORDER BY Age DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that did not affect two or more regions?",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "What are the names of storms that did not affect two or more regions?",
        "query": "SELECT T1.Name FROM storm AS T1 JOIN affected_region AS T2 ON T1.Storm_ID = T2.Storm_ID GROUP BY T2.Storm_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT name FROM storm EXCEPT SELECT T1.name FROM storm AS T1 JOIN affected_region AS T2 ON T1.storm_id  =  T2.storm_id GROUP BY T1.storm_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "How many tracks are in the AAC audio file media type?",
        "query": "SELECT Count ( * ) FROM MediaType WHERE Name = value AND Name = value",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "How many tracks are in the AAC audio file media type?",
        "query": "SELECT Count ( * ) FROM MediaType WHERE Name = value AND Name = value",
        "gold_parse": "SELECT COUNT(*) FROM MEDIATYPE AS T1 JOIN TRACK AS T2 ON T1.MediaTypeId  =  T2.MediaTypeId WHERE T1.Name  =  \"AAC audio file\"",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are all details of the students who registered but did not attend any course?",
        "query": "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are all details of the students who registered but did not attend any course?",
        "query": "SELECT T1.student_details FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "gold_parse": "SELECT * FROM student_course_registrations WHERE student_id NOT IN (SELECT student_id FROM student_course_attendance)",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "What are the investors who have invested in both entrepreneurs who requested more than 140000 and entrepreneurs who requested less than 120000?",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Company FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of distinct instructors who have taught a course.",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Count the number of distinct instructors who have taught a course.",
        "query": "SELECT Count ( DISTINCT name ) FROM instructor",
        "gold_parse": "SELECT COUNT (DISTINCT id) FROM teaches",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "query": "SELECT Name , Duration FROM actor",
        "gold_parse": "SELECT Character ,  Duration FROM actor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "query": "SELECT Name , Duration FROM actor",
        "gold_parse": "SELECT Character ,  Duration FROM actor",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Return the characters and durations for each actor.",
        "query": "SELECT Name , Duration FROM actor",
        "gold_parse": "SELECT Character ,  Duration FROM actor",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = value",
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names of students who took a course in the Fall of 2003?",
        "query": "SELECT T1.name FROM student AS T1 JOIN takes AS T2 ON T1.ID = T2.ID WHERE T2.year = value",
        "gold_parse": "SELECT name FROM student WHERE id IN (SELECT id FROM takes WHERE semester  =  'Fall' AND YEAR  =  2003)",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "query": "SELECT T2.Location , T2.Enrollment FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "query": "SELECT T2.Date , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id ORDER BY T2.Competition Desc",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "query": "SELECT T2.Date , T1.name FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id ORDER BY T2.Competition Desc",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the id of the order made most recently.",
        "query": "SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT value",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the id of the order made most recently.",
        "query": "SELECT T2.order_id FROM Orders AS T1 JOIN Order_Items AS T2 ON T2.order_id = T1.order_id JOIN Shipments AS T3 ON T1.order_id = T3.order_id ORDER BY T3.shipment_date Desc LIMIT value",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "query": "SELECT city FROM airports GROUP BY city ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "List the cities which have more than 2 airports sorted by the number of airports.",
        "query": "SELECT city FROM airports GROUP BY city ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What country is the artist who made the fewest songs from?",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name GROUP BY T2.country ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the id of the most recent order?",
        "query": "SELECT T2.customer_id FROM Invoices AS T1 JOIN Orders AS T2 JOIN Shipments AS T3 ON T1.invoice_number = T3.invoice_number AND T3.order_id = T2.order_id ORDER BY T1.invoice_date Desc LIMIT value",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the id of the most recent order?",
        "query": "SELECT T2.customer_id FROM Invoices AS T1 JOIN Orders AS T2 JOIN Shipments AS T3 ON T1.invoice_number = T3.invoice_number AND T3.order_id = T2.order_id ORDER BY T1.invoice_date Desc LIMIT value",
        "gold_parse": "SELECT order_id FROM orders ORDER BY date_order_placed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the phone number of all the customers and staff.",
        "query": "SELECT T1.phone_number FROM Customers AS T1 INTERSECT SELECT T2.phone_number FROM Staff AS T2",
        "gold_parse": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the phone number of all the customers and staff.",
        "query": "SELECT T1.phone_number FROM Customers AS T1 INTERSECT SELECT T2.phone_number FROM Staff AS T2",
        "gold_parse": "SELECT phone_number FROM customers UNION SELECT phone_number FROM staff",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the party emails associated with parties that used the party form that is the most common?",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the party emails associated with parties that used the party form that is the most common?",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Which products has been complained by the customer who has filed least amount of complaints?",
        "query": "SELECT T1.product_name FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT DISTINCT t1.product_name FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id JOIN customers AS t3 GROUP BY t3.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "query": "SELECT document_name , Count ( * ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the name of the document that has been accessed the greatest number of times, as well as the count of how many times it has been accessed?",
        "query": "SELECT document_name , Count ( * ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customer who has the highest amount of loans.",
        "query": "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customer who has the highest amount of loans.",
        "query": "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "query": "SELECT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc",
        "gold_parse": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are ids of the all distinct orders, sorted by placement date?",
        "query": "SELECT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc",
        "gold_parse": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students are taught by teacher TARRING LEIA?",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students taught by TARRING LEIA.",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students taught by TARRING LEIA.",
        "query": "SELECT Count ( * ) FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"TARRING\" AND T2.lastname  =  \"LEIA\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total amount of money loaned by banks in New York state?",
        "query": "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = value",
        "gold_parse": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total amount of money loaned by banks in New York state?",
        "query": "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = value",
        "gold_parse": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Who served as an advisor for students who have treasurer votes in the spring election cycle?",
        "query": "SELECT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct number of president votes.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct number of president votes.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(DISTINCT President_Vote) FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of bank branches that provided some loans.",
        "query": "SELECT bname FROM bank",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct majors of students who have treasurer votes.",
        "query": "SELECT DISTINCT Major FROM Student",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct majors of students who have treasurer votes.",
        "query": "SELECT DISTINCT Major FROM Student",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "query": "SELECT cust_name , credit_score FROM customer",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "query": "SELECT cust_name , credit_score FROM customer",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the number of customers in the banks at New York City.",
        "query": "SELECT Count ( * ) FROM bank WHERE city = value",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the number of customers in the banks at New York City.",
        "query": "SELECT Count ( * ) FROM bank WHERE city = value",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the name and gender for all artists who released songs in March.",
        "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats = value",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the username and passwords of users with the most popular role.",
        "query": "SELECT user_name , user_name FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the username and passwords of users with the most popular role.",
        "query": "SELECT user_name , user_name FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "query": "SELECT Address , Count ( * ) FROM Locations GROUP BY Address",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show different ways to get to attractions and the number of attractions that can be accessed in the corresponding way.",
        "query": "SELECT Address , Count ( * ) FROM Locations GROUP BY Address",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find all the locations whose names contain the word \"film\".",
        "query": "SELECT Address FROM Locations WHERE Location_Name LIKE value",
        "gold_parse": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find all the locations whose names contain the word \"film\".",
        "query": "SELECT Address FROM Locations WHERE Location_Name LIKE value",
        "gold_parse": "SELECT Location_Name FROM LOCATIONS WHERE Location_Name LIKE \"%film%\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total number of airlines?",
        "query": "SELECT Count ( * ) FROM routes",
        "gold_parse": "SELECT count(*) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the total number of airlines?",
        "query": "SELECT Count ( * ) FROM routes",
        "gold_parse": "SELECT count(*) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "gold_parse": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What are the total number of the audiences who visited any of the festivals?",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "gold_parse": "SELECT sum(Num_of_Audience) FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members participate in an activity?",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members participate in an activity?",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "query": "SELECT T2.country FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the busiest source airport that runs most number of routes in China.",
        "query": "SELECT T2.country FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.src_apid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?",
        "query": "SELECT artist_name , Count ( * ) FROM song GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the three artists who have produced the most songs, and how many works did they produce?",
        "query": "SELECT artist_name , Count ( * ) FROM song GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the list of documents that are both in the most three popular type and have the most three popular structure.",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the list of documents that are both in the most three popular type and have the most three popular structure.",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called MADLOCK RAY.",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and star ratings of the three hotels with the lowest price ranges?",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.languages = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.languages = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration = value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the names of all songs that have 4 minute duration or are in English.",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration = value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "query": "SELECT Age , Age FROM Student WHERE Major = value",
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Tell me the ages of the oldest and youngest students studying major 600.",
        "query": "SELECT Age , Age FROM Student WHERE Major = value",
        "gold_parse": "SELECT max(Age) ,  min(Age) FROM STUDENT WHERE Major  =  600",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of the female students with secretary votes in the spring election cycle?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "query": "SELECT Count ( * ) , Rank FROM Faculty WHERE Sex = value GROUP BY Rank",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the ranks and the number of male and female faculty for each rank.",
        "query": "SELECT Count ( * ) , Rank FROM Faculty WHERE Sex = value GROUP BY Rank",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is ids of the songs whose resolution is higher than the resolution of any songs with rating lower than 8?",
        "query": "SELECT f_id FROM song WHERE rating < value",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "query": "SELECT artist_name FROM files ORDER BY artist_name Asc",
        "gold_parse": "SELECT song_name FROM song ORDER BY resolution",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are ordered by their resolution numbers?",
        "query": "SELECT artist_name FROM files ORDER BY artist_name Asc",
        "gold_parse": "SELECT song_name FROM song ORDER BY resolution",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "SELECT T2.f_id , T1.preferred_genre , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "SELECT T2.f_id , T1.preferred_genre , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "query": "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of professors who are not playing Canoeing or Kayaking.",
        "query": "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "query": "SELECT T1.network_name , Count ( * ) FROM station AS T1 JOIN route AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id",
        "gold_parse": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the number of trains for each station, as well as the station network name and services.",
        "query": "SELECT T1.network_name , Count ( * ) FROM station AS T1 JOIN route AS T2 ON T1.id = T2.station_id GROUP BY T2.station_id",
        "gold_parse": "SELECT count(*) ,  t1.network_name ,  t1.services FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id GROUP BY t2.station_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of banks in the state of New York?",
        "query": "SELECT bname FROM bank WHERE city = value",
        "gold_parse": "SELECT bname FROM bank WHERE state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of banks in the state of New York?",
        "query": "SELECT bname FROM bank WHERE city = value",
        "gold_parse": "SELECT bname FROM bank WHERE state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the total number of courses offered.",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the total number of courses offered.",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have class president votes?",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have class president votes?",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For the airline ids with the top 10 most routes operated, what are their names?",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.alid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For the airline ids with the top 10 most routes operated, what are their names?",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.alid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name ,  T2.alid FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T2.alid ORDER BY count(*) DESC LIMIT 10",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the last names of students with major 50.",
        "query": "SELECT LName FROM Student WHERE Major > value",
        "gold_parse": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the last names of students with major 50.",
        "query": "SELECT LName FROM Student WHERE Major > value",
        "gold_parse": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total amount of loans offered by each bank branch.",
        "query": "SELECT Sum ( T2.amount ) , T2.branch_ID FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T1.branch_ID",
        "gold_parse": "SELECT sum(amount) ,  T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id GROUP BY T1.bname",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "query": "SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the last name of the staff who has handled the first ever complaint?",
        "query": "SELECT T1.last_name FROM Staff AS T1 JOIN Complaints AS T2 ON T1.staff_id = T2.staff_id GROUP BY T2.staff_id ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t1.last_name FROM staff AS t1 JOIN complaints AS t2 ON t1.staff_id  =  t2.staff_id ORDER BY t2.date_complaint_raised LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = value AND T2.song_name = value",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the country of origin of the artist who is female and produced a song in Bangla?",
        "query": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.gender = value AND T2.song_name = value",
        "gold_parse": "SELECT T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\" AND T2.languages  =  \"bangla\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName ! = value",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all first-grade students who are NOT taught by OTHA MOYER. Report their first and last names.",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName ! = value",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
        "query": "SELECT T2.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.languages = value GROUP BY T1.artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the top 3 artists with the largest number of songs in the language Bangla?",
        "query": "SELECT T2.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.languages = value GROUP BY T1.artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "query": "SELECT T1.Location_Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "query": "SELECT T1.Location_Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the placement date of the order whose invoice number is 10?",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number = value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What is the placement date of the order whose invoice number is 10?",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number = value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students are advised by Michael Goodrich? Give me their first and last names.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "query": "SELECT T1.id , T1.local_authority FROM station AS T1 JOIN weekly_weather AS T2 ON T1.id = T2.station_id WHERE T2.precipitation > value",
        "gold_parse": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the id and local authority of the station whose maximum precipitation is higher than 50.",
        "query": "SELECT T1.id , T1.local_authority FROM station AS T1 JOIN weekly_weather AS T2 ON T1.id = T2.station_id WHERE T2.precipitation > value",
        "gold_parse": "SELECT t2.id ,  t2.local_authority FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id GROUP BY t1.station_id HAVING max(t1.precipitation)  >  50",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named CHRISSY NABOZNY have?",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "For each product, show its name and the number of times it was ordered.",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "For each product, show its name and the number of times it was ordered.",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name ORDER BY Count ( * ) Asc",
        "gold_parse": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the average age of female (sex is F) students who have secretary votes in the spring election cycle.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.Sex  =  \"F\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "query": "SELECT T1.phone_number FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "query": "SELECT T1.phone_number FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value OR T2.rating > value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of songs that are available in either mp4 format or have resolution above 720?",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value OR T2.rating > value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students taught by the teacher KAWA GORDON.",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes go from the United States to Canada?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What document types do have more than 10000 total access number.",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING Count ( * ) > value",
        "gold_parse": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What document types do have more than 10000 total access number.",
        "query": "SELECT document_type_code FROM Documents GROUP BY document_type_code HAVING Count ( * ) > value",
        "gold_parse": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE city_code = value AND Major = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the average age of students who have city code \"NYC\" and have secretary votes for the spring election cycle?",
        "query": "SELECT Avg ( Age ) FROM Student WHERE city_code = value AND Major = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone for customers with a mailshot with outcome code 'No Response'.",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_phone FROM customers AS T1 JOIN mailshot_customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.outcome_code  =  'No Response'",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "How many different services are provided by all stations?",
        "query": "SELECT Count ( * ) FROM train",
        "gold_parse": "SELECT count(DISTINCT services) FROM station",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "How many different services are provided by all stations?",
        "query": "SELECT Count ( * ) FROM train",
        "gold_parse": "SELECT count(DISTINCT services) FROM station",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average duration of songs that have mp3 format and resolution below 800?",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value OR T2.resolution > value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that are available on mp4 or have a higher resolution than 720?",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value OR T2.resolution > value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" UNION SELECT f_id FROM song WHERE resolution  >  720",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students in one classroom.",
        "query": "SELECT Count ( * ) , Classroom FROM teachers GROUP BY Classroom",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of students in one classroom.",
        "query": "SELECT Count ( * ) , Classroom FROM teachers GROUP BY Classroom",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are all the different product names, and how many complains has each received?",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are all the different product names, and how many complains has each received?",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "How many users are logged in?",
        "query": "SELECT Count ( * ) FROM Roles",
        "gold_parse": "SELECT count(*) FROM users WHERE user_login  =  1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "How many users are logged in?",
        "query": "SELECT Count ( * ) FROM Roles",
        "gold_parse": "SELECT count(*) FROM users WHERE user_login  =  1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the names of the activities Mark Giuliano is involved in",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = value AND T3.Lname = value",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "query": "SELECT party_email FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which is the email of the party that has used the services the most number of times?",
        "query": "SELECT party_email FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the dates of orders which belong to the customer named \"Jeramie\".",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT T1.access_count , Avg ( T1.access_count ) FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T2.section_title ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT T1.access_count , Avg ( T1.access_count ) FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T2.section_title ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the number of distinct students enrolled in courses.",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the number of distinct students enrolled in courses.",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT count(DISTINCT student_id) FROM Student_Course_Enrolment",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "query": "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the activity names and the number of faculty involved in each activity.",
        "query": "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY acc_bal Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY acc_bal Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes whose destination airports are in Canada.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes whose destination airports are in Canada.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "query": "SELECT T1.email_address FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "query": "SELECT T1.email_address FROM Customers AS T1 WHERE T1.customer_id IN ( SELECT T2.customer_id FROM Complaints AS T2 )",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the types of schools that have two schools.",
        "query": "SELECT Type FROM school GROUP BY Type HAVING Count ( * ) > = value",
        "gold_parse": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the types of schools that have two schools.",
        "query": "SELECT Type FROM school GROUP BY Type HAVING Count ( * ) > = value",
        "gold_parse": "SELECT TYPE FROM school GROUP BY TYPE HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "query": "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the file sizes and formats for all songs with a resolution lower than 800?",
        "query": "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the different names for all songs that have a higher resolution than English songs?",
        "query": "SELECT DISTINCT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution > value",
        "gold_parse": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the different names for all songs that have a higher resolution than English songs?",
        "query": "SELECT DISTINCT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution > value",
        "gold_parse": "SELECT DISTINCT song_name FROM song WHERE resolution  >  (SELECT min(resolution) FROM song WHERE languages  =  \"english\")",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On which day was the order placed whose shipment tracking number is 3452?",
        "query": "SELECT T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.shipment_tracking_number = value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On which day was the order placed whose shipment tracking number is 3452?",
        "query": "SELECT T1.invoice_date FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T2.shipment_tracking_number = value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes from the United States to Canada.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'Canada') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT T1.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 GROUP BY T1.Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT T1.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 GROUP BY T1.Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the US ordered from most to least?",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the dates of enrollment and completion of students.",
        "query": "SELECT T1.date_of_latest_logon , T3.test_result FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the dates of enrollment and completion of students.",
        "query": "SELECT T1.date_of_latest_logon , T3.test_result FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which tests have \"Pass\" results? Return the dates when the tests were taken.",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "query": "SELECT stuid FROM Participates_in",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the ids of the students who participate in Canoeing and Kayaking.",
        "query": "SELECT stuid FROM Participates_in",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes end in a Canadian airport?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes end in a Canadian airport?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE country  =  'Canada'",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does KAWA GORDON teaches?",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does KAWA GORDON teaches?",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"KAWA\" AND T2.lastname  =  \"GORDON\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details and ways to get to tourist attractions related to royal family?",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "query": "SELECT LastName FROM list WHERE FirstName = value EXCEPT SELECT LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which students in third grade are not taught by teacher COVIN JEROME? Give me the last names of the students.",
        "query": "SELECT LastName FROM list WHERE FirstName = value EXCEPT SELECT LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the number of audience in year 2008 or 2010.",
        "query": "SELECT Count ( * ) FROM festival_detail WHERE Year = value OR Year = value",
        "gold_parse": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the number of audience in year 2008 or 2010.",
        "query": "SELECT Count ( * ) FROM festival_detail WHERE Year = value OR Year = value",
        "gold_parse": "SELECT Num_of_Audience FROM festival_detail WHERE YEAR  =  2008 OR YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Individuals AS T2 WHERE T2.individual_first_name = value",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "query": "SELECT T1.state_province_county FROM Addresses AS T1 JOIN Individuals AS T2 WHERE T2.individual_first_name = value",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attraction that Alison visited but Rosalind did not visit?",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the names of the three most recent festivals.",
        "query": "SELECT Chair_Name FROM festival_detail ORDER BY Year Desc LIMIT value",
        "gold_parse": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the names of the three most recent festivals.",
        "query": "SELECT Chair_Name FROM festival_detail ORDER BY Year Desc LIMIT value",
        "gold_parse": "SELECT Festival_Name FROM festival_detail ORDER BY YEAR DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the dates of the tests taken with result \"Pass\".",
        "query": "SELECT T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the dates of the tests taken with result \"Pass\".",
        "query": "SELECT T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "gold_parse": "SELECT date_test_taken FROM Student_Tests_Taken WHERE test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "query": "SELECT country FROM airports GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "query": "SELECT country FROM airports GROUP BY country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with personal name \"Karson\".",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the invoice numbers created before 1989-09-03 or after 2007-12-25?",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "In how many cities are there airports in the country of Greenland?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "In how many cities are there airports in the country of Greenland?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(DISTINCT city) FROM airports WHERE country  =  'Greenland'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "query": "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the personal name, family name, and author ID of the course author that teaches the most courses.",
        "query": "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "query": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show names of companies and that of employees in descending order of number of years working for that employee.",
        "query": "SELECT T1.Name , T2.Year_working FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID ORDER BY T2.Year_working Desc",
        "gold_parse": "SELECT T3.Name ,  T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID ORDER BY T1.Year_working",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "query": "SELECT duration , duration , formats FROM files ORDER BY duration Asc",
        "gold_parse": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the duration, file size, and song format for every pop song, ordered by title alphabetically?",
        "query": "SELECT duration , duration , formats FROM files ORDER BY duration Asc",
        "gold_parse": "SELECT T1.duration ,  T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.genre_is  =  \"pop\" ORDER BY T2.song_name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airports are there per city in the United States? Order the cities by decreasing number of airports.",
        "query": "SELECT city , Count ( * ) FROM airports GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT count(*) ,  city FROM airports WHERE country  =  'United States' GROUP BY city ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes whose destinations are Italian airports?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes whose destinations are Italian airports?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "query": "SELECT Max ( low_temperature ) , Avg ( low_temperature ) FROM weekly_weather",
        "gold_parse": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Give me the maximum low temperature and average precipitation at the Amersham station.",
        "query": "SELECT Max ( low_temperature ) , Avg ( low_temperature ) FROM weekly_weather",
        "gold_parse": "SELECT max(t1.low_temperature) ,  avg(t1.precipitation) FROM weekly_weather AS t1 JOIN station AS t2 ON t1.station_id  =  t2.id WHERE t2.network_name  =  \"Amersham\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Report the total number of students for each fourth-grade classroom.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many female Professors do we have?",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many female Professors do we have?",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song duration for the songs that are in mp3 format and whose resolution below 800?",
        "query": "SELECT Avg ( T1.duration ) FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT avg(T1.duration) FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" AND T2.resolution   <  800",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
        "query": "SELECT T2.course_description , T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Sort the information about course authors and tutors in alphabetical order of the personal name.",
        "query": "SELECT T2.course_description , T2.course_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Give me a list of the names of all songs ordered by their resolution.",
        "query": "SELECT artist_name FROM files ORDER BY artist_name Asc",
        "gold_parse": "SELECT song_name FROM song ORDER BY resolution",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and descriptions of the photos taken at the tourist attraction \"film festival\"?",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the name of the youngest organization.",
        "query": "SELECT organization_name FROM Organizations ORDER BY date_formed Asc LIMIT value",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the name of the youngest organization.",
        "query": "SELECT organization_name FROM Organizations ORDER BY date_formed Asc LIMIT value",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who have more than one loan.",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who have more than one loan.",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "List all the activities we have.",
        "query": "SELECT Room FROM Faculty",
        "gold_parse": "SELECT activity_name FROM Activity",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "List all the activities we have.",
        "query": "SELECT Room FROM Faculty",
        "gold_parse": "SELECT activity_name FROM Activity",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each fourth-grade classroom, show the classroom number and the total number of students using it.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"4\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id ORDER BY T2.date_contact_to Desc LIMIT value",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the last name of the contact individual from the Labour party organization who was contacted most recently?",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.individual_id = T2.individual_id ORDER BY T2.date_contact_to Desc LIMIT value",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the structure of the document with the least number of accesses?",
        "query": "SELECT section_code FROM Document_Sections GROUP BY section_code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the structure of the document with the least number of accesses?",
        "query": "SELECT section_code FROM Document_Sections GROUP BY section_code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances of customers with the letter a in their names?",
        "query": "SELECT cust_name , credit_score FROM customer WHERE cust_name LIKE value",
        "gold_parse": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the enrollment date for all the tests that have \"Pass\" result.",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the enrollment date for all the tests that have \"Pass\" result.",
        "query": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Pass\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the price ranges of five star hotels?",
        "query": "SELECT price_range FROM Hotels",
        "gold_parse": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the price ranges of five star hotels?",
        "query": "SELECT price_range FROM Hotels",
        "gold_parse": "SELECT price_range FROM HOTELS WHERE star_rating_code  =  \"5\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "query": "SELECT Name FROM artwork WHERE Type = value",
        "gold_parse": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the names of festivals that have nominated artworks of type \"Program Talent Show\".",
        "query": "SELECT Name FROM artwork WHERE Type = value",
        "gold_parse": "SELECT T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID WHERE T2.Type  =  \"Program Talent Show\"",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Return the structure description of the document that has been accessed the fewest number of times.",
        "query": "SELECT T2.section_title FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Return the structure description of the document that has been accessed the fewest number of times.",
        "query": "SELECT T2.section_title FROM Documents AS T1 JOIN Document_Sections AS T2 ON T1.document_code = T2.document_code GROUP BY T1.document_name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT t2.document_structure_description FROM documents AS t1 JOIN document_structures AS t2 ON t1.document_structure_code  =  t2.document_structure_code GROUP BY t1.document_structure_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
        "query": "SELECT Year FROM festival_detail WHERE Location = value INTERSECT SELECT Year FROM festival_detail WHERE Location = value",
        "gold_parse": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "In which year are there festivals both inside the 'United States' and outside the 'United States'?",
        "query": "SELECT Year FROM festival_detail WHERE Location = value INTERSECT SELECT Year FROM festival_detail WHERE Location = value",
        "gold_parse": "SELECT YEAR FROM festival_detail WHERE LOCATION  =  'United States' INTERSECT SELECT YEAR FROM festival_detail WHERE LOCATION != 'United States'",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "List all the distinct president votes and the vice president votes.",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "List all the distinct president votes and the vice president votes.",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "How many products are there?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "How many products are there?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM Products",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who have loans of both Mortgages and Auto.",
        "query": "SELECT cust_name FROM customer INTERSECT SELECT cust_name FROM customer",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Mortgages' INTERSECT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE loan_type  =  'Auto'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and opening hours of the tourist attractions that we get to by bus or walk.",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "query": "SELECT DISTINCT Building FROM Faculty WHERE Room = value",
        "gold_parse": "SELECT DISTINCT building FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the distinct buildings that have faculty rooms.",
        "query": "SELECT DISTINCT Building FROM Faculty WHERE Room = value",
        "gold_parse": "SELECT DISTINCT building FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average number of bank customers?",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the id of the routes whose source and destination airports are in the United States?",
        "query": "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the id of the routes whose source and destination airports are in the United States?",
        "query": "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "List the ids of all distinct orders ordered by placed date.",
        "query": "SELECT DISTINCT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc",
        "gold_parse": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "List the ids of all distinct orders ordered by placed date.",
        "query": "SELECT DISTINCT T1.order_id FROM Orders AS T1 JOIN Shipments AS T2 ON T1.order_id = T2.order_id ORDER BY T2.shipment_date Asc",
        "gold_parse": "SELECT DISTINCT order_id FROM orders ORDER BY date_order_placed",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "query": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date > = value",
        "gold_parse": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the distinct details of invoices which are created before 1989-09-03 or after 2007-12-25.",
        "query": "SELECT DISTINCT invoice_details FROM Invoices WHERE invoice_date > = value",
        "gold_parse": "SELECT DISTINCT invoice_details FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value",
        "gold_parse": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of employees that work for companies with sales bigger than 200.",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value",
        "gold_parse": "SELECT T2.Name FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID WHERE T3.Sales_in_Billion  >  200",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "query": "SELECT T2.f_id , T1.g_name , T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is ORDER BY T2.rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id, genre, and name of the artist for every English song ordered by ascending rating?",
        "query": "SELECT T2.f_id , T1.g_name , T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is ORDER BY T2.rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "query": "SELECT T1.Address , Count ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "List all the possible ways to get to attractions, together with the number of attractions accessible by these methods.",
        "query": "SELECT T1.Address , Count ( * ) FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID",
        "gold_parse": "SELECT How_to_Get_There ,  COUNT(*) FROM Tourist_Attractions GROUP BY How_to_Get_There",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "How many distinct complaint type codes are there in the database?",
        "query": "SELECT Count ( DISTINCT product_category_code ) FROM Products",
        "gold_parse": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "How many distinct complaint type codes are there in the database?",
        "query": "SELECT Count ( DISTINCT product_category_code ) FROM Products",
        "gold_parse": "SELECT count(DISTINCT complaint_type_code) FROM complaints",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of different different airports that are destinations for American Airlines?",
        "query": "SELECT Count ( DISTINCT T1.rid ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of different different airports that are destinations for American Airlines?",
        "query": "SELECT Count ( DISTINCT T1.rid ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "query": "SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value INTERSECT SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are the name and payment method of customers who have both mailshots in 'Order' outcome and mailshots in 'No Response' outcome.",
        "query": "SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value INTERSECT SELECT T1.customer_name , T1.payment_method FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'Order' INTERSECT SELECT T2.customer_name ,  T2.payment_method FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE T1.outcome_code  =  'No Response'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the average elevation of all airports for each country.",
        "query": "SELECT country , Avg ( y ) FROM airports GROUP BY country",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the average elevation of all airports for each country.",
        "query": "SELECT country , Avg ( y ) FROM airports GROUP BY country",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What is the first and last name of the faculty members who participated in at least one activity? For each of them, also show the number of activities they participated in.",
        "query": "SELECT T2.Fname , T2.Lname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all singers that are from the UK and released a song in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events.",
        "query": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events.",
        "query": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 5?",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Grade Asc",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 5?",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Grade Asc",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names and descriptions of the photos taken at the tourist attraction called \"film festival\".",
        "query": "SELECT Name , Description FROM Tourist_Attractions WHERE Name = value",
        "gold_parse": "SELECT T1.Name ,  T1.Description FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T2.Name  =  \"film festival\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Which state has the greatest total number of bank customers?",
        "query": "SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Which state has the greatest total number of bank customers?",
        "query": "SELECT T1.state FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "query": "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > value",
        "gold_parse": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which orders have shipment after 2000-01-01? Give me the order ids.",
        "query": "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > value",
        "gold_parse": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many students are advised by each rank of faculty? List the rank and the number of students.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the tourist attractions that have parking or shopping as their feature details. What are the names of the attractions?",
        "query": "SELECT T2.Name FROM Features AS T1 JOIN Tourist_Attractions AS T2 JOIN Tourist_Attraction_Features AS T3 ON T1.Feature_ID = T3.Feature_ID AND T3.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Feature_Details = value OR T1.Feature_Details = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attractions that can be reached by bus or is at address 254 Ottilie Junction?",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find name of the services that has never been used.",
        "query": "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services",
        "gold_parse": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find name of the services that has never been used.",
        "query": "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services",
        "gold_parse": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "query": "SELECT T1.login_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many activities does Mark Giuliano participate in?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many activities does Mark Giuliano participate in?",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value GROUP BY T2.customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers who have at least 2 mailshots with outcome code 'Order'.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value GROUP BY T2.customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id WHERE outcome_code  =  'Order' GROUP BY T1.customer_id HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Return the completion date for all the tests that have \"Fail\" result.",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Return the completion date for all the tests that have \"Fail\" result.",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal names used both by some course authors and some students?",
        "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal names used both by some course authors and some students?",
        "query": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT personal_name FROM Course_Authors_and_Tutors INTERSECT SELECT personal_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the first name and last name for all the instructors.",
        "query": "SELECT Fname , Lname FROM Faculty",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the first name and last name for all the instructors.",
        "query": "SELECT Fname , Lname FROM Faculty",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Return the party email that has used party services the greatest number of times.",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Services AS T2 ON T1.party_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Return the party email that has used party services the greatest number of times.",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Services AS T2 ON T1.party_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_services AS t2 ON t1.party_id  =  t2.customer_id GROUP BY t1.party_email ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the cities which have exactly two airports.",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the cities which have exactly two airports.",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the cities which have exactly two airports.",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
        "query": "SELECT T2.student_id , T1.middle_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the student IDs and middle names of the students enrolled in at most two courses?",
        "query": "SELECT T2.student_id , T1.middle_name FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id GROUP BY T2.student_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.student_id ,  T2.middle_name FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id GROUP BY T1.student_id HAVING COUNT(*)  <=  2",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the id of all the files in mp3 format?",
        "query": "SELECT f_id FROM song WHERE song_name = value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the id of all the files in mp3 format?",
        "query": "SELECT f_id FROM song WHERE song_name = value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp3\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
        "query": "SELECT DISTINCT LName FROM Student EXCEPT SELECT LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes but do not have 2192 as the advisor?",
        "query": "SELECT DISTINCT LName FROM Student EXCEPT SELECT LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last names of all the female (sex is F) students who have president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each classroom, report the classroom number and the number of grades using it.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(DISTINCT grade) FROM list GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "query": "SELECT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID GROUP BY T2.cust_name ORDER BY Sum ( T3.amount ) Desc LIMIT value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What buildings have faculty offices?",
        "query": "SELECT Building FROM Faculty WHERE Building = value",
        "gold_parse": "SELECT DISTINCT building FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What buildings have faculty offices?",
        "query": "SELECT Building FROM Faculty WHERE Building = value",
        "gold_parse": "SELECT DISTINCT building FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many male and female assistant professors do we have?",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Rank = value",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many male and female assistant professors do we have?",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Rank = value",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of Professors who have office in building NEB.",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Building = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of Professors who have office in building NEB.",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Building = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "query": "SELECT acc_bal , credit_score FROM customer WHERE cust_name LIKE value",
        "gold_parse": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customer whose name includes the letter \u2018a\u2019.",
        "query": "SELECT acc_bal , credit_score FROM customer WHERE cust_name LIKE value",
        "gold_parse": "SELECT cust_name ,  acc_bal FROM customer WHERE cust_name LIKE '%a%'",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_id BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the distinct ids of products ordered between 1975-01-01 and 1976-01-01??",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_id BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "query": "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the name of each course and the corresponding number of student enrollment?",
        "query": "SELECT T1.course_name , Count ( * ) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the bank branch with the greatest number of customers?",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID GROUP BY T2.branch_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT bname FROM bank ORDER BY no_of_customers DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of students studying in room 111.",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of students studying in room 111.",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Return the cities with more than 3 airports in the United States.",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > value",
        "gold_parse": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Return the cities with more than 3 airports in the United States.",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > value",
        "gold_parse": "SELECT city FROM airports WHERE country  =  'United States' GROUP BY city HAVING count(*)  >  3",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the transportation method most people choose to get to tourist attractions.",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of all the teachers that teach GELL TAMI.",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attraction is associated with the photo \"game1\"? Return its name.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the most common major among female (sex is F) students?",
        "query": "SELECT Sex FROM Student WHERE Sex = value GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What is the most common major among female (sex is F) students?",
        "query": "SELECT Sex FROM Student WHERE Sex = value GROUP BY Sex ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Major FROM STUDENT WHERE Sex  =  \"F\" GROUP BY major ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each country and airline name, how many routes are there?",
        "query": "SELECT country , Count ( * ) FROM airports GROUP BY country",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each country and airline name, how many routes are there?",
        "query": "SELECT country , Count ( * ) FROM airports GROUP BY country",
        "gold_parse": "SELECT T1.country ,  T1.name ,  count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.country ,  T1.name",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the image name and URLs in the order of their names.",
        "query": "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc",
        "gold_parse": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the image name and URLs in the order of their names.",
        "query": "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc",
        "gold_parse": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is 8741.",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the files that are available in the format of mp4 and a resolution smaller than 1000?",
        "query": "SELECT T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the order id and customer id associated with the oldest order.",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the order id and customer id associated with the oldest order.",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T2.price_range FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T2.price_range FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students have professors as their advisors? Find their student ids.",
        "query": "SELECT StuID FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students have professors as their advisors? Find their student ids.",
        "query": "SELECT StuID FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT T2.StuID FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.rank  =  \"Professor\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which students study under the teacher named OTHA MOYER? Give me the first and last names of the students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "query": "SELECT T1.Artwork_ID , T1.Name FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the ids and names of festivals that have at least two nominations for artworks.",
        "query": "SELECT T1.Artwork_ID , T1.Name FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Festival_ID ,  T3.Festival_Name FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the name and country of origin for all artists who have release at least one song of resolution above 900.",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.resolution  >  900 GROUP BY T2.artist_name HAVING count(*)  >=  1",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct majors that students with treasurer votes are studying?",
        "query": "SELECT DISTINCT Major FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct majors that students with treasurer votes are studying?",
        "query": "SELECT DISTINCT Major FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Major FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are all the dates of enrollment and completion in record?",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are all the dates of enrollment and completion in record?",
        "query": "SELECT T1.date_of_enrolment , T2.test_result FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id = T2.registration_id",
        "gold_parse": "SELECT date_of_enrolment ,  date_of_completion FROM Student_Course_Enrolment",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "gold_parse": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade, report the grade, the number of classrooms in which it is taught and the total number of students in the grade.",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "gold_parse": "SELECT grade ,  count(DISTINCT classroom) ,  count(*) FROM list GROUP BY grade",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of students whose city code is NYC and who have class senator votes in the spring election cycle.",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "List the name and count of each product in all orders.",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "gold_parse": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "List the name and count of each product in all orders.",
        "query": "SELECT product_name , Count ( * ) FROM Products GROUP BY product_name",
        "gold_parse": "SELECT T3.product_name ,  count(*) FROM orders AS T1 JOIN order_items AS T2 JOIN products AS T3 ON T1.order_id = T2.order_id AND T2.product_id = T3.product_id GROUP BY T3.product_id",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes does American Airlines operate?",
        "query": "SELECT Count ( * ) FROM routes",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many routes does American Airlines operate?",
        "query": "SELECT Count ( * ) FROM routes",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "query": "SELECT train_number , time FROM train ORDER BY time Asc",
        "gold_parse": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Give me the times and numbers of all trains that go to Chennai, ordered by time.",
        "query": "SELECT train_number , time FROM train ORDER BY time Asc",
        "gold_parse": "SELECT TIME ,  train_number FROM train WHERE destination  =  'Chennai' ORDER BY TIME",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average number of customers cross all banks.",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of the location UK Gallery?",
        "query": "SELECT Address FROM Locations WHERE Location_Name = value",
        "gold_parse": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of the location UK Gallery?",
        "query": "SELECT Address FROM Locations WHERE Location_Name = value",
        "gold_parse": "SELECT Other_Details FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "query": "SELECT acc_type , Avg ( no_of_loans ) FROM customer WHERE credit_score < value GROUP BY acc_type",
        "gold_parse": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "For each account type, find the average account balance of customers with credit score lower than 50.",
        "query": "SELECT acc_type , Avg ( no_of_loans ) FROM customer WHERE credit_score < value GROUP BY acc_type",
        "gold_parse": "SELECT avg(acc_bal) ,  acc_type FROM customer WHERE credit_score  <  50 GROUP BY acc_type",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the name of the tourist attraction that is associated with the photo \"game1\"?",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM PHOTOS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID WHERE T1.Name  =  \"game1\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first and last name of the faculty who has the most students?",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY FacID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first and last name of the faculty who has the most students?",
        "query": "SELECT Fname , Lname FROM Faculty GROUP BY FacID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name of airline which runs the most number of routes.",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.airline ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name of airline which runs the most number of routes.",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.airline ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Count the number of distinct names associated with the photos.",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Count the number of distinct names associated with the photos.",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and ids of the tourist attractions that are visited at most once?",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and ids of the tourist attractions that are visited at most once?",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "query": "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails and phone numbers of all the customers, ordered by email address and phone number.",
        "query": "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "How many trains have 'Express' in their names?",
        "query": "SELECT Count ( * ) FROM train WHERE name = value",
        "gold_parse": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "How many trains have 'Express' in their names?",
        "query": "SELECT Count ( * ) FROM train WHERE name = value",
        "gold_parse": "SELECT count(*) FROM train WHERE name LIKE \"%Express%\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE city_code = value AND Major = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the average age of students who live in the city with code \"NYC\" and have secretary votes in the spring election cycle.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE city_code = value AND Major = value",
        "gold_parse": "SELECT avg(T1.Age) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  SECRETARY_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
        "query": "SELECT T2.Fname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which faculty members are playing either Canoeing or Kayaking? Tell me their first names.",
        "query": "SELECT T2.Fname FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many courses are there in total?",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many courses are there in total?",
        "query": "SELECT Count ( * ) FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT count(*) FROM COURSES",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from Bangladesh and have never received rating higher than 7.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airlines are there?",
        "query": "SELECT Count ( * ) FROM routes",
        "gold_parse": "SELECT count(*) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "How many airlines are there?",
        "query": "SELECT Count ( * ) FROM routes",
        "gold_parse": "SELECT count(*) FROM airlines",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "query": "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of all customers, sorted by email address and phone number?",
        "query": "SELECT email_address , phone_number FROM Customers ORDER BY email_address Asc",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers ORDER BY email_address ,  phone_number",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_latest_logon , T2.course_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T1.personal_name = value AND T2.course_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student whose personal name is \"Karson\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_latest_logon , T2.course_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T1.personal_name = value AND T2.course_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.personal_name  =  \"Karson\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers who use banks in New York City?",
        "query": "SELECT Count ( * ) FROM bank WHERE city = value",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers who use banks in New York City?",
        "query": "SELECT Count ( * ) FROM bank WHERE city = value",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank WHERE city  =  'New York City'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are ids of the faculty members who not only participate in an activity but also advise a student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does one classroom have?",
        "query": "SELECT Count ( * ) FROM list",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does one classroom have?",
        "query": "SELECT Count ( * ) FROM list",
        "gold_parse": "SELECT count(*) ,  classroom FROM list GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have an saving account.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have an saving account.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "query": "SELECT T2.course_description , T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the information about course authors and tutors in alphabetical order of the personal name.",
        "query": "SELECT T2.course_description , T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id ORDER BY T1.personal_name Asc",
        "gold_parse": "SELECT * FROM Course_Authors_and_Tutors ORDER BY personal_name",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails of customers who have filed complaints on the product which has had the greatest number of complaints?",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each  airport name, how many routes start at that airport, ordered from most to least?",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name ORDER BY count(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Count the number of tourists who did not visit any place.",
        "query": "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )",
        "gold_parse": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Count the number of tourists who did not visit any place.",
        "query": "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )",
        "gold_parse": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the song that was released most recently?",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.f_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the song that was released most recently?",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id GROUP BY T2.f_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the artist, for each language, that has the most songs with a higher resolution than 500?",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists from Bangladesh who never received a rating higher than a 7?",
        "query": "SELECT DISTINCT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.rating > value",
        "gold_parse": "SELECT DISTINCT artist_name FROM artist WHERE country  =  \"Bangladesh\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  7",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by walk or at address 660 Shea Crescent.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in.",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in.",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "query": "SELECT T1.product_name , Count ( * ) FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "List the name of all products along with the number of complaints that they have received.",
        "query": "SELECT T1.product_name , Count ( * ) FROM Products AS T1 JOIN Complaints AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id",
        "gold_parse": "SELECT t1.product_name ,  count(*) FROM products AS t1 JOIN complaints AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_name",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Tourist_Attractions AS T1 JOIN Shops AS T2 ON T2.Shop_ID = T1.Tourist_Attraction_ID JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T2.Shop_Details = value",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the visit date and details of the tourist whose detail is 'Vincent'",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Tourist_Attractions AS T1 JOIN Shops AS T2 ON T2.Shop_ID = T1.Tourist_Attraction_ID JOIN Visits AS T3 ON T1.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T2.Shop_Details = value",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of students in room 111?",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of students in room 111?",
        "query": "SELECT LastName FROM teachers WHERE Classroom = value",
        "gold_parse": "SELECT lastname FROM list WHERE classroom  =  111",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "query": "SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "query": "SELECT T1.rating , Avg ( T2.rating ) FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T2.languages",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
        "query": "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which attraction type does the most tourist attractions belong to? Tell me its  attraction type description and code.",
        "query": "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Give me the number of faculty members who participate in an activity",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Give me the number of faculty members who participate in an activity",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(DISTINCT FacID) FROM Faculty_participates_in",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airline with the most routes?",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.rid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airline with the most routes?",
        "query": "SELECT T2.name FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.rid ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the average rating and resolution of songs that are in Bangla?",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "query": "SELECT individual_last_name FROM Individuals",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the last names of individuals who have been contact individuals for an organization?",
        "query": "SELECT individual_last_name FROM Individuals",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names and number of works of the three artists who have produced the most songs.",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name ,  count(*) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many available hotels are there in total?",
        "query": "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings",
        "gold_parse": "SELECT count(*) FROM HOTELS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many available hotels are there in total?",
        "query": "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings",
        "gold_parse": "SELECT count(*) FROM HOTELS",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by OTHA MOYER. Output the first and last names of the students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What is the total number of faculty members?",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(*) FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What is the total number of faculty members?",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(*) FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the common login name of course authors and students.",
        "query": "SELECT DISTINCT T2.course_name , T1.login_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id",
        "gold_parse": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the common login name of course authors and students.",
        "query": "SELECT DISTINCT T2.course_name , T1.login_name FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id",
        "gold_parse": "SELECT login_name FROM Course_Authors_and_Tutors INTERSECT SELECT login_name FROM Students",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, return the classroom number and the count of students.",
        "query": "SELECT Count ( * ) , Classroom FROM list GROUP BY Classroom",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of the students who have class president votes.",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of the students who have class president votes.",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_President_VOTE",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "what are the order id and customer id of the oldest order?",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "what are the order id and customer id of the oldest order?",
        "query": "SELECT order_id , customer_id FROM Orders ORDER BY customer_id Desc LIMIT value",
        "gold_parse": "SELECT order_id ,  customer_id FROM orders ORDER BY date_order_placed LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T1.order_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T1.order_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "query": "SELECT Avg ( T2.price_range ) FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.star_rating_description = value",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "query": "SELECT Avg ( T2.price_range ) FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code WHERE T1.star_rating_description = value",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many voting records do we have?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many voting records do we have?",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the dates of the orders made by the customer named \"Jeramie\"?",
        "query": "SELECT T3.shipment_date FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Shipments AS T3 ON T2.order_id = T3.order_id WHERE T1.customer_name = value",
        "gold_parse": "SELECT T2.date_order_placed FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T1.customer_name = \"Jeramie\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
        "query": "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first names of the professors who do not play Canoeing or Kayaking as activities?",
        "query": "SELECT Fname FROM Faculty EXCEPT SELECT Fname FROM Faculty",
        "gold_parse": "SELECT lname FROM faculty WHERE rank  =  'Professor' EXCEPT SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of the different banks that have provided loans?",
        "query": "SELECT DISTINCT bname FROM bank",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of the different banks that have provided loans?",
        "query": "SELECT DISTINCT bname FROM bank",
        "gold_parse": "SELECT DISTINCT T1.bname FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "query": "SELECT artist_name FROM song WHERE languages = value GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the top 3 artists who have the largest number of songs works whose language is Bangla.",
        "query": "SELECT artist_name FROM song WHERE languages = value GROUP BY artist_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"bangla\" GROUP BY T2.artist_name ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "query": "SELECT document_name FROM Documents ORDER BY access_count Asc",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names of all the documents, as well as the access counts of each, ordered alphabetically?",
        "query": "SELECT document_name FROM Documents ORDER BY access_count Asc",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY document_name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of different airports which are the destinations of the American Airlines.",
        "query": "SELECT Count ( DISTINCT rid ) FROM routes WHERE airline = value",
        "gold_parse": "SELECT count(DISTINCT dst_apid) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first and last names of the first-grade students who are NOT taught by teacher OTHA MOYER?",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName ! = value",
        "gold_parse": "SELECT DISTINCT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  1 EXCEPT SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"OTHA\" AND T2.lastname  =  \"MOYER\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the total account balances for each customer from Utah or Texas?",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name, city, country, and elevation for every airport in the city of New York?",
        "query": "SELECT name , country , elevation FROM airports WHERE city = value",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "query": "SELECT Max ( y ) FROM airports WHERE country = value",
        "gold_parse": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the maximum elevation of all airports in the country of Iceland?",
        "query": "SELECT Max ( y ) FROM airports WHERE country = value",
        "gold_parse": "SELECT max(elevation) FROM airports WHERE country  =  'Iceland'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that can be accessed by bus?",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "For each state, find the total account balance of customers whose credit score is above 100.",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many Bangladeshi artists are listed?",
        "query": "SELECT Count ( * ) FROM genre",
        "gold_parse": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many Bangladeshi artists are listed?",
        "query": "SELECT Count ( * ) FROM genre",
        "gold_parse": "SELECT count(*) FROM artist WHERE country  =  \"Bangladesh\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the addresses of the course authors or tutors with personal name \"Cathrine\"",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first name and last name of all the instructors?",
        "query": "SELECT Fname , Lname FROM Faculty",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the first name and last name of all the instructors?",
        "query": "SELECT Fname , Lname FROM Faculty",
        "gold_parse": "SELECT fname ,  lname FROM Faculty WHERE Rank  =  \"Instructor\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "query": "SELECT DISTINCT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of the different customers who have taken out a loan, ordered by the total amount that they have taken?",
        "query": "SELECT DISTINCT T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID ORDER BY T3.amount Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Count the number of services.",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM services",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Count the number of services.",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM services",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "query": "SELECT Fname FROM Faculty UNION SELECT Fname FROM Faculty",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who are playing Canoeing or Kayaking.",
        "query": "SELECT Fname FROM Faculty UNION SELECT Fname FROM Faculty",
        "gold_parse": "SELECT DISTINCT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' OR T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "query": "SELECT Count ( * ) FROM Student WHERE city_code = value AND Major = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Which students live in the city with code \"NYC\" and have class senator votes in the spring election cycle? Count the numbers.",
        "query": "SELECT Count ( * ) FROM Student WHERE city_code = value AND Major = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.city_code  =  \"NYC\" AND T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
        "query": "SELECT f_id FROM song WHERE resolution > value",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of every song that has a resolution higher than that of a song with a rating below 8?",
        "query": "SELECT f_id FROM song WHERE resolution > value",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT max(resolution) FROM song WHERE rating  <  8)",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many teachers does the student named MADLOCK RAY have?",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"MADLOCK\" AND T1.lastname  =  \"RAY\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes operated by the airline American Airlines whose destinations are in Italy?",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "query": "SELECT order_id FROM Order_Items WHERE product_id = value",
        "gold_parse": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find all the order items whose product id is 11. What are the order item ids?",
        "query": "SELECT order_id FROM Order_Items WHERE product_id = value",
        "gold_parse": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = value",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the names of all the activities Mark Giuliano participates in.",
        "query": "SELECT T1.activity_name FROM Activity AS T1 JOIN Faculty_Participates_in AS T2 ON T1.actid = T2.actid JOIN Faculty AS T3 ON T2.FacID = T3.FacID WHERE T3.Lname = value",
        "gold_parse": "SELECT T3.activity_name FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN Activity AS T3 ON T3.actid  =  T2.actid WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who have taken out more than one loan?",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who have taken out more than one loan?",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the description of the most popular role among the users that have logged in.",
        "query": "SELECT T1.role_description FROM Roles AS T1 JOIN Users AS T2 ON T1.role_code = T2.role_code GROUP BY T2.role_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT role_description FROM ROLES WHERE role_code  =  (SELECT role_code FROM users WHERE user_login  =  1 GROUP BY role_code ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average number of customers in all banks of Utah state.",
        "query": "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.state = value",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average number of customers in all banks of Utah state.",
        "query": "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.state = value",
        "gold_parse": "SELECT avg(no_of_customers) FROM bank WHERE state  =  'Utah'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 WHERE T2.Visit_Details = value )",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor ! = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct last names of all the students who have president votes and whose advisor is not 2192.",
        "query": "SELECT DISTINCT LName FROM Student WHERE Advisor ! = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote EXCEPT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"2192\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "what are the last names of the teachers who teach grade 5?",
        "query": "SELECT LastName FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "what are the last names of the teachers who teach grade 5?",
        "query": "SELECT LastName FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Report the distinct president vote and the vice president vote.",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Report the distinct president vote and the vice president vote.",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT President_Vote ,  VICE_President_Vote FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of the teachers that teach fifth grade.",
        "query": "SELECT LastName FROM list ORDER BY Grade Asc LIMIT value",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of the teachers that teach fifth grade.",
        "query": "SELECT LastName FROM list ORDER BY Grade Asc LIMIT value",
        "gold_parse": "SELECT DISTINCT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the city and name of bank branches that provide business loans.",
        "query": "SELECT T1.city , T2.cust_name FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the date of enrollment of the course named \"Spanish\"?",
        "query": "SELECT T3.date_of_enrolment FROM Subjects AS T1 JOIN Courses AS T2 ON T1.subject_id = T2.subject_id JOIN Student_Course_Enrolment AS T3 ON T2.course_id = T3.course_id WHERE T1.subject_name = value",
        "gold_parse": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What is the date of enrollment of the course named \"Spanish\"?",
        "query": "SELECT T3.date_of_enrolment FROM Subjects AS T1 JOIN Courses AS T2 ON T1.subject_id = T2.subject_id JOIN Student_Course_Enrolment AS T3 ON T2.course_id = T3.course_id WHERE T1.subject_name = value",
        "gold_parse": "SELECT T2.date_of_enrolment FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id WHERE T1.course_name  =  \"Spanish\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of the teachers that teach first grade.",
        "query": "SELECT DISTINCT FirstName FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of the teachers that teach first grade.",
        "query": "SELECT DISTINCT FirstName FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the names of the customers who have made two or less orders?",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "What are the names of the customers who have made two or less orders?",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Orders AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T2.customer_name FROM orders AS T1 JOIN customers AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id HAVING count(*)  <=  2",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first and last name of all the teachers that teach EVELINA BROMLEY.",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T3.Market_Details = value OR T1.Location_Name = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT T3.Market_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T3.Market_Details = value OR T1.Location_Name = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price of hotels for different pet policy.",
        "query": "SELECT T2.price_range , Avg ( T2.price_range ) FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price of hotels for different pet policy.",
        "query": "SELECT T2.price_range , Avg ( T2.price_range ) FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers who have the most mailshots.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers who have the most mailshots.",
        "query": "SELECT customer_name FROM Customers GROUP BY customer_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.customer_name FROM mailshot_customers AS T1 JOIN customers AS T2 ON T1.customer_id  =  T2.customer_id GROUP BY T1.customer_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "query": "SELECT user_id , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the usernames and passwords of users that have the most common role?",
        "query": "SELECT user_id , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions can we get to by bus? Tell me the names of the attractions.",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT Name FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers across banks?",
        "query": "SELECT Count ( * ) FROM bank",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total number of customers across banks?",
        "query": "SELECT Count ( * ) FROM bank",
        "gold_parse": "SELECT sum(no_of_customers) FROM bank",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the ids of all the order items whose product id is 11.",
        "query": "SELECT order_id FROM Order_Items WHERE product_id = value",
        "gold_parse": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the ids of all the order items whose product id is 11.",
        "query": "SELECT order_id FROM Order_Items WHERE product_id = value",
        "gold_parse": "SELECT order_item_id FROM order_items WHERE product_id = 11",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "query": "SELECT FirstName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the name of the teacher who teaches the largest number of students.",
        "query": "SELECT FirstName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of each visitor?",
        "query": "SELECT Address FROM Locations",
        "gold_parse": "SELECT Tourist_Details FROM VISITORS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the detail of each visitor?",
        "query": "SELECT Address FROM Locations",
        "gold_parse": "SELECT Tourist_Details FROM VISITORS",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct secretary votes in the fall election cycle?",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the faculty ranks and the number of students advised by each rank.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the faculty ranks and the number of students advised by each rank.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.rank ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.rank",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all genres in alphabetical order, combined with its ratings?",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the organization that was formed most recently?",
        "query": "SELECT T1.organization_name FROM Organizations AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the organization that was formed most recently?",
        "query": "SELECT T1.organization_name FROM Organizations AS T1 JOIN Organization_Contact_Individuals AS T2 ON T1.organization_id = T2.organization_id GROUP BY T2.organization_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT organization_name FROM organizations ORDER BY date_formed DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < value",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the names of bank branches that have provided a loan to any customer whose credit score is below 100.",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < value",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "query": "SELECT song_name FROM song WHERE rating < ( SELECT Min ( rating ) FROM song )",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the song names for every song whose rating is less than the minimum rating for English songs?",
        "query": "SELECT song_name FROM song WHERE rating < ( SELECT Min ( rating ) FROM song )",
        "gold_parse": "SELECT song_name FROM song WHERE rating  <   (SELECT min(rating) FROM song WHERE languages  =  'english')",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the branch names of banks in the New York state.",
        "query": "SELECT bname FROM bank WHERE city = value",
        "gold_parse": "SELECT bname FROM bank WHERE state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the branch names of banks in the New York state.",
        "query": "SELECT bname FROM bank WHERE city = value",
        "gold_parse": "SELECT bname FROM bank WHERE state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "query": "SELECT T1.name , T2.network_name FROM train AS T1 JOIN station AS T2 JOIN route AS T3 ON T1.id = T3.train_id AND T3.station_id = T2.id WHERE T2.network_name = value",
        "gold_parse": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find names and times of trains that run through stations for the local authority Chiltern.",
        "query": "SELECT T1.name , T2.network_name FROM train AS T1 JOIN station AS T2 JOIN route AS T3 ON T1.id = T3.train_id AND T3.station_id = T2.id WHERE T2.network_name = value",
        "gold_parse": "SELECT t3.name ,  t3.time FROM station AS t1 JOIN route AS t2 ON t1.id  =  t2.station_id JOIN train AS t3 ON t2.train_id  =  t3.id WHERE t1.local_authority  =  \"Chiltern\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the prices of products that have never gotten a complaint?",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the prices of products that have never gotten a complaint?",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Courses AS T2 JOIN Student_Course_Enrolment AS T3 ON T1.student_id = T3.student_id AND T3.course_id = T2.course_id WHERE T2.course_name = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many songs have 4 minute duration?",
        "query": "SELECT Count ( * ) FROM genre",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many songs have 4 minute duration?",
        "query": "SELECT Count ( * ) FROM genre",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes that end at John F Kennedy International Airport?",
        "query": "SELECT Count ( * ) FROM routes WHERE src_ap = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the number of routes that end at John F Kennedy International Airport?",
        "query": "SELECT Count ( * ) FROM routes WHERE src_ap = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the shops that can be accessed by walk?",
        "query": "SELECT Shop_Details FROM Shops",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the shops that can be accessed by walk?",
        "query": "SELECT Shop_Details FROM Shops",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct ages of students who have secretary votes in the fall election cycle?",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct ages of students who have secretary votes in the fall election cycle.",
        "query": "SELECT DISTINCT Age FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Age FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Secretary_Vote WHERE T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What are the names and locations of festivals?",
        "query": "SELECT Chair_Name , Location FROM festival_detail",
        "gold_parse": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What are the names and locations of festivals?",
        "query": "SELECT Chair_Name , Location FROM festival_detail",
        "gold_parse": "SELECT Festival_Name ,  LOCATION FROM festival_detail",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the party form that is most common?",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What is the name of the party form that is most common?",
        "query": "SELECT T1.party_email FROM Parties AS T1 JOIN Party_Forms AS T2 ON T1.party_id = T2.party_id GROUP BY T2.party_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of the shops that can be reached by walk.",
        "query": "SELECT Shop_Details FROM Shops",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of the shops that can be reached by walk.",
        "query": "SELECT Shop_Details FROM Shops",
        "gold_parse": "SELECT T1.Shop_Details FROM SHOPS AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Shop_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show first name and last name for all the students advised by Michael Goodrich.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT T2.fname ,  T2.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T1.fname  =  \"Michael\" AND T1.lname  =  \"Goodrich\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "query": "SELECT name FROM airports WHERE country = value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport with the most number of routes that start in China?",
        "query": "SELECT name FROM airports WHERE country = value GROUP BY name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of the students who have vice president votes and reside in a city whose city code is not PIT?",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of voting records in total.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the number of voting records in total.",
        "query": "SELECT Count ( * ) FROM Student",
        "gold_parse": "SELECT count(*) FROM VOTING_RECORD",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the names and ids of tourist attractions that are visited at least two times.",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Election_Cycle = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first names and last names of the students who are 18 years old and have vice president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Election_Cycle = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Count the number of users that are logged in.",
        "query": "SELECT Count ( * ) FROM Roles",
        "gold_parse": "SELECT count(*) FROM users WHERE user_login  =  1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Count the number of users that are logged in.",
        "query": "SELECT Count ( * ) FROM Roles",
        "gold_parse": "SELECT count(*) FROM users WHERE user_login  =  1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document which has been accessed the most times, as well as the number of times it has been accessed?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name ,  access_count FROM documents ORDER BY access_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value AND T2.rating < value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the id of songs that are available in mp4 format and have resolution lower than 1000.",
        "query": "SELECT T2.f_id FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.formats = value AND T2.rating < value",
        "gold_parse": "SELECT f_id FROM files WHERE formats  =  \"mp4\" INTERSECT SELECT f_id FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "query": "SELECT login_name FROM Students",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "query": "SELECT login_name FROM Students",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the songs that are modern or sung in English?",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the songs that are modern or sung in English?",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average credit score for customers who have taken a loan?",
        "query": "SELECT Avg ( T2.credit_score ) FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the number of activities Mark Giuliano is involved in.",
        "query": "SELECT Count ( * ) FROM Student WHERE Fname = value AND LName = value",
        "gold_parse": "SELECT count(*) FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID WHERE T1.fname  =  \"Mark\" AND T1.lname  =  \"Giuliano\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Return the number of routes with destination airport in Italy operated by the airline with name 'American Airlines'.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid JOIN airlines AS T3 ON T1.alid  =  T3.alid WHERE T2.country  =  'Italy' AND T3.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "query": "SELECT T2.course_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.login_name = value",
        "gold_parse": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names and descriptions of courses that belong to the subject named \"Computer Science\".",
        "query": "SELECT T2.course_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T1.login_name = value",
        "gold_parse": "SELECT T1.course_name ,  T1.course_description FROM Courses AS T1 JOIN Subjects AS T2 ON T1.subject_id  =  T2.subject_id WHERE T2.subject_name  =  \"Computer Science\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the name of the most popular party form.",
        "query": "SELECT party_phone FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the name of the most popular party form.",
        "query": "SELECT party_phone FROM Parties GROUP BY party_phone ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.form_name FROM forms AS t1 JOIN party_forms AS t2 ON t1.form_id  =  t2.form_id GROUP BY t2.form_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are visited at least twice? Give me their names and ids.",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Name ,  T2.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the name and the number of enrolled student for each course.",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the name and the number of enrolled student for each course.",
        "query": "SELECT course_name , Count ( * ) FROM Courses GROUP BY course_name",
        "gold_parse": "SELECT T1.course_name ,  COUNT(*) FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "query": "SELECT T2.cust_name , T2.acc_bal FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "query": "SELECT T2.cust_name , T2.acc_bal FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.amount > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities with exactly two airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities with exactly two airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities with exactly two airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > = value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  =  2",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "query": "SELECT T2.cust_name , T1.city FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and cities of bank branches that offer loans for business?",
        "query": "SELECT T2.cust_name , T1.city FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "gold_parse": "SELECT T1.bname ,  T1.city FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T2.loan_type  =  'Business'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "query": "SELECT StuID FROM Student WHERE Age BETWEEN value AND value",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the ids of the students who are under 20 years old and are involved in at least one activity.",
        "query": "SELECT StuID FROM Student WHERE Age BETWEEN value AND value",
        "gold_parse": "SELECT StuID FROM Participates_in INTERSECT SELECT StuID FROM Student WHERE age  <  20",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_item_id BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Give me a list of distinct product ids from orders placed between 1975-01-01 and 1976-01-01?",
        "query": "SELECT DISTINCT product_id FROM Order_Items WHERE order_item_id BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT T2.product_id FROM orders AS T1 JOIN order_items AS T2 ON T1.order_id = T2.order_id WHERE T1.date_order_placed >= \"1975-01-01\" AND T1.date_order_placed <= \"1976-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Visit_Details = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions Vincent and Marcelle visit?",
        "query": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T2.Visit_Details = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty id and the number of students each faculty has?",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty id and the number of students each faculty has?",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of the students who have class president votes?",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct first names of the students who have class president votes?",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "How many students does LORIA ONDERSMA teaches?",
        "query": "SELECT Count ( * ) FROM list WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the id and star rating of each hotel and sort them in increasing order of price.",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of female Professors we have.",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Count the number of female Professors we have.",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Sex  =  'F' AND Rank  =  \"Professor\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "query": "SELECT Avg ( T2.price_range ) , T1.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the average prices of hotels grouped by their pet policy.",
        "query": "SELECT Avg ( T2.price_range ) , T1.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Hotels AS T2 GROUP BY T1.Attraction_Type_Code",
        "gold_parse": "SELECT pets_allowed_yn ,  avg(price_range) FROM HOTELS GROUP BY pets_allowed_yn",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products and the number of events they are in, sorted by the number of events in descending order.",
        "query": "SELECT Product_Name , Count ( * ) FROM Products GROUP BY Product_Name ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT T1.Product_Name ,  COUNT(*) FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name ORDER BY COUNT(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the emails of parties with the most popular party form.",
        "query": "SELECT party_email FROM Parties GROUP BY party_email ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the emails of parties with the most popular party form.",
        "query": "SELECT party_email FROM Parties GROUP BY party_email ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.party_email FROM parties AS t1 JOIN party_forms AS t2 ON t1.party_id  =  t2.party_id WHERE t2.form_id  =  (SELECT form_id FROM party_forms GROUP BY form_id ORDER BY count(*) DESC LIMIT 1)",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty do we have?",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(*) FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty do we have?",
        "query": "SELECT Count ( * ) FROM Activity",
        "gold_parse": "SELECT count(*) FROM Faculty",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, report the total number of students.",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "For each grade 0 classroom, report the total number of students.",
        "query": "SELECT Count ( * ) , Grade FROM list GROUP BY Grade",
        "gold_parse": "SELECT classroom ,  count(*) FROM list WHERE grade  =  \"0\" GROUP BY classroom",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average credit score of the customers who have some loan.",
        "query": "SELECT Avg ( credit_score ) FROM customer",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id IN (SELECT cust_id FROM loan)",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the number of male and female assistant professors.",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Rank = value",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the number of male and female assistant professors.",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Sex = value AND Rank = value",
        "gold_parse": "SELECT sex ,  count(*) FROM Faculty WHERE rank  =  \"AsstProf\" GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the longest song?",
        "query": "SELECT f_id FROM song ORDER BY releasedate Desc LIMIT value",
        "gold_parse": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the id of the longest song?",
        "query": "SELECT f_id FROM song ORDER BY releasedate Desc LIMIT value",
        "gold_parse": "SELECT f_id FROM files ORDER BY duration DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Return the addresses of the course authors or tutors whose personal name is \"Cathrine\".",
        "query": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name = value OR personal_name = value",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors WHERE personal_name\t =  \"Cathrine\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the prices of products which has never received a single complaint.",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the prices of products which has never received a single complaint.",
        "query": "SELECT product_price FROM Products EXCEPT SELECT product_price FROM Products",
        "gold_parse": "SELECT product_price FROM products WHERE product_id NOT IN (SELECT product_id FROM complaints)",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the singers who sang the top 3 most highly rated songs and what countries do they hail from?",
        "query": "SELECT artist_name , country FROM song ORDER BY rating Desc LIMIT value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.rating DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each country, what is the average elevation of that country's airports?",
        "query": "SELECT country , Avg ( y ) FROM airports GROUP BY country",
        "gold_parse": "SELECT avg(elevation) ,  country FROM airports GROUP BY country",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Find the average access counts of documents with functional area \"Acknowledgement\".",
        "query": "SELECT Avg ( T2.access_count ) FROM Functional_Areas AS T1 JOIN Documents AS T2 JOIN Document_Functional_Areas AS T3 ON T1.functional_area_code = T3.functional_area_code AND T3.document_code = T2.document_code WHERE T1.parent_functional_area_code = value",
        "gold_parse": "SELECT avg(t1.access_count) FROM documents AS t1 JOIN document_functional_areas AS t2 ON t1.document_code  =  t2.document_code JOIN functional_areas AS t3 ON t2.functional_area_code  =  t3.functional_area_code WHERE t3.functional_area_description  =  \"Acknowledgement\"",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "query": "SELECT Name FROM driver WHERE Home_city = value AND Age < value INTERSECT SELECT Name FROM driver WHERE Age > value",
        "gold_parse": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "List names for drivers from Hartford city and younger than 40.",
        "query": "SELECT Name FROM driver WHERE Home_city = value AND Age < value INTERSECT SELECT Name FROM driver WHERE Age > value",
        "gold_parse": "SELECT name FROM driver WHERE home_city  =  'Hartford' AND age  <  40",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many songs, on average, are sung by a female artist?",
        "query": "SELECT Avg ( * ) FROM artist WHERE gender = value",
        "gold_parse": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many songs, on average, are sung by a female artist?",
        "query": "SELECT Avg ( * ) FROM artist WHERE gender = value",
        "gold_parse": "SELECT avg(T2.rating) FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T1.gender  =  \"Female\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id ORDER BY T2.uk_vat_number Desc LIMIT value",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the first ever contact person of the organization with the highest UK Vat number.",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id ORDER BY T2.uk_vat_number Desc LIMIT value",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.uk_vat_number  =  (SELECT max(uk_vat_number) FROM organizations) ORDER BY t2.date_contact_to ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the artist who produced the shortest song?",
        "query": "SELECT artist_name FROM song ORDER BY rating Asc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the artist who produced the shortest song?",
        "query": "SELECT artist_name FROM song ORDER BY rating Asc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "query": "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "query": "SELECT T2.course_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes with destination airports in Italy.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid  =  T2.apid WHERE T2.country  =  'Italy'",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Return the codes of the document types that do not have a total access count of over 10000.",
        "query": "SELECT document_code FROM Documents EXCEPT SELECT document_type_code FROM Documents WHERE access_count > value",
        "gold_parse": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "Return the codes of the document types that do not have a total access count of over 10000.",
        "query": "SELECT document_code FROM Documents EXCEPT SELECT document_type_code FROM Documents WHERE access_count > value",
        "gold_parse": "SELECT document_type_code FROM documents GROUP BY document_type_code HAVING sum(access_count)  >  10000",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "query": "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members participate in each activity? Return the activity names and the number of faculty members.",
        "query": "SELECT activity_name , Count ( * ) FROM Activity GROUP BY activity_name",
        "gold_parse": "SELECT T1.activity_name ,  count(*) FROM Activity AS T1 JOIN Faculty_participates_in AS T2 ON T1.actID  =  T2.actID GROUP BY T1.actID",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "query": "SELECT f_id FROM song WHERE resolution > ( SELECT Avg ( resolution ) FROM song )",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the ids of all songs that have higher resolution of the average resolution in the modern genre?",
        "query": "SELECT f_id FROM song WHERE resolution > ( SELECT Avg ( resolution ) FROM song )",
        "gold_parse": "SELECT f_id FROM song WHERE resolution  >  (SELECT avg(resolution) FROM song WHERE genre_is  =  \"modern\")",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of the students who have class senator votes.",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of the students who have class senator votes.",
        "query": "SELECT DISTINCT T1.Fname FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.CLASS_Senator_VOTE",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating and resolution of all bangla songs?",
        "query": "SELECT Avg ( rating ) , Avg ( resolution ) FROM song",
        "gold_parse": "SELECT avg(rating) ,  avg(resolution) FROM song WHERE languages  =  \"bangla\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "query": "SELECT Fname FROM Faculty",
        "gold_parse": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Find the first names of the faculty members who participate in Canoeing and Kayaking.",
        "query": "SELECT Fname FROM Faculty",
        "gold_parse": "SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Canoeing' INTERSECT SELECT T1.lname FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID JOIN activity AS T3 ON T2.actid  =  T2.actid WHERE T3.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the last names of the teachers who teach the student called GELL TAMI?",
        "query": "SELECT LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"GELL\" AND T1.lastname  =  \"TAMI\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "query": "SELECT Count ( * ) FROM files WHERE duration < value",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the count of the songs that last approximately 4 minutes?",
        "query": "SELECT Count ( * ) FROM files WHERE duration < value",
        "gold_parse": "SELECT count(*) FROM files WHERE duration LIKE \"4:%\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "query": "SELECT name , country , elevation FROM airports WHERE city = value OR city = value",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the name, city, country, and altitude (or elevation) of the airports in the city of New York.",
        "query": "SELECT name , country , elevation FROM airports WHERE city = value OR city = value",
        "gold_parse": "SELECT name ,  city ,  country ,  elevation FROM airports WHERE city  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "query": "SELECT DISTINCT individual_last_name FROM Individuals",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the individuals that have been contact individuals of an organization.",
        "query": "SELECT DISTINCT individual_last_name FROM Individuals",
        "gold_parse": "SELECT DISTINCT t1.individual_last_name FROM individuals AS t1 JOIN organization_contact_individuals AS t2 ON t1.individual_id  =  t2.individual_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names of the courses that have just one student enrollment.",
        "query": "SELECT course_name FROM Courses",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Find the names of the courses that have just one student enrollment.",
        "query": "SELECT course_name FROM Courses",
        "gold_parse": "SELECT T1.course_name FROM Courses AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.course_id  =  T2.course_id GROUP BY T1.course_name HAVING COUNT(*)  =  1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name and country of origin of the artist who released a song that has \"love\" in its title?",
        "query": "SELECT T1.artist_name , T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name = value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the invoice numbers which are created before 1989-09-03 or after 2007-12-25.",
        "query": "SELECT invoice_number FROM Invoices WHERE invoice_date > = value",
        "gold_parse": "SELECT invoice_number FROM invoices WHERE invoice_date < \"1989-09-03\" OR invoice_date > \"2007-12-25\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Count the number of students the teacher LORIA ONDERSMA teaches.",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"LORIA\" AND T2.lastname  =  \"ONDERSMA\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "SELECT state , acc_type , credit_score FROM customer WHERE cust_name = value",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "SELECT state , acc_type , credit_score FROM customer WHERE cust_name = value",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names and opening hours of the tourist attractions that can be accessed by bus or walk?",
        "query": "SELECT T2.Name , T2.Opening_Hours FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Location_Name = value OR T1.Location_Name = value",
        "gold_parse": "SELECT Name ,  Opening_Hours FROM TOURIST_ATTRACTIONS WHERE How_to_Get_There  =  \"bus\" OR How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "query": "SELECT T1.Artwork_ID , T1.Name , Count ( * ) FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID",
        "gold_parse": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "Show the id, name of each festival and the number of artworks it has nominated.",
        "query": "SELECT T1.Artwork_ID , T1.Name , Count ( * ) FROM artwork AS T1 JOIN nomination AS T2 ON T1.Artwork_ID = T2.Artwork_ID GROUP BY T2.Festival_ID",
        "gold_parse": "SELECT T1.Festival_ID ,  T3.Festival_Name ,  COUNT(*) FROM nomination AS T1 JOIN artwork AS T2 ON T1.Artwork_ID  =  T2.Artwork_ID JOIN festival_detail AS T3 ON T1.Festival_ID  =  T3.Festival_ID GROUP BY T1.Festival_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many tourists did not make any visit?",
        "query": "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )",
        "gold_parse": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many tourists did not make any visit?",
        "query": "SELECT Count ( * ) FROM Tourist_Attractions AS T1 WHERE T1.Tourist_Attraction_ID NOT IN ( SELECT T2.Tourist_Attraction_ID FROM Visits AS T2 )",
        "gold_parse": "SELECT count(*) FROM Visitors WHERE Tourist_ID NOT IN ( SELECT Tourist_ID FROM Visits )",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "How many distinct types of accounts are there?",
        "query": "SELECT Count ( DISTINCT loan_type ) FROM loan",
        "gold_parse": "SELECT count(DISTINCT acc_type) FROM customer",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "How many distinct types of accounts are there?",
        "query": "SELECT Count ( DISTINCT loan_type ) FROM loan",
        "gold_parse": "SELECT count(DISTINCT acc_type) FROM customer",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct first names of all the students who have vice president votes and whose city code is not PIT.",
        "query": "SELECT DISTINCT Fname FROM Student WHERE Advisor = value AND Advisor ! = value",
        "gold_parse": "SELECT DISTINCT T1.Fname FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_PRESIDENT_Vote EXCEPT SELECT DISTINCT Fname FROM STUDENT WHERE city_code  =  \"PIT\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "query": "SELECT T1.artist_name FROM artist AS T1 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.rating > value",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who have produced English songs but have never received rating higher than 8.",
        "query": "SELECT T1.artist_name FROM artist AS T1 EXCEPT SELECT T2.artist_name FROM song AS T2 WHERE T2.rating > value",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of tourist attractions that can be reached by walk or is at address 660 Shea Crescent?",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"660 Shea Crescent\" OR T2.How_to_Get_There  =  \"walk\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "How many customers are there?",
        "query": "SELECT Count ( * ) FROM Staff",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "How many customers are there?",
        "query": "SELECT Count ( * ) FROM Staff",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty ids of all the male faculty members?",
        "query": "SELECT FacID FROM Faculty WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the faculty ids of all the male faculty members?",
        "query": "SELECT FacID FROM Faculty WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT FacID FROM Faculty WHERE Sex  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "query": "SELECT LastName FROM list WHERE FirstName = value EXCEPT SELECT LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the last names of the students in third grade that are not taught by COVIN JEROME.",
        "query": "SELECT LastName FROM list WHERE FirstName = value EXCEPT SELECT LastName FROM list WHERE FirstName = value",
        "gold_parse": "SELECT DISTINCT T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.grade  =  3 AND T2.firstname != \"COVIN\" AND T2.lastname != \"JEROME\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "query": "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the file size and format for all songs that have resolution lower than 800.",
        "query": "SELECT T1.file_size , T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.rating < value",
        "gold_parse": "SELECT DISTINCT T1.file_size ,  T1.formats FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T2.resolution  <  800",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many artists are male and how many are female?",
        "query": "SELECT Count ( * ) FROM artist WHERE gender = value",
        "gold_parse": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "How many artists are male and how many are female?",
        "query": "SELECT Count ( * ) FROM artist WHERE gender = value",
        "gold_parse": "SELECT count(*) ,  gender FROM artist GROUP BY gender",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "query": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "correctness": 0
    },
    {
        "db_id": "solvency_ii",
        "question": "Show the names of products that are in at least two events in ascending alphabetical order of product name.",
        "query": "SELECT Product_Name FROM Products GROUP BY Product_Name HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Product_Name FROM Products AS T1 JOIN Products_in_Events AS T2 ON T1.Product_ID  =  T2.Product_ID GROUP BY T1.Product_Name HAVING COUNT(*)  >=  2 ORDER BY T1.Product_Name",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the names and ids of tourist attractions that are visited at most once.",
        "query": "SELECT T2.Name , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID GROUP BY T2.Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  T1.Tourist_Attraction_ID FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID GROUP BY T2.Tourist_Attraction_ID HAVING count(*)  <=  1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "query": "SELECT cust_name FROM customer WHERE cust_ID NOT IN ( SELECT cust_name FROM customer )",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many Professors are in building NEB?",
        "query": "SELECT Count ( * ) FROM Faculty WHERE Building = value",
        "gold_parse": "SELECT count(*) FROM Faculty WHERE Rank  =  \"Professor\" AND building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "query": "SELECT train_number , time FROM train WHERE destination = value",
        "gold_parse": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "Find the number and time of the train that goes from Chennai to Guruvayur.",
        "query": "SELECT train_number , time FROM train WHERE destination = value",
        "gold_parse": "SELECT train_number ,  TIME FROM train WHERE origin  =  'Chennai' AND destination  =  'Guruvayur'",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "query": "SELECT DISTINCT artist_name FROM song EXCEPT SELECT artist_name FROM song WHERE rating > value",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the different artists that have produced a song in English but have never receieved a rating higher than 8?",
        "query": "SELECT DISTINCT artist_name FROM song EXCEPT SELECT artist_name FROM song WHERE rating > value",
        "gold_parse": "SELECT DISTINCT artist_name FROM song WHERE languages  =  \"english\" EXCEPT SELECT DISTINCT artist_name FROM song WHERE rating  >  8",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes operated by American Airlines.",
        "query": "SELECT Count ( * ) FROM routes WHERE airline = value",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes operated by American Airlines.",
        "query": "SELECT Count ( * ) FROM routes WHERE airline = value",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of singers who are from UK and released an English song.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of singers who are from UK and released an English song.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first names of the teachers who teach grade 1?",
        "query": "SELECT DISTINCT FirstName FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "What are the first names of the teachers who teach grade 1?",
        "query": "SELECT DISTINCT FirstName FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT T2.firstname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE grade  =  1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "query": "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = value",
        "gold_parse": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total amount of loans provided by bank branches in the state of New York.",
        "query": "SELECT Sum ( T2.amount ) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_ID = T2.branch_ID WHERE T1.city = value",
        "gold_parse": "SELECT sum(T2.amount) FROM bank AS T1 JOIN loan AS T2 ON T1.branch_id  =  T2.branch_id WHERE T1.state  =  'New York'",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On what day was the order with invoice number 10 placed?",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number < value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "On what day was the order with invoice number 10 placed?",
        "query": "SELECT invoice_date FROM Invoices WHERE invoice_number < value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.invoice_number = 10",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members do we have for each rank and gender?",
        "query": "SELECT Count ( * ) , Sex FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "How many faculty members do we have for each rank and gender?",
        "query": "SELECT Count ( * ) , Sex FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT rank ,  sex ,  count(*) FROM Faculty GROUP BY rank ,  sex",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "query": "SELECT T2.FirstName , T2.LastName FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct president votes on 08/30/2015?",
        "query": "SELECT DISTINCT T2.President_Vote FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Fname = value",
        "gold_parse": "SELECT DISTINCT PRESIDENT_Vote FROM VOTING_RECORD WHERE Registration_Date  =  \"08/30/2015\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
        "query": "SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = value",
        "gold_parse": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "Which course author teaches the \"advanced database\" course? Give me his or her login name.",
        "query": "SELECT T1.personal_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = value",
        "gold_parse": "SELECT T1.login_name FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id WHERE T2.course_name  =  \"advanced database\"",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "query": "SELECT product_category , Count ( * ) FROM Products GROUP BY product_category",
        "gold_parse": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show all distinct product categories along with the number of mailshots in each category.",
        "query": "SELECT product_category , Count ( * ) FROM Products GROUP BY product_category",
        "gold_parse": "SELECT product_category ,  count(*) FROM mailshot_campaigns GROUP BY product_category",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Count the number of customers.",
        "query": "SELECT Count ( * ) FROM Staff",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Count the number of customers.",
        "query": "SELECT Count ( * ) FROM Staff",
        "gold_parse": "SELECT count(*) FROM customers",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Return all the distinct secretary votes made in the fall election cycle.",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT Secretary_Vote FROM VOTING_RECORD WHERE ELECTION_CYCLE  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the total account balance for customers with a credit score of above 100 for the different states?",
        "query": "SELECT state , Sum ( no_of_loans ) FROM customer WHERE credit_score > value GROUP BY state",
        "gold_parse": "SELECT sum(acc_bal) ,  state FROM customer WHERE credit_score  >  100 GROUP BY state",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which are the first and last names of the students taught by MARROTTE KIRK?",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions do the tourists Vincent and Marcelle visit? Tell me the names of the attractions.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" INTERSECT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Marcelle\"",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each airport name, how many routes start at that airport?",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each airport name, how many routes start at that airport?",
        "query": "SELECT T2.name , Count ( * ) FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid GROUP BY T1.dst_apid",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first and last names of all the female students who have president votes?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the first and last names of all the female students who have president votes?",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Sex = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.President_VOTE WHERE T1.sex  =  \"F\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names and genders of all artists who released songs in the month of March?",
        "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names and genders of all artists who released songs in the month of March?",
        "query": "SELECT T1.artist_name , T1.gender FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name WHERE T2.formats LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.gender FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.releasedate LIKE \"%Mar%\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the names of the services that have never been used?",
        "query": "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services",
        "gold_parse": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "What are the names of the services that have never been used?",
        "query": "SELECT service_name FROM Services EXCEPT SELECT service_name FROM Services",
        "gold_parse": "SELECT service_name FROM services EXCEPT SELECT t1.service_name FROM services AS t1 JOIN party_services AS t2 ON t1.service_id  =  t2.service_id",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "How many artworks are there?",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "gold_parse": "SELECT count(*) FROM artwork",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "How many artworks are there?",
        "query": "SELECT Count ( * ) FROM festival_detail",
        "gold_parse": "SELECT count(*) FROM artwork",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the number of teachers who teach the student called CHRISSY NABOZNY.",
        "query": "SELECT Count ( * ) FROM list AS T1 JOIN teachers AS T2 WHERE T1.FirstName = value AND T2.FirstName = value",
        "gold_parse": "SELECT count(*) FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"CHRISSY\" AND T1.lastname  =  \"NABOZNY\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "How many services are there?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM services",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "How many services are there?",
        "query": "SELECT Count ( * ) FROM Addresses",
        "gold_parse": "SELECT count(*) FROM services",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the details and star ratings of the 3 least expensive hotels.",
        "query": "SELECT T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc LIMIT value",
        "gold_parse": "SELECT other_hotel_details ,  star_rating_code FROM HOTELS ORDER BY price_range ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names of documents that have both one of the three most common types and one of three most common structures?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT document_name FROM documents GROUP BY document_type_code ORDER BY count(*) DESC LIMIT 3 INTERSECT SELECT document_name FROM documents GROUP BY document_structure_code ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Visits AS T3 ON T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T1.Other_Details = value",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the visit date and details of the visitor whose detail is 'Vincent'?",
        "query": "SELECT T3.Visit_Date , T3.Visit_Details FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Visits AS T3 ON T2.Tourist_Attraction_ID = T3.Tourist_Attraction_ID WHERE T1.Other_Details = value",
        "gold_parse": "SELECT T2.Visit_Date ,  T2.Visit_Details FROM VISITORS AS T1 JOIN VISITS AS T2 ON T1.Tourist_ID  =  T2.Tourist_ID WHERE T1.Tourist_Details  =  \"Vincent\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
        "query": "SELECT stuid FROM Participates_in WHERE actid = value INTERSECT SELECT stuid FROM Participates_in WHERE actid = value",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Which students participate in both Canoeing and Kayaking as their activities? Tell me their student ids.",
        "query": "SELECT stuid FROM Participates_in WHERE actid = value INTERSECT SELECT stuid FROM Participates_in WHERE actid = value",
        "gold_parse": "SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Canoeing' INTERSECT SELECT T1.stuid FROM participates_in AS T1 JOIN activity AS T2 ON T2.actid  =  T2.actid WHERE T2.activity_name  =  'Kayaking'",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of companies and the number of employees they have",
        "query": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "gold_parse": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "Show the names of companies and the number of employees they have",
        "query": "SELECT T1.Name , Count ( * ) FROM company AS T1 JOIN employment AS T2 ON T1.Company_ID = T2.Company_ID GROUP BY T2.Company_ID",
        "gold_parse": "SELECT T3.Name ,  COUNT(*) FROM employment AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID JOIN company AS T3 ON T1.Company_ID  =  T3.Company_ID GROUP BY T3.Name",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "query": "SELECT Party FROM driver WHERE Home_city = value AND Age > value INTERSECT SELECT Party FROM driver WHERE Age > value",
        "gold_parse": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the party with drivers from Hartford and drivers older than 40.",
        "query": "SELECT Party FROM driver WHERE Home_city = value AND Age > value INTERSECT SELECT Party FROM driver WHERE Age > value",
        "gold_parse": "SELECT party FROM driver WHERE home_city  =  'Hartford' AND age  >  40",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "query": "SELECT email_address , phone_number FROM Staff EXCEPT SELECT email_address , phone_number FROM Staff",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are the emails and phone numbers of custoemrs who have never filed a complaint?",
        "query": "SELECT email_address , phone_number FROM Staff EXCEPT SELECT email_address , phone_number FROM Staff",
        "gold_parse": "SELECT email_address ,  phone_number FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM complaints)",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the ids of the faculty members who do not advise any student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "What are the ids of the faculty members who do not advise any student.",
        "query": "SELECT T1.FacID FROM Faculty AS T1 EXCEPT SELECT T2.FacID FROM Faculty_Participates_in AS T2",
        "gold_parse": "SELECT FacID FROM Faculty EXCEPT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the address of the location named \"UK Gallery\".",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T2.Name = value",
        "gold_parse": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the address of the location named \"UK Gallery\".",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T2.Name = value",
        "gold_parse": "SELECT Address FROM LOCATIONS WHERE Location_Name  =  \"UK Gallery\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the average price range of five star hotels that allow pets?",
        "query": "SELECT Avg ( price_range ) FROM Hotels",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What is the average price range of five star hotels that allow pets?",
        "query": "SELECT Avg ( price_range ) FROM Hotels",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the names of all genres in alphabetical oder, together with its ratings.",
        "query": "SELECT g_name FROM genre ORDER BY rating Asc",
        "gold_parse": "SELECT g_name ,  rating FROM genre ORDER BY g_name",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "query": "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 WHERE T2.loan_type = value )",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the average credit score for customers who have never taken a loan?",
        "query": "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 WHERE T2.loan_type = value )",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities that have more than 2 airports sorted by number of airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What are the cities that have more than 2 airports sorted by number of airports?",
        "query": "SELECT city FROM airports GROUP BY city HAVING Count ( * ) > value",
        "gold_parse": "SELECT city FROM airports GROUP BY city HAVING count(*)  >  2 ORDER BY count(*)",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Secretary_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Secretary_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all male British artists?",
        "query": "SELECT artist_name FROM artist WHERE gender = value AND gender = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" AND gender  =  \"Male\"",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "What is the average high temperature for each day of week?",
        "query": "SELECT day_of_week , Avg ( low_temperature ) FROM weekly_weather GROUP BY day_of_week",
        "gold_parse": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "What is the average high temperature for each day of week?",
        "query": "SELECT day_of_week , Avg ( low_temperature ) FROM weekly_weather GROUP BY day_of_week",
        "gold_parse": "SELECT avg(high_temperature) ,  day_of_week FROM weekly_weather GROUP BY day_of_week",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the first and last name of all the faculty members who participated in some activity, together with the number of activities they participated in.",
        "query": "SELECT T2.Fname , T2.Lname , Count ( * ) FROM Faculty_Participates_in AS T1 JOIN Faculty AS T2 ON T1.FacID = T2.FacID GROUP BY T1.FacID",
        "gold_parse": "SELECT  T1.fname ,  T1.lname ,  count(*) ,  T1.FacID FROM Faculty AS T1 JOIN Faculty_participates_in AS T2 ON T1.facID  =  T2.facID GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id WHERE T2.organization_name = value",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Find the last name of the latest contact individual of the organization \"Labour Party\".",
        "query": "SELECT T1.individual_last_name FROM Individuals AS T1 JOIN Organizations AS T2 JOIN Organization_Contact_Individuals AS T3 ON T1.individual_id = T3.individual_id AND T3.organization_id = T2.organization_id WHERE T2.organization_name = value",
        "gold_parse": "SELECT t3.individual_last_name FROM organizations AS t1 JOIN organization_contact_individuals AS t2 ON t1.organization_id  =  t2.organization_id JOIN individuals AS t3 ON t2.individual_id  =  t3.individual_id WHERE t1.organization_name  =  \"Labour Party\" ORDER BY t2.date_contact_to DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone of the customer without any mailshot.",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Customer_Orders AS T2 )",
        "gold_parse": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the name and phone of the customer without any mailshot.",
        "query": "SELECT T1.customer_name , T1.customer_phone FROM Customers AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Customer_Orders AS T2 )",
        "gold_parse": "SELECT customer_name ,  customer_phone FROM customers WHERE customer_id NOT IN (SELECT customer_id FROM mailshot_customers)",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "query": "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc",
        "gold_parse": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What are the names and urls of images, sorted alphabetically?",
        "query": "SELECT document_name , access_count FROM Documents ORDER BY document_name Asc",
        "gold_parse": "SELECT image_name ,  image_url FROM images ORDER BY image_name",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "SELECT Name FROM company WHERE Profits_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the last names of students studying major 50?",
        "query": "SELECT LName FROM Student WHERE Major > value",
        "gold_parse": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the last names of students studying major 50?",
        "query": "SELECT LName FROM Student WHERE Major > value",
        "gold_parse": "SELECT LName FROM STUDENT WHERE Major  =  50",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the type of school and the number of buses for each type.",
        "query": "SELECT Type , Count ( * ) FROM school GROUP BY Type",
        "gold_parse": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the type of school and the number of buses for each type.",
        "query": "SELECT Type , Count ( * ) FROM school GROUP BY Type",
        "gold_parse": "SELECT T2.type ,  count(*) FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T2.type",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "query": "SELECT song_name FROM song",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "query": "SELECT song_name FROM song",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the song that was released in the most recent year?",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id ORDER BY T2.releasedate Desc LIMIT value",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the name of the song that was released in the most recent year?",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id ORDER BY T2.releasedate Desc LIMIT value",
        "gold_parse": "SELECT song_name ,  releasedate FROM song ORDER BY releasedate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer with the worst credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Desc LIMIT value",
        "gold_parse": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer with the worst credit score?",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Desc LIMIT value",
        "gold_parse": "SELECT cust_name FROM customer ORDER BY credit_score LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "query": "SELECT state , acc_type , credit_score FROM customer",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the states, account types, and credit scores for customers who have 0 loans?",
        "query": "SELECT state , acc_type , credit_score FROM customer",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "query": "SELECT shipment_date FROM Shipments WHERE shipment_tracking_number = value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "When was the order placed whose shipment tracking number is 3452? Give me the date.",
        "query": "SELECT shipment_date FROM Shipments WHERE shipment_tracking_number = value",
        "gold_parse": "SELECT T1.date_order_placed FROM orders AS T1 JOIN shipments AS T2 ON T1.order_id = T2.order_id WHERE T2.shipment_tracking_number = 3452",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Shops AS T3 ON T2.Tourist_Attraction_ID = T3.Shop_ID WHERE T3.Shop_Details = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the tourist attractions visited by the tourist whose detail is 'Vincent'.",
        "query": "SELECT T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Shops AS T3 ON T2.Tourist_Attraction_ID = T3.Shop_ID WHERE T3.Shop_Details = value",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITS AS T2 ON T1.Tourist_Attraction_ID  =  T2.Tourist_Attraction_ID JOIN VISITORS AS T3 ON T2.Tourist_ID  =  T3.Tourist_ID WHERE T3.Tourist_Details  =  \"Vincent\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the names of the tourist attractions that is either accessible by bus or at address 254 Ottilie Junction.",
        "query": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID WHERE T1.Address = value OR T1.Address = value",
        "gold_parse": "SELECT T2.Name FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID  =  T2.Location_ID WHERE T1.Address  =  \"254 Ottilie Junction\" OR T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "query": "SELECT T1.artist_name , T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.song_name LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What is the location of the festival with the largest number of audience?",
        "query": "SELECT Location FROM festival_detail GROUP BY Location ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entertainment_awards",
        "question": "What is the location of the festival with the largest number of audience?",
        "query": "SELECT Location FROM festival_detail GROUP BY Location ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT LOCATION FROM festival_detail ORDER BY Num_of_Audience DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the names of the drivers without a school bus.",
        "query": "SELECT Name FROM driver EXCEPT SELECT Name FROM driver",
        "gold_parse": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the names of the drivers without a school bus.",
        "query": "SELECT Name FROM driver EXCEPT SELECT Name FROM driver",
        "gold_parse": "SELECT name FROM driver WHERE driver_id NOT IN (SELECT driver_id FROM school_bus)",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
        "query": "SELECT artist_name FROM song WHERE song_name = value AND rating < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are in mp3 format and have a resolution lower than 1000?",
        "query": "SELECT artist_name FROM song WHERE song_name = value AND rating < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the different names and credit scores of customers who have taken a loan?",
        "query": "SELECT DISTINCT T2.cust_name , T2.credit_score FROM bank AS T1 JOIN customer AS T2 ON T2.branch_ID = T1.branch_ID JOIN loan AS T3 ON T1.branch_ID = T3.branch_ID WHERE T3.loan_type = value",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes for each source airport and the airport name.",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes for each source airport and the airport name.",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who sang the shortest song?",
        "query": "SELECT artist_name FROM song ORDER BY rating Asc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who sang the shortest song?",
        "query": "SELECT artist_name FROM song ORDER BY rating Asc LIMIT value",
        "gold_parse": "SELECT T1.artist_name FROM song AS T1 JOIN files AS T2 ON T1.f_id  =  T2.f_id ORDER BY T2.duration LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the total number of available hotels.",
        "query": "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings",
        "gold_parse": "SELECT count(*) FROM HOTELS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the total number of available hotels.",
        "query": "SELECT Count ( * ) FROM Ref_Hotel_Star_Ratings",
        "gold_parse": "SELECT count(*) FROM HOTELS",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state which has the most number of customers.",
        "query": "SELECT state FROM customer GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state which has the most number of customers.",
        "query": "SELECT state FROM customer GROUP BY state ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT state FROM bank GROUP BY state ORDER BY sum(no_of_customers) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many distinct names are associated with all the photos?",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "How many distinct names are associated with all the photos?",
        "query": "SELECT Count ( DISTINCT Name ) FROM Tourist_Attractions",
        "gold_parse": "SELECT count(DISTINCT Name) FROM PHOTOS",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "query": "SELECT T1.Name , T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = value OR T1.Name = value",
        "gold_parse": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions and the dates when the tourists named Vincent or Vivian visited there?",
        "query": "SELECT T1.Name , T2.Visit_Date FROM Tourist_Attractions AS T1 JOIN Visits AS T2 ON T1.Tourist_Attraction_ID = T2.Tourist_Attraction_ID WHERE T1.Name = value OR T1.Name = value",
        "gold_parse": "SELECT T1.Name ,  T3.Visit_Date FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Vincent\" OR T2.Tourist_Details  =  \"Vivian\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "query": "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the description and code of the attraction type most tourist attractions belong to.",
        "query": "SELECT Attraction_Type_Description , Attraction_Type_Code FROM Ref_Attraction_Types GROUP BY Attraction_Type_Code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.Attraction_Type_Description ,  T2.Attraction_Type_Code FROM Ref_Attraction_Types AS T1 JOIN Tourist_Attractions AS T2 ON T1.Attraction_Type_Code  =  T2.Attraction_Type_Code GROUP BY T2.Attraction_Type_Code ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find all students taught by MARROTTE KIRK. Output first and last names of students.",
        "query": "SELECT FirstName , LastName FROM list WHERE FirstName = value AND LastName = value",
        "gold_parse": "SELECT T1.firstname ,  T1.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T2.firstname  =  \"MARROTTE\" AND T2.lastname  =  \"KIRK\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the average credit score of the customers who do not have any loan.",
        "query": "SELECT Avg ( T1.credit_score ) FROM customer AS T1 WHERE T1.cust_name NOT IN ( SELECT T2.cust_ID FROM loan AS T2 )",
        "gold_parse": "SELECT avg(credit_score) FROM customer WHERE cust_id NOT IN (SELECT cust_id FROM loan)",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the distinct Advisor of students who have treasurer votes in the spring election cycle.",
        "query": "SELECT DISTINCT Advisor FROM Student WHERE Major = value",
        "gold_parse": "SELECT DISTINCT T1.Advisor FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.Treasurer_Vote WHERE T2.Election_Cycle  =  \"Spring\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which tourist attractions are related to royal family? Tell me their details and how we can get there.",
        "query": "SELECT T3.Market_Details , T1.Address FROM Locations AS T1 JOIN Tourist_Attractions AS T2 ON T1.Location_ID = T2.Location_ID JOIN Street_Markets AS T3 ON T2.Tourist_Attraction_ID = T3.Market_ID WHERE T1.Address = value",
        "gold_parse": "SELECT T1.Royal_Family_Details ,  T2.How_to_Get_There FROM ROYAL_FAMILY AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Royal_Family_ID  =  T2.Tourist_Attraction_ID",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < value",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of banks that have loaned money to customers with credit scores below 100?",
        "query": "SELECT T1.bname FROM bank AS T1 JOIN customer AS T2 ON T1.branch_ID = T2.branch_ID WHERE T2.credit_score < value",
        "gold_parse": "SELECT T2.bname FROM loan AS T1 JOIN bank AS T2 ON T1.branch_id  =  T2.branch_id JOIN customer AS T3 ON T1.cust_id  =  T3.cust_id WHERE T3.credit_score  <  100",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name",
        "gold_parse": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "For each file format, return the number of artists who released songs in that format.",
        "query": "SELECT artist_name , Count ( * ) FROM files GROUP BY artist_name",
        "gold_parse": "SELECT count(*) ,  formats FROM files GROUP BY formats",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "query": "SELECT T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.dst_ap ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the airport that is the destination of the most number of routes that start in China?",
        "query": "SELECT T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value GROUP BY T1.dst_ap ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.country  =  'China' GROUP BY T1.name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the buildings that have at least 10 professors.",
        "query": "SELECT Building FROM Faculty WHERE Rank > = value",
        "gold_parse": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show all the buildings that have at least 10 professors.",
        "query": "SELECT Building FROM Faculty WHERE Rank > = value",
        "gold_parse": "SELECT building FROM Faculty WHERE rank  =  \"Professor\" GROUP BY building HAVING count(*)  >=  10",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the total account balance of each customer from Utah or Texas.",
        "query": "SELECT Sum ( credit_score ) FROM customer WHERE state = value OR state = value",
        "gold_parse": "SELECT sum(acc_bal) FROM customer WHERE state  =  'Utah' OR state  =  'Texas'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the id of routes whose source and destination airports are in the United States.",
        "query": "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the id of routes whose source and destination airports are in the United States.",
        "query": "SELECT T1.rid , T1.dst_ap FROM routes AS T1 JOIN airports AS T2 ON T1.dst_apid = T2.apid WHERE T2.country = value",
        "gold_parse": "SELECT rid FROM routes WHERE dst_apid IN (SELECT apid FROM airports WHERE country  =  'United States') AND src_apid IN (SELECT apid FROM airports WHERE country  =  'United States')",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Major = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "How many male (sex is M) students have class senator votes in the fall election cycle?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value AND Major = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "query": "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT value",
        "gold_parse": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the song in the volume with the maximum weeks on top?",
        "query": "SELECT T2.Volume FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume ORDER BY T1.Weeks_on_Top Desc LIMIT value",
        "gold_parse": "SELECT Song FROM volume ORDER BY Weeks_on_Top DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM CHECKING AS T3 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and account balance of the customers who have loans with a total amount of more than 5000.",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend ! = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend ! = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend ! = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT problem_log_id , log_entry_date FROM Problem_Log WHERE problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT problem_log_id , log_entry_date FROM Problem_Log WHERE problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration LIKE value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration LIKE value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY Rank",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Issue_Date , T2.Music_Festival FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.address , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.address , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.languages = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "query": "SELECT Name FROM Tourist_Attractions GROUP BY Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Which transportation method is used the most often to get to tourist attractions?",
        "query": "SELECT Name FROM Tourist_Attractions GROUP BY Location_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT How_to_Get_There FROM Tourist_Attractions GROUP BY How_to_Get_There ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "query": "SELECT Max ( Gold ) , Min ( Silver ) FROM club_rank",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What are the maximum and minimum number of silver medals for clubs.",
        "query": "SELECT Max ( Gold ) , Min ( Silver ) FROM club_rank",
        "gold_parse": "SELECT max(Silver) ,  min(Silver) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Issue_Date , Song FROM volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Issue_Date , Song FROM volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > = value",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > = value",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "query": "SELECT T2.Date_in_Locaton_To FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        "gold_parse": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "query": "SELECT T2.Date_in_Locaton_To FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        "gold_parse": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What is the date when the document \"Marry CV\" was stored?",
        "query": "SELECT T2.Date_in_Locaton_To FROM All_Documents AS T1 JOIN Document_Locations AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Name = value",
        "gold_parse": "SELECT date_stored FROM All_documents WHERE Document_name  =  \"Marry CV\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "query": "SELECT Min ( Order_Quantity ) , Sum ( Order_Quantity ) FROM Invoice_Items",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show the minimum, average, maximum order quantity of all invoices.",
        "query": "SELECT Min ( Order_Quantity ) , Sum ( Order_Quantity ) FROM Invoice_Items",
        "gold_parse": "SELECT min(Order_Quantity) ,  avg(Order_Quantity) ,  max(Order_Quantity) FROM INVOICES",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Date_of_ceremony , Date_of_ceremony FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Date_of_ceremony , Date_of_ceremony FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "query": "SELECT Avg ( other_customer_details ) FROM Customers",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the average order quantity per order.",
        "query": "SELECT Avg ( other_customer_details ) FROM Customers",
        "gold_parse": "SELECT avg(order_quantity) FROM order_items",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.shipping_method_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.shipping_method_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the names of customers having an order with shipping method FedEx and order status Paid.",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.shipping_method_code = value INTERSECT SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.order_status_code = value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE shipping_method_code  =  'FedEx' AND order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population < value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population < value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which delegates are from counties with population smaller than 100000?",
        "query": "SELECT T2.Committee FROM county AS T1 JOIN election AS T2 ON T1.County_Id = T2.District WHERE T1.Population < value",
        "gold_parse": "SELECT T2.Delegate FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District WHERE T1.Population  <  100000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Business_Rates AS T2",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Business_Rates AS T2",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "local_govt_mdm",
        "question": "Which cmi cross reference id is not related to any parking taxes?",
        "query": "SELECT T1.cmi_cross_ref_id FROM CMI_Cross_References AS T1 EXCEPT SELECT T2.cmi_cross_ref_id FROM Business_Rates AS T2",
        "gold_parse": "SELECT cmi_cross_ref_id FROM cmi_cross_references EXCEPT SELECT cmi_cross_ref_id FROM parking_fines",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates with a maximum temperature higher than 85?",
        "query": "SELECT date FROM weather WHERE min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "query": "SELECT pName FROM Player ORDER BY pName Asc",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "query": "SELECT pName FROM Player ORDER BY pName Asc",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "query": "SELECT pName FROM Player ORDER BY pName Asc",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of all students who tried out in alphabetical order?",
        "query": "SELECT pName FROM Player ORDER BY pName Asc",
        "gold_parse": "SELECT T1.pName FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID ORDER BY T1.pName",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T1.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T1.Name , T2.Owner , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR rental_rate < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR rental_rate < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT T2.protein_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT T2.protein_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT T2.protein_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Porphyria FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT Porphyria FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , Age FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , Age FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , Age FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities served as a host city after 2010?",
        "query": "SELECT City FROM city WHERE Regional_Population > value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities served as a host city after 2010?",
        "query": "SELECT City FROM city WHERE Regional_Population > value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Which cities served as a host city after 2010?",
        "query": "SELECT City FROM city WHERE Regional_Population > value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city WHERE T2.year  >  2010",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Age = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Age = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Age = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by schools founded before 1890 and schools founded after 1900",
        "query": "SELECT Boys_or_Girls FROM school WHERE Founded > value INTERSECT SELECT Denomination FROM school WHERE Founded < value",
        "gold_parse": "SELECT Denomination FROM school WHERE Founded  <  1890 INTERSECT SELECT Denomination FROM school WHERE Founded  >  1900",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "query": "SELECT EMPLOYEE_ID FROM employees",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "query": "SELECT EMPLOYEE_ID FROM employees",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "query": "SELECT Name , Name FROM Products ORDER BY Price Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of each manufacturer along with the name and price of its most expensive product.",
        "query": "SELECT Name , Name FROM Products ORDER BY Price Desc LIMIT value",
        "gold_parse": "SELECT T1.Name ,  max(T1.Price) ,  T2.name FROM products AS T1 JOIN Manufacturers AS T2 ON T1.manufacturer  =  T2.code GROUP BY T2.name",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE wind_dir_degrees > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE wind_dir_degrees > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE wind_dir_degrees > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_from ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_from ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Cows > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Cows > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "SELECT Nominee FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "SELECT pName , HS FROM Player WHERE yCard = value",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "SELECT pName , HS FROM Player WHERE yCard = value",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "SELECT pName , HS FROM Player WHERE yCard = value",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and hours spent practicing of every student who received a yes at tryouts?",
        "query": "SELECT pName , HS FROM Player WHERE yCard = value",
        "gold_parse": "SELECT T1.pName ,  T1.HS FROM player AS T1 JOIN tryout AS T2 ON T1.pID  =  T2.pID WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Find the level name of the catalog with the lowest price (in USD).",
        "query": "SELECT height FROM Catalog_Contents ORDER BY price_in_dollars Asc LIMIT value",
        "gold_parse": "SELECT t2.catalog_level_name FROM catalog_contents AS t1 JOIN catalog_structure AS t2 ON t1.catalog_level_number  =  t2.catalog_level_number ORDER BY t1.price_in_dollars LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find all the ids and dates of the logs for the problem whose id is 10.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_type_code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) > value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) > value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE zip_code = value )",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the ids of all trips that had a duration as long as the average trip duration in the zip code 94103?",
        "query": "SELECT id FROM trip WHERE duration > ( SELECT Avg ( duration ) FROM trip WHERE zip_code = value )",
        "gold_parse": "SELECT id FROM trip WHERE duration  >=  (SELECT avg(duration) FROM trip WHERE zip_code  =  94103)",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "query": "SELECT T2.Name , T2.Price FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > = value ORDER BY T2.Price Desc",
        "gold_parse": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name and price of all products with a price larger than or equal to $180, and sort first by price (in descending order), and then by name  (in ascending order).",
        "query": "SELECT T2.Name , T2.Price FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T1.Revenue > = value ORDER BY T2.Price Desc",
        "gold_parse": "SELECT name ,  price FROM products WHERE price  >=  180 ORDER BY price DESC ,  name ASC",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "query": "SELECT Document_Type_Code , Document_Type_Description FROM Ref_Document_Types",
        "gold_parse": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "query": "SELECT Document_Type_Code , Document_Type_Description FROM Ref_Document_Types",
        "gold_parse": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Which customers made orders between 2009-01-01 and 2010-01-01? Find their names.",
        "query": "SELECT customer_name FROM Customers WHERE customer_details BETWEEN value AND value",
        "gold_parse": "SELECT T1.customer_name FROM customers AS T1 JOIN orders AS T2 ON T1.customer_id = T2.customer_id WHERE T2.date_order_placed >= \"2009-01-01\" AND T2.date_order_placed <= \"2010-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the id and star rating of each hotel, ordered by its price from low to high.",
        "query": "SELECT T2.hotel_id , T1.star_rating_description , T1.star_rating_description FROM Ref_Hotel_Star_Ratings AS T1 JOIN Hotels AS T2 ON T1.star_rating_code = T2.star_rating_code ORDER BY T2.price_range Asc",
        "gold_parse": "SELECT hotel_id ,  star_rating_code FROM HOTELS ORDER BY price_range ASC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "query": "SELECT Avg ( min_sea_level_pressure_inches ) FROM weather",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the zip code in which the average mean sea level pressure is the lowest?",
        "query": "SELECT Avg ( min_sea_level_pressure_inches ) FROM weather",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code ORDER BY avg(mean_sea_level_pressure_inches) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of storms in which at least 1 person died.",
        "query": "SELECT Count ( * ) FROM storm WHERE Name > = value",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of storms in which at least 1 person died.",
        "query": "SELECT Count ( * ) FROM storm WHERE Name > = value",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "correctness": 0
    },
    {
        "db_id": "storm_record",
        "question": "Count the number of storms in which at least 1 person died.",
        "query": "SELECT Count ( * ) FROM storm WHERE Name > = value",
        "gold_parse": "SELECT count(*) FROM storm WHERE Number_Deaths  >  0",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_id > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_name FROM Catalogs WHERE catalog_id > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T2.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , price_in_euros FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , price_in_euros FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , price_in_euros FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_meters Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_meters Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_meters Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE enr > value OR state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE enr > value OR state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE enr > value OR state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.problem_id > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "query": "SELECT CName FROM Course WHERE Credits = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "query": "SELECT CName FROM Course WHERE Credits = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the names of courses that give either 3 credits, or 1 credit and 4 hours?",
        "query": "SELECT CName FROM Course WHERE Credits = value UNION SELECT CName FROM Course WHERE Days = value",
        "gold_parse": "SELECT CName FROM COURSE WHERE Credits  =  3 UNION SELECT CName FROM COURSE WHERE Credits  =  1 AND Hours  =  4",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "query": "SELECT T2.Project_ID , T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What is the project id and detail for the project with at least two documents?",
        "query": "SELECT T2.Project_ID , T1.Project_Details FROM Projects AS T1 JOIN Documents AS T2 ON T1.Project_ID = T2.Project_ID GROUP BY T1.Project_ID HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.project_id ,  T1.project_details FROM Projects AS T1 JOIN Documents AS T2 ON T1.project_id  =  T2.project_id GROUP BY T1.project_id HAVING count(*)  >  2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name (first and last name) and salary for all employees who does not have any value for commission?",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees EXCEPT SELECT FIRST_NAME , LAST_NAME FROM employees WHERE COMMISSION_PCT = value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM  employees WHERE commission_pct  =  \"null\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "query": "SELECT problem_id FROM Problems",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "query": "SELECT problem_id FROM Problems",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Find the ids of the problems reported after the date of any problems reported by the staff Rylan Homenick.",
        "query": "SELECT problem_id FROM Problems",
        "gold_parse": "SELECT T1.problem_id FROM problems AS T1 JOIN staff AS T2 ON T1.reported_by_staff_id = T2.staff_id WHERE date_problem_reported  >  ( SELECT max(date_problem_reported) FROM problems AS T3 JOIN staff AS T4 ON T3.reported_by_staff_id = T4.staff_id WHERE T4.staff_first_name = \"Rylan\" AND T4.staff_last_name = \"Homenick\" )",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "SELECT order_id , customer_id , order_date FROM Customer_Orders WHERE order_status_code = value ORDER BY order_date Asc",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "List the order id, customer id for orders in Cancelled status, ordered by their order dates.",
        "query": "SELECT order_id , customer_id , order_date FROM Customer_Orders WHERE order_status_code = value ORDER BY order_date Asc",
        "gold_parse": "SELECT order_id ,  customer_id FROM customer_orders WHERE order_status_code  =   \"Cancelled\" ORDER BY order_date",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "query": "SELECT Name FROM Patient",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "query": "SELECT Name FROM Patient",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of patients who have made appointments.",
        "query": "SELECT Name FROM Patient",
        "gold_parse": "SELECT name FROM appointment AS T1 JOIN patient AS T2 ON T1.patient  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_2 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "query": "SELECT Count ( * ) FROM wine WHERE Winery = value",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "query": "SELECT Count ( * ) FROM wine WHERE Winery = value",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "How many appelations are in Napa Country?",
        "query": "SELECT Count ( * ) FROM wine WHERE Winery = value",
        "gold_parse": "SELECT count(*) FROM APPELLATIONS WHERE County  =  \"Napa\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT Player FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value AND basePrice > value",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "Find all the rooms that have a price higher than 160 and can accommodate more than 2 people. Report room names and ids.",
        "query": "SELECT roomName , decor FROM Rooms WHERE basePrice > value AND basePrice > value",
        "gold_parse": "SELECT roomName ,  RoomId FROM Rooms WHERE basePrice  >  160 AND maxOccupancy  >  2",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Consider_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Consider_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Consider_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average rating of songs for each language?",
        "query": "SELECT Avg ( T2.rating ) , T2.languages FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is GROUP BY T1.g_name",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT T1.start_station_id FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > value AND T2.events = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT T1.start_station_id FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > value AND T2.events = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection = value AND Connection ! = value",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection = value AND Connection ! = value",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "query": "SELECT Avg ( rating ) , languages FROM song GROUP BY genre_is",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "query": "SELECT Avg ( rating ) , languages FROM song GROUP BY genre_is",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the average song rating for each language?",
        "query": "SELECT Avg ( rating ) , languages FROM song GROUP BY genre_is",
        "gold_parse": "SELECT avg(rating) ,  languages FROM song GROUP BY languages",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value AND Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value AND Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Advisor = value AND Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Give the number of students living in either HKG or CHI.",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value OR city_code = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Give the number of students living in either HKG or CHI.",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value OR city_code = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Give the number of students living in either HKG or CHI.",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value OR city_code = value",
        "gold_parse": "SELECT count(*) FROM Student WHERE city_code  =  \"HKG\" OR city_code  =  \"CHI\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Date_of_ceremony FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Date_of_ceremony FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY > = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY > = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "SELECT Total_Horses , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "SELECT Total_Horses , Sum ( Sheep_and_Goats ) FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "SELECT f_id , song_name , artist_name FROM song ORDER BY rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "SELECT f_id , song_name , artist_name FROM song ORDER BY rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of students minoring in department 140?",
        "query": "SELECT Fname , LName FROM Student WHERE Major = value",
        "gold_parse": "SELECT T2.Fname ,  T2.Lname FROM MINOR_IN AS T1 JOIN STUDENT AS T2 ON T1.StuID  =  T2.StuID WHERE T1.DNO  =  140",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Physician ORDER BY Name Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Physician ORDER BY Name Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT T2.access_count , Avg ( T2.access_count ) FROM Document_Structures AS T1 JOIN Documents AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT T2.access_count , Avg ( T2.access_count ) FROM Document_Structures AS T1 JOIN Documents AS T2 ON T1.document_structure_code = T2.document_structure_code GROUP BY T1.document_structure_code ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For each product that has problems, find the number of problems reported after 1986-11-13 and the product id?",
        "query": "SELECT Count ( * ) , T1.product_id FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id WHERE T2.product_id > value GROUP BY T1.product_id",
        "gold_parse": "SELECT count(*) ,  T2.product_id FROM problems AS T1 JOIN product AS T2 ON T1.product_id = T2.product_id WHERE T1.date_problem_reported > \"1986-11-13\" GROUP BY T2.product_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MAX_SALARY ) FROM jobs AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T1.EMPLOYEE_ID FROM employees AS T1 WHERE T1.SALARY > ( SELECT Avg ( T2.MAX_SALARY ) FROM jobs AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "query": "SELECT DISTINCT rank FROM results",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "query": "SELECT DISTINCT rank FROM results",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song WHERE languages = value OR languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE max_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE max_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE max_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.other_asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.other_asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the username and passwords of users with the most popular role.",
        "query": "SELECT user_name , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "List all the username and passwords of users with the most popular role.",
        "query": "SELECT user_name , user_id FROM Users GROUP BY user_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT user_name ,  password FROM users GROUP BY role_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN value AND value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT FIRST_NAME , LAST_NAME FROM employees WHERE SALARY BETWEEN value AND value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.Budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.Budgeted , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < value",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < value",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "query": "SELECT Governor , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "query": "SELECT Governor , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "query": "SELECT Name , Headquarter , Founder FROM Manufacturers ORDER BY Revenue Desc",
        "gold_parse": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "query": "SELECT Name , Headquarter , Founder FROM Manufacturers ORDER BY Revenue Desc",
        "gold_parse": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name, headquarter and revenue of all manufacturers sorted by their revenue in the descending order.",
        "query": "SELECT Name , Headquarter , Founder FROM Manufacturers ORDER BY Revenue Desc",
        "gold_parse": "SELECT name ,  headquarter ,  revenue FROM manufacturers ORDER BY revenue DESC",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.height > value INTERSECT SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.player_api_id FROM Player_Attributes AS T1 JOIN Player AS T2 ON T1.player_fifa_api_id = T2.player_fifa_api_id WHERE T2.height > value INTERSECT SELECT T1.player_api_id FROM Player_Attributes AS T1 WHERE T1.overall_rating < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT T2.Sex , T1.Consider_rate , T1.Oppose_rate FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT T2.Sex , T1.Consider_rate , T1.Oppose_rate FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT T2.Sex , T1.Consider_rate , T1.Oppose_rate FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Physician GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Physician GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Physician GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_address FROM Customers INTERSECT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_address FROM Customers INTERSECT SELECT customer_name FROM Customers",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value AND Sex = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Count the number of male students who had class senator votes in the fall election cycle.",
        "query": "SELECT Count ( * ) FROM Student WHERE Major = value AND Sex = value",
        "gold_parse": "SELECT count(*) FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  Class_Senator_Vote WHERE T1.Sex  =  \"M\" AND T2.Election_Cycle  =  \"Fall\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT other_asset_details FROM Assets ORDER BY other_asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT other_asset_details FROM Assets ORDER BY other_asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "query": "SELECT date FROM weather ORDER BY max_sea_level_pressure_inches Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "query": "SELECT date FROM weather ORDER BY max_sea_level_pressure_inches Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value OR characteristic_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the products that have the color description \"white\" or have the characteristic name \"hot\".",
        "query": "SELECT Count ( * ) FROM Characteristics WHERE characteristic_name = value OR characteristic_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id JOIN ref_colors AS t4 ON t1.color_code  =  t4.color_code WHERE t4.color_description  =  \"white\" OR t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID JOIN Services AS T3 ON T2.Workshop_Group_ID = T3.Workshop_Group_ID WHERE T3.Product_Name = value",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the city the store named \"FJA Filming\" is in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T1.Address_ID = T2.Address_ID JOIN Services AS T3 ON T2.Workshop_Group_ID = T3.Workshop_Group_ID WHERE T3.Product_Name = value",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Stores AS T2 ON T1.Address_ID  =  T2.Address_ID WHERE T2.Store_Name  =  \"FJA Filming\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the founded year of the newest non public school.",
        "query": "SELECT Founded FROM university ORDER BY Founded Desc LIMIT value",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the founded year of the newest non public school.",
        "query": "SELECT Founded FROM university ORDER BY Founded Desc LIMIT value",
        "gold_parse": "SELECT founded FROM university WHERE affiliation != 'Public' ORDER BY founded DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Position FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT T2.SALARY , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT T2.SALARY , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT T2.SALARY , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T2.other_asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T2.other_asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information about the department Marketing.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM  departments WHERE department_name  =  'Marketing'",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "query": "SELECT Name , Seating FROM track WHERE Year_Opened > value ORDER BY Name Asc",
        "gold_parse": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "query": "SELECT Name , Seating FROM track WHERE Year_Opened > value ORDER BY Name Asc",
        "gold_parse": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "correctness": 0
    },
    {
        "db_id": "race_track",
        "question": "Show names and seatings, ordered by seating for all tracks opened after 2000.",
        "query": "SELECT Name , Seating FROM track WHERE Year_Opened > value ORDER BY Name Asc",
        "gold_parse": "SELECT name ,  seating FROM track WHERE year_opened  >  2000 ORDER BY seating",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "SELECT meter_600 , meter_200 FROM swimmer WHERE Nationality = value",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "SELECT meter_600 , meter_200 FROM swimmer WHERE Nationality = value",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "query": "SELECT decor FROM Rooms WHERE bedType = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "What is the decor of room Recluse and defiance?",
        "query": "SELECT decor FROM Rooms WHERE bedType = value INTERSECT SELECT decor FROM Rooms WHERE bedType = value",
        "gold_parse": "SELECT decor FROM Rooms WHERE roomName  =  \"Recluse and defiance\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What document type codes do we have?",
        "query": "SELECT document_type_code FROM Documents",
        "gold_parse": "SELECT document_type_code FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What document type codes do we have?",
        "query": "SELECT document_type_code FROM Documents",
        "gold_parse": "SELECT document_type_code FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Control_Systems",
        "question": "What document type codes do we have?",
        "query": "SELECT document_type_code FROM Documents",
        "gold_parse": "SELECT document_type_code FROM Ref_Document_Types",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT * FROM medicine AS T2 )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme AS T1 WHERE T1.id NOT IN ( SELECT * FROM medicine AS T2 )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND end_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND end_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price > value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the wines that have prices lower than 50 and have appelations in Monterey county?",
        "query": "SELECT T2.Winery FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price > value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND start_date = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND start_date = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > ( SELECT Avg ( T1.salary ) FROM employee AS T1 )",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "query": "SELECT city FROM station ORDER BY long Desc",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "query": "SELECT city FROM station ORDER BY long Desc",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "query": "SELECT Count ( * ) FROM musical",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "How many actors have appeared in each musical?",
        "query": "SELECT Count ( * ) FROM musical",
        "gold_parse": "SELECT T2.Name ,  COUNT(*) FROM actor AS T1 JOIN musical AS T2 ON T1.Musical_ID  =  T2.Musical_ID GROUP BY T1.Musical_ID",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.EmployeeId NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.EmployeeId NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Score BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the distinct wineries which produce wines costing between 50 and 100?",
        "query": "SELECT DISTINCT Winery FROM wine WHERE Score BETWEEN value AND value",
        "gold_parse": "SELECT DISTINCT Winery FROM WINE WHERE Price BETWEEN 50 AND 100",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "query": "SELECT city FROM station GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "List all the cities in a decreasing order of each city's stations' highest latitude.",
        "query": "SELECT city FROM station GROUP BY city ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT city FROM station GROUP BY city ORDER BY max(lat) DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T1.MAX_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Store_Name = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "query": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the average distance and average price for flights from Los Angeles.",
        "query": "SELECT Avg ( distance ) , Avg ( price ) FROM flight WHERE destination = value",
        "gold_parse": "SELECT avg(distance) ,  avg(price) FROM Flight WHERE origin  =  \"Los Angeles\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Consider_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Consider_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Consider_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT Draft_Class FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT Draft_Class FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Candidate_ID , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T2.Music_Festival , T1.Issue_Date FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T2.Music_Festival , T1.Issue_Date FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "query": "SELECT T2.FirstName FROM list AS T1 JOIN teachers AS T2 WHERE T1.Classroom = value",
        "gold_parse": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Find the first names of all the teachers that teach in classroom 110.",
        "query": "SELECT T2.FirstName FROM list AS T1 JOIN teachers AS T2 WHERE T1.Classroom = value",
        "gold_parse": "SELECT firstname FROM teachers WHERE classroom  =  110",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value AND Result = value",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value AND Result = value",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "Return the dates of ceremony corresponding to music festivals that had the category \"Best Song\" and result \"Awarded\".",
        "query": "SELECT Music_Festival FROM music_festival WHERE Category = value AND Result = value",
        "gold_parse": "SELECT Date_of_ceremony FROM music_festival WHERE Category  =  \"Best Song\" AND RESULT  =  \"Awarded\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.total_budget_percent_invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.total_budget_percent_invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "query": "SELECT Fname FROM Student WHERE Age > = value AND Age < = value",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the first name of students living in city PHL whose age is between 20 and 25.",
        "query": "SELECT Fname FROM Student WHERE Age > = value AND Age < = value",
        "gold_parse": "SELECT fname FROM student WHERE city_code  =  'PHL' AND age BETWEEN 20 AND 25",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Entrepreneur_ID FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Famous_Release_date > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Famous_Release_date > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT * FROM Assets ORDER BY asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT * FROM Assets ORDER BY asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Price > value OR T2.Price < value",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Select the name of the products with a price less than or equal to $200.",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 JOIN Products AS T2 ON T1.Code = T2.Manufacturer WHERE T2.Price > value OR T2.Price < value",
        "gold_parse": "SELECT name FROM products WHERE price  <=  200",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T2.languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = value",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = value",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = value",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name of customers who do not have a loan with a type of Mortgages.",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type = value",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id WHERE T2.loan_type  =  'Mortgages'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 EXCEPT SELECT T2.Name FROM Products AS T2",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT T1.Name FROM Manufacturers AS T1 EXCEPT SELECT T2.Name FROM Products AS T2",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , IATA FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , IATA FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , name FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , name FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Famous_Release_date , T3.Date_of_ceremony FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Famous_Release_date , T3.Date_of_ceremony FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_meters ) FROM bridge WHERE name = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_meters ) FROM bridge WHERE name = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "SELECT Author , Author FROM submission ORDER BY Scores Asc",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "SELECT Author , Author FROM submission ORDER BY Scores Asc",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "correctness": 0
    },
    {
        "db_id": "workshop_paper",
        "question": "Find the author for each submission and list them in ascending order of submission score.",
        "query": "SELECT Author , Author FROM submission ORDER BY Scores Asc",
        "gold_parse": "SELECT Author FROM submission ORDER BY Scores ASC",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Max ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Max ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , SALARY FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , SALARY FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration = value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of all songs that are approximately 4 minutes long or are in English?",
        "query": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T1.duration = value OR T1.duration = value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.duration LIKE \"4:%\" UNION SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T2.Date_of_ceremony , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T2.Date_of_ceremony , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_humidity > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_humidity > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "correctness": 0
    },
    {
        "db_id": "election_representative",
        "question": "List the votes of elections in descending order.",
        "query": "SELECT Votes FROM election ORDER BY Vote_Percent Desc",
        "gold_parse": "SELECT Votes FROM election ORDER BY Votes DESC",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Nurse GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Nurse GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Nurse GROUP BY Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name ORDER BY Sum ( credit_score ) Desc LIMIT value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What is the name of the customer who has greatest total loan amount?",
        "query": "SELECT cust_name FROM customer GROUP BY cust_name ORDER BY Sum ( credit_score ) Desc LIMIT value",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_meters ) FROM bridge WHERE location = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_meters ) FROM bridge WHERE location = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Consider_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Consider_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Consider_rate , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as governor most frequently?",
        "query": "SELECT Lieutenant_Governor FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which people severed as governor most frequently?",
        "query": "SELECT Lieutenant_Governor FROM party GROUP BY Comptroller ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Governor FROM party GROUP BY Governor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY All_Games_Percent Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY All_Games_Percent Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "What are the names of all the teams in the basketball competition, sorted by all home scores in descending order?",
        "query": "SELECT Team_Name FROM basketball_match ORDER BY All_Games_Percent Desc",
        "gold_parse": "SELECT team_name FROM basketball_match ORDER BY All_Home DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_humidity > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_humidity > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_humidity > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value AND Age = value",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value AND Age = value",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the full names and ages for all female students whose sex is F?",
        "query": "SELECT Fname , LName FROM Student WHERE Sex = value AND Age = value",
        "gold_parse": "SELECT Fname ,  Lname ,  Age FROM Student WHERE Sex  =  'F'",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "query": "SELECT Boys_or_Girls FROM school GROUP BY School_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination shared by more than one school.",
        "query": "SELECT Boys_or_Girls FROM school GROUP BY School_ID HAVING Count ( * ) > value",
        "gold_parse": "SELECT Denomination FROM school GROUP BY Denomination HAVING COUNT(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , MANAGER_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , MANAGER_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "query": "SELECT Count ( * ) FROM airlines WHERE active = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes that have destination John F Kennedy International Airport.",
        "query": "SELECT Count ( * ) FROM airlines WHERE active = value",
        "gold_parse": "SELECT count(*) FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.dst_apid WHERE T1.name  =  'John F Kennedy International Airport'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many tests have result \"Fail\"?",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "gold_parse": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many tests have result \"Fail\"?",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "gold_parse": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "How many tests have result \"Fail\"?",
        "query": "SELECT Count ( * ) FROM Courses WHERE course_name = value",
        "gold_parse": "SELECT count(*) FROM Student_Tests_Taken WHERE test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY > value INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY > value INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "query": "SELECT Count ( * ) FROM camera_lens WHERE max_aperture > value",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "query": "SELECT Count ( * ) FROM camera_lens WHERE max_aperture > value",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "correctness": 0
    },
    {
        "db_id": "mountain_photos",
        "question": "How many camera lenses have a focal length longer than 15 mm?",
        "query": "SELECT Count ( * ) FROM camera_lens WHERE max_aperture > value",
        "gold_parse": "SELECT count(*) FROM camera_lens WHERE focal_length_mm  >  15",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the the names of the tourist attractions that the tourist named Alison visited but Rosalind did not visit.",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Alison\" EXCEPT SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN VISITORS AS T2 JOIN VISITS AS T3 ON T1.Tourist_Attraction_ID  =  T3.Tourist_Attraction_ID AND T2.Tourist_ID  =  T3.Tourist_ID WHERE T2.Tourist_Details  =  \"Rosalind\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "query": "SELECT DISTINCT supplier_name FROM Suppliers",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of products purchased by at least two different customers?",
        "query": "SELECT DISTINCT supplier_name FROM Suppliers",
        "gold_parse": "SELECT DISTINCT T3.product_name FROM customer_orders AS T1 JOIN order_items AS T2 ON T1.order_id  =  T2.order_id JOIN products AS T3 ON T2.product_id  =  T3.product_id GROUP BY T3.product_id HAVING COUNT (DISTINCT T1.customer_id)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "query": "SELECT DName FROM Department EXCEPT SELECT DName FROM Department",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "query": "SELECT DName FROM Department EXCEPT SELECT DName FROM Department",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What is the name of the department htat has no students minoring in it?",
        "query": "SELECT DName FROM Department EXCEPT SELECT DName FROM Department",
        "gold_parse": "SELECT DName FROM DEPARTMENT EXCEPT SELECT T1.DName FROM DEPARTMENT AS T1 JOIN MINOR_IN AS T2 ON T1.DNO  =  T2.DNO",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T2.order_item_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T2.order_item_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT T2.product_id , T1.customer_id FROM Customer_Orders AS T1 JOIN Order_Items AS T2 ON T1.order_id = T2.order_id WHERE T1.order_status_code = value OR T2.order_item_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.thing_id , T1.service_type_code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.thing_id , T1.service_type_code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.thing_id , T1.service_type_code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "query": "SELECT name FROM PersonFriend WHERE year = ( SELECT Min ( year ) FROM PersonFriend )",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the names of all people who are friends with Alice for the shortest amount of time?",
        "query": "SELECT name FROM PersonFriend WHERE year = ( SELECT Min ( year ) FROM PersonFriend )",
        "gold_parse": "SELECT name FROM PersonFriend WHERE friend =  'Alice' AND YEAR  =  (SELECT min(YEAR) FROM PersonFriend WHERE friend =  'Alice')",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT Name FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT Name FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "query": "SELECT Attorney_General , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "For each delegate, find the names of the party they are part of.",
        "query": "SELECT Attorney_General , Party FROM party",
        "gold_parse": "SELECT T1.Delegate ,  T2.Party FROM election AS T1 JOIN party AS T2 ON T1.Party  =  T2.Party_ID",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > value",
        "gold_parse": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > value",
        "gold_parse": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > value",
        "gold_parse": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What is the name of the browser that became compatible with the accelerator 'CProxy' after year 1998 ?",
        "query": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id = T2.browser_id WHERE T2.compatible_since_year > value",
        "gold_parse": "SELECT T1.name FROM browser AS T1 JOIN accelerator_compatible_browser AS T2 ON T1.id  =  T2.browser_id JOIN web_client_accelerator AS T3 ON T2.accelerator_id  =  T3.id WHERE T3.name  =  'CProxy' AND T2.compatible_since_year  >  1998",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > = value AND T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Age = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Age = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT Fname , LName FROM Student WHERE Age = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "query": "SELECT name , nationality , id FROM architect ORDER BY gender Asc",
        "gold_parse": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "List the name, nationality and id of all male architects ordered by their names lexicographically.",
        "query": "SELECT name , nationality , id FROM architect ORDER BY gender Asc",
        "gold_parse": "SELECT name ,  nationality ,  id FROM architect WHERE gender  =  'male' ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show student ids for all male students.",
        "query": "SELECT Major FROM Student WHERE Sex = value",
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show student ids for all male students.",
        "query": "SELECT Major FROM Student WHERE Sex = value",
        "gold_parse": "SELECT StuID FROM Student WHERE Sex  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "query": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "query": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number and distance of the flight with maximum price.",
        "query": "SELECT distance , distance FROM flight ORDER BY price Desc LIMIT value",
        "gold_parse": "SELECT flno ,  distance FROM Flight ORDER BY price DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T1.g_name = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "query": "SELECT address FROM address",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Return the address of store 1.",
        "query": "SELECT address FROM address",
        "gold_parse": "SELECT T2.address FROM store AS T1 JOIN address AS T2 ON T1.address_id  =  T2.address_id WHERE store_id  =  1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Count ( * ) FROM trip WHERE duration > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Count ( * ) FROM trip WHERE duration > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_in FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_in FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.artist_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "query": "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME LIKE value",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "when is the hire date for those employees whose first name does not containing the letter M?",
        "query": "SELECT HIRE_DATE FROM employees WHERE FIRST_NAME LIKE value",
        "gold_parse": "SELECT hire_date FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T2.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T1.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MIN_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display the average salary of employees for each department who gets a commission percentage.",
        "query": "SELECT T1.JOB_TITLE , Avg ( T1.MIN_SALARY ) FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID GROUP BY T2.DEPARTMENT_ID",
        "gold_parse": "SELECT department_id ,  AVG(salary) FROM employees WHERE commission_pct != \"null\" GROUP BY department_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "query": "SELECT EMAIL FROM employees",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "get the details of employees who manage a department.",
        "query": "SELECT EMAIL FROM employees",
        "gold_parse": "SELECT DISTINCT * FROM employees AS T1 JOIN departments AS T2 ON T1.department_id  =  T2.department_id WHERE T1.employee_id  =  T2.manager_id",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the login names and family names of course author and tutors.",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "query": "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "How many problems does the product with the most problems have? List the number of the problems and product name.",
        "query": "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value OR T1.course_name = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT T2.student_id FROM Courses AS T1 JOIN Student_Course_Registrations AS T2 ON T1.course_id = T2.course_id WHERE T1.course_name = value OR T1.course_name = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and partition id for users who tweeted less than twice.",
        "query": "SELECT T2.name , T2.partitionid FROM tweets AS T1 JOIN user_profiles AS T2 ON T1.uid = T2.uid GROUP BY T1.uid HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.partitionid FROM user_profiles AS T1 JOIN tweets AS T2 ON T1.uid  =  T2.uid GROUP BY T2.uid HAVING count(*)  <  2",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM list GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.address_id , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.address_id , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Award FROM musical GROUP BY Nominee ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_enrolment , T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_enrolment , T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "query": "SELECT Min ( Age ) , Max ( Age ) , Min ( Age ) FROM Student",
        "gold_parse": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What is the minimum, mean, and maximum age across all students?",
        "query": "SELECT Min ( Age ) , Max ( Age ) , Min ( Age ) FROM Student",
        "gold_parse": "SELECT min(age) ,  avg(age) ,  max(age) FROM Student",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM musical",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM musical",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM musical",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM musical",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "query": "SELECT * FROM Procedures WHERE Cost > value AND Cost > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "query": "SELECT * FROM Procedures WHERE Cost > value AND Cost > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( T1.CustomerId ) > value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( T1.CustomerId ) > value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value OR MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the job history info done by employees earning a salary greater than or equal to 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value OR MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "query": "SELECT T2.PHONE_NUMBER FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "gold_parse": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what is the phone number of employees whose salary is in the range of 8000 and 12000?",
        "query": "SELECT T2.PHONE_NUMBER FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value AND T1.MAX_SALARY < value",
        "gold_parse": "SELECT phone_number FROM employees WHERE salary BETWEEN 8000 AND 12000",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "query": "SELECT Poll_Source FROM candidate WHERE Oppose_rate = ( SELECT Max ( Oppose_rate ) FROM candidate )",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the poll source corresponding to the candidate who has the oppose rate.",
        "query": "SELECT Poll_Source FROM candidate WHERE Oppose_rate = ( SELECT Max ( Oppose_rate ) FROM candidate )",
        "gold_parse": "SELECT poll_source FROM candidate ORDER BY oppose_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "query": "SELECT start_date FROM trip ORDER BY bike_id Desc LIMIT value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "query": "SELECT start_date FROM trip ORDER BY bike_id Desc LIMIT value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names of customers who do not have saving accounts?",
        "query": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer",
        "gold_parse": "SELECT cust_name FROM customer EXCEPT SELECT cust_name FROM customer WHERE acc_type  =  'saving'",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "correctness": 0
    },
    {
        "db_id": "company_employee",
        "question": "list the names of the companies with more than 200 sales in the descending order of sales and profits.",
        "query": "SELECT Name FROM company WHERE Sales_in_Billion > value ORDER BY Sales_in_Billion Desc",
        "gold_parse": "SELECT name FROM company WHERE Sales_in_Billion  >  200 ORDER BY Sales_in_Billion ,  Profits_in_Billion DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) < value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_humidity ) < value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT T2.eid FROM employee AS T1 JOIN certificate AS T2 ON T1.eid = T2.eid WHERE T1.salary > value",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "SELECT Max ( low_temperature ) , Max ( wind_speed_mph ) FROM weekly_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "SELECT Max ( low_temperature ) , Max ( wind_speed_mph ) FROM weekly_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY > value OR T2.DEPARTMENT_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY > value OR T2.DEPARTMENT_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT Nickname FROM school_details EXCEPT SELECT Nickname FROM school_details WHERE Division = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT Nickname FROM school_details EXCEPT SELECT Nickname FROM school_details WHERE Division = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT T2.DEPARTMENT_ID FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID GROUP BY T1.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT T2.DEPARTMENT_ID FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID GROUP BY T1.DEPARTMENT_ID HAVING Count ( DISTINCT T2.EMPLOYEE_ID ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Vehicle_Flight_number FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Who is the nominee who has been nominated for the most musicals?",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT DISTINCT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "query": "SELECT date FROM weather ORDER BY min_sea_level_pressure_inches Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates that have the 5 highest cloud cover rates and what are the rates?",
        "query": "SELECT date FROM weather ORDER BY min_sea_level_pressure_inches Desc LIMIT value",
        "gold_parse": "SELECT date ,  cloud_cover FROM weather ORDER BY cloud_cover DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.organization_id , T1.Type_of_Thing_Code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.organization_id , T1.Type_of_Thing_Code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What are the distinct id and type of the thing that has the status 'Close' or has a status record before the date '2017-06-19 02:59:21'",
        "query": "SELECT DISTINCT T1.organization_id , T1.Type_of_Thing_Code FROM Things AS T1 JOIN Timed_Status_of_Things AS T2 ON T1.thing_id = T2.thing_id WHERE T2.Status_of_Thing_Code = value OR T2.Date_and_Date < value",
        "gold_parse": "SELECT DISTINCT T2.thing_id ,  T2.Type_of_Thing_Code FROM Timed_Status_of_Things AS T1 JOIN Things AS T2 ON T1.thing_id  =  T2.thing_id WHERE T1.Status_of_Thing_Code  =  'Close' OR T1.Date_and_Date  <  '2017-06-19 02:59:21'",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination of the school that has the most players.",
        "query": "SELECT Denomination FROM school GROUP BY Denomination ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the denomination of the school that has the most players.",
        "query": "SELECT Denomination FROM school GROUP BY Denomination ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Denomination FROM player AS T1 JOIN school AS T2 ON T1.School_ID  =  T2.School_ID GROUP BY T1.School_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_moved_in FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_moved_in FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Count the number of products with the 'hot' charactersitic.",
        "query": "SELECT Count ( * ) FROM Products WHERE product_name = value",
        "gold_parse": "SELECT count(*) FROM products AS t1 JOIN product_characteristics AS t2 ON t1.product_id  =  t2.product_id JOIN CHARACTERISTICS AS t3 ON t2.characteristic_id  =  t3.characteristic_id WHERE t3.characteristic_name  =  \"hot\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , price_in_dollars FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , price_in_dollars FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , price_in_dollars FROM Catalog_Contents WHERE price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "query": "SELECT Customer_ID FROM Customers EXCEPT SELECT Customer_Details FROM Customers",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "insurance_and_eClaims",
        "question": "What are the names of customers who do not have any policies?",
        "query": "SELECT Customer_ID FROM Customers EXCEPT SELECT Customer_Details FROM Customers",
        "gold_parse": "SELECT customer_details FROM customers EXCEPT SELECT t2.customer_details FROM policies AS t1 JOIN customers AS t2 ON t1.customer_id  =  t2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets GROUP BY Market_Details HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Sheep_and_Goats > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_gust_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "query": "SELECT T1.phone_number FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What is the phone number of the customer who has filed the most recent complaint?",
        "query": "SELECT T1.phone_number FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.phone_number FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.date_complaint_raised DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets WHERE Market_Details = value OR Market_Details = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the details of the markets that can be accessed by walk or bus?",
        "query": "SELECT Market_Details FROM Street_Markets WHERE Market_Details = value OR Market_Details = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR DEPARTMENT_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR DEPARTMENT_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR DEPARTMENT_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR DEPARTMENT_ID = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Famous_Release_date , T3.Result FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Famous_Release_date , T3.Result FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.precipitation_inches > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.precipitation_inches > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Gold ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "query": "SELECT artist_name FROM files",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of all English songs.",
        "query": "SELECT artist_name FROM files",
        "gold_parse": "SELECT song_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the average age for male and female students.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "Show the average age for male and female students.",
        "query": "SELECT Avg ( Age ) FROM Student WHERE Sex = value AND Sex = value",
        "gold_parse": "SELECT avg(age) ,  sex FROM Student GROUP BY sex",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "SELECT Max ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "SELECT Max ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log ORDER BY problem_log_id Asc LIMIT value",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "What is the oldest log id and its corresponding problem id?",
        "query": "SELECT problem_log_id , problem_id FROM Problem_Log ORDER BY problem_log_id Asc LIMIT value",
        "gold_parse": "SELECT problem_log_id ,  problem_id FROM problem_log ORDER BY log_entry_date LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_latest_revision > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_latest_revision > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE enr > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE enr > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE enr > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Sex = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Sex = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "Find the first names and last names of male (sex is M) faculties who live in building NEB.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Rank = value AND Sex = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT OMIM FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.ReportsTo NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.ReportsTo NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "query": "SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = value",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Count the number of patients who stayed in room 112.",
        "query": "SELECT Count ( * ) FROM Appointment WHERE ExaminationRoom = value",
        "gold_parse": "SELECT count(patient) FROM stay WHERE room  =  112",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_meters ) FROM bridge",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_meters ) FROM bridge",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "query": "SELECT driverId , driverId FROM pitStops GROUP BY driverId HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the last names and ids of all drivers who had 11 pit stops and participated in more than 5 races?",
        "query": "SELECT driverId , driverId FROM pitStops GROUP BY driverId HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN pitstops AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  =  11 INTERSECT SELECT T1.surname ,  T1.driverid FROM drivers AS T1 JOIN results AS T2 ON T1.driverid  =  T2.driverid GROUP BY T1.driverid HAVING count(*)  >  5",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the login names and family names of course author and tutors?",
        "query": "SELECT T1.login_name , T1.personal_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id",
        "gold_parse": "SELECT login_name ,  family_name FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_wind_speed_mph FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_humidity > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_humidity > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "query": "SELECT start_date FROM trip ORDER BY start_station_id Desc LIMIT value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Which trip started from the station with the largest dock count? Give me the trip id.",
        "query": "SELECT start_date FROM trip ORDER BY start_station_id Desc LIMIT value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN station AS T2 ON T1.start_station_id  =  T2.id ORDER BY T2.dock_count DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "SELECT Total_Horses , Pigs FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the total horses record for each farm, sorted ascending?",
        "query": "SELECT Total_Horses , Pigs FROM farm GROUP BY Farm_ID ORDER BY Sum ( Total_Horses ) Asc",
        "gold_parse": "SELECT Total_Horses FROM farm ORDER BY Total_Horses ASC",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse JOIN Prescribes AS T3 ON T2.AppointmentID = T3.Appointment GROUP BY T3.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse JOIN Prescribes AS T3 ON T2.AppointmentID = T3.Appointment GROUP BY T3.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse JOIN Prescribes AS T3 ON T2.AppointmentID = T3.Appointment GROUP BY T3.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse JOIN Prescribes AS T3 ON T2.AppointmentID = T3.Appointment GROUP BY T3.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes operated by American Airlines.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Find the number of routes operated by American Airlines.",
        "query": "SELECT Count ( * ) FROM airports WHERE country = value",
        "gold_parse": "SELECT count(*) FROM airlines AS T1 JOIN routes AS T2 ON T1.alid  =  T2.alid WHERE T1.name  =  'American Airlines'",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "query": "SELECT DISTINCT T2.County FROM grapes AS T1 JOIN appellations AS T2 JOIN wine AS T3 ON T1.Grape = T3.Grape AND T3.Appelation = T2.Appelation WHERE T1.Color = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "List the names of all distinct wines that are made of red color grape.",
        "query": "SELECT DISTINCT T2.County FROM grapes AS T1 JOIN appellations AS T2 JOIN wine AS T3 ON T1.Grape = T3.Grape AND T3.Appelation = T2.Appelation WHERE T1.Color = value",
        "gold_parse": "SELECT DISTINCT T2.Name FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"Red\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "query": "SELECT T1.name , T3.Player , T3.Source FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T3.Injury ! = value",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "What are the player name, number of matches, and information source for players who do not suffer from injury of 'Knee problem'?",
        "query": "SELECT T1.name , T3.Player , T3.Source FROM stadium AS T1 JOIN game AS T2 ON T1.id = T2.stadium_id JOIN injury_accident AS T3 ON T2.id = T3.game_id WHERE T3.Injury ! = value",
        "gold_parse": "SELECT player ,  number_of_matches ,  SOURCE FROM injury_accident WHERE injury != 'Knee problem'",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the name of the heaviest entrepreneur.",
        "query": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID ORDER BY T2.Weight DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( * ) FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( * ) FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price , typical_buying_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Show the investors shared by entrepreneurs that requested more than 140000 and entrepreneurs that requested less than 120000.",
        "query": "SELECT Company FROM entrepreneur WHERE Money_Requested > value INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested < value",
        "gold_parse": "SELECT Investor FROM entrepreneur WHERE Money_Requested  >  140000 INTERSECT SELECT Investor FROM entrepreneur WHERE Money_Requested  <  120000",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Actor_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "query": "SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "query": "SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total amount of products ordered before 2018-03-17 07:13:53.",
        "query": "SELECT Sum ( T3.order_quantity ) FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id JOIN Order_Items AS T3 ON T2.order_id = T3.order_id WHERE T1.date_became_customer < value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_date  <  \"2018-03-17 07:13:53\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "query": "SELECT Avg ( stamina ) FROM Player_Attributes",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM medicine AS T1 WHERE * NOT IN ( SELECT T2.enzyme_id FROM medicine_enzyme_interaction AS T2 )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM medicine AS T1 WHERE * NOT IN ( SELECT T2.enzyme_id FROM medicine_enzyme_interaction AS T2 )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "query": "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the flight number of flights with three lowest distances.",
        "query": "SELECT flno FROM flight ORDER BY price Asc LIMIT value",
        "gold_parse": "SELECT flno FROM Flight ORDER BY distance ASC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "SELECT T1.Document_Type_Name , T2.Other_Details , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "SELECT T1.Document_Type_Name , T2.Other_Details , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles < value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles < value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Find all the films longer than 100 minutes, or rated PG, except those who cost more than 200 for replacement. List the titles.",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR replacement_cost < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the employee ids of the employees whose role name is \"Human Resource\" or \"Manager\"?",
        "query": "SELECT T2.Employee_ID FROM Roles AS T1 JOIN Employees AS T2 ON T1.Role_Code = T2.Role_Code WHERE T1.Role_Name = value",
        "gold_parse": "SELECT T1.employee_id FROM Employees AS T1 JOIN ROLES AS T2 ON T1.role_code  =  T2.role_code WHERE T2.role_name  =  \"Human Resource\" OR T2.role_name  =  \"Manager\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT events FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT events FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT events FROM weather WHERE zip_code = value GROUP BY zip_code ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Position ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are all the distinct premise types?",
        "query": "SELECT DISTINCT product_category FROM Products",
        "gold_parse": "SELECT DISTINCT premises_type FROM premises",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are all the distinct premise types?",
        "query": "SELECT DISTINCT product_category FROM Products",
        "gold_parse": "SELECT DISTINCT premises_type FROM premises",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "What are all the distinct premise types?",
        "query": "SELECT DISTINCT product_category FROM Products",
        "gold_parse": "SELECT DISTINCT premises_type FROM premises",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT DEPARTMENT_ID FROM job_history GROUP BY DEPARTMENT_ID HAVING Count ( DISTINCT EMPLOYEE_ID ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Give the distinct department ids of departments in which a manager is in charge of 4 or more employees?",
        "query": "SELECT DISTINCT DEPARTMENT_ID FROM job_history GROUP BY DEPARTMENT_ID HAVING Count ( DISTINCT EMPLOYEE_ID ) > = value",
        "gold_parse": "SELECT DISTINCT department_id FROM employees GROUP BY department_id ,  manager_id HAVING COUNT(employee_id)  >= 4",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY > value INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM employees AS T1 WHERE T1.SALARY > value INTERSECT SELECT T2.JOB_TITLE FROM jobs AS T2 WHERE T2.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T1.customer_id , T3.date_moved_in , T2.date_moved_out FROM Customers AS T1 JOIN Residents AS T2 JOIN Customer_Events AS T3 ON T1.customer_id = T3.customer_id AND T3.date_moved_in = T2.date_moved_in AND T1.customer_id = T3.customer_id",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T1.customer_id , T3.date_moved_in , T2.date_moved_out FROM Customers AS T1 JOIN Residents AS T2 JOIN Customer_Events AS T3 ON T1.customer_id = T3.customer_id AND T3.date_moved_in = T2.date_moved_in AND T1.customer_id = T3.customer_id",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the names of entrepreneurs do no not have the investor Rachel Elnaugh.",
        "query": "SELECT Company FROM entrepreneur WHERE Investor ! = value",
        "gold_parse": "SELECT T2.Name FROM entrepreneur AS T1 JOIN people AS T2 ON T1.People_ID  =  T2.People_ID WHERE T1.Investor != \"Rachel Elnaugh\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT id FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT id FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "What is the address of the restaurant Subway?",
        "query": "SELECT T1.Address FROM Restaurant AS T1 JOIN Type_Of_Restaurant AS T2 ON T1.ResID = T2.ResID JOIN Restaurant_Type AS T3 ON T2.ResTypeID = T3.ResTypeID WHERE T3.ResTypeName = value",
        "gold_parse": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\"",
        "correctness": 0
    },
    {
        "db_id": "restaurant_1",
        "question": "What is the address of the restaurant Subway?",
        "query": "SELECT T1.Address FROM Restaurant AS T1 JOIN Type_Of_Restaurant AS T2 ON T1.ResID = T2.ResID JOIN Restaurant_Type AS T3 ON T2.ResTypeID = T3.ResTypeID WHERE T3.ResTypeName = value",
        "gold_parse": "SELECT Address FROM Restaurant WHERE ResName = \"Subway\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "query": "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Min ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "find the highest support percentage, lowest consider rate and oppose rate of all candidates.",
        "query": "SELECT Min ( Support_rate ) , Max ( Consider_rate ) , Min ( Oppose_rate ) FROM candidate",
        "gold_parse": "SELECT max(support_rate) ,  min(consider_rate) ,  min(oppose_rate) FROM candidate",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job ids corresponding to jobs with average salary above 8000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT job_id FROM employees GROUP BY job_id HAVING AVG(salary) > 8000",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many courses that do not have prerequisite?",
        "query": "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )",
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many courses that do not have prerequisite?",
        "query": "SELECT Count ( * ) FROM section AS T1 WHERE T1.course_id NOT IN ( SELECT T2.course_id FROM prereq AS T2 )",
        "gold_parse": "SELECT count(*) FROM course WHERE course_id NOT IN (SELECT course_id FROM prereq)",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT T1.gender , T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T2.song_name Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "SELECT name FROM enzyme WHERE Porphyria ! = value",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "SELECT name FROM enzyme WHERE Porphyria ! = value",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What are the names of enzymes who does not produce 'Heme'?",
        "query": "SELECT name FROM enzyme WHERE Porphyria ! = value",
        "gold_parse": "SELECT name FROM enzyme WHERE product != 'Heme'",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the address line 1 and 2 of the customer with email \"vbogisich@example.org\".",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_temperature_f > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.Regional_Population > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_temperature_f FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value INTERSECT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT name FROM Person WHERE job = value AND gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location codes and the number of documents in each location.",
        "query": "SELECT Location_Code , Count ( * ) FROM Ref_Locations GROUP BY Location_Code",
        "gold_parse": "SELECT location_code ,  count(*) FROM Document_locations GROUP BY location_code",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "How many budget record has a budget amount smaller than the invested amount?",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  <  invested",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT events FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT events FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT events FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.total_budget_percent_budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT Num_Employees FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT Num_Employees FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What is the unit of measuerment of the product category code \"Herbs\"?",
        "query": "SELECT T1.characteristic_name FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_category_code = value",
        "gold_parse": "SELECT unit_of_measure FROM ref_product_categories WHERE product_category_code  =  \"Herbs\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value AND Lname = value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value AND Lname = value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Who is the advisor of Linda Smith? Give me the first name and last name.",
        "query": "SELECT Fname , Lname FROM Faculty WHERE Fname = value AND Lname = value",
        "gold_parse": "SELECT T1.fname ,  T1.lname FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor WHERE T2.fname  =  \"Linda\" AND T2.lname  =  \"Smith\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Name FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND start_date = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND start_date = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > value OR T1.Enrollment < value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT T1.School_name FROM School AS T1 JOIN endowment AS T2 ON T1.School_id = T2.School_id WHERE T2.amount > value OR T1.Enrollment < value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Year FROM wine WHERE Winery = value )",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Famous_Release_date > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Name = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Name = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Date , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Date , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Date , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Candidate_ID , Unsure_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , DEPARTMENT_ID , DEPARTMENT_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , DEPARTMENT_ID , DEPARTMENT_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT Fname , LName FROM Student WHERE Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Marketing_Region_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Addresses AS T1 JOIN Drama_Workshop_Groups AS T2 ON T2.Address_ID = T1.Address_ID JOIN Stores AS T3 ON T1.Address_ID = T3.Address_ID WHERE T3.Marketing_Region_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Currency_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Currency_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT eid FROM employee WHERE salary > ( SELECT Avg ( salary ) FROM employee )",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the id of every employee who has at least a salary of  100000?",
        "query": "SELECT eid FROM employee WHERE salary > ( SELECT Avg ( salary ) FROM employee )",
        "gold_parse": "SELECT eid FROM Employee WHERE salary  >  100000",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Date_of_ceremony , Music_Festival FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Date_of_ceremony , Music_Festival FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of the artists who are from UK and have produced English songs.",
        "query": "SELECT artist_name FROM artist WHERE country = value INTERSECT SELECT artist_name FROM artist WHERE country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "what are the employee ids and job titles for employees in department 80?",
        "query": "SELECT T2.EMPLOYEE_ID , T1.JOB_TITLE FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT T1.employee_id ,  T2.job_title FROM employees AS T1 JOIN jobs AS T2 ON T1.job_id  =  T2.job_id WHERE T1.department_id = 80",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value OR T2.friend = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value OR T2.friend = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are the different names and ages of every friend of either Dan or alice?",
        "query": "SELECT DISTINCT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value OR T2.friend = value",
        "gold_parse": "SELECT DISTINCT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' OR T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT order_id , customer_id FROM Customer_Orders WHERE order_status_code = value OR order_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT order_id , customer_id FROM Customer_Orders WHERE order_status_code = value OR order_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "customers_campaigns_ecommerce",
        "question": "Show the shipping charge and customer id for customer orders with order status Cancelled or Paid.",
        "query": "SELECT order_id , customer_id FROM Customer_Orders WHERE order_status_code = value OR order_status_code = value",
        "gold_parse": "SELECT order_shipping_charges ,  customer_id FROM customer_orders WHERE order_status_code  =  'Cancelled' OR order_status_code  =  'Paid'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T1.Advisor = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY , MAX_SALARY FROM jobs WHERE JOB_TITLE LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Nurse ORDER BY Registered Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Nurse ORDER BY Registered Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "query": "SELECT County_name FROM county GROUP BY County_Id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "query": "SELECT County_name FROM county GROUP BY County_Id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Which counties have two or more delegates? Give me the county names.",
        "query": "SELECT County_name FROM county GROUP BY County_Id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District GROUP BY T1.County_id HAVING COUNT(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "query": "SELECT T2.Character FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = value OR T2.Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Show the musical nominee with award \"Bob Fosse\" or \"Cleavant Derricks\".",
        "query": "SELECT T2.Character FROM musical AS T1 JOIN actor AS T2 WHERE T1.Award = value OR T2.Name = value",
        "gold_parse": "SELECT Nominee FROM musical WHERE Award  =  \"Tony Award\" OR Award  =  \"Cleavant Derricks\"",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Investor ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE state = value OR enr > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names and enrollment numbers for colleges that have more than 10000 enrolled and are located in Louisiana?",
        "query": "SELECT cName , enr FROM College WHERE state = value OR enr > value",
        "gold_parse": "SELECT cName ,  enr FROM College WHERE enr  >  10000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the maximum and minimum customer codes.",
        "query": "SELECT Max ( * ) , Min ( customer_phone ) FROM Customers",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the maximum and minimum customer codes.",
        "query": "SELECT Max ( * ) , Min ( customer_phone ) FROM Customers",
        "gold_parse": "SELECT max(customer_code) ,  min(customer_code) FROM Customers",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT T1.School FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Division ! = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT T1.School FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Division ! = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Show the nicknames of schools that are not in division 1.",
        "query": "SELECT T1.School FROM school AS T1 JOIN school_details AS T2 ON T1.School_ID = T2.School_ID WHERE T2.Division ! = value",
        "gold_parse": "SELECT Nickname FROM school_details WHERE Division != \"Division 1\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the total number of students who are living in a male dorm?",
        "query": "SELECT Count ( * ) FROM Student WHERE Sex = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "query": "SELECT DISTINCT Eliminated_By FROM Elimination WHERE Team ! = value",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Give the different reigns of wrestlers who are not located in Tokyo, Japan.",
        "query": "SELECT DISTINCT Eliminated_By FROM Elimination WHERE Team ! = value",
        "gold_parse": "SELECT DISTINCT Reign FROM wrestler WHERE LOCATION != \"Tokyo , Japan\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT id , name , ICAO FROM airport GROUP BY id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_dollars ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value OR T1.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND end_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND end_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MAX_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE name = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE name = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document with the most number of sections?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document with the most number of sections?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document with the most number of sections?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the name of the document with the most number of sections?",
        "query": "SELECT document_name FROM Documents GROUP BY document_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.document_name FROM documents AS t1 JOIN document_sections AS t2 ON t1.document_code  =  t2.document_code GROUP BY t1.document_code ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "query": "SELECT maintenance_contract_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "How many assets does each maintenance contract contain? List the number and the contract id.",
        "query": "SELECT maintenance_contract_id , Count ( * ) FROM Maintenance_Contracts GROUP BY maintenance_contract_id",
        "gold_parse": "SELECT count(*) ,  T1.maintenance_contract_id FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id  =  T2.maintenance_contract_id GROUP BY T1.maintenance_contract_id",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.LastName > value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId WHERE T1.LastName > value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT Creation FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "In which year were most departments established?",
        "query": "SELECT Creation FROM department GROUP BY Department_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT creation FROM department GROUP BY creation ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT T2.service_type_code FROM Organizations AS T1 JOIN Services AS T2 ON T2.organization_id = T1.organization_id JOIN Things AS T3 ON T1.organization_id = T3.organization_id WHERE T3.service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT T2.SALARY , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT T2.SALARY , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT T2.SALARY , T1.MIN_SALARY FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Famous_Release_date , T3.Music_Festival FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Famous_Release_date , T3.Music_Festival FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID JOIN music_festival AS T3 ON T2.Volume_ID = T3.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Pigs > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Pigs > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT bike_id FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT bike_id FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers who have a savings balance lower than their checking balance, and what is the total of their checking and savings balances?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = value",
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = value",
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Return the names of countries that have players that play the Forward position, as well as players who play the Defender position.",
        "query": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Position = value",
        "gold_parse": "SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Forward\" INTERSECT SELECT T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country WHERE T2.Position  =  \"Defender\"",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "query": "SELECT cust_name , no_of_loans FROM customer",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the name and credit score of the customers who have some loans.",
        "query": "SELECT cust_name , no_of_loans FROM customer",
        "gold_parse": "SELECT DISTINCT T1.cust_name ,  T1.credit_score FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT cust_name FROM customer ORDER BY acc_bal Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are over 18 and do not have allergy to food type or animal type?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are over 18 and do not have allergy to food type or animal type?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Student WHERE age  >  18 AND StuID NOT IN ( SELECT StuID FROM Has_allergy AS T1 JOIN Allergy_Type AS T2 ON T1.Allergy  =  T2.Allergy WHERE T2.allergytype  =  \"food\" OR T2.allergytype  =  \"animal\")",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by cat allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by cat allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students are affected by cat allergies?",
        "query": "SELECT Count ( * ) FROM Allergy_Type",
        "gold_parse": "SELECT count(*) FROM Has_allergy WHERE Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "query": "SELECT T3.Budget_Type_Code , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T2.Document_ID = T3.Document_ID",
        "gold_parse": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type codes and descriptions of each budget type?",
        "query": "SELECT T3.Budget_Type_Code , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code JOIN Documents_with_Expenses AS T3 ON T2.Document_ID = T3.Document_ID",
        "gold_parse": "SELECT budget_type_code ,  budget_type_description FROM Ref_budget_codes",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.district , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.GDP > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Give me a list of cities whose temperature in Mar is lower than that in Dec and which have never been host cities.",
        "query": "SELECT T1.City FROM city AS T1 WHERE T1.GDP > value EXCEPT SELECT T1.City FROM city AS T1 JOIN hosting_city AS T2 ON T1.City_ID = T2.Host_City WHERE T2.Year = value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN temperature AS T2 ON T1.city_id  =  T2.city_id WHERE T2.Mar  <  T2.Dec EXCEPT SELECT T3.city FROM city AS T3 JOIN hosting_city AS T4 ON T3.city_id  =  T4.host_city",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE JOB_TITLE = value AND MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID GROUP BY T2.Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Player FROM player WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE JOB_TITLE = value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "SELECT meter_700 , meter_400 FROM swimmer WHERE Nationality = value",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "swimming",
        "question": "Find all 200 meter and 300 meter results of swimmers with nationality \"Australia\".",
        "query": "SELECT meter_700 , meter_400 FROM swimmer WHERE Nationality = value",
        "gold_parse": "SELECT meter_200 ,  meter_300 FROM swimmer WHERE nationality  =  'Australia'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT id FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT id FROM trip WHERE duration > value AND duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_out FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.date_moved_out FROM Residents AS T1 JOIN Customer_Events AS T2 ON T1.date_moved_in = T2.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_euros Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_euros Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What is the entry name of the most expensive catalog (in USD)?",
        "query": "SELECT catalog_entry_name FROM Catalog_Contents ORDER BY price_in_euros Desc LIMIT value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents ORDER BY price_in_dollars DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value AND MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "Please show the nominee who has been nominated the greatest number of times.",
        "query": "SELECT Award FROM musical GROUP BY Award ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Nominee FROM musical GROUP BY Nominee ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "query": "SELECT login_name FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "query": "SELECT login_name FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List all the subject names.",
        "query": "SELECT login_name FROM Course_Authors_and_Tutors",
        "gold_parse": "SELECT subject_name FROM SUBJECTS",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "query": "SELECT Count ( * ) , budget FROM department GROUP BY budget",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the total number of students in each department.",
        "query": "SELECT Count ( * ) , budget FROM department GROUP BY budget",
        "gold_parse": "SELECT count(*) ,  dept_name FROM student GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Secretary_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "What are the distinct last names of the students who have president votes and have 8741 as the advisor?",
        "query": "SELECT DISTINCT T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T1.Advisor = value AND T2.Secretary_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  PRESIDENT_Vote INTERSECT SELECT DISTINCT LName FROM STUDENT WHERE Advisor  =  \"8741\"",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Actor_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Actor_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Actor_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees WHERE Employee_Name = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees WHERE Employee_Name = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees WHERE Employee_Name = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees WHERE Employee_Name = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Famous_Release_date > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Age ) FROM artist WHERE Famous_Release_date > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "query": "SELECT Avg ( Age ) , city_code FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "query": "SELECT Avg ( Age ) , city_code FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "query": "SELECT Avg ( Age ) , city_code FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What is the average age and how many male students are there in each city?",
        "query": "SELECT Avg ( Age ) , city_code FROM Student GROUP BY city_code",
        "gold_parse": "SELECT count(*) ,  avg(age) ,  city_code FROM student WHERE sex  =  'M' GROUP BY city_code",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "What are lines 1 and 2 of the addressed of the customer with the email \"vbogisich@example.org\"?",
        "query": "SELECT address_line_1 , email_address FROM Customers WHERE email_address = value INTERSECT SELECT address_line_2 , email_address FROM Customers WHERE email_address = value",
        "gold_parse": "SELECT address_line_1 ,  address_line_2 FROM customers WHERE email_address  =  \"vbogisich@example.org\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "SELECT City , City FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "SELECT City , City FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the city with the smallest GDP? Return the city and its GDP.",
        "query": "SELECT City , City FROM city ORDER BY GDP Asc LIMIT value",
        "gold_parse": "SELECT city ,  GDP FROM city ORDER BY GDP LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Max ( Consider_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Issue_Date , T2.Date_of_ceremony FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Issue_Date , T2.Date_of_ceremony FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the names and scores of wines made from white grapes.",
        "query": "SELECT Name , Score FROM wine WHERE Grape = value",
        "gold_parse": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the names and scores of wines made from white grapes.",
        "query": "SELECT Name , Score FROM wine WHERE Grape = value",
        "gold_parse": "SELECT T2.Name ,   T2.Score FROM GRAPES AS T1 JOIN WINE AS T2 ON T1.Grape  =  T2.Grape WHERE T1.Color  =  \"White\"",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "query": "SELECT dorm_name , gender FROM Dorm WHERE student_capacity = value OR student_capacity < value",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name and gender type of the dorms whose capacity is greater than 300 or less than 100.",
        "query": "SELECT dorm_name , gender FROM Dorm WHERE student_capacity = value OR student_capacity < value",
        "gold_parse": "SELECT dorm_name ,  gender FROM dorm WHERE student_capacity  >  300 OR student_capacity  <  100",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Total_Horses ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.AppointmentID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_type_code FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY LIKE value AND T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT * FROM weather WHERE max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT * FROM weather WHERE max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY other_asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY other_asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "query": "SELECT T1.student_capacity , T1.gender FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name LIKE value",
        "gold_parse": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the capacity and gender type of the dorm whose name has substring \u2018Donor\u2019.",
        "query": "SELECT T1.student_capacity , T1.gender FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T2.amenity_name LIKE value",
        "gold_parse": "SELECT student_capacity ,  gender FROM dorm WHERE dorm_name LIKE '%Donor%'",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "Eduardo Martins is a customer at which company?",
        "query": "SELECT DISTINCT first_name FROM customers WHERE first_name = value AND last_name = value",
        "gold_parse": "SELECT company FROM customers WHERE first_name = \"Eduardo\" AND last_name = \"Martins\"",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email for the users who have more than one follower.",
        "query": "SELECT name , email FROM user_profiles GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "twitter_1",
        "question": "Find the name and email for the users who have more than one follower.",
        "query": "SELECT name , email FROM user_profiles GROUP BY name HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.name ,  T1.email FROM user_profiles AS T1 JOIN follows AS T2 ON T1.uid  =  T2.f1 GROUP BY T2.f1 HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT catalog_entry_name , height FROM Catalog_Contents WHERE price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "query": "SELECT Count ( * ) FROM classroom",
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Find the room number of the rooms which can sit 50 to 100 students and their buildings.",
        "query": "SELECT Count ( * ) FROM classroom",
        "gold_parse": "SELECT building ,  room_number FROM classroom WHERE capacity BETWEEN 50 AND 100",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT EMPLOYEE_ID FROM employees",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT EMPLOYEE_ID FROM employees",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "List the names of all distinct nurses ordered by alphabetical order?",
        "query": "SELECT DISTINCT Name FROM Physician ORDER BY Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT JOB_TITLE FROM jobs WHERE MIN_SALARY > value AND MIN_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MIN_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MIN_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Product_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Product_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "Give the neames of wines with prices below 50 and with appelations in Monterey county.",
        "query": "SELECT T2.Name FROM appellations AS T1 JOIN wine AS T2 ON T1.Appelation = T2.Appelation WHERE T2.Price < value AND T1.State = value AND T1.County = value",
        "gold_parse": "SELECT T2.Name FROM APPELLATIONS AS T1 JOIN WINE AS T2 ON T1.Appelation  =  T2.Appelation WHERE T1.County  =  \"Monterey\" AND T2.price  <  50",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , DEPARTMENT_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , MANAGER_ID , DEPARTMENT_ID FROM employees",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value AND T1.gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What are all the friends of Alice who are female?",
        "query": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T1.job = value AND T1.gender = value",
        "gold_parse": "SELECT T2.friend FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.friend WHERE T2.name  =  'Alice' AND T1.gender  =  'female'",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Date , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Date , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Date , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "query": "SELECT date FROM weather WHERE min_temperature_f BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "query": "SELECT date FROM weather WHERE min_temperature_f BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the dates in which the mean sea level pressure was between 30.3 and 31?",
        "query": "SELECT date FROM weather WHERE min_temperature_f BETWEEN value AND value",
        "gold_parse": "SELECT date FROM weather WHERE mean_sea_level_pressure_inches BETWEEN 30.3 AND 31",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Nurse GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Nurse GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Artist = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Artist = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT bike_id FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT bike_id FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What are the names of the physicians who have 'senior' in their titles.",
        "query": "SELECT Name FROM Physician WHERE Position = value",
        "gold_parse": "SELECT name FROM physician WHERE POSITION LIKE '%senior%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY > = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "query": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM member AS T2 JOIN branch AS T1 JOIN membership_register_branch AS T3 ON T2.Member_ID = T3.Member_ID AND T3.Branch_ID = T1.Branch_ID WHERE T2.Level > value",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "shop_membership",
        "question": "What are the cities that do not have any branches with more than 100 members?",
        "query": "SELECT T1.City FROM branch AS T1 EXCEPT SELECT T1.City FROM member AS T2 JOIN branch AS T1 JOIN membership_register_branch AS T3 ON T2.Member_ID = T3.Member_ID AND T3.Branch_ID = T1.Branch_ID WHERE T2.Level > value",
        "gold_parse": "SELECT city FROM branch EXCEPT SELECT city FROM branch WHERE membership_amount  >  100",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.languages = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "query": "SELECT state_province_county FROM Addresses WHERE town_city = value",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "query": "SELECT state_province_county FROM Addresses WHERE town_city = value",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "correctness": 0
    },
    {
        "db_id": "e_government",
        "question": "Which state can address \"6862 Kaitlyn Knolls\" possibly be in?",
        "query": "SELECT state_province_county FROM Addresses WHERE town_city = value",
        "gold_parse": "SELECT state_province_county FROM addresses WHERE line_1_number_building LIKE \"%6862 Kaitlyn Knolls%\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "query": "SELECT FirstName , LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teachers teach the student named EVELINA BROMLEY? Give me the first and last name  of the teachers.",
        "query": "SELECT FirstName , LastName FROM teachers WHERE FirstName = value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom WHERE T1.firstname  =  \"EVELINA\" AND T1.lastname  =  \"BROMLEY\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "query": "SELECT * FROM Procedures WHERE Cost > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Which physicians are trained in procedures that are more expensive than 5000?",
        "query": "SELECT * FROM Procedures WHERE Cost > value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN trained_in AS T2 ON T1.employeeid  =  T2.physician JOIN procedures AS T3 ON T3.code  =  T2.treatment WHERE T3.cost  >  5000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the names of the physicians who prescribe medication Thesisin?",
        "query": "SELECT Name FROM Physician WHERE Name = value",
        "gold_parse": "SELECT DISTINCT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician JOIN medication AS T3 ON T3.code = T2.medication WHERE T3.name  =  \"Thesisin\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_pounds > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Gold ) , Avg ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for clubs?",
        "query": "SELECT Avg ( Gold ) , Avg ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "query": "SELECT state , enr FROM College",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "query": "SELECT state , enr FROM College",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "query": "SELECT state , enr FROM College",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What is the state and enrollment of the colleges where have any students who got accepted in the tryout decision.",
        "query": "SELECT state , enr FROM College",
        "gold_parse": "SELECT DISTINCT T1.state ,  T1.enr FROM college AS T1 JOIN tryout AS T2 ON T1.cName  =  T2.cName WHERE T2.decision  =  'yes'",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.asset_details FROM Assets AS T1 JOIN Fault_Log AS T2 ON T1.asset_id = T2.asset_id JOIN Engineer_Visits AS T3 ON T2.fault_log_entry_id = T3.fault_log_entry_id ORDER BY T3.visit_start_datetime Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T2.date_of_enrolment , T2.date_of_enrolment FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "query": "SELECT Country , Number_cities FROM market",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "correctness": 0
    },
    {
        "db_id": "film_rank",
        "question": "What are the countries of markets and their corresponding years of market estimation?",
        "query": "SELECT Country , Number_cities FROM market",
        "gold_parse": "SELECT T2.Country ,  T1.Year FROM film_market_estimation AS T1 JOIN market AS T2 ON T1.Market_ID  =  T2.Market_ID",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_enrolment , T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_enrolment , T1.date_of_registration FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.LName FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value AND T2.Treasurer_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the job titles, and range of salaries for jobs with maximum salary between 12000 and 18000?",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY BETWEEN value AND value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT * , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT * , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "query": "SELECT pName FROM Player WHERE HS BETWEEN value AND value INTERSECT SELECT pName FROM Player WHERE HS > value",
        "gold_parse": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of players who train between 500 and 1500 hours?",
        "query": "SELECT pName FROM Player WHERE HS BETWEEN value AND value INTERSECT SELECT pName FROM Player WHERE HS > value",
        "gold_parse": "SELECT pName FROM Player WHERE HS BETWEEN 500 AND 1500",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "query": "SELECT * FROM Albums WHERE Year = value AND Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "music_2",
        "question": "What information is there on albums from 2010?",
        "query": "SELECT * FROM Albums WHERE Year = value AND Year = value",
        "gold_parse": "SELECT * FROM Albums WHERE YEAR  =  2010",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "query": "SELECT T1.Name , Count ( * ) FROM Physician AS T1 JOIN Undergoes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician",
        "gold_parse": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Return the name of each physician and the number of patients he or she treats.",
        "query": "SELECT T1.Name , Count ( * ) FROM Physician AS T1 JOIN Undergoes AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.Physician",
        "gold_parse": "SELECT T1.name ,  count(*) FROM physician AS T1 JOIN patient AS T2 ON T1.employeeid  =  T2.PCP GROUP BY T1.employeeid",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "query": "SELECT ID FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Give id of the instructor who advises students in the History department.",
        "query": "SELECT ID FROM instructor WHERE dept_name = value",
        "gold_parse": "SELECT i_id FROM advisor AS T1 JOIN student AS T2 ON T1.s_id  =  T2.id WHERE T2.dept_name  =  'History'",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT T1.student_id FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT T1.student_id FROM Students AS T1 WHERE T1.student_id NOT IN ( SELECT T2.student_id FROM Student_Course_Attendance AS T2 )",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "query": "SELECT College FROM match_season GROUP BY Season ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "query": "SELECT College FROM match_season GROUP BY Season ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the top 3 most common colleges of players in match seasons.",
        "query": "SELECT College FROM match_season GROUP BY Season ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT College FROM match_season GROUP BY College ORDER BY count(*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE enr > value AND state = value UNION SELECT cName FROM College WHERE enr > value AND state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of either colleges in LA with greater than 15000 size or in state AZ with less than 13000 enrollment.",
        "query": "SELECT cName FROM College WHERE enr > value AND state = value UNION SELECT cName FROM College WHERE enr > value AND state = value",
        "gold_parse": "SELECT cName FROM College WHERE enr  <  13000 AND state = \"AZ\" UNION SELECT cName FROM College WHERE enr  >  15000 AND state = \"LA\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "query": "SELECT T1.EMPLOYEE_ID , T2.END_DATE FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY = value",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the employee ids for each employee and final dates of employment at their last job?",
        "query": "SELECT T1.EMPLOYEE_ID , T2.END_DATE FROM employees AS T1 JOIN job_history AS T2 ON T1.EMPLOYEE_ID = T2.EMPLOYEE_ID WHERE T1.SALARY = value",
        "gold_parse": "SELECT employee_id ,  MAX(end_date) FROM job_history GROUP BY employee_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "query": "SELECT T1.name , T2.subscription_type , T2.duration FROM station AS T1 JOIN trip AS T2",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each end station id, what is its name, latitude, and minimum duration for trips ended there?",
        "query": "SELECT T1.name , T2.subscription_type , T2.duration FROM station AS T1 JOIN trip AS T2",
        "gold_parse": "SELECT T1.name ,  T1.lat ,  min(T2.duration) FROM station AS T1 JOIN trip AS T2 ON T1.id  =  T2.end_station_id GROUP BY T2.end_station_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT protein_name , protein_name FROM protein",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT protein_name , protein_name FROM protein",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT protein_name , protein_name FROM protein",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "For each bed type, find the average room price.",
        "query": "SELECT bedType , Avg ( maxOccupancy ) FROM Rooms GROUP BY bedType",
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "correctness": 0
    },
    {
        "db_id": "inn_1",
        "question": "For each bed type, find the average room price.",
        "query": "SELECT bedType , Avg ( maxOccupancy ) FROM Rooms GROUP BY bedType",
        "gold_parse": "SELECT bedType ,  avg(basePrice) FROM Rooms GROUP BY bedType",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T2.genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "SELECT DISTINCT T2.Fname , T2.city_code FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value OR T1.Allergy = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "SELECT DISTINCT T2.Fname , T2.city_code FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value OR T1.Allergy = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) > = value EXCEPT SELECT T1.City_Town FROM Addresses AS T1",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Show all cities where at least one customer lives in but no performer lives in.",
        "query": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Clients AS T2 ON T1.Address_ID = T2.Address_ID GROUP BY T2.Address_ID HAVING Count ( * ) > = value EXCEPT SELECT T1.City_Town FROM Addresses AS T1",
        "gold_parse": "SELECT T1.City_Town FROM Addresses AS T1 JOIN Customers AS T2 ON T1.Address_ID  =  T2.Address_ID EXCEPT SELECT T1.City_Town FROM Addresses AS T1 JOIN Performers AS T2 ON T1.Address_ID  =  T2.Address_ID",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT max_temperature_f FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE SALARY > = value AND SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE SALARY > = value AND SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY < = value ORDER BY T2.SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Count the number of universities that do not participate in the baketball match.",
        "query": "SELECT Count ( * ) FROM university AS T1 WHERE T1.School_ID NOT IN ( SELECT T2.School_ID FROM basketball_match AS T2 WHERE T2.ACC_Road = value )",
        "gold_parse": "SELECT count(*) FROM university WHERE school_id NOT IN (SELECT school_id FROM basketball_match)",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Marketing_Region_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who made the latest order?",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.active_to_date Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Who made the latest order?",
        "query": "SELECT T1.customer_name FROM Customers AS T1 JOIN Customer_Contact_Channels AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.active_to_date Desc LIMIT value",
        "gold_parse": "SELECT t1.customer_name FROM customers AS t1 JOIN customer_orders AS t2 ON t1.customer_id  =  t2.customer_id ORDER BY t2.order_date DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_acquired_date Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_acquired_date Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < value OR T1.MIN_SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT College FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT College FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT DISTINCT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT DISTINCT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT DISTINCT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT DISTINCT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY song_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY song_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What is the language that was used most often in songs with resolution above 500?",
        "query": "SELECT artist_name FROM song WHERE resolution > value GROUP BY song_name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT artist_name FROM song WHERE resolution  >  500 GROUP BY languages ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "SELECT Employee_Name , Date_of_Birth FROM Employees",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "SELECT Employee_Name , Date_of_Birth FROM Employees",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods WHERE payment_method_description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND start_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value AND start_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_dew_point_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE SALARY LIKE value AND SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM employees WHERE SALARY LIKE value AND SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT * FROM match_season WHERE Draft_Class LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Building = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists that are from the UK and sang songs in English?",
        "query": "SELECT T1.artist_name FROM artist AS T1 WHERE T1.country = value INTERSECT SELECT T2.artist_name FROM song AS T2 WHERE T2.country = value",
        "gold_parse": "SELECT artist_name FROM artist WHERE country  =  \"UK\" INTERSECT SELECT artist_name FROM song WHERE languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "SELECT Candidate_ID , Consider_rate , Consider_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What are the support, consider, and oppose rates of each candidate, ordered ascending by their unsure rate?",
        "query": "SELECT Candidate_ID , Consider_rate , Consider_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.ExaminationRoom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MIN_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Nurse ORDER BY Name Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "Find the physician who prescribed the highest dose. What is his or her name?",
        "query": "SELECT Name FROM Nurse ORDER BY Name Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM physician AS T1 JOIN prescribes AS T2 ON T1.employeeid = T2.physician ORDER BY T2.dose DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Service_Type_Description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE precipitation_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE precipitation_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE precipitation_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Support_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles of courses that are offered in more than one department?",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the titles of courses that are offered in more than one department?",
        "query": "SELECT T1.title FROM course AS T1 JOIN prereq AS T2 ON T1.course_id = T2.course_id GROUP BY T2.course_id HAVING Count ( * ) > value",
        "gold_parse": "SELECT title FROM course GROUP BY title HAVING count(*)  >  1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT SALARY , SALARY FROM employees",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT SALARY , SALARY FROM employees",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the salary and manager number for those employees who is working under a manager.",
        "query": "SELECT SALARY , SALARY FROM employees",
        "gold_parse": "SELECT salary ,  manager_id FROM employees WHERE manager_id != \"null\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT T1.Name FROM Products AS T1 EXCEPT SELECT T2.Name FROM Manufacturers AS T2",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.duration ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE LAST_NAME BETWEEN value AND value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE LAST_NAME BETWEEN value AND value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE LAST_NAME BETWEEN value AND value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( department_id ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < ( SELECT Min ( department_id ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Season FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "What are the official native languages that contain the string \"English\".",
        "query": "SELECT Season FROM match_season WHERE Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY LastName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY LastName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY LastName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY LastName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Support_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > value OR Year < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Count the number of budgets in year 2001 or before whose budgeted amount is greater than 3000",
        "query": "SELECT Count ( * ) FROM budget WHERE total_budget_percent_budgeted > value OR Year < value",
        "gold_parse": "SELECT count(*) FROM budget WHERE budgeted  >  3000 AND YEAR  <=  2001",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the checking and savings balances in accounts belonging to Brown?",
        "query": "SELECT T2.balance , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T1.name = value",
        "gold_parse": "SELECT T2.balance ,  T3.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T1.name  =  'Brown'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT Name FROM Products EXCEPT SELECT Name FROM Products",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "manufactory_1",
        "question": "Find the name of companies that do not make DVD drive.",
        "query": "SELECT Name FROM Products EXCEPT SELECT Name FROM Products",
        "gold_parse": "SELECT name FROM manufacturers EXCEPT SELECT T2.name FROM products AS T1 JOIN manufacturers AS T2 ON T1.Manufacturer  =  T2.code WHERE T1.name  =  'DVD drive'",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have destroyed a document.",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have destroyed a document.",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have destroyed a document.",
        "query": "SELECT T2.Destroyed_by_Employee_ID FROM Employees AS T1 JOIN Documents_to_be_Destroyed AS T2 ON T1.Employee_ID = T2.Destroyed_by_Employee_ID GROUP BY T1.Employee_ID HAVING Count ( * ) = value",
        "gold_parse": "SELECT DISTINCT Destroyed_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "SELECT Min ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "station_weather",
        "question": "show the lowest low temperature and highest wind speed in miles per hour.",
        "query": "SELECT Min ( low_temperature ) , Max ( high_temperature ) FROM weekly_weather",
        "gold_parse": "SELECT min(low_temperature) ,  max(wind_speed_mph) FROM weekly_weather",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customer_complaints",
        "question": "Find the emails of customers who has filed a complaints of the product with the most complaints.",
        "query": "SELECT T1.email_address FROM Customers AS T1 JOIN Complaints AS T2 ON T1.customer_id = T2.customer_id GROUP BY T2.customer_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t1.email_address FROM customers AS t1 JOIN complaints AS t2 ON t1.customer_id  =  t2.customer_id GROUP BY t1.customer_id ORDER BY count(*) LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT mean_sea_level_pressure_inches FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_sea_level_pressure_inches > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_sea_level_pressure_inches > value INTERSECT SELECT max_sea_level_pressure_inches FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "query": "SELECT name , id FROM station",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the names and ids of stations that had more than 14 bikes available on average or were installed in December?",
        "query": "SELECT name , id FROM station",
        "gold_parse": "SELECT T1.name ,  T1.id FROM station AS T1 JOIN status AS T2 ON T1.id  =  T2.station_id GROUP BY T2.station_id HAVING avg(T2.bikes_available)  >  14 UNION SELECT name ,  id FROM station WHERE installation_date LIKE \"12/%\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_dew_point_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the addresses of all the course authors or tutors.",
        "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = value OR T2.course_name = value",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the addresses of all the course authors or tutors.",
        "query": "SELECT T1.address_line_1 FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id WHERE T2.course_name = value OR T2.course_name = value",
        "gold_parse": "SELECT address_line_1 FROM Course_Authors_and_Tutors",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information about employees with D or S in their first name, ordered by salary descending?",
        "query": "SELECT * FROM employees WHERE SALARY < = value ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "Find the state, account type, and credit score of the customer whose number of loan is 0.",
        "query": "SELECT state , acc_type , no_of_loans FROM customer WHERE cust_name = value",
        "gold_parse": "SELECT state ,  acc_type ,  credit_score FROM customer WHERE no_of_loans  =  0",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What are the names and budgets of departments with budgets greater than the average?",
        "query": "SELECT T1.dept_name , T2.dept_name FROM department AS T1 JOIN student AS T2 ON T1.dept_name = T2.dept_name WHERE T1.budget > ( SELECT Avg ( T1.budget ) FROM department AS T1 )",
        "gold_parse": "SELECT dept_name ,  budget FROM department WHERE budget  >  (SELECT avg(budget) FROM department)",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T2.asset_details FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id ORDER BY T1.contract_start_date Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T2.asset_details FROM Maintenance_Contracts AS T1 JOIN Assets AS T2 ON T1.maintenance_contract_id = T2.maintenance_contract_id ORDER BY T1.contract_start_date Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "query": "SELECT title , credits , credits FROM course ORDER BY title Asc",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "Given the titles of all courses, in order of titles and credits.",
        "query": "SELECT title , credits , credits FROM course ORDER BY title Asc",
        "gold_parse": "SELECT title FROM course ORDER BY title ,  credits",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT artist_name FROM song WHERE languages = value OR genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT artist_name FROM song WHERE languages = value OR genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT artist_name FROM song WHERE languages = value OR genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.other_asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T1.chargeable_amount FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T2.other_asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "query": "SELECT Avg ( price_range ) FROM Hotels",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Show the average price range of hotels that have 5 star ratings and allow pets.",
        "query": "SELECT Avg ( price_range ) FROM Hotels",
        "gold_parse": "SELECT avg(price_range) FROM HOTELS WHERE star_rating_code  =  \"5\" AND pets_allowed_yn  =  1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each airport name, how many routes start at that airport?",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "For each airport name, how many routes start at that airport?",
        "query": "SELECT name , Count ( * ) FROM airports GROUP BY name",
        "gold_parse": "SELECT count(*) ,  T1.name FROM airports AS T1 JOIN routes AS T2 ON T1.apid  =  T2.src_apid GROUP BY T1.name",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the teams that have the 5 oldest players?",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the teams that have the 5 oldest players?",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "What are the teams that have the 5 oldest players?",
        "query": "SELECT Team FROM player ORDER BY Age Asc LIMIT value",
        "gold_parse": "SELECT Team FROM player ORDER BY Age DESC LIMIT 5",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT T2.EMPLOYEE_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.MAX_SALARY > ( SELECT Avg ( T2.SALARY ) FROM employees AS T2 )",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "query": "SELECT T2.Location , T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "correctness": 0
    },
    {
        "db_id": "university_basketball",
        "question": "Find the location and all games score of the school that has Clemson as its team name.",
        "query": "SELECT T2.Location , T2.Location FROM basketball_match AS T1 JOIN university AS T2 ON T1.School_ID = T2.School_ID WHERE T1.Team_Name = value",
        "gold_parse": "SELECT t2.All_Games ,  t1.location FROM university AS t1 JOIN basketball_match AS t2 ON t1.school_id  =  t2.school_id WHERE team_name  =  'Clemson'",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT problem_id , log_entry_date FROM Problem_Log WHERE problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT problem_id , log_entry_date FROM Problem_Log WHERE problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T1.preferred_genre = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.Invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List the amount and donor name for the largest amount of donation.",
        "query": "SELECT T2.Invested , T3.donator_name FROM School AS T1 JOIN budget AS T2 ON T2.School_id = T1.School_id JOIN endowment AS T3 ON T1.School_id = T3.School_id ORDER BY T3.amount Desc LIMIT value",
        "gold_parse": "SELECT amount ,  donator_name FROM endowment ORDER BY amount DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "query": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are the different names of all the races in reverse alphabetical order?",
        "query": "SELECT DISTINCT country FROM circuits ORDER BY country Asc",
        "gold_parse": "SELECT DISTINCT name FROM races ORDER BY name DESC",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find the total quantity of products associated with the orders in the \"Cancelled\" status.",
        "query": "SELECT Count ( * ) FROM Customer_Orders WHERE order_status = value",
        "gold_parse": "SELECT sum(t2.order_quantity) FROM customer_orders AS t1 JOIN order_items AS t2 ON t1.order_id  =  t2.order_id WHERE t1.order_status  =  \"Cancelled\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT mean_temperature_f FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_euros > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the names and addressed of customers who have both New and Pending orders?",
        "query": "SELECT customer_name , customer_address FROM Customers GROUP BY customer_id HAVING Count ( * ) = value INTERSECT SELECT customer_name , customer_email FROM Customers GROUP BY customer_id HAVING Count ( * ) < value",
        "gold_parse": "SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"New\" INTERSECT SELECT T1.customer_name ,  T1.customer_address FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\"",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Winery FROM wine WHERE Year < value )",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Winery FROM wine WHERE Year < value )",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "wine_1",
        "question": "What are the names of wines whose production year are before the year of all wines by Brander winery?",
        "query": "SELECT Name FROM wine WHERE Year < ( SELECT Winery FROM wine WHERE Year < value )",
        "gold_parse": "SELECT Name FROM WINE WHERE YEAR  <  (SELECT min(YEAR) FROM WINE WHERE Winery  =  \"Brander\")",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_dew_point_f > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_dew_point_f > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_dew_point_f > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND HIRE_DATE > value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display those employees who joined after 7th September, 1987.",
        "query": "SELECT EMPLOYEE_ID FROM employees WHERE HIRE_DATE > value AND HIRE_DATE > value",
        "gold_parse": "SELECT * FROM employees WHERE hire_date  >  '1987-09-07'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.name FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.name FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.name FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.name FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_humidity > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.min_humidity > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_dew_point_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY mean_wind_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the schools with some players in the mid position but no goalies?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value EXCEPT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the names of the schools with some players in the mid position but no goalies?",
        "query": "SELECT T1.cName FROM College AS T1 JOIN Tryout AS T2 ON T1.cName = T2.cName WHERE T2.pPos = value EXCEPT SELECT T2.cName FROM Player AS T3 JOIN Tryout AS T2 ON T3.pID = T2.pID WHERE T3.HS = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'mid' EXCEPT SELECT cName FROM  tryout WHERE pPos  =  'goalie'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = value",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "List the actual delivery date for all the orders with quantity 1",
        "query": "SELECT T1.Order_Date FROM Customer_Orders AS T1 JOIN Invoices AS T2 ON T1.Order_ID = T2.Order_ID WHERE T2.Order_Quantity = value",
        "gold_parse": "SELECT T1.Actual_Delivery_Date FROM Customer_Orders AS T1 JOIN ORDER_ITEMS AS T2 ON T1.Order_ID  =  T2.Order_ID WHERE T2.Order_Quantity  =  1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "query": "SELECT T1.Name , T2.born_state , T2.age FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "department_management",
        "question": "List the name, born state and age of the heads of departments ordered by age.",
        "query": "SELECT T1.Name , T2.born_state , T2.age FROM department AS T1 JOIN head AS T2 JOIN management AS T3 ON T1.Department_ID = T3.department_ID AND T3.head_ID = T2.head_ID ORDER BY T2.age Asc",
        "gold_parse": "SELECT name ,  born_state ,  age FROM head ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the completion dates of all the tests that have result \"Fail\"?",
        "query": "SELECT T1.date_of_latest_logon FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id JOIN Student_Tests_Taken AS T3 ON T2.registration_id = T3.registration_id WHERE T3.test_result = value",
        "gold_parse": "SELECT T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Student_Tests_Taken AS T2 ON T1.registration_id  =  T2.registration_id WHERE T2.test_result  =  \"Fail\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "query": "SELECT Avg ( balance ) FROM SAVINGS",
        "gold_parse": "SELECT avg(balance) FROM checking",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What is the average balance in checking accounts?",
        "query": "SELECT Avg ( balance ) FROM SAVINGS",
        "gold_parse": "SELECT avg(balance) FROM checking",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees WHERE Role_Code = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the ids of all employees who have authorized destruction.",
        "query": "SELECT Employee_ID FROM Employees WHERE Role_Code = value",
        "gold_parse": "SELECT DISTINCT Destruction_Authorised_by_Employee_ID FROM Documents_to_be_destroyed",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_dollars ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Unsure_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "query": "SELECT state FROM College WHERE enr < value",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "What are the states with colleges that have enrollments less than the some other college?",
        "query": "SELECT state FROM College WHERE enr < value",
        "gold_parse": "SELECT DISTINCT state FROM college WHERE enr  <  (SELECT max(enr) FROM college)",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM list GROUP BY Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM list GROUP BY Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM list GROUP BY Classroom ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the faculty id of each faculty member, along with the number of students he or she advises.",
        "query": "SELECT Rank , Count ( * ) FROM Faculty GROUP BY FacID",
        "gold_parse": "SELECT T1.FacID ,  count(*) FROM Faculty AS T1 JOIN Student AS T2 ON T1.FacID  =  T2.advisor GROUP BY T1.FacID",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.airport_id FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE precipitation_inches > value OR mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "What are the names of customers with checking balances lower than the average checking balance?",
        "query": "SELECT T1.name FROM ACCOUNTS AS T1 JOIN CHECKING AS T2 ON T1.custid = T2.custid WHERE T2.balance < ( SELECT Avg ( T3.balance ) FROM SAVINGS AS T3 )",
        "gold_parse": "SELECT T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid WHERE T2.balance  <  (SELECT avg(balance) FROM checking)",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List title of albums have the number of tracks greater than 10.",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T2.album_id HAVING Sum ( T2.milliseconds ) > value",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "List title of albums have the number of tracks greater than 10.",
        "query": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T2.album_id HAVING Sum ( T2.milliseconds ) > value",
        "gold_parse": "SELECT T1.title FROM albums AS T1 JOIN tracks AS T2 ON T1.id = T2.album_id GROUP BY T1.id HAVING count(T1.id)  >  10",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 EXCEPT SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 EXCEPT SELECT T2.product_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "query": "SELECT T1.artist_name , T2.artist_name FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T1.artist_name = T3.artist_name WHERE T3.song_name LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "query": "SELECT T1.artist_name , T2.artist_name FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T1.artist_name = T3.artist_name WHERE T3.song_name LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "query": "SELECT T1.artist_name , T2.artist_name FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T1.artist_name = T3.artist_name WHERE T3.song_name LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "What are the names of the artists who released a song that has the word love in its title, and where are the artists from?",
        "query": "SELECT T1.artist_name , T2.artist_name FROM artist AS T1 JOIN files AS T2 ON T1.artist_name = T2.artist_name JOIN song AS T3 ON T1.artist_name = T3.artist_name WHERE T3.song_name LIKE value",
        "gold_parse": "SELECT T1.artist_name ,  T1.country FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name WHERE T2.song_name LIKE \"%love%\"",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Max ( Unsure_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Max ( Unsure_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value INTERSECT SELECT JOB_TITLE FROM jobs WHERE MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT MANAGER_ID FROM employees",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find the employee id for all employees who earn more than the average salary.",
        "query": "SELECT MANAGER_ID FROM employees",
        "gold_parse": "SELECT employee_id FROM employees WHERE salary  >  (SELECT AVG(salary) FROM employees)",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM employees WHERE SALARY > value OR SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "Show the name of aircrafts with top three lowest distances.",
        "query": "SELECT name FROM aircraft ORDER BY distance Desc LIMIT value",
        "gold_parse": "SELECT name FROM Aircraft ORDER BY distance LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_temperature_f FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_temperature_f FROM weather WHERE max_temperature_f < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the name and sex of the candidate with the highest support rate?",
        "query": "SELECT T2.Name , T2.Sex FROM candidate AS T1 JOIN people AS T2 ON T1.People_ID = T2.People_ID ORDER BY T1.Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT t1.name ,  t1.sex FROM people AS t1 JOIN candidate AS t2 ON t1.people_id  =  t2.people_id ORDER BY t2.support_rate DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T2.Building = value INTERSECT SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T1.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > = value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "voter_2",
        "question": "Find the first and last name of all the students of age 18 who have vice president votes.",
        "query": "SELECT DISTINCT T1.Fname , T1.Age FROM Student AS T1 JOIN Voting_record AS T2 ON T1.StuID = T2.StuID WHERE T2.President_Vote = value",
        "gold_parse": "SELECT DISTINCT T1.Fname ,  T1.LName FROM STUDENT AS T1 JOIN VOTING_RECORD AS T2 ON T1.StuID  =  T2.VICE_President_VOTE WHERE T1.age  =  18",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of all customers without an account.",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of all customers without an account.",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "correctness": 0
    },
    {
        "db_id": "customers_card_transactions",
        "question": "Show the number of all customers without an account.",
        "query": "SELECT Count ( * ) FROM Customers_Cards AS T1 WHERE T1.customer_id NOT IN ( SELECT T2.customer_id FROM Accounts AS T2 )",
        "gold_parse": "SELECT count(*) FROM Customers WHERE customer_id NOT IN (SELECT customer_id FROM Accounts)",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.player_api_id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 JOIN Player AS T1 ON T2.player_fifa_api_id = T1.player_fifa_api_id WHERE T1.height < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "query": "SELECT T2.Season , T1.Country_name , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "query": "SELECT T2.Season , T1.Country_name , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show the season, the player, and the name of the country that player belongs to.",
        "query": "SELECT T2.Season , T1.Country_name , T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country",
        "gold_parse": "SELECT T2.Season ,  T2.Player ,  T1.Country_name FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id  =  T2.Country",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "query": "SELECT Avg ( Silver ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "query": "SELECT Avg ( Silver ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "sports_competition",
        "question": "What is the average number of gold medals for a club?",
        "query": "SELECT Avg ( Silver ) , Max ( Gold ) FROM club_rank",
        "gold_parse": "SELECT avg(Gold) FROM club_rank",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY < = value ORDER BY T1.MAX_SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id Asc",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "What are the distinct names of customers with an order status of Pending, sorted by customer id?",
        "query": "SELECT DISTINCT T1.customer_name FROM Customers AS T1 JOIN Customer_Orders AS T2 ON T1.customer_id = T2.customer_id ORDER BY T2.customer_id Asc",
        "gold_parse": "SELECT DISTINCT T1.customer_name FROM customers AS T1 JOIN customer_orders AS T2 ON T1.customer_id  =  T2.customer_id WHERE T2.order_status_code  =  \"Pending\" ORDER BY T2.customer_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "What is the average number of working horses of farms with more than 5000 total number of horses?",
        "query": "SELECT Avg ( Sheep_and_Goats ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_buying_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT name FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "What is the count of enzymes without any interactions?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE id NOT IN ( SELECT name FROM enzyme )",
        "gold_parse": "SELECT count(*) FROM enzyme WHERE id NOT IN ( SELECT enzyme_id FROM medicine_enzyme_interaction )",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T1.date_of_latest_logon , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the school name and driver name for all school buses.",
        "query": "SELECT Name , Name FROM driver",
        "gold_parse": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "correctness": 0
    },
    {
        "db_id": "school_bus",
        "question": "Show the school name and driver name for all school buses.",
        "query": "SELECT Name , Name FROM driver",
        "gold_parse": "SELECT T2.school ,  T3.name FROM school_bus AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN driver AS T3 ON T1.driver_id  =  T3.driver_id",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Issue_Date FROM volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Issue_Date FROM volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 WHERE T1.characteristic_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Product_Characteristics AS T2 ON T1.characteristic_id = T2.characteristic_id GROUP BY T2.characteristic_id HAVING Count ( * ) = value",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Comptroller = value AND Comptroller = value",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Who are the lieutenant governor and comptroller from the democratic party?",
        "query": "SELECT Lieutenant_Governor FROM party WHERE Comptroller = value AND Comptroller = value",
        "gold_parse": "SELECT Lieutenant_Governor ,  Comptroller FROM party WHERE Party  =  \"Democratic\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Invoices",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T2.asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT T2.asset_details FROM Parts AS T1 JOIN Assets AS T2 JOIN Asset_Parts AS T3 ON T1.part_id = T3.part_id AND T3.asset_id = T2.asset_id ORDER BY T1.chargeable_amount Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the 3 most common cloud covers in the zip code of 94107?",
        "query": "SELECT zip_code FROM weather WHERE zip_code = value",
        "gold_parse": "SELECT cloud_cover FROM weather WHERE zip_code  =  94107 GROUP BY cloud_cover ORDER BY COUNT (*) DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T1.customer_id , T2.date_moved_in , T2.date_moved_in FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T1.customer_id , T2.date_moved_in , T2.date_moved_in FROM Customers AS T1 JOIN Customer_Events AS T2 ON T1.customer_id = T2.customer_id",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "SELECT StuID FROM Student EXCEPT SELECT Sex FROM Student",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "SELECT StuID FROM Student EXCEPT SELECT Sex FROM Student",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Find job id and date of hire for those employees who was hired between November 5th, 2007 and July 5th, 2009.",
        "query": "SELECT SALARY , HIRE_DATE FROM employees WHERE HIRE_DATE BETWEEN value AND value",
        "gold_parse": "SELECT job_id ,  hire_date FROM employees WHERE hire_date BETWEEN '2007-11-05' AND '2009-07-05'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "query": "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the name of dorms which have TV Lounge but no Study Room as amenity.",
        "query": "SELECT dorm_name FROM Dorm EXCEPT SELECT dorm_name FROM Dorm",
        "gold_parse": "SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'TV Lounge' EXCEPT SELECT T1.dorm_name FROM dorm AS T1 JOIN has_amenity AS T2 ON T1.dormid  =  T2.dormid JOIN dorm_amenity AS T3 ON T2.amenid  =  T3.amenid WHERE T3.amenity_name  =  'Study Room'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING Count ( * ) > = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING Count ( * ) > = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "gas_company",
        "question": "Show headquarters with at least two companies in the banking industry.",
        "query": "SELECT Headquarters FROM company GROUP BY Headquarters HAVING Count ( * ) > = value",
        "gold_parse": "SELECT headquarters FROM company WHERE main_industry  =  'Banking' GROUP BY headquarters HAVING count(*)  >=  2",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE address_content = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE address_content = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Find all the addresses in East Julianaside, Texas or in Gleasonmouth, Arizona.",
        "query": "SELECT address_content FROM Addresses WHERE address_content = value AND state_province_county = value",
        "gold_parse": "SELECT address_content FROM addresses WHERE city  =  \"East Julianaside\" AND state_province_county  =  \"Texas\" UNION SELECT address_content FROM addresses WHERE city  =  \"Gleasonmouth\" AND state_province_county  =  \"Arizona\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "SELECT T1.Document_Type_Name , T1.Document_Type_Description , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the type come, name, and description of the document that has either the name 'Noel CV' or 'King Book'?",
        "query": "SELECT T1.Document_Type_Name , T1.Document_Type_Description , T2.Document_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code WHERE T2.Document_Name = value OR T2.Document_Name = value",
        "gold_parse": "SELECT document_type_code ,  document_name ,  document_description FROM Documents WHERE document_name  =  'Noel CV' OR document_name  =  'King Book'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_requested FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T3.Customer_Event_ID , T3.date_moved_in , T2.date_requested FROM Residents AS T1 JOIN Residents_Services AS T2 ON T2.date_moved_in = T1.date_moved_in JOIN Customer_Events AS T3 ON T1.date_moved_in = T3.date_moved_in",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered courses or attended courses?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the id of students who registered courses or attended courses?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.district , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.district , T2.city , T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.total_budget_percent_budgeted FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT Max ( start_date ) FROM trip",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT Max ( start_date ) FROM trip",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "query": "SELECT Count ( * ) FROM Dorm WHERE gender = value AND gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "Find the total number of students living in the male dorm (with gender M).",
        "query": "SELECT Count ( * ) FROM Dorm WHERE gender = value AND gender = value",
        "gold_parse": "SELECT count(*) FROM student AS T1 JOIN lives_in AS T2 ON T1.stuid  =  T2.stuid JOIN dorm AS T3 ON T3.dormid  =  T2.dormid WHERE T3.gender  =  'M'",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT student_id FROM Student_Course_Registrations",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T3.height FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T1.catalog_name , T3.height FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) < value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_visibility_miles ) < value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Date , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Date , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Date , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = value INTERSECT SELECT T1.cName FROM Player AS T2 JOIN Tryout AS T1 ON T2.pID = T1.pID WHERE T2.HS = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "soccer_2",
        "question": "Find the names of schools that have some students playing in goalie and mid positions.",
        "query": "SELECT T1.cName FROM Tryout AS T1 WHERE T1.pPos = value INTERSECT SELECT T1.cName FROM Player AS T2 JOIN Tryout AS T1 ON T2.pID = T1.pID WHERE T2.HS = value",
        "gold_parse": "SELECT cName FROM  tryout WHERE pPos  =  'goalie' INTERSECT SELECT cName FROM  tryout WHERE pPos  =  'mid'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "query": "SELECT * FROM Activity AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "query": "SELECT * FROM Activity AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "activity_1",
        "question": "Show the ids of all the faculty members who participate in an activity and advise a student.",
        "query": "SELECT * FROM Activity AS T1 UNION SELECT T2.Advisor FROM Student AS T2",
        "gold_parse": "SELECT FacID FROM Faculty_participates_in INTERSECT SELECT advisor FROM Student",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_pounds ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Patient ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Patient ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Nurse AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.PrepNurse GROUP BY T2.Patient ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.lat > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.lat > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "For each team, how many technicians are there?",
        "query": "SELECT Count ( * ) , Team FROM machine GROUP BY Team",
        "gold_parse": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "correctness": 0
    },
    {
        "db_id": "machine_repair",
        "question": "For each team, how many technicians are there?",
        "query": "SELECT Count ( * ) , Team FROM machine GROUP BY Team",
        "gold_parse": "SELECT Team ,  COUNT(*) FROM technician GROUP BY Team",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the name and typical buying and selling prices of the products that have color described as \"yellow\"?",
        "query": "SELECT product_name , typical_selling_price , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( * ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT service_type_code FROM Services WHERE service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT service_type_code FROM Services WHERE service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "What is the distinct service types that are provided by the organization which has detail 'Denesik and Sons Party'?",
        "query": "SELECT DISTINCT service_type_code FROM Services WHERE service_details = value",
        "gold_parse": "SELECT DISTINCT T1.service_type_code FROM services AS T1 JOIN organizations AS T2 ON T1.organization_id  =  T2.organization_id WHERE T2.organization_details  =  'Denesik and Sons Party'",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and total checking and savings balance of the accounts whose savings balance is lower than corresponding checking balance.",
        "query": "SELECT T1.name , T2.balance FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid WHERE T2.balance < value",
        "gold_parse": "SELECT T1.name ,  T3.balance + T2.balance FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid WHERE T3.balance  <  T2.balance",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "query": "SELECT T1.Document_Type_Name , T2.Document_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "What are the codes, names, and descriptions of the different document types?",
        "query": "SELECT T1.Document_Type_Name , T2.Document_Name , T1.Document_Type_Description FROM Ref_Document_Types AS T1 JOIN Documents AS T2 ON T1.Document_Type_Code = T2.Document_Type_Code",
        "gold_parse": "SELECT document_type_code ,  document_type_name ,  document_type_description FROM Ref_document_types",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "What is the name of the country with the most number of home airlines?",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.Invested FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Max ( Unsure_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Max ( Unsure_rate ) FROM candidate",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "query": "SELECT School_name FROM School",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show the names of schools with a total budget amount greater than 100 or a total endowment greater than 10.",
        "query": "SELECT School_name FROM School",
        "gold_parse": "SELECT T2.school_name FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id JOIN endowment AS T3 ON T2.school_id  =  T3.school_id GROUP BY T2.school_name HAVING sum(T1.budgeted)  >  100 OR sum(T3.amount)  >  10",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT * FROM team WHERE Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME , T2.SALARY , T2.DEPARTMENT_ID FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T1.JOB_TITLE ! = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T1.Owner FROM channel AS T1 WHERE T1.Name = value INTERSECT SELECT T2.Owner FROM program AS T2 JOIN broadcast AS T3 ON T2.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T1.Owner FROM channel AS T1 WHERE T1.Name = value INTERSECT SELECT T2.Owner FROM program AS T2 JOIN broadcast AS T3 ON T2.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "query": "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "school_player",
        "question": "Please show different denominations and the corresponding number of schools in descending order.",
        "query": "SELECT Boys_or_Girls , Count ( * ) FROM school GROUP BY School_ID ORDER BY Count ( * ) Desc",
        "gold_parse": "SELECT Denomination ,  COUNT(*) FROM school GROUP BY Denomination ORDER BY COUNT(*) DESC",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Show statement id, statement detail, account detail for accounts.",
        "query": "SELECT T3.Statement_ID , T1.Document_Description , T3.Account_Details FROM Documents AS T1 JOIN Statements AS T2 ON T1.Document_ID = T2.Statement_ID JOIN Accounts AS T3 ON T2.Statement_ID = T3.Statement_ID",
        "gold_parse": "SELECT T1.statement_id ,  T2.statement_details ,  T1.account_details FROM Accounts AS T1 JOIN Statements AS T2 ON T1.statement_id  =  T2.statement_id",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "document_management",
        "question": "What is the average access count of documents that have the least common structure?",
        "query": "SELECT access_count , Avg ( access_count ) FROM Documents GROUP BY document_name ORDER BY Count ( * ) Asc LIMIT value",
        "gold_parse": "SELECT avg(access_count) FROM documents GROUP BY document_structure_code ORDER BY count(*) ASC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "correctness": 0
    },
    {
        "db_id": "culture_company",
        "question": "What are the titles and authors or editors that correspond to books made after 1989?",
        "query": "SELECT T2.Title , T1.Author_or_Editor FROM book_club AS T1 JOIN movie AS T2 JOIN culture_company AS T3 ON T1.book_club_id = T3.book_club_id AND T3.movie_id = T2.movie_id WHERE T1.Year > value",
        "gold_parse": "SELECT book_title ,  author_or_editor FROM book_club WHERE YEAR  >  1989",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Date FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T1.id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_date FROM trip WHERE duration > value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying and selling prices for products that have 'yellow' as their color description.",
        "query": "SELECT product_name , typical_selling_price FROM Products WHERE product_description = value",
        "gold_parse": "SELECT t1.product_name ,  t1.typical_buying_price ,  t1.typical_selling_price FROM products AS t1 JOIN ref_colors AS t2 ON t1.color_code  =  t2.color_code WHERE t2.color_description  =  \"yellow\"",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Famous_Release_date = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Artist = value OR T1.Famous_Release_date = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival , Date_of_ceremony FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival , Date_of_ceremony FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , min_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "query": "SELECT Sum ( Age ) FROM artist",
        "gold_parse": "SELECT Age FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "query": "SELECT Sum ( Age ) FROM artist",
        "gold_parse": "SELECT Age FROM artist",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the ages of all music artists?",
        "query": "SELECT Sum ( Age ) FROM artist",
        "gold_parse": "SELECT Age FROM artist",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines?",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines?",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines?",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_4",
        "question": "Which countries has the most number of airlines?",
        "query": "SELECT T3.country FROM routes AS T1 JOIN airports AS T2 ON T2.apid = T1.dst_apid JOIN airlines AS T3 ON T1.alid = T3.alid GROUP BY T2.country ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT country FROM airlines GROUP BY country ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "find the number of medicines offered by each trade.",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "find the number of medicines offered by each trade.",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "find the number of medicines offered by each trade.",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "find the number of medicines offered by each trade.",
        "query": "SELECT Count ( * ) FROM medicine",
        "gold_parse": "SELECT trade_name ,  count(*) FROM medicine GROUP BY trade_name",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.genre_is = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name WHERE T2.genre_is = value OR T1.preferred_genre = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_publisher FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_publication > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Name all the products with next entry ID greater than 8.",
        "query": "SELECT catalog_name FROM Catalogs WHERE date_of_publication > value",
        "gold_parse": "SELECT catalog_entry_name FROM catalog_contents WHERE next_entry_id  >  8",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "query": "SELECT T2.Governor , T1.County_name FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID",
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the delegate and name of the county they belong to, for each county?",
        "query": "SELECT T2.Governor , T1.County_name FROM county AS T1 JOIN party AS T2 JOIN election AS T3 ON T1.County_Id = T3.District AND T3.Party = T2.Party_ID",
        "gold_parse": "SELECT T2.Delegate ,  T1.County_name FROM county AS T1 JOIN election AS T2 ON T1.County_id  =  T2.District",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T2.characteristic_name , T2.other_characteristic_details , T1.characteristic_type_description FROM Ref_Characteristic_Types AS T1 JOIN Characteristics AS T2 ON T1.characteristic_type_code = T2.characteristic_type_code EXCEPT SELECT T2.characteristic_name , T2.other_characteristic_details , T2.characteristic_data_type FROM Characteristics AS T2",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE mean_temperature_f > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "query": "SELECT T1.booking_id , T2.amount_paid FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "query": "SELECT T1.booking_id , T2.amount_paid FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "products_for_hire",
        "question": "What are the id and the amount of refund of the booking that incurred the most times of payments?",
        "query": "SELECT T1.booking_id , T2.amount_paid FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id = T2.booking_id GROUP BY T2.booking_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.booking_id ,  T1.amount_of_refund FROM Bookings AS T1 JOIN Payments AS T2 ON T1.booking_id  =  T2.booking_id GROUP BY T1.booking_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T2.Music_Festival , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T2.Music_Festival , T1.Song FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Name NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT School_name FROM School WHERE Enrollment < value OR Enrollment > value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "List all the names of schools with an endowment amount smaller than or equal to 10.",
        "query": "SELECT School_name FROM School WHERE Enrollment < value OR Enrollment > value",
        "gold_parse": "SELECT T2.school_name FROM endowment AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id GROUP BY T1.school_id HAVING sum(T1.amount)  <=  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT * FROM weather WHERE mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT * FROM weather WHERE mean_sea_level_pressure_inches > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.Currency_Code ) FROM Ref_Service_Types AS T1 JOIN Drama_Workshop_Groups AS T2 JOIN Services AS T3 ON T1.Service_Type_Code = T3.Service_Type_Code AND T3.Workshop_Group_ID = T2.Workshop_Group_ID WHERE T1.Parent_Service_Type_Code = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "What is the average weight of all players?",
        "query": "SELECT Avg ( agility ) FROM Player_Attributes",
        "gold_parse": "SELECT avg(weight) FROM Player",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_sea_level_pressure_inches > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "college_3",
        "question": "What are the full names of faculties with sex M and who live in building NEB?",
        "query": "SELECT T2.DName , T1.Lname FROM Faculty AS T1 JOIN Department AS T2 JOIN Member_of AS T3 ON T1.FacID = T3.FacID AND T3.DNO = T2.DNO WHERE T1.Sex = value AND T2.Building = value",
        "gold_parse": "SELECT Fname ,  Lname FROM FACULTY WHERE sex  =  \"M\" AND Building  =  \"NEB\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_completion , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "List the dates of enrollment and completion of the student with family name \"Zieme\" and personal name \"Bernie\".",
        "query": "SELECT T2.date_of_completion , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "small_bank_1",
        "question": "Find the name and checking balance of the account with the lowest saving balance.",
        "query": "SELECT T1.name , T1.name FROM ACCOUNTS AS T1 JOIN SAVINGS AS T2 ON T1.custid = T2.custid ORDER BY T2.balance Asc LIMIT value",
        "gold_parse": "SELECT T2.balance ,  T1.name FROM accounts AS T1 JOIN checking AS T2 ON T1.custid  =  T2.custid JOIN savings AS T3 ON T1.custid  =  T3.custid ORDER BY T3.balance LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.organization_id FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "local_govt_and_lot",
        "question": "List the customer event id and the corresponding move in date and property id.",
        "query": "SELECT T2.Customer_Event_ID , T2.date_moved_in , T1.organization_id FROM Things AS T1 JOIN Customer_Events AS T2 ON T1.thing_id = T2.thing_id",
        "gold_parse": "SELECT customer_event_id ,  date_moved_in ,  property_id FROM customer_events",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN team AS T2 JOIN match_season AS T3 ON T1.Country_id = T3.Country AND T3.Team = T2.Team_id WHERE T2.Name LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT T1.Name FROM Physician AS T1 JOIN Appointment AS T2 ON T1.EmployeeID = T2.Physician GROUP BY T2.PrepNurse ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID AND T1.City_ID = T3.Host_City WHERE T2.Competition = value AND T3.Year = value",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the match ids of the cities that hosted competition \"1994 FIFA World Cup qualification\"?",
        "query": "SELECT T1.City FROM city AS T1 JOIN match AS T2 JOIN hosting_city AS T3 ON T1.City_ID = T3.Host_City AND T3.Match_ID = T2.Match_ID AND T1.City_ID = T3.Host_City WHERE T2.Competition = value AND T3.Year = value",
        "gold_parse": "SELECT match_id FROM MATCH WHERE competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.start_date ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What is the number of days that had an average humity above 50 and an average visibility above 8?",
        "query": "SELECT Avg ( T1.start_date ) FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_visibility_miles > value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT id FROM trip WHERE duration > value AND zip_code = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT id FROM trip WHERE duration > value AND zip_code = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_pounds ) , Min ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_registration , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "On what dates did the student with family name \"Zieme\" and personal name \"Bernie\" enroll in and complete the courses?",
        "query": "SELECT T1.date_of_registration , T2.date_of_completion FROM Students AS T1 JOIN Student_Course_Enrolment AS T2 ON T1.student_id = T2.student_id WHERE T1.family_name = value AND T1.personal_name = value",
        "gold_parse": "SELECT T1.date_of_enrolment ,  T1.date_of_completion FROM Student_Course_Enrolment AS T1 JOIN Students AS T2 ON T1.student_id  =  T2.student_id WHERE T2.family_name  =  \"Zieme\" AND T2.personal_name  =  \"Bernie\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Owner = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "find the program owners that have some programs in both morning and night time.",
        "query": "SELECT T2.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID WHERE T1.Owner = value INTERSECT SELECT T1.Owner FROM program AS T1 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID WHERE T3.Time_of_day = value",
        "gold_parse": "SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Morning\" INTERSECT SELECT t1.owner FROM program AS t1 JOIN broadcast AS t2 ON t1.program_id  =  t2.program_id WHERE t2.Time_of_day  =  \"Night\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles < value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_dew_point_f FROM weather WHERE min_visibility_miles < value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T2.Pilot FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM employees ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM employees ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information for all employees who have the letters D or S in their first name and also arrange the result in descending order by salary.",
        "query": "SELECT * FROM employees ORDER BY SALARY Desc",
        "gold_parse": "SELECT * FROM employees WHERE first_name LIKE '%D%' OR first_name LIKE '%S%' ORDER BY salary DESC",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria = value",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "correctness": 0
    },
    {
        "db_id": "medicine_enzyme_interaction",
        "question": "How many medicines have the FDA approval status 'No' ?",
        "query": "SELECT Count ( * ) FROM enzyme WHERE Porphyria = value",
        "gold_parse": "SELECT count(*) FROM medicine WHERE FDA_approved  =  'No'",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.payment_method_code ) FROM Ref_Payment_Methods AS T1 JOIN Invoices AS T2 ON T1.payment_method_code = T2.payment_method_code WHERE T1.payment_method_description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT T2.payment_method_code ) FROM Ref_Payment_Methods AS T1 JOIN Invoices AS T2 ON T1.payment_method_code = T2.payment_method_code WHERE T1.payment_method_description = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the name of the nurse has the most appointments?",
        "query": "SELECT Name FROM Physician GROUP BY Name ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.name FROM nurse AS T1 JOIN appointment AS T2 ON T1.employeeid  =  T2.prepnurse GROUP BY T1.employeeid ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "What is the name of all the people who are older than at least one engineer? Order them by age.",
        "query": "SELECT T1.name FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name GROUP BY T2.friend HAVING Sum ( T1.age ) > value",
        "gold_parse": "SELECT name FROM Person WHERE age  >  (SELECT min(age) FROM person WHERE job  =  'engineer') ORDER BY age",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "query": "SELECT DISTINCT positionText FROM constructorStandings",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "correctness": 0
    },
    {
        "db_id": "formula_1",
        "question": "What are all the different first names of the drivers who are in position as standing and won?",
        "query": "SELECT DISTINCT positionText FROM constructorStandings",
        "gold_parse": "SELECT DISTINCT T1.forename FROM drivers AS T1 JOIN driverstandings AS T2 ON T1.driverid = T2.driverid WHERE T2.position = 1 AND T2.wins = 1",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the average person for each job?",
        "query": "SELECT job , Avg ( age ) FROM Person GROUP BY city",
        "gold_parse": "SELECT avg(age) ,  job FROM Person GROUP BY job",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "How old is the average person for each job?",
        "query": "SELECT job , Avg ( age ) FROM Person GROUP BY city",
        "gold_parse": "SELECT avg(age) ,  job FROM Person GROUP BY job",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE location = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "What is the average length in feet of the bridges?",
        "query": "SELECT Avg ( length_feet ) FROM bridge WHERE location = value",
        "gold_parse": "SELECT avg(length_feet) FROM bridge",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT gender , artist_name FROM artist ORDER BY gender Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT gender , artist_name FROM artist ORDER BY gender Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.address , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "Which city has the most addresses? List the city name, number of addresses, and city id.",
        "query": "SELECT T1.address , T2.city , T2.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id = T2.city_id GROUP BY T1.city_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.city ,  count(*) ,  T1.city_id FROM address AS T1 JOIN city AS T2 ON T1.city_id  =  T2.city_id GROUP BY T1.city_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY > value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "scientist_1",
        "question": "What are the names of scientists who are assigned to any project?",
        "query": "SELECT Name FROM Scientists WHERE Name NOT IN ( SELECT Name FROM Scientists )",
        "gold_parse": "SELECT T2.name FROM assignedto AS T1 JOIN scientists AS T2 ON T1.scientist  =  T2.ssn",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_humidity > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Student",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the student ids of students who don't have any allergies?",
        "query": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Student",
        "gold_parse": "SELECT StuID FROM Student EXCEPT SELECT StuID FROM Has_allergy",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR rental_rate < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "sakila_1",
        "question": "What are the titles of films that are either longer than 100 minutes or rated PG other than those that cost more than 200 to replace?",
        "query": "SELECT title FROM film WHERE replacement_cost > value OR rental_rate < value",
        "gold_parse": "SELECT title FROM film WHERE LENGTH  >  100 OR rating  =  'PG' EXCEPT SELECT title FROM film WHERE replacement_cost  >  200",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1 JOIN Products AS T2 JOIN Product_Characteristics AS T3 ON T1.characteristic_id = T3.characteristic_id AND T3.product_id = T2.product_id WHERE T2.product_name = value EXCEPT SELECT T1.characteristic_name , T1.other_characteristic_details , T1.characteristic_data_type FROM Characteristics AS T1",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MAX_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival , Music_Festival FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT Music_Festival , Music_Festival FROM music_festival",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents are with document type code BK for each product id?",
        "query": "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = value GROUP BY Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "How many documents are with document type code BK for each product id?",
        "query": "SELECT Count ( * ) , Document_Type_Code FROM Documents WHERE Document_Type_Code = value GROUP BY Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display all the information of employees whose salary is in the range of 8000 and 12000 and commission is not null or department number does not equal to 40.",
        "query": "SELECT * FROM departments AS T1 JOIN employees AS T2 ON T1.DEPARTMENT_ID = T2.DEPARTMENT_ID WHERE T2.SALARY > value OR T1.DEPARTMENT_NAME = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_temperature_f FROM weather ORDER BY max_wind_Speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "Find the number of distinct currency codes used in drama workshop groups.",
        "query": "SELECT Count ( DISTINCT payment_method_code ) FROM Ref_Payment_Methods",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.precipitation_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T2.zip_code FROM station AS T1 JOIN weather AS T2 WHERE T1.long > value OR T2.precipitation_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age > value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age > value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "musical",
        "question": "List the name of musicals that do not have actors.",
        "query": "SELECT Name FROM actor WHERE Musical_ID NOT IN ( SELECT Musical_ID FROM actor )",
        "gold_parse": "SELECT Name FROM musical WHERE Musical_ID NOT IN (SELECT Musical_ID FROM actor)",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 5?",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 5?",
        "query": "SELECT Classroom FROM list WHERE Grade = value ORDER BY Classroom Asc",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  5",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "List the full name (first and last name), and salary for those employees who earn below 6000.",
        "query": "SELECT T2.FIRST_NAME , T2.LAST_NAME FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY = value AND T1.MIN_SALARY < value",
        "gold_parse": "SELECT first_name ,  last_name ,  salary FROM employees WHERE salary  <  6000",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Who are the different players, what season do they play in, and what is the name of the team they are on?",
        "query": "SELECT Season FROM match_season",
        "gold_parse": "SELECT T1.Season ,  T1.Player ,  T2.Name FROM match_season AS T1 JOIN team AS T2 ON T1.Team  =  T2.Team_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > value AND T2.events = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT T1.start_date FROM trip AS T1 JOIN weather AS T2 WHERE T1.duration > value AND T2.events = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song WHERE genre_is = value OR genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song WHERE genre_is = value OR genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT song_name FROM song WHERE genre_is = value OR genre_is = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MIN_SALARY < = value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Find the id of the candidate who got the lowest oppose rate.",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Consider_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "What is the product ID of the most frequently ordered item on invoices?",
        "query": "SELECT Order_ID FROM Invoices GROUP BY Order_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Product_ID FROM INVOICES GROUP BY Product_ID ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the distinct districts for elections?",
        "query": "SELECT DISTINCT Committee FROM election",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the distinct districts for elections?",
        "query": "SELECT DISTINCT Committee FROM election",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "What are the distinct districts for elections?",
        "query": "SELECT DISTINCT Committee FROM election",
        "gold_parse": "SELECT DISTINCT District FROM election",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who either registered or attended a course?",
        "query": "SELECT student_id FROM Student_Course_Attendance GROUP BY student_id HAVING Count ( * ) > = value",
        "gold_parse": "SELECT student_id FROM student_course_registrations UNION SELECT student_id FROM student_course_attendance",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Give me the average and minimum price (in Euro) of the products.",
        "query": "SELECT Avg ( price_in_euros ) , Min ( price_in_pounds ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "query": "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > value",
        "gold_parse": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "tracking_orders",
        "question": "Find the ids of orders which are shipped after 2000-01-01.",
        "query": "SELECT T2.order_id FROM Invoices AS T1 JOIN Shipments AS T2 ON T1.invoice_number = T2.invoice_number WHERE T1.invoice_date > value",
        "gold_parse": "SELECT order_id FROM shipments WHERE shipment_date > \"2000-01-01\"",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "What is the course title of the prerequisite of course Mobile Computing?",
        "query": "SELECT title FROM course WHERE dept_name = value",
        "gold_parse": "SELECT title FROM course WHERE course_id IN (SELECT T1.prereq_id FROM prereq AS T1 JOIN course AS T2 ON T1.course_id  =  T2.course_id WHERE T2.title  =  'Mobile Computing')",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Consider_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM regions",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "query": "SELECT Classroom FROM list WHERE Grade = value INTERSECT SELECT Classroom FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "query": "SELECT Classroom FROM list WHERE Grade = value INTERSECT SELECT Classroom FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which classrooms are used by grade 4?",
        "query": "SELECT Classroom FROM list WHERE Grade = value INTERSECT SELECT Classroom FROM list WHERE Grade = value",
        "gold_parse": "SELECT DISTINCT classroom FROM list WHERE grade  =  4",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "wrestler",
        "question": "Please show the most common reigns of wrestlers.",
        "query": "SELECT Event FROM wrestler GROUP BY Event ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Reign FROM wrestler GROUP BY Reign ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_humidity FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "How many days had both mean humidity above 50 and mean visibility above 8?",
        "query": "SELECT Count ( * ) FROM weather WHERE min_humidity > value INTERSECT SELECT min_humidity FROM weather WHERE max_sea_level_pressure_inches < value",
        "gold_parse": "SELECT COUNT(*) FROM weather WHERE mean_humidity  >  50 AND mean_visibility_miles  >  8",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MIN_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What are the dates of ceremony and results for each music festival?",
        "query": "SELECT T1.Issue_Date , T2.Result FROM volume AS T1 JOIN music_festival AS T2 ON T1.Volume_ID = T2.Volume",
        "gold_parse": "SELECT Date_of_ceremony ,  RESULT FROM music_festival",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( Famous_Release_date ) FROM artist WHERE Artist > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Competition = value",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "What is the venue of the competition \"1994 FIFA World Cup qualification\" hosted by \"Nanjing ( Jiangsu )\"?",
        "query": "SELECT Venue FROM match WHERE Competition = value AND Competition = value",
        "gold_parse": "SELECT T3.venue FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id = T2.host_city JOIN MATCH AS T3 ON T2.match_id = T3.match_id WHERE T1.city = \"Nanjing ( Jiangsu )\" AND T3.competition = \"1994 FIFA World Cup qualification\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "query": "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value AND T1.Allergy = value",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "How many students who are female are allergic to milk or eggs?",
        "query": "SELECT Count ( * ) FROM Has_Allergy AS T1 JOIN Student AS T2 ON T1.StuID = T2.StuID WHERE T2.Sex = value AND T1.Allergy = value",
        "gold_parse": "SELECT count(*) FROM has_allergy AS T1 JOIN Student AS T2 ON T1.StuID  =  T2.StuID WHERE T2.sex  =  \"F\" AND T1.allergy  =  \"Milk\" OR T1.allergy  =  \"Eggs\"",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection = value OR Connection = value",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "correctness": 0
    },
    {
        "db_id": "browser_web",
        "question": "What are the name and os of web client accelerators that do not work with only a 'Broadband' type connection?",
        "query": "SELECT name , Client FROM Web_client_accelerator WHERE Connection = value OR Connection = value",
        "gold_parse": "SELECT name ,  operating_system FROM web_client_accelerator WHERE CONNECTION != 'Broadband'",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "soccer_1",
        "question": "List all of the player ids with a height of at least 180cm and an overall rating higher than 85.",
        "query": "SELECT T1.id FROM Player AS T1 WHERE T1.height > value INTERSECT SELECT T2.player_api_id FROM Player_Attributes AS T2 WHERE T2.overall_rating < value",
        "gold_parse": "SELECT player_api_id FROM Player WHERE height  >=  180 INTERSECT SELECT player_api_id FROM Player_Attributes WHERE overall_rating  >  85",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Name = value",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "Show the location name for document \"Robin CV\".",
        "query": "SELECT Location_Name FROM Ref_Locations WHERE Location_Name = value",
        "gold_parse": "SELECT T3.location_name FROM All_documents AS T1 JOIN Document_locations AS T2 ON T1.document_id  =  T2.document_id JOIN Ref_locations AS T3 ON T2.location_code  =  T3.location_code WHERE T1.document_name  =  \"Robin CV\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex > = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "allergy_1",
        "question": "What are the distinct first names and cities of the students who have allergy either to milk or to cat?",
        "query": "SELECT DISTINCT Fname , city_code FROM Student WHERE Sex > = value",
        "gold_parse": "SELECT DISTINCT T1.fname ,  T1.city_code FROM Student AS T1 JOIN Has_Allergy AS T2 ON T1.stuid  =  T2.stuid WHERE T2.Allergy  =  \"Milk\" OR T2.Allergy  =  \"Cat\"",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT T2.common_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT T2.common_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "protein_institute",
        "question": "Show the protein name and the institution name.",
        "query": "SELECT T2.common_name , T1.Type FROM Institution AS T1 JOIN protein AS T2 ON T1.Institution_id = T2.Institution_id",
        "gold_parse": "SELECT T2.protein_name ,  T1.institution FROM institution AS T1 JOIN protein AS T2 ON T1.institution_id  =  T2.institution_id",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "SELECT f_id , artist_name , artist_name FROM song ORDER BY rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "List the id, genre and artist name of English songs ordered by rating.",
        "query": "SELECT f_id , artist_name , artist_name FROM song ORDER BY rating Asc",
        "gold_parse": "SELECT f_id ,  genre_is ,  artist_name FROM song WHERE languages  =   \"english\" ORDER BY rating",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "query": "SELECT Count ( * ) , T1.zip_code FROM trip AS T1 JOIN weather AS T2 GROUP BY T2.zip_code",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "For each zip code, return how many times max wind speed reached 25?",
        "query": "SELECT Count ( * ) , T1.zip_code FROM trip AS T1 JOIN weather AS T2 GROUP BY T2.zip_code",
        "gold_parse": "SELECT zip_code , count(*) FROM weather WHERE max_wind_Speed_mph  >=  25 GROUP BY zip_code",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME = value OR LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What are the full name, hire date, salary, and department id for employees without the letter M in their first name?",
        "query": "SELECT FIRST_NAME , LAST_NAME , SALARY , DEPARTMENT_ID FROM employees WHERE FIRST_NAME = value OR LAST_NAME = value",
        "gold_parse": "SELECT first_name ,  last_name ,  hire_date ,  salary ,  department_id FROM employees WHERE first_name NOT LIKE '%M%'",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T2.song_name FROM genre AS T1 JOIN song AS T2 ON T1.g_name = T2.genre_is WHERE T2.genre_is = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY = value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Can you return all detailed info of jobs which was done by any of the employees who is presently earning a salary on and above 12000?",
        "query": "SELECT * FROM jobs WHERE MIN_SALARY = value AND MAX_SALARY > value",
        "gold_parse": "SELECT * FROM  job_history AS T1 JOIN employees AS T2 ON T1.employee_id  =  T2.employee_id WHERE T2.salary  >=  12000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY BETWEEN value AND value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM employees WHERE SALARY BETWEEN value AND value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Store_Name = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "cre_Drama_Workshop_Groups",
        "question": "How many distinct currency codes are there for all drama workshop groups?",
        "query": "SELECT Count ( DISTINCT Currency_Code ) FROM Drama_Workshop_Groups WHERE Store_Name = value",
        "gold_parse": "SELECT count(DISTINCT Currency_Code) FROM Drama_Workshop_Groups",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Support_rate FROM candidate ORDER BY Consider_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets WHERE Market_Details = value OR Market_Details = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "Find the details of all the markets that are accessible by walk or bus.",
        "query": "SELECT Market_Details FROM Street_Markets WHERE Market_Details = value OR Market_Details = value",
        "gold_parse": "SELECT T1.Market_Details FROM Street_Markets AS T1 JOIN TOURIST_ATTRACTIONS AS T2 ON T1.Market_ID  =  T2.Tourist_Attraction_ID WHERE T2.How_to_Get_There  =  \"walk\" OR  T2.How_to_Get_There  =  \"bus\"",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T2.LastName FROM Customer AS T1 JOIN Employee AS T2 ON T1.SupportRepId = T2.EmployeeId GROUP BY T1.SupportRepId HAVING Count ( * ) > value",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < value",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to < value",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.ICAO FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.ICAO FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "flight_company",
        "question": "What is the id, name and IATA code of the airport that had most number of flights?",
        "query": "SELECT T1.id , T1.name , T1.ICAO FROM airport AS T1 JOIN flight AS T2 ON T1.id = T2.airport_id GROUP BY T2.airport_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.id ,  T1.name ,  T1.IATA FROM airport AS T1 JOIN flight AS T2 ON T1.id  =  T2.airport_id GROUP BY T2.id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "What is all the information regarding employees with salaries above the minimum and under 2500?",
        "query": "SELECT * FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN (SELECT MIN(salary) FROM employees) AND 2500",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "query": "SELECT student_id FROM Student_Course_Attendance",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "correctness": 0
    },
    {
        "db_id": "student_assessment",
        "question": "What are the ids of the students who registered for course 301?",
        "query": "SELECT student_id FROM Student_Course_Attendance",
        "gold_parse": "SELECT student_id FROM student_course_attendance WHERE course_id  =  301",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "For the problem with id 10, return the ids and dates of its problem logs.",
        "query": "SELECT T1.problem_log_id , T2.date_problem_reported FROM Problem_Log AS T1 JOIN Problems AS T2 ON T1.problem_id = T2.problem_id WHERE T1.problem_log_id = value",
        "gold_parse": "SELECT problem_log_id ,  log_entry_date FROM problem_log WHERE problem_id = 10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT date FROM weather WHERE max_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "What is the id of the candidate with the lowest oppose rate?",
        "query": "SELECT Candidate_ID FROM candidate ORDER BY Unsure_rate Asc LIMIT value",
        "gold_parse": "SELECT Candidate_ID FROM candidate ORDER BY oppose_rate LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T2.Name , T1.Origin , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T2.Name , T1.Origin , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T2.Name , T1.Origin , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "program_share",
        "question": "List the name, origin and owner of each program.",
        "query": "SELECT T2.Name , T1.Origin , T1.Owner FROM program AS T1 JOIN channel AS T2 JOIN broadcast AS T3 ON T1.Program_ID = T3.Program_ID AND T3.Channel_ID = T2.Channel_ID",
        "gold_parse": "SELECT name ,  origin ,  OWNER FROM program",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "Which catalog contents has price above 700 dollars? Show their catalog entry names and capacities.",
        "query": "SELECT T3.catalog_entry_name , T1.catalog_name FROM Catalogs AS T1 JOIN Catalog_Structure AS T2 ON T1.catalog_id = T2.catalog_id JOIN Catalog_Contents AS T3 ON T2.catalog_level_number = T3.catalog_level_number WHERE T3.price_in_dollars > value",
        "gold_parse": "SELECT catalog_entry_name ,  capacity FROM Catalog_Contents WHERE price_in_dollars  >  700",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Consider_rate FROM candidate ORDER BY Unsure_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "SELECT email , phone FROM customers WHERE first_name = value",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "SELECT email , phone FROM customers WHERE first_name = value",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "correctness": 0
    },
    {
        "db_id": "store_1",
        "question": "What is the email and phone number of Astrid Gruber the customer?",
        "query": "SELECT email , phone FROM customers WHERE first_name = value",
        "gold_parse": "SELECT email ,  phone FROM customers WHERE first_name = \"Astrid\" AND last_name = \"Gruber\"",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND start_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me ids for all the trip that took place in a zip code area with average mean temperature above 60.",
        "query": "SELECT start_station_id FROM trip WHERE duration > value AND start_station_name = value",
        "gold_parse": "SELECT T1.id FROM trip AS T1 JOIN weather AS T2 ON T1.zip_code  =  T2.zip_code GROUP BY T2.zip_code HAVING avg(T2.mean_temperature_f)  >  60",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "correctness": 0
    },
    {
        "db_id": "cre_Theme_park",
        "question": "What are the names of the tourist attractions that have parking or shopping as their feature details?",
        "query": "SELECT Name FROM Tourist_Attractions",
        "gold_parse": "SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'park' UNION SELECT T1.Name FROM Tourist_Attractions AS T1 JOIN Tourist_Attraction_Features AS T2 ON T1.tourist_attraction_id  =  T2.tourist_attraction_id JOIN Features AS T3 ON T2.Feature_ID  =  T3.Feature_ID WHERE T3.feature_Details  =  'shopping'",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "What are the names, details and data types of the characteristics which are never used by any product?",
        "query": "SELECT characteristic_name , other_characteristic_details , characteristic_type_code FROM Characteristics WHERE characteristic_name = value EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Give the names, details, and data types of characteristics that are not found in any product.",
        "query": "SELECT characteristic_name , characteristic_name , other_characteristic_details FROM Characteristics EXCEPT SELECT characteristic_name , other_characteristic_details , characteristic_data_type FROM Characteristics",
        "gold_parse": "SELECT characteristic_name ,  other_characteristic_details ,  characteristic_data_type FROM CHARACTERISTICS EXCEPT SELECT t1.characteristic_name ,  t1.other_characteristic_details ,  t1.characteristic_data_type FROM CHARACTERISTICS AS t1 JOIN product_characteristics AS t2 ON t1.characteristic_id  =  t2.characteristic_id",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT Max ( date ) FROM weather",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Give me the dates when the max temperature was higher than 85.",
        "query": "SELECT Max ( date ) FROM weather",
        "gold_parse": "SELECT date FROM weather WHERE max_temperature_f  >  85",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "List the name of all different customers who have some loan sorted by their total loan amount.",
        "query": "SELECT cust_name FROM customer ORDER BY credit_score Asc",
        "gold_parse": "SELECT T1.cust_name FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name ORDER BY sum(T2.amount)",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MAX_SALARY FROM jobs WHERE MIN_SALARY LIKE value AND MAX_SALARY > value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.Budget_invested_percent FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "school_finance",
        "question": "Show each school name, its budgeted amount, and invested amount in year 2002 or after.",
        "query": "SELECT T1.School_name , T2.Budgeted , T2.Budget_invested_percent FROM School AS T1 JOIN budget AS T2 ON T1.School_id = T2.School_id WHERE T2.Year > = value",
        "gold_parse": "SELECT T2.school_name ,  T1.budgeted ,  T1.invested FROM budget AS T1 JOIN school AS T2 ON T1.school_id  =  T2.school_id WHERE T1.year  >=  2002",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_disposed_date Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT asset_details FROM Assets ORDER BY asset_disposed_date Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Manager_ID = value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Manager_ID = value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Manager_ID = value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "When and in what zip code did max temperature reach 80?",
        "query": "SELECT zip_code , min_humidity FROM weather WHERE min_visibility_miles > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_feet Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_feet Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_feet Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "architecture",
        "question": "show the name of all bridges that was designed by american archtect, and sort the result by the bridge feet length.",
        "query": "SELECT name FROM bridge ORDER BY length_feet Desc",
        "gold_parse": "SELECT t1.name FROM bridge AS t1 JOIN architect AS t2 ON t1.architect_id  =  t2.id WHERE t2.nationality  =  'American' ORDER BY t1.length_feet",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "entrepreneur",
        "question": "Return the investor who have invested in the greatest number of entrepreneurs.",
        "query": "SELECT Company FROM entrepreneur GROUP BY Entrepreneur_ID ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT Investor FROM entrepreneur GROUP BY Investor ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT T1.zip_code FROM trip AS T1 JOIN weather AS T2 WHERE T2.min_temperature_f > value OR T2.min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age = value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "railway",
        "question": "Show the countries that have managers of age above 50 or below 46.",
        "query": "SELECT Country FROM manager WHERE Age > value OR Age = value",
        "gold_parse": "SELECT Country FROM manager WHERE Age  >  50 OR Age  <  46",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "query": "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "tracking_software_problems",
        "question": "Which product has the most problems? Give me the number of problems and the product name.",
        "query": "SELECT T1.product_details , T1.product_name FROM Product AS T1 JOIN Problems AS T2 ON T1.product_id = T2.product_id GROUP BY T2.product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT count(*) ,  T1.product_name FROM product AS T1 JOIN problems AS T2 ON T1.product_id = T2.product_id GROUP BY T1.product_name ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "query": "SELECT T1.personal_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "e_learning",
        "question": "What are the personal name, family name, and author ID of the course author who teaches the most courses?",
        "query": "SELECT T1.personal_name , T1.family_name , T2.course_description FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id = T2.author_id GROUP BY T2.author_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.personal_name ,  T1.family_name ,  T2.author_id FROM Course_Authors_and_Tutors AS T1 JOIN Courses AS T2 ON T1.author_id  =  T2.author_id GROUP BY T2.author_id ORDER BY COUNT(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Oppose_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Oppose_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Please list support, consider, and oppose rates for each candidate in ascending order by unsure rate.",
        "query": "SELECT Unsure_rate , Oppose_rate , Oppose_rate FROM candidate ORDER BY Unsure_rate Asc",
        "gold_parse": "SELECT Support_rate ,  Consider_rate ,  Oppose_rate FROM candidate ORDER BY unsure_rate",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "student_1",
        "question": "Which teacher teaches the most students? Give me the first name and last name of the teacher.",
        "query": "SELECT FirstName , LastName FROM teachers GROUP BY FirstName ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T2.firstname ,  T2.lastname FROM list AS T1 JOIN teachers AS T2 ON T1.classroom  =  T2.classroom GROUP BY T2.firstname ,  T2.lastname ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the id of the staff whose Staff Department Assignment was earlier than that of any Clerical Staff.",
        "query": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to > ( SELECT Min ( date_assigned_to ) FROM Staff_Department_Assignments )",
        "gold_parse": "SELECT staff_id FROM Staff_Department_Assignments WHERE date_assigned_to  <  (SELECT max(date_assigned_to) FROM Staff_Department_Assignments WHERE job_title_code  =  'Clerical Staff')",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , mean_dew_point_f FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "Return all information about employees with salaries between 8000 and 12000 for which commission is not null or where their department id is not 40.",
        "query": "SELECT * FROM jobs AS T1 JOIN employees AS T2 ON T1.JOB_ID = T2.JOB_ID WHERE T2.SALARY > value OR T1.MAX_SALARY LIKE value",
        "gold_parse": "SELECT * FROM employees WHERE salary BETWEEN 8000 AND 12000 AND commission_pct != \"null\" OR  department_id != 40",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.LastName NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.LastName NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.LastName NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "chinook_1",
        "question": "Please show the employee last names that serves no more than 20 customers.",
        "query": "SELECT T1.LastName FROM Employee AS T1 WHERE T1.LastName NOT IN ( SELECT T2.SupportRepId FROM Customer AS T2 WHERE T2.LastName > value )",
        "gold_parse": "SELECT T1.LastName FROM CUSTOMER AS T1 JOIN EMPLOYEE AS T2 ON T1.SupportRepId  =  T2.EmployeeId GROUP BY T1.SupportRepId HAVING COUNT(*)  <=  20",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "query": "SELECT T1.Date , T2.Player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.Competition Desc",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "query": "SELECT T1.Date , T2.Player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.Competition Desc",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "correctness": 0
    },
    {
        "db_id": "game_injury",
        "question": "For each injury accident, find the date of the game and the name of the injured player in the game, and sort the results in descending order of game season.",
        "query": "SELECT T1.Date , T2.Player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id = T2.game_id ORDER BY T1.Competition Desc",
        "gold_parse": "SELECT T1.date ,  T2.player FROM game AS T1 JOIN injury_accident AS T2 ON T1.id  =  T2.game_id ORDER BY T1.season DESC",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "query": "SELECT name FROM aircraft WHERE name LIKE value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "correctness": 0
    },
    {
        "db_id": "flight_1",
        "question": "What is the aircraft name for the flight with number 99",
        "query": "SELECT name FROM aircraft WHERE name LIKE value",
        "gold_parse": "SELECT T2.name FROM Flight AS T1 JOIN Aircraft AS T2 ON T1.aid  =  T2.aid WHERE T1.flno  =  99",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "SELECT Count ( * ) , T2.Budget_Type_Code FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value GROUP BY T1.Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "SELECT Count ( * ) , T2.Budget_Type_Code FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value GROUP BY T1.Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Docs_and_Epenses",
        "question": "Count the number of documents with the type code BK that correspond to each product id.",
        "query": "SELECT Count ( * ) , T2.Budget_Type_Code FROM Documents AS T1 JOIN Documents_with_Expenses AS T2 ON T1.Document_ID = T2.Document_ID WHERE T1.Document_Type_Code = value GROUP BY T1.Document_ID",
        "gold_parse": "SELECT count(*) ,  project_id FROM Documents WHERE document_type_code  =  \"BK\" GROUP BY project_id",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "what are the top 3 highest support rates?",
        "query": "SELECT Oppose_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many total credits are offered by each department?",
        "query": "SELECT Sum ( tot_cred ) , dept_name FROM student GROUP BY dept_name",
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many total credits are offered by each department?",
        "query": "SELECT Sum ( tot_cred ) , dept_name FROM student GROUP BY dept_name",
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "college_2",
        "question": "How many total credits are offered by each department?",
        "query": "SELECT Sum ( tot_cred ) , dept_name FROM student GROUP BY dept_name",
        "gold_parse": "SELECT sum(credits) ,  dept_name FROM course GROUP BY dept_name",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "query": "SELECT product_details FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "query": "SELECT product_details FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "customers_and_addresses",
        "question": "Which product has been ordered most number of times?",
        "query": "SELECT product_details FROM Products GROUP BY product_id ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT t2.product_details FROM order_items AS t1 JOIN products AS t2 ON t1.product_id  =  t2.product_id GROUP BY t1.product_id ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) > value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "Find the zip code in which the average mean visibility is lower than 10.",
        "query": "SELECT zip_code FROM weather GROUP BY zip_code HAVING Avg ( min_sea_level_pressure_inches ) > value",
        "gold_parse": "SELECT zip_code FROM weather GROUP BY zip_code HAVING avg(mean_visibility_miles)  <  10",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "query": "SELECT T2.amenity_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T1.student_capacity > value",
        "gold_parse": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "correctness": 0
    },
    {
        "db_id": "dorm_1",
        "question": "What are the names of all the dorms that can accomdate more than 300 students?",
        "query": "SELECT T2.amenity_name FROM Dorm AS T1 JOIN Dorm_amenity AS T2 JOIN Has_amenity AS T3 ON T1.dormid = T3.dormid AND T3.amenid = T2.amenid WHERE T1.student_capacity > value",
        "gold_parse": "SELECT dorm_name FROM dorm WHERE student_capacity  >  300",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying prices for all products.",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying prices for all products.",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "correctness": 0
    },
    {
        "db_id": "products_gen_characteristics",
        "question": "Return the names and typical buying prices for all products.",
        "query": "SELECT product_name , typical_selling_price FROM Products",
        "gold_parse": "SELECT product_name ,  typical_buying_price FROM products",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT cust_name , credit_score FROM customer WHERE no_of_loans > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT cust_name , credit_score FROM customer WHERE no_of_loans > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "SELECT Employee_Name , Other_Details FROM Employees",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "cre_Doc_Tracking_DB",
        "question": "What are the names of the employees who authorised the destruction and the employees who destroyed the corresponding documents?",
        "query": "SELECT Employee_Name , Other_Details FROM Employees",
        "gold_parse": "SELECT T2.employee_name ,  T3.employee_name FROM Documents_to_be_destroyed AS T1 JOIN Employees AS T2 ON T1.Destruction_Authorised_by_Employee_ID = T2.employee_id JOIN Employees AS T3 ON T1.Destroyed_by_Employee_ID = T3.employee_id",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "candidate_poll",
        "question": "Return the top 3 greatest support rates.",
        "query": "SELECT Support_rate FROM candidate ORDER BY Oppose_rate Desc LIMIT value",
        "gold_parse": "SELECT support_rate FROM candidate ORDER BY support_rate DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT other_asset_details FROM Assets ORDER BY asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "assets_maintenance",
        "question": "List the all the assets make, model, details by the disposed date ascendingly.",
        "query": "SELECT other_asset_details FROM Assets ORDER BY asset_details Asc",
        "gold_parse": "SELECT asset_make ,  asset_model ,  asset_details FROM Assets ORDER BY asset_disposed_date ASC",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T1.gender Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the gender and name of artist who produced the song with the lowest resolution.",
        "query": "SELECT T1.gender , T2.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name = T2.artist_name ORDER BY T1.gender Asc LIMIT value",
        "gold_parse": "SELECT T1.gender ,  T1.artist_name FROM artist AS T1 JOIN song AS T2 ON T1.artist_name  =  T2.artist_name ORDER BY T2.resolution LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_sea_level_pressure_inches > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What zip codes have a station with a max temperature greater than or equal to 80 and when did it reach that temperature?",
        "query": "SELECT zip_code FROM weather WHERE min_sea_level_pressure_inches > value OR min_sea_level_pressure_inches > value",
        "gold_parse": "SELECT date ,  zip_code FROM weather WHERE max_temperature_f  >=  80",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "loan_1",
        "question": "What are the names and account balances for customers who have taken a total amount of more than 5000 in loans?",
        "query": "SELECT cust_name , acc_bal FROM customer WHERE no_of_loans > value",
        "gold_parse": "SELECT T1.cust_name ,  T1.acc_type FROM customer AS T1 JOIN loan AS T2 ON T1.cust_id  =  T2.cust_id GROUP BY T1.cust_name HAVING sum(T2.amount)  >  5000",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "music_4",
        "question": "What is the average weeks on top of volumes associated with the artist aged 25 or younger?",
        "query": "SELECT Avg ( T2.Weeks_on_Top ) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID = T2.Artist_ID WHERE T1.Age > = value",
        "gold_parse": "SELECT avg(T2.Weeks_on_Top) FROM artist AS T1 JOIN volume AS T2 ON T1.Artist_ID  =  T2.Artist_ID WHERE T1.age  <=  25",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "election",
        "question": "Find the distinct years when the governor was named \"Eliot Spitzer\".",
        "query": "SELECT DISTINCT Year FROM party WHERE Comptroller = value",
        "gold_parse": "SELECT DISTINCT YEAR FROM party WHERE Governor  =  \"Eliot Spitzer\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "match_season",
        "question": "Show all official native languages that contain the word \"English\".",
        "query": "SELECT T1.Official_native_language FROM country AS T1 JOIN match_season AS T2 ON T1.Country_id = T2.Country WHERE T2.Player LIKE value",
        "gold_parse": "SELECT Official_native_language FROM country WHERE Official_native_language LIKE \"%English%\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T3.song_name FROM genre AS T1 JOIN artist AS T2 ON T1.g_name = T2.preferred_genre JOIN song AS T3 ON T1.g_name = T3.genre_is WHERE T2.preferred_genre = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T3.song_name FROM genre AS T1 JOIN artist AS T2 ON T1.g_name = T2.preferred_genre JOIN song AS T3 ON T1.g_name = T3.genre_is WHERE T2.preferred_genre = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Find the names of songs whose genre is modern or language is English.",
        "query": "SELECT T3.song_name FROM genre AS T1 JOIN artist AS T2 ON T1.g_name = T2.preferred_genre JOIN song AS T3 ON T1.g_name = T3.genre_is WHERE T2.preferred_genre = value OR T1.g_name = value",
        "gold_parse": "SELECT song_name FROM song WHERE genre_is  =  \"modern\" OR languages  =  \"english\"",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hospital_1",
        "question": "What is the alphabetically ordered list of all the distinct names of nurses?",
        "query": "SELECT DISTINCT T1.Name FROM Physician AS T1 JOIN Nurse AS T2 JOIN Appointment AS T3 ON T1.EmployeeID = T3.Physician AND T3.PrepNurse = T2.EmployeeID ORDER BY T2.Name Asc",
        "gold_parse": "SELECT DISTINCT name FROM nurse ORDER BY name",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "hr_1",
        "question": "display job Title, the difference between minimum and maximum salaries for those jobs which max salary within the range 12000 to 18000.",
        "query": "SELECT JOB_TITLE , MIN_SALARY , MAX_SALARY FROM jobs WHERE MAX_SALARY > value AND MAX_SALARY < = value",
        "gold_parse": "SELECT job_title ,  max_salary - min_salary FROM jobs WHERE max_salary BETWEEN 12000 AND 18000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "music_1",
        "question": "Return the names of songs for which format is mp3 and resolution is below 1000.",
        "query": "SELECT T1.artist_name FROM files AS T1 JOIN song AS T2 ON T1.f_id = T2.f_id WHERE T2.resolution < value",
        "gold_parse": "SELECT T2.song_name FROM files AS T1 JOIN song AS T2 ON T1.f_id  =  T2.f_id WHERE T1.formats  =  \"mp3\" INTERSECT SELECT song_name FROM song WHERE resolution  <  1000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "farm",
        "question": "Give the average number of working horses on farms with more than 5000 total horses.",
        "query": "SELECT Avg ( Total_Cattle ) FROM farm WHERE Total_Horses > value",
        "gold_parse": "SELECT avg(Working_Horses) FROM farm WHERE Total_Horses  >  5000",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "bike_1",
        "question": "What are the date, mean temperature and mean humidity for the top 3 days with the largest max gust speeds?",
        "query": "SELECT date , mean_temperature_f , max_wind_Speed_mph FROM weather ORDER BY max_gust_speed_mph Desc LIMIT value",
        "gold_parse": "SELECT date ,  mean_temperature_f ,  mean_humidity FROM weather ORDER BY max_gust_speed_mph DESC LIMIT 3",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "network_2",
        "question": "Find the name and age of the person who is a friend of both Dan and Alice.",
        "query": "SELECT T1.name , T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name = T2.name WHERE T2.friend = value INTERSECT SELECT T1.name , T1.age FROM Person AS T1 WHERE T1.job = value",
        "gold_parse": "SELECT T1.name ,  T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Dan' INTERSECT SELECT T1.name ,   T1.age FROM Person AS T1 JOIN PersonFriend AS T2 ON T1.name  =  T2.name WHERE T2.friend  =  'Alice'",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "query": "SELECT City FROM city GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "query": "SELECT City FROM city GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "city_record",
        "question": "Find the city that hosted the most events.",
        "query": "SELECT City FROM city GROUP BY City ORDER BY Count ( * ) Desc LIMIT value",
        "gold_parse": "SELECT T1.city FROM city AS T1 JOIN hosting_city AS T2 ON T1.city_id  =  T2.host_city GROUP BY T2.host_city ORDER BY count(*) DESC LIMIT 1",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "product_catalog",
        "question": "What are the average and minimum price (in Euro) of all products?",
        "query": "SELECT Avg ( price_in_dollars ) , Max ( price_in_euros ) FROM Catalog_Contents",
        "gold_parse": "SELECT avg(price_in_euros) ,  min(price_in_euros) FROM catalog_contents",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the address of customer 10.",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name = value",
        "gold_parse": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "correctness": 0
    },
    {
        "db_id": "department_store",
        "question": "Return the address of customer 10.",
        "query": "SELECT T1.address_details FROM Addresses AS T1 JOIN Customers AS T2 JOIN Customer_Addresses AS T3 ON T1.address_id = T3.address_id AND T3.customer_id = T2.customer_id WHERE T2.customer_name = value",
        "gold_parse": "SELECT T1.address_details FROM addresses AS T1 JOIN customer_addresses AS T2 ON T1.address_id  =  T2.address_id WHERE T2.customer_id  =  10",
        "correctness": 0
    }
]